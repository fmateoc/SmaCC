ComposableModel subclass: #SmaCCParserGenerator	instanceVariableNames: 'tabModel definitionModel messagesModel symbolsModel itemSetsModel testModel parserClassName scannerClassName codeGeneratorType savedDefinition menu viewItemSets viewSymbols menuItems packageName'	classVariableNames: 'ShowPrecedenceConflicts'	package: 'SmaCC_Development_UI'!!SmaCCParserGenerator methodsFor: 'initialization'!fileMenu	^ MenuPresenter new		addGroup: [ :group | 			group				addItem: [ :item | 					item						name: 'Open...';						action: [ self findParserClass ] ];				addItem: [ :item | 					item						name: 'Save';						action: [ self compile ] ] ];		addGroup: [ :group | 			group				addItem: [ :item | 					item						name: 'Exit';						action: [ self close ] ] ]! !!SmaCCParserGenerator methodsFor: 'initialization'!messagesTab	messagesModel := self instantiate: TextModel.	messagesModel disable.	^ self newTab		closeable: false;		label: 'Messages';		presenter: messagesModel;		yourself! !!SmaCCParserGenerator methodsFor: 'initialization'!testTab	testModel := self instantiate: TextModel.	testModel		autoAccept: true;		menuHolder: [ :mnu | self testMenu: mnu ].	^ self newTab		closeable: false;		label: 'Test';		presenter: testModel;		yourself! !!SmaCCParserGenerator methodsFor: 'initialization'!initializeTabModel	tabModel := self instantiate: SmaCCTabManagerPresenter.	tabModel		addTab: self definitionTab;		addTab: self messagesTab;		addTab: self symbolsTab;		addTab: self itemSetsTab;		addTab: self testTab! !!SmaCCParserGenerator methodsFor: 'initialization'!testMenu: aMenu	^ aMenu		add: 'Find...' selector: #find;		addLine;		add: 'Evaluate' target: self selector: #parse;		add: 'Inspect...' target: self selector: #parseAndInspect;		add: 'Debug' target: self selector: #debugParse;		yourself! !!SmaCCParserGenerator methodsFor: 'initialization'!initializeMenubar	menu := MenuPresenter new		addGroup: [ :group | 			group				addItem: [ :item | 					item						name: 'File';						subMenu: self fileMenu ];				addItem: [ :item | 					item						name: 'Options';						subMenu: self optionsMenu ];				addItem: [ :item | 					item						name: 'View';						subMenu: self viewMenu ] ]! !!SmaCCParserGenerator methodsFor: 'initialization'!initialize	parserClassName := ''.	scannerClassName := ''.	codeGeneratorType := #Smalltalk.	savedDefinition := ''.	viewSymbols := true.	viewItemSets := false.	menuItems := Dictionary new.	super initialize! !!SmaCCParserGenerator methodsFor: 'initialization'!optionsMenu	^ MenuPresenter new		addGroup: [ :group | 			group				addItem: [ :item | 					menuItems at: #setScannerClass put: item.					item						autoRefresh: true;						name: 'Scanner Class...';						action: [ self setScannerClass ] ];				addItem: [ :item | 					menuItems at: #setParserClass put: item.					item						autoRefresh: true;						name: 'Parser Class...';						action: [ self setParserClass ] ];				addItem: [ :item | 					menuItems at: #setPackage put: item.					item						autoRefresh: true;						name: 'Set Package...';						action: [ self setPackage ] ] ];		addGroup: [ :group | 			group				addItem: [ :item | 					menuItems at: #optimizeTransitionTable put: item.					item						autoRefresh: true;						name: 'Optimize Transition Table';						action: [ self toggleOptimizeTransitionTable ] ] ]! !!SmaCCParserGenerator methodsFor: 'initialization'!symbolsTab	symbolsModel := self instantiate: TextModel.	symbolsModel disable.	^ self newTab		closeable: false;		label: 'Symbols';		presenter: symbolsModel;		yourself! !!SmaCCParserGenerator methodsFor: 'initialization'!itemSetsTab	itemSetsModel := self instantiate: TextModel.	itemSetsModel disable.	^ self newTab		closeable: false;		label: 'Item Sets';		presenter: itemSetsModel;		yourself! !!SmaCCParserGenerator methodsFor: 'initialization'!initializeWidgets	self initializeTabModel.	self initializeMenubar.	self updateOptionsMenu.	self updateViewMenu! !!SmaCCParserGenerator methodsFor: 'initialization'!definitionTab	definitionModel := self instantiate: TextModel.	definitionModel autoAccept: true.	^ self newTab		closeable: false;		label: 'Definition';		presenter: definitionModel;		yourself! !!SmaCCParserGenerator methodsFor: 'initialization'!viewMenu	^ MenuPresenter new		addGroup: [ :group | 			group				addItem: [ :item | 					menuItems at: #viewSymbolsClicked put: item.					item						autoRefresh: true;						name: 'Symbols';						action: [ self viewSymbolsClicked ] ];				addItem: [ :item | 					menuItems at: #viewItemSetsClicked put: item.					item						autoRefresh: true;						name: 'Item Sets';						action: [ self viewItemSetsClicked ] ] ]! !!SmaCCParserGenerator methodsFor: 'accessing'!parserClassName	^ parserClassName! !!SmaCCParserGenerator methodsFor: 'accessing'!parserClassName: aString	parserClassName := aString.	self updateOptionsMenu! !!SmaCCParserGenerator methodsFor: 'accessing'!tabs	^ tabModel! !!SmaCCParserGenerator methodsFor: 'accessing'!scannerClassName: aString	scannerClassName := aString.	self updateOptionsMenu! !!SmaCCParserGenerator methodsFor: 'accessing'!menu	^ menu! !!SmaCCParserGenerator methodsFor: 'accessing'!title	^ 'SmaCC'! !!SmaCCParserGenerator methodsFor: 'accessing'!scannerClassName	^ scannerClassName! !!SmaCCParserGenerator methodsFor: 'actions'!close	self isModified		ifTrue: [ self promptToSaveChanges				ifFalse: [ ^ self ] ].	self window close! !!SmaCCParserGenerator methodsFor: 'actions'!viewItemSetsClicked	viewItemSets := viewItemSets not.	self updateViewMenu! !!SmaCCParserGenerator methodsFor: 'actions'!setScannerClass	| name |	name := UIManager default request: 'Enter scanner class name:' initialAnswer: self scannerClassName.	(name isNil or: [ name isEmpty ])		ifTrue: [ ^ self ].	(self isValidName: name)		ifFalse: [ ^ UIManager default inform: 'Invalid Class Name' ].	self scannerClassName: name asSymbol! !!SmaCCParserGenerator methodsFor: 'actions'!setCodeGenerator: aSymbol	codeGeneratorType := aSymbol! !!SmaCCParserGenerator methodsFor: 'actions'!setPackage	| name |	name := UIManager default		enterOrRequestFrom: RPackage organizer packageNames asSortedCollection		title: 'Select package:'.	(name isNil or: [ name isEmpty ])		ifTrue: [ ^ self ].	packageName := name! !!SmaCCParserGenerator methodsFor: 'actions'!markAsUnmodified	savedDefinition := self definition! !!SmaCCParserGenerator methodsFor: 'actions'!findParserClass	| class subclasses |	self isModified		ifTrue: [ self promptToSaveChanges				ifFalse: [ ^ self ] ].	subclasses := (SmaCCParser allSubclasses asSortedCollection: [ :a :b | a name < b name ]) asArray.	class := UIManager default		chooseFrom: (subclasses collect: [ :each | each name ])		values: subclasses		message: 'What class do you want to use?'.	class isNil		ifTrue: [ ^ self ].	self parserClassName: class name.	self updateDefinitionFor: class.	self markAsUnmodified! !!SmaCCParserGenerator methodsFor: 'actions'!viewSymbolsClicked	viewSymbols := viewSymbols not.	self updateViewMenu! !!SmaCCParserGenerator methodsFor: 'actions'!compile	^self compile: #LALR1! !!SmaCCParserGenerator methodsFor: 'actions'!parse	self parseAndEvaluate: [ :each | UIManager default message: 'Parses without errors' ]! !!SmaCCParserGenerator methodsFor: 'actions'!toggleOptimizeTransitionTable	SmaCCGrammarCompiler toggleOptimizeTransitionTable.	self updateOptionsMenu! !!SmaCCParserGenerator methodsFor: 'actions'!setParserClass	| name |	name := UIManager default request: 'Enter parser class name:' initialAnswer: self parserClassName.	(name isNil or: [ name isEmpty ])		ifTrue: [ ^ self ].	(self isValidName: name)		ifFalse: [ ^ UIManager default inform: 'Invalid Class Name' ].	self parserClassName: name asSymbol! !!SmaCCParserGenerator methodsFor: 'actions'!debugParse	| process |	process := [ self parserClass parse: testModel text asString ] newProcess.	[ (process suspendedContext receiver isKindOf: SmaCCParser) and: [ process suspendedContext selector = #parse ] ]		whileFalse: [ process step: process suspendedContext ].	process debug! !!SmaCCParserGenerator methodsFor: 'actions'!parseAndInspect	self parseAndEvaluate: [ :each | each inspect ]! !!SmaCCParserGenerator methodsFor: 'private'!codeGeneratorClass	^ SmaCCCodeGenerator withAllSubclasses		detect: [ :each | each typeName = codeGeneratorType ]		ifNone: [ SmaCCSmalltalkCodeGenerator new ]! !!SmaCCParserGenerator methodsFor: 'private'!verifyParser	^ [ SmaCCGrammarCompiler new		codeGenerator: self codeGeneratorClass new;		buildDefinition: self definition.	true ]		on: SmaCCParserError		do:			[ :ex | 			self switchToDefinition.			self displayError: ex description at: ex tag position.			ex return: false ]! !!SmaCCParserGenerator methodsFor: 'private'!updateOptionsMenu	(self menuItemFor: #setScannerClass)		name:			'Scanner Class'				,					(scannerClassName isEmpty						ifTrue: [ '' ]						ifFalse: [ ' (' , scannerClassName , ')' ]) , '...'.	(self menuItemFor: #setParserClass)		name:			'Parser Class'				,					(parserClassName isEmpty						ifTrue: [ '' ]						ifFalse: [ ' (' , parserClassName , ')' ]) , '...'.	self		updateMenuItem: #optimizeTransitionTable		checked: SmaCCGrammarCompiler optimizeTransitionTable! !!SmaCCParserGenerator methodsFor: 'private'!updateViewMenu	self updateMenuItem: #viewSymbolsClicked checked: viewSymbols.	self updateMenuItem: #viewItemSetsClicked checked: viewItemSets! !!SmaCCParserGenerator methodsFor: 'private'!codeGeneratorClasses	^ SmaCCCodeGenerator withAllSubclasses select: [ :each | each typeName notNil ]! !!SmaCCParserGenerator methodsFor: 'private'!textWidget	tabModel selectedTab == definitionModel owner		ifTrue: [ ^ definitionModel ].	tabModel selectedTab == testModel owner		ifTrue: [ ^ testModel ].	^ nil! !!SmaCCParserGenerator methodsFor: 'private'!updateDefinitionFor: parserClass	| scannerClass |	scannerClass := [ parserClass scannerClass ]		on: Error		do: [ :ex | ex return: nil ].	scannerClass notNil		ifTrue: [ self scannerClassName: scannerClass name ].	self definition: parserClass definitionString.	messagesModel text: ''.	symbolsModel text: ''.	itemSetsModel text: ''.	self switchToDefinition! !!SmaCCParserGenerator methodsFor: 'private'!language	^ codeGeneratorType! !!SmaCCParserGenerator methodsFor: 'private'!isValidName: aString	^ aString first isUppercase and: [ RBScanner isVariable: aString ]! !!SmaCCParserGenerator methodsFor: 'private'!switchToDefinition	tabModel selectedTab label ~= 'Definition'		ifTrue: [ tabModel selectedTab: tabModel tabs first ]! !!SmaCCParserGenerator methodsFor: 'private'!definition: source	definitionModel text: source! !!SmaCCParserGenerator methodsFor: 'private'!compile: aSymbol	| grammar stream oldCharacterSize parserCompiler messages |	(self scannerClassName isEmpty or: [ self parserClassName isEmpty ])		ifTrue: [ ^ UIManager default alert: 'Both classes are not specified' ].	((Smalltalk includesKey: self parserClassName)		or: [ packageName notNil ])		ifFalse: [ self setPackage.			packageName isNil				ifTrue: [ ^ self ] ].	messages := OrderedCollection new.	Cursor wait		showWhile: [ oldCharacterSize := SmaCCGrammar maximumCharacterValue.			[ self verifyParser				ifFalse: [ ^ self ].			parserCompiler := self compiler.			parserCompiler				codeGenerator: self codeGeneratorClass new;				buildDefinition: self definition.			parserCompiler codeGenerator defaultCategory: packageName.			parserCompiler				scannerClass: self scannerClassName;				parserClass: self parserClassName.			grammar := parserCompiler grammar.			grammar type: aSymbol.			stream := WriteStream on: String new.			[ parserCompiler createChanges.			parserCompiler codeGenerator compileChanges.			viewSymbols				ifTrue: [ symbolsModel text: parserCompiler symbolsComment ].			viewItemSets				ifTrue: [ itemSetsModel text: parserCompiler itemSetsComment ] ]				on: SmaCCCompilationNotification				do: [ :ex | 					(ShowPrecedenceConflicts						or: [ ('*precedence*' match: ex messageText) not ])						ifTrue: [ messages								add:									ex messageText , (String with: Character cr with: Character cr)										, ex tag ].					ex pass ].			messages asSortedCollection				do: [ :each | 					stream						nextPutAll: '-------------------------';						cr;						nextPutAll: each;						cr ].			messagesModel text: stream contents.			messagesModel text notEmpty				ifTrue: [ tabModel selectedTab: (tabModel tabs at: 2) ].			self markAsUnmodified ]				ensure: [ SmaCCGrammar maximumCharacterValue: oldCharacterSize ] ]! !!SmaCCParserGenerator methodsFor: 'private'!parseAndEvaluate: aBlock	| class |	class := self parserClass.	class isNil		ifTrue: [ ^ UIManager default alert: 'No parser defined' ].	aBlock		value:			(class				parse: testModel text asString				onError:					[ :aString :position | 					tabModel selectedTab: tabModel tabs last.					self displayError: aString at: position.					^ self ])! !!SmaCCParserGenerator methodsFor: 'private'!promptToSaveChanges	^ (self confirm: 'The definition has been modified. Do you wish to retain your changes?') not! !!SmaCCParserGenerator methodsFor: 'private'!isModified	^ savedDefinition ~= self definition! !!SmaCCParserGenerator methodsFor: 'private'!parserClass	self parserClassName isEmpty		ifTrue: [ ^ nil ].	^ Smalltalk at: self parserClassName asSymbol! !!SmaCCParserGenerator methodsFor: 'private'!updateMenuItem: aSymbol checked: aBoolean	| item |	item := self menuItemFor: aSymbol.	item		icon:			(self				iconNamed:					(aBoolean						ifTrue: [ #checkBoxOn ]						ifFalse: [ #checkBoxOff ]))! !!SmaCCParserGenerator methodsFor: 'private'!compiler	^SmaCCGrammarCompiler new! !!SmaCCParserGenerator methodsFor: 'private'!definition	^ definitionModel text asString! !!SmaCCParserGenerator methodsFor: 'private'!displayError: aString at: position	self textWidget		ifNotNil:			[ :each | 			each				text: (each text copyFrom: 1 to: position - 1) , aString , ' ->' , (each text copyFrom: position to: each text size).			each setSelection: (position to: position + aString size + 2) ]! !!SmaCCParserGenerator methodsFor: 'private'!menuItemFor: aSymbol	^ menuItems at: aSymbol! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmaCCParserGenerator class	instanceVariableNames: ''!!SmaCCParserGenerator class methodsFor: 'specs'!defaultSpec	<spec>	^ SpecColumnLayout composed		add: #menu height: self toolbarHeight;		add: #tabs;		yourself! !!SmaCCParserGenerator class methodsFor: 'world menu'!menuCommandOn: aBuilder	<worldMenu>	(aBuilder item: #'SmaCC Parser Generator')		parent: #Tools;		order: 490.1;		help: 'SmaCC Parser Generator Tool';		action: [ self open ]! !!SmaCCParserGenerator class methodsFor: 'class initialization'!initialize	ShowPrecedenceConflicts := false! !!SmaCCParserGenerator class methodsFor: 'instance creation'!open	^ self new		extent: 550 @ 450;		openWithSpec;		yourself! !TabManagerPresenter subclass: #SmaCCTabManagerPresenter	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Development_UI'!!SmaCCTabManagerPresenter methodsFor: 'api-focus'!eventKeyStrokesForPreviousFocus	^ #()! !!SmaCCTabManagerPresenter methodsFor: 'api-focus'!eventKeyStrokesForNextFocus	^ #()! !SmaCCParserGenerator initialize!'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:49.963656 pm'!!SmaCCParser class methodsFor: '*SmaCC_Development_UI'!gtDefinitionStringViewIn: composite	<gtInspectorPresentationOrder: 11>	composite text		title: 'Source';		display: [ self definitionString ]! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:49.965656 pm'!!SmaCCParser class methodsFor: '*SmaCC_Development_UI'!gtGraphReferencesViewIn: composite	<gtInspectorPresentationOrder: 13>	| tree nodes |	(Smalltalk includesKey: #RTBundleBuilder)		ifFalse: [ ^ nil ].	tree := self definitionAST.	tree isNil		ifTrue: [ ^ nil ].	nodes := tree rules select: [ :each | (each isKindOf: SmaCCProductionRuleNode) or: [ each isKindOf: SmaCCTokenRuleNode ] ].	composite roassal2		title: 'References';		initializeView: [ | b view |			view := (Smalltalk at: #RTView) new.			b := (Smalltalk at: #RTBundleBuilder) new.			b view: view.			b labelShape text: #displayString.			b				explore: ''				using: [ :e | 					e == ''						ifTrue: [ nodes ]						ifFalse: [ #() ] ].			b elements do: [ :each | each attributes at: #depth put: 2 ].			b				useBezierlineWith: [ :e | 					e = ''						ifTrue: [ #() ]						ifFalse: [ e ruleReferences ] ].			b bezier color: Color blue trans.			b withoutSlider.			b build.			view ]! !