SmaCCParseNode subclass: #CSProgramNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSProgramNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitProgram: self! !CSProgramNode subclass: #CSAddAccessorDeclarationNode	instanceVariableNames: '_attributes addToken block'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSAddAccessorDeclarationNode methodsFor: 'generated'!addToken	^ addToken! !!CSAddAccessorDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#addToken)! !!CSAddAccessorDeclarationNode methodsFor: 'generated'!block	^ block! !!CSAddAccessorDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes)! !!CSAddAccessorDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSAddAccessorDeclarationNode methodsFor: 'generated'!addToken: aSmaCCToken	addToken := aSmaCCToken! !!CSAddAccessorDeclarationNode methodsFor: 'generated'!block: aCSBlockStatementNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aCSBlockStatementNode.	self block notNil		ifTrue: [ self block parent: self ]! !!CSAddAccessorDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitAddAccessorDeclaration: self! !!CSAddAccessorDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSAddAccessorDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!CSAddAccessorDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.! !CSProgramNode subclass: #CSAnonymousFunctionParameterNode	instanceVariableNames: 'modifier type name'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSAnonymousFunctionParameterNode methodsFor: 'generated'!modifier: aSmaCCToken	modifier := aSmaCCToken! !!CSAnonymousFunctionParameterNode methodsFor: 'generated'!modifier	^ modifier! !!CSAnonymousFunctionParameterNode methodsFor: 'generated'!tokenVariables	^ #(#modifier #name)! !!CSAnonymousFunctionParameterNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSAnonymousFunctionParameterNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitAnonymousFunctionParameter: self! !!CSAnonymousFunctionParameterNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSAnonymousFunctionParameterNode methodsFor: 'generated'!name	^ name! !!CSAnonymousFunctionParameterNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSAnonymousFunctionParameterNode methodsFor: 'generated'!type	^ type! !CSProgramNode subclass: #CSArgumentNode	instanceVariableNames: 'identifier colonToken expression refToken outToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSArgumentNode methodsFor: 'generated'!outToken	^ outToken! !!CSArgumentNode methodsFor: 'generated'!refToken	^ refToken! !!CSArgumentNode methodsFor: 'generated'!tokenVariables	^ #(#identifier #colonToken #refToken #outToken)! !!CSArgumentNode methodsFor: 'generated'!expression	^ expression! !!CSArgumentNode methodsFor: 'generated'!outToken: aSmaCCToken	outToken := aSmaCCToken! !!CSArgumentNode methodsFor: 'generated'!identifier: aSmaCCToken	identifier := aSmaCCToken! !!CSArgumentNode methodsFor: 'generated'!colonToken	^ colonToken! !!CSArgumentNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSArgumentNode methodsFor: 'generated'!refToken: aSmaCCToken	refToken := aSmaCCToken! !!CSArgumentNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitArgument: self! !!CSArgumentNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSArgumentNode methodsFor: 'generated'!colonToken: aSmaCCToken	colonToken := aSmaCCToken! !!CSArgumentNode methodsFor: 'generated'!identifier	^ identifier! !CSProgramNode subclass: #CSArrayInitializerNode	instanceVariableNames: 'leftBraceToken initializers commaTokens rightBraceToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSArrayInitializerNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	initializers := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !!CSArrayInitializerNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!CSArrayInitializerNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!CSArrayInitializerNode methodsFor: 'generated'!initializers: anOrderedCollection	self setParents: self initializers to: nil.	initializers := anOrderedCollection.	self setParents: self initializers to: self! !!CSArrayInitializerNode methodsFor: 'generated'!tokenVariables	^ #(#leftBraceToken #rightBraceToken)! !!CSArrayInitializerNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSArrayInitializerNode methodsFor: 'generated'!compositeNodeVariables	^ #(#initializers)! !!CSArrayInitializerNode methodsFor: 'generated'!initializers	^ initializers! !!CSArrayInitializerNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitArrayInitializer: self! !!CSArrayInitializerNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSArrayInitializerNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!CSArrayInitializerNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSArrayInitializerNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !CSProgramNode subclass: #CSArrayParameterNode	instanceVariableNames: '_attributes paramsToken type name'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSArrayParameterNode methodsFor: 'generated'!type	^ type! !!CSArrayParameterNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSArrayParameterNode methodsFor: 'generated'!tokenVariables	^ #(#paramsToken #name)! !!CSArrayParameterNode methodsFor: 'generated'!name	^ name! !!CSArrayParameterNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes)! !!CSArrayParameterNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSArrayParameterNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSArrayParameterNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitArrayParameter: self! !!CSArrayParameterNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSArrayParameterNode methodsFor: 'generated'!paramsToken: aSmaCCToken	paramsToken := aSmaCCToken! !!CSArrayParameterNode methodsFor: 'generated'!type: aCSArrayTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSArrayTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSArrayParameterNode methodsFor: 'generated'!paramsToken	^ paramsToken! !!CSArrayParameterNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.! !CSProgramNode subclass: #CSAttributeNode	instanceVariableNames: 'leftBracket target colon attributeValues commas rightBracket'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSAttributeNode methodsFor: 'generated'!attributeValues	^ attributeValues! !!CSAttributeNode methodsFor: 'generated'!attributeValues: anOrderedCollection	self setParents: self attributeValues to: nil.	attributeValues := anOrderedCollection.	self setParents: self attributeValues to: self! !!CSAttributeNode methodsFor: 'generated'!compositeTokenVariables	^ #(#commas)! !!CSAttributeNode methodsFor: 'generated'!target	^ target! !!CSAttributeNode methodsFor: 'generated'!target: aSmaCCToken	target := aSmaCCToken! !!CSAttributeNode methodsFor: 'generated'!tokenVariables	^ #(#leftBracket #target #colon #rightBracket)! !!CSAttributeNode methodsFor: 'generated'!rightBracket	^ rightBracket! !!CSAttributeNode methodsFor: 'generated'!leftBracket	^ leftBracket! !!CSAttributeNode methodsFor: 'generated'!compositeNodeVariables	^ #(#attributeValues)! !!CSAttributeNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSAttributeNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitAttribute: self! !!CSAttributeNode methodsFor: 'generated'!commas	^ commas! !!CSAttributeNode methodsFor: 'generated'!colon: aSmaCCToken	colon := aSmaCCToken! !!CSAttributeNode methodsFor: 'generated'!colon	^ colon! !!CSAttributeNode methodsFor: 'generated'!leftBracket: aSmaCCToken	leftBracket := aSmaCCToken! !!CSAttributeNode methodsFor: 'generated'!rightBracket: aSmaCCToken	rightBracket := aSmaCCToken! !!CSAttributeNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	attributeValues := OrderedCollection new: 2.	commas := OrderedCollection new: 2.! !CSProgramNode subclass: #CSAttributeValueNode	instanceVariableNames: 'name leftParen arguments commas rightParen'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSAttributeValueNode methodsFor: 'generated'!compositeTokenVariables	^ #(#commas)! !!CSAttributeValueNode methodsFor: 'generated'!name: aCSTypeNode	self name notNil		ifTrue: [ self name parent: nil ].	name := aCSTypeNode.	self name notNil		ifTrue: [ self name parent: self ]! !!CSAttributeValueNode methodsFor: 'generated'!tokenVariables	^ #(#leftParen #rightParen)! !!CSAttributeValueNode methodsFor: 'generated'!name	^ name! !!CSAttributeValueNode methodsFor: 'generated'!compositeNodeVariables	^ #(#arguments)! !!CSAttributeValueNode methodsFor: 'generated'!rightParen	^ rightParen! !!CSAttributeValueNode methodsFor: 'generated'!rightParen: aSmaCCToken	rightParen := aSmaCCToken! !!CSAttributeValueNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSAttributeValueNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitAttributeValue: self! !!CSAttributeValueNode methodsFor: 'generated'!commas	^ commas! !!CSAttributeValueNode methodsFor: 'generated'!nodeVariables	^ #(#name)! !!CSAttributeValueNode methodsFor: 'generated'!leftParen	^ leftParen! !!CSAttributeValueNode methodsFor: 'generated'!arguments	^ arguments! !!CSAttributeValueNode methodsFor: 'generated'!leftParen: aSmaCCToken	leftParen := aSmaCCToken! !!CSAttributeValueNode methodsFor: 'generated'!arguments: anOrderedCollection	self setParents: self arguments to: nil.	arguments := anOrderedCollection.	self setParents: self arguments to: self! !!CSAttributeValueNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	arguments := OrderedCollection new: 2.	commas := OrderedCollection new: 2.! !CSProgramNode subclass: #CSCatchClauseNode	instanceVariableNames: 'catchToken leftParenToken type name rightParenToken filter block'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSCatchClauseNode methodsFor: 'generated'!type	^ type! !!CSCatchClauseNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSCatchClauseNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSCatchClauseNode methodsFor: 'generated'!filter: aCSExceptionFilterNode	self filter notNil		ifTrue: [ self filter parent: nil ].	filter := aCSExceptionFilterNode.	self filter notNil		ifTrue: [ self filter parent: self ]! !!CSCatchClauseNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSCatchClauseNode methodsFor: 'generated'!block	^ block! !!CSCatchClauseNode methodsFor: 'generated'!tokenVariables	^ #(#catchToken #leftParenToken #name #rightParenToken)! !!CSCatchClauseNode methodsFor: 'generated'!name	^ name! !!CSCatchClauseNode methodsFor: 'generated'!block: aCSBlockStatementNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aCSBlockStatementNode.	self block notNil		ifTrue: [ self block parent: self ]! !!CSCatchClauseNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitCatchClause: self! !!CSCatchClauseNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSCatchClauseNode methodsFor: 'generated'!nodeVariables	^ #(#type #filter #block)! !!CSCatchClauseNode methodsFor: 'generated'!filter	^ filter! !!CSCatchClauseNode methodsFor: 'generated'!catchToken: aSmaCCToken	catchToken := aSmaCCToken! !!CSCatchClauseNode methodsFor: 'generated'!catchToken	^ catchToken! !!CSCatchClauseNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSCatchClauseNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !CSProgramNode subclass: #CSCollectionInitializerNode	instanceVariableNames: 'leftBraceToken initializers commaTokens rightBraceToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSCollectionInitializerNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	initializers := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !!CSCollectionInitializerNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!CSCollectionInitializerNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!CSCollectionInitializerNode methodsFor: 'generated'!initializers: anOrderedCollection	self setParents: self initializers to: nil.	initializers := anOrderedCollection.	self setParents: self initializers to: self! !!CSCollectionInitializerNode methodsFor: 'generated'!tokenVariables	^ #(#leftBraceToken #rightBraceToken)! !!CSCollectionInitializerNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSCollectionInitializerNode methodsFor: 'generated'!compositeNodeVariables	^ #(#initializers)! !!CSCollectionInitializerNode methodsFor: 'generated'!initializers	^ initializers! !!CSCollectionInitializerNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitCollectionInitializer: self! !!CSCollectionInitializerNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSCollectionInitializerNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!CSCollectionInitializerNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSCollectionInitializerNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !CSProgramNode subclass: #CSCompilationUnitNode	instanceVariableNames: 'directives _attributes declarations'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSCompilationUnitNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSCompilationUnitNode methodsFor: 'generated'!declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self! !!CSCompilationUnitNode methodsFor: 'generated'!directives: anOrderedCollection	self setParents: self directives to: nil.	directives := anOrderedCollection.	self setParents: self directives to: self! !!CSCompilationUnitNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitCompilationUnit: self! !!CSCompilationUnitNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSCompilationUnitNode methodsFor: 'generated'!declarations	^ declarations! !!CSCompilationUnitNode methodsFor: 'generated'!compositeNodeVariables	^ #(#directives #_attributes #declarations)! !!CSCompilationUnitNode methodsFor: 'generated'!directives	^ directives! !!CSCompilationUnitNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	directives := OrderedCollection new: 2.	_attributes := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.! !CSProgramNode subclass: #CSConstDeclaratorNode	instanceVariableNames: 'name equalToken expression'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSConstDeclaratorNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSConstDeclaratorNode methodsFor: 'generated'!tokenVariables	^ #(#name #equalToken)! !!CSConstDeclaratorNode methodsFor: 'generated'!expression	^ expression! !!CSConstDeclaratorNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSConstDeclaratorNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitConstDeclarator: self! !!CSConstDeclaratorNode methodsFor: 'generated'!name	^ name! !!CSConstDeclaratorNode methodsFor: 'generated'!equalToken	^ equalToken! !!CSConstDeclaratorNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSConstDeclaratorNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !CSProgramNode subclass: #CSConstantDeclaratorNode	instanceVariableNames: 'identifierToken equalToken expression'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSConstantDeclaratorNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSConstantDeclaratorNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSConstantDeclaratorNode methodsFor: 'generated'!expression	^ expression! !!CSConstantDeclaratorNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSConstantDeclaratorNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitConstantDeclarator: self! !!CSConstantDeclaratorNode methodsFor: 'generated'!tokenVariables	^ #(#identifierToken #equalToken)! !!CSConstantDeclaratorNode methodsFor: 'generated'!equalToken	^ equalToken! !!CSConstantDeclaratorNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!CSConstantDeclaratorNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !CSProgramNode subclass: #CSConstructorConstraintNode	instanceVariableNames: 'newToken leftParenToken rightParenToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSConstructorConstraintNode methodsFor: 'generated'!tokenVariables	^ #(#newToken #leftParenToken #rightParenToken)! !!CSConstructorConstraintNode methodsFor: 'generated'!newToken	^ newToken! !!CSConstructorConstraintNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSConstructorConstraintNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitConstructorConstraint: self! !!CSConstructorConstraintNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSConstructorConstraintNode methodsFor: 'generated'!newToken: aSmaCCToken	newToken := aSmaCCToken! !!CSConstructorConstraintNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSConstructorConstraintNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !CSProgramNode subclass: #CSConstructorInitializerNode	instanceVariableNames: 'colonToken baseToken leftParenToken arguments commaTokens rightParenToken thisToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSConstructorInitializerNode methodsFor: 'generated'!baseToken: aSmaCCToken	baseToken := aSmaCCToken! !!CSConstructorInitializerNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSConstructorInitializerNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSConstructorInitializerNode methodsFor: 'generated'!thisToken: aSmaCCToken	thisToken := aSmaCCToken! !!CSConstructorInitializerNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSConstructorInitializerNode methodsFor: 'generated'!tokenVariables	^ #(#colonToken #baseToken #leftParenToken #rightParenToken #thisToken)! !!CSConstructorInitializerNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSConstructorInitializerNode methodsFor: 'generated'!colonToken	^ colonToken! !!CSConstructorInitializerNode methodsFor: 'generated'!compositeNodeVariables	^ #(#arguments)! !!CSConstructorInitializerNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSConstructorInitializerNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitConstructorInitializer: self! !!CSConstructorInitializerNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSConstructorInitializerNode methodsFor: 'generated'!thisToken	^ thisToken! !!CSConstructorInitializerNode methodsFor: 'generated'!arguments	^ arguments! !!CSConstructorInitializerNode methodsFor: 'generated'!colonToken: aSmaCCToken	colonToken := aSmaCCToken! !!CSConstructorInitializerNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSConstructorInitializerNode methodsFor: 'generated'!baseToken	^ baseToken! !!CSConstructorInitializerNode methodsFor: 'generated'!arguments: anOrderedCollection	self setParents: self arguments to: nil.	arguments := anOrderedCollection.	self setParents: self arguments to: self! !!CSConstructorInitializerNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	arguments := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSProgramNode subclass: #CSDeclarationNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitDeclaration: self! !CSDeclarationNode subclass: #CSClassDeclarationNode	instanceVariableNames: '_attributes modifiers partialToken classToken name typeParameters colonToken supertypes commas commaToken constraintClauses leftBraceToken declarations rightBraceToken semicolon'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSClassDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSClassDeclarationNode methodsFor: 'generated'!typeParameters: aCSTypeParameterListNode	self typeParameters notNil		ifTrue: [ self typeParameters parent: nil ].	typeParameters := aCSTypeParameterListNode.	self typeParameters notNil		ifTrue: [ self typeParameters parent: self ]! !!CSClassDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSClassDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSClassDeclarationNode methodsFor: 'generated'!commaToken: aSmaCCToken	commaToken := aSmaCCToken! !!CSClassDeclarationNode methodsFor: 'generated'!supertypes: anOrderedCollection	self setParents: self supertypes to: nil.	supertypes := anOrderedCollection.	self setParents: self supertypes to: self! !!CSClassDeclarationNode methodsFor: 'generated'!classToken: aSmaCCToken	classToken := aSmaCCToken! !!CSClassDeclarationNode methodsFor: 'generated'!typeParameters	^ typeParameters! !!CSClassDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitClassDeclaration: self! !!CSClassDeclarationNode methodsFor: 'generated'!colonToken: aSmaCCToken	colonToken := aSmaCCToken! !!CSClassDeclarationNode methodsFor: 'generated'!constraintClauses: anOrderedCollection	self setParents: self constraintClauses to: nil.	constraintClauses := anOrderedCollection.	self setParents: self constraintClauses to: self! !!CSClassDeclarationNode methodsFor: 'generated'!commaToken	^ commaToken! !!CSClassDeclarationNode methodsFor: 'generated'!constraintClauses	^ constraintClauses! !!CSClassDeclarationNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSClassDeclarationNode methodsFor: 'generated'!semicolon	^ semicolon! !!CSClassDeclarationNode methodsFor: 'generated'!name	^ name! !!CSClassDeclarationNode methodsFor: 'generated'!commas	^ commas! !!CSClassDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSClassDeclarationNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSClassDeclarationNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#commaToken)! !!CSClassDeclarationNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !!CSClassDeclarationNode methodsFor: 'generated'!partialToken: aSmaCCToken	partialToken := aSmaCCToken! !!CSClassDeclarationNode methodsFor: 'generated'!declarations	^ declarations! !!CSClassDeclarationNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!CSClassDeclarationNode methodsFor: 'generated'!classToken	^ classToken! !!CSClassDeclarationNode methodsFor: 'generated'!partialToken	^ partialToken! !!CSClassDeclarationNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!CSClassDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #supertypes #constraintClauses #declarations)! !!CSClassDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers #commas)! !!CSClassDeclarationNode methodsFor: 'generated'!semicolon: aSmaCCToken	semicolon := aSmaCCToken! !!CSClassDeclarationNode methodsFor: 'generated'!colonToken	^ colonToken! !!CSClassDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#typeParameters)! !!CSClassDeclarationNode methodsFor: 'generated'!supertypes	^ supertypes! !!CSClassDeclarationNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!CSClassDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#partialToken #classToken #name #colonToken #leftBraceToken #rightBraceToken #semicolon)! !!CSClassDeclarationNode methodsFor: 'generated'!declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self! !!CSClassDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.	supertypes := OrderedCollection new: 2.	commas := OrderedCollection new: 2.	constraintClauses := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.! !CSDeclarationNode subclass: #CSConstantDeclarationNode	instanceVariableNames: '_attributes modifiers constToken type declarators commaTokens semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSConstantDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSConstantDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSConstantDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSConstantDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitConstantDeclaration: self! !!CSConstantDeclarationNode methodsFor: 'generated'!declarators	^ declarators! !!CSConstantDeclarationNode methodsFor: 'generated'!constToken: aSmaCCToken	constToken := aSmaCCToken! !!CSConstantDeclarationNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSConstantDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSConstantDeclarationNode methodsFor: 'generated'!type	^ type! !!CSConstantDeclarationNode methodsFor: 'generated'!declarators: anOrderedCollection	self setParents: self declarators to: nil.	declarators := anOrderedCollection.	self setParents: self declarators to: self! !!CSConstantDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSConstantDeclarationNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSConstantDeclarationNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSConstantDeclarationNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSConstantDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSConstantDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#constToken)! !!CSConstantDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers)! !!CSConstantDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #declarators)! !!CSConstantDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSConstantDeclarationNode methodsFor: 'generated'!constToken	^ constToken! !!CSConstantDeclarationNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSConstantDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.	declarators := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSDeclarationNode subclass: #CSConstructorDeclarationNode	instanceVariableNames: '_attributes modifiers identifierToken leftParenToken parameters commas rightParenToken initializer block semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSConstructorDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.	parameters := OrderedCollection new: 2.	commas := OrderedCollection new: 2.! !!CSConstructorDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSConstructorDeclarationNode methodsFor: 'generated'!initializer: aCSConstructorInitializerNode	self initializer notNil		ifTrue: [ self initializer parent: nil ].	initializer := aCSConstructorInitializerNode.	self initializer notNil		ifTrue: [ self initializer parent: self ]! !!CSConstructorDeclarationNode methodsFor: 'generated'!block	^ block! !!CSConstructorDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSConstructorDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSConstructorDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitConstructorDeclaration: self! !!CSConstructorDeclarationNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSConstructorDeclarationNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSConstructorDeclarationNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSConstructorDeclarationNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSConstructorDeclarationNode methodsFor: 'generated'!commas	^ commas! !!CSConstructorDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSConstructorDeclarationNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSConstructorDeclarationNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSConstructorDeclarationNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSConstructorDeclarationNode methodsFor: 'generated'!parameters: anOrderedCollection	self setParents: self parameters to: nil.	parameters := anOrderedCollection.	self setParents: self parameters to: self! !!CSConstructorDeclarationNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSConstructorDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #parameters)! !!CSConstructorDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers #commas)! !!CSConstructorDeclarationNode methodsFor: 'generated'!block: aCSBlockStatementNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aCSBlockStatementNode.	self block notNil		ifTrue: [ self block parent: self ]! !!CSConstructorDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#initializer #block)! !!CSConstructorDeclarationNode methodsFor: 'generated'!initializer	^ initializer! !!CSConstructorDeclarationNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSConstructorDeclarationNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!CSConstructorDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#identifierToken #leftParenToken #rightParenToken)! !!CSConstructorDeclarationNode methodsFor: 'generated'!parameters	^ parameters! !CSDeclarationNode subclass: #CSDelegateDeclarationNode	instanceVariableNames: '_attributes modifiers delegateToken type name typeParameters leftParen parameters commas rightParen constraintClauses semicolon'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSDelegateDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.	parameters := OrderedCollection new: 2.	commas := OrderedCollection new: 2.	constraintClauses := OrderedCollection new: 2.! !!CSDelegateDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSDelegateDeclarationNode methodsFor: 'generated'!typeParameters: aCSVariantTypeParameterListNode	self typeParameters notNil		ifTrue: [ self typeParameters parent: nil ].	typeParameters := aCSVariantTypeParameterListNode.	self typeParameters notNil		ifTrue: [ self typeParameters parent: self ]! !!CSDelegateDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSDelegateDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSDelegateDeclarationNode methodsFor: 'generated'!delegateToken	^ delegateToken! !!CSDelegateDeclarationNode methodsFor: 'generated'!rightParen	^ rightParen! !!CSDelegateDeclarationNode methodsFor: 'generated'!typeParameters	^ typeParameters! !!CSDelegateDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitDelegateDeclaration: self! !!CSDelegateDeclarationNode methodsFor: 'generated'!delegateToken: aSmaCCToken	delegateToken := aSmaCCToken! !!CSDelegateDeclarationNode methodsFor: 'generated'!constraintClauses: anOrderedCollection	self setParents: self constraintClauses to: nil.	constraintClauses := anOrderedCollection.	self setParents: self constraintClauses to: self! !!CSDelegateDeclarationNode methodsFor: 'generated'!constraintClauses	^ constraintClauses! !!CSDelegateDeclarationNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSDelegateDeclarationNode methodsFor: 'generated'!leftParen: aSmaCCToken	leftParen := aSmaCCToken! !!CSDelegateDeclarationNode methodsFor: 'generated'!rightParen: aSmaCCToken	rightParen := aSmaCCToken! !!CSDelegateDeclarationNode methodsFor: 'generated'!name	^ name! !!CSDelegateDeclarationNode methodsFor: 'generated'!semicolon	^ semicolon! !!CSDelegateDeclarationNode methodsFor: 'generated'!commas	^ commas! !!CSDelegateDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSDelegateDeclarationNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSDelegateDeclarationNode methodsFor: 'generated'!type	^ type! !!CSDelegateDeclarationNode methodsFor: 'generated'!leftParen	^ leftParen! !!CSDelegateDeclarationNode methodsFor: 'generated'!parameters: anOrderedCollection	self setParents: self parameters to: nil.	parameters := anOrderedCollection.	self setParents: self parameters to: self! !!CSDelegateDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #parameters #constraintClauses)! !!CSDelegateDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers #commas)! !!CSDelegateDeclarationNode methodsFor: 'generated'!semicolon: aSmaCCToken	semicolon := aSmaCCToken! !!CSDelegateDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#type #typeParameters)! !!CSDelegateDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#delegateToken #name #leftParen #rightParen #semicolon)! !!CSDelegateDeclarationNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSDelegateDeclarationNode methodsFor: 'generated'!parameters	^ parameters! !CSDeclarationNode subclass: #CSDestructorDeclarationNode	instanceVariableNames: '_attributes modifiers tildeToken identifierToken leftParenToken rightParenToken body'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSDestructorDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.! !!CSDestructorDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSDestructorDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSDestructorDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSDestructorDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitDestructorDeclaration: self! !!CSDestructorDeclarationNode methodsFor: 'generated'!body	^ body! !!CSDestructorDeclarationNode methodsFor: 'generated'!tildeToken	^ tildeToken! !!CSDestructorDeclarationNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSDestructorDeclarationNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSDestructorDeclarationNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSDestructorDeclarationNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSDestructorDeclarationNode methodsFor: 'generated'!tildeToken: aSmaCCToken	tildeToken := aSmaCCToken! !!CSDestructorDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSDestructorDeclarationNode methodsFor: 'generated'!body: aCSMethodBodyNode	self body notNil		ifTrue: [ self body parent: nil ].	body := aCSMethodBodyNode.	self body notNil		ifTrue: [ self body parent: self ]! !!CSDestructorDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#tildeToken #identifierToken #leftParenToken #rightParenToken)! !!CSDestructorDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers)! !!CSDestructorDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes)! !!CSDestructorDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#body)! !!CSDestructorDeclarationNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSDestructorDeclarationNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !CSProgramNode subclass: #CSElementInitializerNode	instanceVariableNames: 'expressions leftBraceToken commaTokens rightBraceToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSElementInitializerNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	expressions := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !!CSElementInitializerNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!CSElementInitializerNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!CSElementInitializerNode methodsFor: 'generated'!expressions: anOrderedCollection	self setParents: self expressions to: nil.	expressions := anOrderedCollection.	self setParents: self expressions to: self! !!CSElementInitializerNode methodsFor: 'generated'!tokenVariables	^ #(#leftBraceToken #rightBraceToken)! !!CSElementInitializerNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSElementInitializerNode methodsFor: 'generated'!compositeNodeVariables	^ #(#expressions)! !!CSElementInitializerNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitElementInitializer: self! !!CSElementInitializerNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSElementInitializerNode methodsFor: 'generated'!expressions	^ expressions! !!CSElementInitializerNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!CSElementInitializerNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSElementInitializerNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !CSDeclarationNode subclass: #CSEnumDeclarationNode	instanceVariableNames: '_attributes modifiers enumToken name colonToken typeToken leftBrace declarations commas rightBrace semicolon equal value'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSEnumDeclarationNode methodsFor: 'generated'!value: aCSExpressionNode	self value notNil		ifTrue: [ self value parent: nil ].	value := aCSExpressionNode.	self value notNil		ifTrue: [ self value parent: self ]! !!CSEnumDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSEnumDeclarationNode methodsFor: 'generated'!equal: aSmaCCToken	equal := aSmaCCToken! !!CSEnumDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSEnumDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSEnumDeclarationNode methodsFor: 'generated'!equal	^ equal! !!CSEnumDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitEnumDeclaration: self! !!CSEnumDeclarationNode methodsFor: 'generated'!colonToken: aSmaCCToken	colonToken := aSmaCCToken! !!CSEnumDeclarationNode methodsFor: 'generated'!enumToken: aSmaCCToken	enumToken := aSmaCCToken! !!CSEnumDeclarationNode methodsFor: 'generated'!enumToken	^ enumToken! !!CSEnumDeclarationNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSEnumDeclarationNode methodsFor: 'generated'!semicolon	^ semicolon! !!CSEnumDeclarationNode methodsFor: 'generated'!value	^ value! !!CSEnumDeclarationNode methodsFor: 'generated'!name	^ name! !!CSEnumDeclarationNode methodsFor: 'generated'!commas	^ commas! !!CSEnumDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSEnumDeclarationNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSEnumDeclarationNode methodsFor: 'generated'!rightBrace: aSmaCCToken	rightBrace := aSmaCCToken! !!CSEnumDeclarationNode methodsFor: 'generated'!typeToken	^ typeToken! !!CSEnumDeclarationNode methodsFor: 'generated'!declarations	^ declarations! !!CSEnumDeclarationNode methodsFor: 'generated'!typeToken: aSmaCCToken	typeToken := aSmaCCToken! !!CSEnumDeclarationNode methodsFor: 'generated'!leftBrace: aSmaCCToken	leftBrace := aSmaCCToken! !!CSEnumDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #declarations)! !!CSEnumDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers #commas)! !!CSEnumDeclarationNode methodsFor: 'generated'!leftBrace	^ leftBrace! !!CSEnumDeclarationNode methodsFor: 'generated'!colonToken	^ colonToken! !!CSEnumDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#value)! !!CSEnumDeclarationNode methodsFor: 'generated'!semicolon: aSmaCCToken	semicolon := aSmaCCToken! !!CSEnumDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#enumToken #name #colonToken #typeToken #leftBrace #rightBrace #semicolon #equal)! !!CSEnumDeclarationNode methodsFor: 'generated'!rightBrace	^ rightBrace! !!CSEnumDeclarationNode methodsFor: 'generated'!declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self! !!CSEnumDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.	commas := OrderedCollection new: 2.! !CSDeclarationNode subclass: #CSEventDeclarationNode	instanceVariableNames: '_attributes modifiers eventToken type declarators commaTokens semicolonToken name interface periodToken leftBraceToken addDeclaration removeDeclaration rightBraceToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSEventDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSEventDeclarationNode methodsFor: 'generated'!eventToken: aSmaCCToken	eventToken := aSmaCCToken! !!CSEventDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSEventDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSEventDeclarationNode methodsFor: 'generated'!addDeclaration	^ addDeclaration! !!CSEventDeclarationNode methodsFor: 'generated'!addDeclaration: aCSAddAccessorDeclarationNode	self addDeclaration notNil		ifTrue: [ self addDeclaration parent: nil ].	addDeclaration := aCSAddAccessorDeclarationNode.	self addDeclaration notNil		ifTrue: [ self addDeclaration parent: self ]! !!CSEventDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitEventDeclaration: self! !!CSEventDeclarationNode methodsFor: 'generated'!periodToken	^ periodToken! !!CSEventDeclarationNode methodsFor: 'generated'!declarators	^ declarators! !!CSEventDeclarationNode methodsFor: 'generated'!removeDeclaration	^ removeDeclaration! !!CSEventDeclarationNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSEventDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSEventDeclarationNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSEventDeclarationNode methodsFor: 'generated'!interface: aCSTypeNode	self interface notNil		ifTrue: [ self interface parent: nil ].	interface := aCSTypeNode.	self interface notNil		ifTrue: [ self interface parent: self ]! !!CSEventDeclarationNode methodsFor: 'generated'!name	^ name! !!CSEventDeclarationNode methodsFor: 'generated'!eventToken	^ eventToken! !!CSEventDeclarationNode methodsFor: 'generated'!declarators: anOrderedCollection	self setParents: self declarators to: nil.	declarators := anOrderedCollection.	self setParents: self declarators to: self! !!CSEventDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSEventDeclarationNode methodsFor: 'generated'!type	^ type! !!CSEventDeclarationNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSEventDeclarationNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSEventDeclarationNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !!CSEventDeclarationNode methodsFor: 'generated'!periodToken: aSmaCCToken	periodToken := aSmaCCToken! !!CSEventDeclarationNode methodsFor: 'generated'!removeDeclaration: aCSRemoveAccessorDeclarationNode	self removeDeclaration notNil		ifTrue: [ self removeDeclaration parent: nil ].	removeDeclaration := aCSRemoveAccessorDeclarationNode.	self removeDeclaration notNil		ifTrue: [ self removeDeclaration parent: self ]! !!CSEventDeclarationNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSEventDeclarationNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!CSEventDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSEventDeclarationNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!CSEventDeclarationNode methodsFor: 'generated'!interface	^ interface! !!CSEventDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #declarators)! !!CSEventDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers)! !!CSEventDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#eventToken #name #periodToken #leftBraceToken #rightBraceToken)! !!CSEventDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#type #interface #addDeclaration #removeDeclaration)! !!CSEventDeclarationNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!CSEventDeclarationNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSEventDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.	declarators := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSProgramNode subclass: #CSExceptionFilterNode	instanceVariableNames: 'whenToken leftParenToken expression rightParenToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSExceptionFilterNode methodsFor: 'generated'!whenToken	^ whenToken! !!CSExceptionFilterNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSExceptionFilterNode methodsFor: 'generated'!whenToken: aSmaCCToken	whenToken := aSmaCCToken! !!CSExceptionFilterNode methodsFor: 'generated'!tokenVariables	^ #(#whenToken #leftParenToken #rightParenToken)! !!CSExceptionFilterNode methodsFor: 'generated'!expression	^ expression! !!CSExceptionFilterNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSExceptionFilterNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSExceptionFilterNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSExceptionFilterNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSExceptionFilterNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitExceptionFilter: self! !!CSExceptionFilterNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !CSProgramNode subclass: #CSExplicitAnonymousFunctionSignatureNode	instanceVariableNames: 'leftParenToken parameters commaTokens rightParenToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSExplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSExplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!parameters	^ parameters! !!CSExplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!parameters: anOrderedCollection	self setParents: self parameters to: nil.	parameters := anOrderedCollection.	self setParents: self parameters to: self! !!CSExplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSExplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!tokenVariables	^ #(#leftParenToken #rightParenToken)! !!CSExplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSExplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!compositeNodeVariables	^ #(#parameters)! !!CSExplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitExplicitAnonymousFunctionSignature: self! !!CSExplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSExplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSExplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSExplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSExplicitAnonymousFunctionSignatureNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	parameters := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSProgramNode subclass: #CSExpressionNode	instanceVariableNames: '_leftParens _rightParens'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_leftParens := OrderedCollection new: 2.	_rightParens := OrderedCollection new: 2.! !!CSExpressionNode methodsFor: 'generated'!_rightParens: anOrderedCollection	_rightParens := anOrderedCollection! !!CSExpressionNode methodsFor: 'generated'!_rightParens	^ _rightParens! !!CSExpressionNode methodsFor: 'generated'!_leftParens: anOrderedCollection	_leftParens := anOrderedCollection! !!CSExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitExpression: self! !!CSExpressionNode methodsFor: 'generated'!_leftParens	^ _leftParens! !!CSExpressionNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#_leftParens #_rightParens)! !CSExpressionNode subclass: #CSAnonymousMethodExpressionNode	instanceVariableNames: 'delegateToken signature block'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSAnonymousMethodExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#delegateToken)! !!CSAnonymousMethodExpressionNode methodsFor: 'generated'!block: aCSBlockStatementNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aCSBlockStatementNode.	self block notNil		ifTrue: [ self block parent: self ]! !!CSAnonymousMethodExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitAnonymousMethodExpression: self! !!CSAnonymousMethodExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#signature #block)! !!CSAnonymousMethodExpressionNode methodsFor: 'generated'!delegateToken: aSmaCCToken	delegateToken := aSmaCCToken! !!CSAnonymousMethodExpressionNode methodsFor: 'generated'!signature	^ signature! !!CSAnonymousMethodExpressionNode methodsFor: 'generated'!signature: aCSExplicitAnonymousFunctionSignatureNode	self signature notNil		ifTrue: [ self signature parent: nil ].	signature := aCSExplicitAnonymousFunctionSignatureNode.	self signature notNil		ifTrue: [ self signature parent: self ]! !!CSAnonymousMethodExpressionNode methodsFor: 'generated'!block	^ block! !!CSAnonymousMethodExpressionNode methodsFor: 'generated'!delegateToken	^ delegateToken! !CSExpressionNode subclass: #CSAnonymousObjectCreationExpressionNode	instanceVariableNames: 'newToken leftBraceToken declarators commaTokens rightBraceToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	declarators := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!newToken: aSmaCCToken	newToken := aSmaCCToken! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#newToken #leftBraceToken #rightBraceToken)! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens #_leftParens #_rightParens)! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!declarators: anOrderedCollection	self setParents: self declarators to: nil.	declarators := anOrderedCollection.	self setParents: self declarators to: self! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#declarators)! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitAnonymousObjectCreationExpression: self! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!newToken	^ newToken! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!declarators	^ declarators! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSAnonymousObjectCreationExpressionNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !CSExpressionNode subclass: #CSArrayCreationExpressionNode	instanceVariableNames: 'newToken type leftBracketToken expressions commaTokens rightBracketToken rankSpecifiers arrayInitializer'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSArrayCreationExpressionNode methodsFor: 'generated'!expressions	^ expressions! !!CSArrayCreationExpressionNode methodsFor: 'generated'!expressions: anOrderedCollection	self setParents: self expressions to: nil.	expressions := anOrderedCollection.	self setParents: self expressions to: self! !!CSArrayCreationExpressionNode methodsFor: 'generated'!arrayInitializer: aCSArrayInitializerNode	self arrayInitializer notNil		ifTrue: [ self arrayInitializer parent: nil ].	arrayInitializer := aCSArrayInitializerNode.	self arrayInitializer notNil		ifTrue: [ self arrayInitializer parent: self ]! !!CSArrayCreationExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitArrayCreationExpression: self! !!CSArrayCreationExpressionNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens #_leftParens #_rightParens)! !!CSArrayCreationExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSArrayCreationExpressionNode methodsFor: 'generated'!newToken	^ newToken! !!CSArrayCreationExpressionNode methodsFor: 'generated'!type	^ type! !!CSArrayCreationExpressionNode methodsFor: 'generated'!arrayInitializer	^ arrayInitializer! !!CSArrayCreationExpressionNode methodsFor: 'generated'!rankSpecifiers	^ rankSpecifiers! !!CSArrayCreationExpressionNode methodsFor: 'generated'!rightBracketToken: aSmaCCToken	rightBracketToken := aSmaCCToken! !!CSArrayCreationExpressionNode methodsFor: 'generated'!rankSpecifiers: anOrderedCollection	self setParents: self rankSpecifiers to: nil.	rankSpecifiers := anOrderedCollection.	self setParents: self rankSpecifiers to: self! !!CSArrayCreationExpressionNode methodsFor: 'generated'!leftBracketToken: aSmaCCToken	leftBracketToken := aSmaCCToken! !!CSArrayCreationExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSArrayCreationExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#newToken #leftBracketToken #rightBracketToken)! !!CSArrayCreationExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#expressions #rankSpecifiers)! !!CSArrayCreationExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#type #arrayInitializer)! !!CSArrayCreationExpressionNode methodsFor: 'generated'!newToken: aSmaCCToken	newToken := aSmaCCToken! !!CSArrayCreationExpressionNode methodsFor: 'generated'!rightBracketToken	^ rightBracketToken! !!CSArrayCreationExpressionNode methodsFor: 'generated'!leftBracketToken	^ leftBracketToken! !!CSArrayCreationExpressionNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSArrayCreationExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	expressions := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	rankSpecifiers := OrderedCollection new: 2.! !CSExpressionNode subclass: #CSAssignmentNode	instanceVariableNames: 'lhs operator rhs'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSAssignmentNode methodsFor: 'generated'!tokenVariables	^ #(#operator)! !!CSAssignmentNode methodsFor: 'generated'!nodeVariables	^ #(#lhs #rhs)! !!CSAssignmentNode methodsFor: 'generated'!operator	^ operator! !!CSAssignmentNode methodsFor: 'generated'!lhs: aCSExpressionNode	self lhs notNil		ifTrue: [ self lhs parent: nil ].	lhs := aCSExpressionNode.	self lhs notNil		ifTrue: [ self lhs parent: self ]! !!CSAssignmentNode methodsFor: 'generated'!lhs	^ lhs! !!CSAssignmentNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitAssignment: self! !!CSAssignmentNode methodsFor: 'generated'!operator: aSmaCCToken	operator := aSmaCCToken! !!CSAssignmentNode methodsFor: 'generated'!rhs	^ rhs! !!CSAssignmentNode methodsFor: 'generated'!rhs: aCSExpressionNode	self rhs notNil		ifTrue: [ self rhs parent: nil ].	rhs := aCSExpressionNode.	self rhs notNil		ifTrue: [ self rhs parent: self ]! !CSExpressionNode subclass: #CSAwaitExpressionNode	instanceVariableNames: 'awaitToken expression'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSAwaitExpressionNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSAwaitExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#awaitToken)! !!CSAwaitExpressionNode methodsFor: 'generated'!expression	^ expression! !!CSAwaitExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSAwaitExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitAwaitExpression: self! !!CSAwaitExpressionNode methodsFor: 'generated'!awaitToken: aSmaCCToken	awaitToken := aSmaCCToken! !!CSAwaitExpressionNode methodsFor: 'generated'!awaitToken	^ awaitToken! !CSExpressionNode subclass: #CSBaseAccessNode	instanceVariableNames: 'baseToken periodToken identifier leftBracketToken expressions commaTokens rightBracketToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSBaseAccessNode methodsFor: 'generated'!periodToken	^ periodToken! !!CSBaseAccessNode methodsFor: 'generated'!rightBracketToken	^ rightBracketToken! !!CSBaseAccessNode methodsFor: 'generated'!expressions: anOrderedCollection	self setParents: self expressions to: nil.	expressions := anOrderedCollection.	self setParents: self expressions to: self! !!CSBaseAccessNode methodsFor: 'generated'!tokenVariables	^ #(#baseToken #periodToken #identifier #leftBracketToken #rightBracketToken)! !!CSBaseAccessNode methodsFor: 'generated'!rightBracketToken: aSmaCCToken	rightBracketToken := aSmaCCToken! !!CSBaseAccessNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens #_leftParens #_rightParens)! !!CSBaseAccessNode methodsFor: 'generated'!identifier: aSmaCCToken	identifier := aSmaCCToken! !!CSBaseAccessNode methodsFor: 'generated'!compositeNodeVariables	^ #(#expressions)! !!CSBaseAccessNode methodsFor: 'generated'!leftBracketToken: aSmaCCToken	leftBracketToken := aSmaCCToken! !!CSBaseAccessNode methodsFor: 'generated'!leftBracketToken	^ leftBracketToken! !!CSBaseAccessNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSBaseAccessNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitBaseAccess: self! !!CSBaseAccessNode methodsFor: 'generated'!expressions	^ expressions! !!CSBaseAccessNode methodsFor: 'generated'!periodToken: aSmaCCToken	periodToken := aSmaCCToken! !!CSBaseAccessNode methodsFor: 'generated'!identifier	^ identifier! !!CSBaseAccessNode methodsFor: 'generated'!baseToken	^ baseToken! !!CSBaseAccessNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSBaseAccessNode methodsFor: 'generated'!baseToken: aSmaCCToken	baseToken := aSmaCCToken! !!CSBaseAccessNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	expressions := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSExpressionNode subclass: #CSBaseExpressionNode	instanceVariableNames: 'baseToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSBaseExpressionNode methodsFor: 'generated'!baseToken	^ baseToken! !!CSBaseExpressionNode methodsFor: 'generated'!baseToken: aSmaCCToken	baseToken := aSmaCCToken! !!CSBaseExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#baseToken)! !!CSBaseExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitBaseExpression: self! !CSExpressionNode subclass: #CSBinaryExpressionNode	instanceVariableNames: 'left operator right'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSBinaryExpressionNode methodsFor: 'generated'!right: aCSProgramNode	self right notNil		ifTrue: [ self right parent: nil ].	right := aCSProgramNode.	self right notNil		ifTrue: [ self right parent: self ]! !!CSBinaryExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#operator)! !!CSBinaryExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#left #right)! !!CSBinaryExpressionNode methodsFor: 'generated'!left	^ left! !!CSBinaryExpressionNode methodsFor: 'generated'!operator	^ operator! !!CSBinaryExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitBinaryExpression: self! !!CSBinaryExpressionNode methodsFor: 'generated'!operator: aSmaCCToken	operator := aSmaCCToken! !!CSBinaryExpressionNode methodsFor: 'generated'!left: aCSExpressionNode	self left notNil		ifTrue: [ self left parent: nil ].	left := aCSExpressionNode.	self left notNil		ifTrue: [ self left parent: self ]! !!CSBinaryExpressionNode methodsFor: 'generated'!right	^ right! !CSExpressionNode subclass: #CSCastExpressionNode	instanceVariableNames: 'leftParenToken type rightParenToken expression'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSCastExpressionNode methodsFor: 'generated'!type	^ type! !!CSCastExpressionNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSCastExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#leftParenToken #rightParenToken)! !!CSCastExpressionNode methodsFor: 'generated'!expression	^ expression! !!CSCastExpressionNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSCastExpressionNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSCastExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#type #expression)! !!CSCastExpressionNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSCastExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitCastExpression: self! !!CSCastExpressionNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSCastExpressionNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !CSExpressionNode subclass: #CSCheckedExpressionNode	instanceVariableNames: 'checkedToken leftParenToken expression rightParenToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSCheckedExpressionNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSCheckedExpressionNode methodsFor: 'generated'!checkedToken	^ checkedToken! !!CSCheckedExpressionNode methodsFor: 'generated'!expression	^ expression! !!CSCheckedExpressionNode methodsFor: 'generated'!checkedToken: aSmaCCToken	checkedToken := aSmaCCToken! !!CSCheckedExpressionNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSCheckedExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#checkedToken #leftParenToken #rightParenToken)! !!CSCheckedExpressionNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSCheckedExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSCheckedExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitCheckedExpression: self! !!CSCheckedExpressionNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSCheckedExpressionNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !CSExpressionNode subclass: #CSConditionalExpressionNode	instanceVariableNames: 'booleanExpression questionMarkToken trueExpression colonToken falseExpression'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSConditionalExpressionNode methodsFor: 'generated'!trueExpression	^ trueExpression! !!CSConditionalExpressionNode methodsFor: 'generated'!booleanExpression	^ booleanExpression! !!CSConditionalExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#questionMarkToken #colonToken)! !!CSConditionalExpressionNode methodsFor: 'generated'!trueExpression: aCSExpressionNode	self trueExpression notNil		ifTrue: [ self trueExpression parent: nil ].	trueExpression := aCSExpressionNode.	self trueExpression notNil		ifTrue: [ self trueExpression parent: self ]! !!CSConditionalExpressionNode methodsFor: 'generated'!colonToken	^ colonToken! !!CSConditionalExpressionNode methodsFor: 'generated'!falseExpression	^ falseExpression! !!CSConditionalExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#booleanExpression #trueExpression #falseExpression)! !!CSConditionalExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitConditionalExpression: self! !!CSConditionalExpressionNode methodsFor: 'generated'!booleanExpression: aCSExpressionNode	self booleanExpression notNil		ifTrue: [ self booleanExpression parent: nil ].	booleanExpression := aCSExpressionNode.	self booleanExpression notNil		ifTrue: [ self booleanExpression parent: self ]! !!CSConditionalExpressionNode methodsFor: 'generated'!falseExpression: aCSExpressionNode	self falseExpression notNil		ifTrue: [ self falseExpression parent: nil ].	falseExpression := aCSExpressionNode.	self falseExpression notNil		ifTrue: [ self falseExpression parent: self ]! !!CSConditionalExpressionNode methodsFor: 'generated'!colonToken: aSmaCCToken	colonToken := aSmaCCToken! !!CSConditionalExpressionNode methodsFor: 'generated'!questionMarkToken: aSmaCCToken	questionMarkToken := aSmaCCToken! !!CSConditionalExpressionNode methodsFor: 'generated'!questionMarkToken	^ questionMarkToken! !CSExpressionNode subclass: #CSDefaultValueExpressionNode	instanceVariableNames: 'defaultToken leftParenToken type rightParenToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSDefaultValueExpressionNode methodsFor: 'generated'!type	^ type! !!CSDefaultValueExpressionNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSDefaultValueExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#defaultToken #leftParenToken #rightParenToken)! !!CSDefaultValueExpressionNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSDefaultValueExpressionNode methodsFor: 'generated'!defaultToken: aSmaCCToken	defaultToken := aSmaCCToken! !!CSDefaultValueExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitDefaultValueExpression: self! !!CSDefaultValueExpressionNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSDefaultValueExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSDefaultValueExpressionNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSDefaultValueExpressionNode methodsFor: 'generated'!defaultToken	^ defaultToken! !!CSDefaultValueExpressionNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !CSExpressionNode subclass: #CSDelegateCreationExpressionNode	instanceVariableNames: 'newToken type leftParenToken expression rightParenToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSDelegateCreationExpressionNode methodsFor: 'generated'!type	^ type! !!CSDelegateCreationExpressionNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSDelegateCreationExpressionNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSDelegateCreationExpressionNode methodsFor: 'generated'!expression	^ expression! !!CSDelegateCreationExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#newToken #leftParenToken #rightParenToken)! !!CSDelegateCreationExpressionNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSDelegateCreationExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#type #expression)! !!CSDelegateCreationExpressionNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSDelegateCreationExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitDelegateCreationExpression: self! !!CSDelegateCreationExpressionNode methodsFor: 'generated'!newToken	^ newToken! !!CSDelegateCreationExpressionNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSDelegateCreationExpressionNode methodsFor: 'generated'!newToken: aSmaCCToken	newToken := aSmaCCToken! !!CSDelegateCreationExpressionNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !CSExpressionNode subclass: #CSElementAccessNode	instanceVariableNames: 'baseExpression leftBracketToken expressions commaTokens rightBracketToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSElementAccessNode methodsFor: 'generated'!rightBracketToken	^ rightBracketToken! !!CSElementAccessNode methodsFor: 'generated'!expressions: anOrderedCollection	self setParents: self expressions to: nil.	expressions := anOrderedCollection.	self setParents: self expressions to: self! !!CSElementAccessNode methodsFor: 'generated'!tokenVariables	^ #(#leftBracketToken #rightBracketToken)! !!CSElementAccessNode methodsFor: 'generated'!rightBracketToken: aSmaCCToken	rightBracketToken := aSmaCCToken! !!CSElementAccessNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens #_leftParens #_rightParens)! !!CSElementAccessNode methodsFor: 'generated'!baseExpression: aCSExpressionNode	self baseExpression notNil		ifTrue: [ self baseExpression parent: nil ].	baseExpression := aCSExpressionNode.	self baseExpression notNil		ifTrue: [ self baseExpression parent: self ]! !!CSElementAccessNode methodsFor: 'generated'!compositeNodeVariables	^ #(#expressions)! !!CSElementAccessNode methodsFor: 'generated'!leftBracketToken: aSmaCCToken	leftBracketToken := aSmaCCToken! !!CSElementAccessNode methodsFor: 'generated'!leftBracketToken	^ leftBracketToken! !!CSElementAccessNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitElementAccess: self! !!CSElementAccessNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSElementAccessNode methodsFor: 'generated'!expressions	^ expressions! !!CSElementAccessNode methodsFor: 'generated'!nodeVariables	^ #(#baseExpression)! !!CSElementAccessNode methodsFor: 'generated'!baseExpression	^ baseExpression! !!CSElementAccessNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSElementAccessNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	expressions := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSProgramNode subclass: #CSExternAliasDirectiveNode	instanceVariableNames: 'externToken aliasToken identifierToken semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSExternAliasDirectiveNode methodsFor: 'generated'!aliasToken: aSmaCCToken	aliasToken := aSmaCCToken! !!CSExternAliasDirectiveNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSExternAliasDirectiveNode methodsFor: 'generated'!externToken: aSmaCCToken	externToken := aSmaCCToken! !!CSExternAliasDirectiveNode methodsFor: 'generated'!tokenVariables	^ #(#externToken #aliasToken #identifierToken)! !!CSExternAliasDirectiveNode methodsFor: 'generated'!aliasToken	^ aliasToken! !!CSExternAliasDirectiveNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSExternAliasDirectiveNode methodsFor: 'generated'!externToken	^ externToken! !!CSExternAliasDirectiveNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSExternAliasDirectiveNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitExternAliasDirective: self! !!CSExternAliasDirectiveNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!CSExternAliasDirectiveNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !CSDeclarationNode subclass: #CSFieldDeclarationNode	instanceVariableNames: '_attributes modifiers type declarators commaTokens semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSFieldDeclarationNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSFieldDeclarationNode methodsFor: 'generated'!type	^ type! !!CSFieldDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers)! !!CSFieldDeclarationNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSFieldDeclarationNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSFieldDeclarationNode methodsFor: 'generated'!declarators: anOrderedCollection	self setParents: self declarators to: nil.	declarators := anOrderedCollection.	self setParents: self declarators to: self! !!CSFieldDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSFieldDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #declarators)! !!CSFieldDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitFieldDeclaration: self! !!CSFieldDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSFieldDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSFieldDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSFieldDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSFieldDeclarationNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSFieldDeclarationNode methodsFor: 'generated'!declarators	^ declarators! !!CSFieldDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSFieldDeclarationNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSFieldDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSFieldDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.	declarators := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSProgramNode subclass: #CSFinallyClauseNode	instanceVariableNames: 'finallyToken block'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSFinallyClauseNode methodsFor: 'generated'!tokenVariables	^ #(#finallyToken)! !!CSFinallyClauseNode methodsFor: 'generated'!block: aCSBlockStatementNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aCSBlockStatementNode.	self block notNil		ifTrue: [ self block parent: self ]! !!CSFinallyClauseNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitFinallyClause: self! !!CSFinallyClauseNode methodsFor: 'generated'!finallyToken: aSmaCCToken	finallyToken := aSmaCCToken! !!CSFinallyClauseNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!CSFinallyClauseNode methodsFor: 'generated'!finallyToken	^ finallyToken! !!CSFinallyClauseNode methodsFor: 'generated'!block	^ block! !CSProgramNode subclass: #CSFixedParameterNode	instanceVariableNames: '_attributes modifier type name equalToken expression'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSFixedParameterNode methodsFor: 'generated'!type	^ type! !!CSFixedParameterNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSFixedParameterNode methodsFor: 'generated'!modifier: aSmaCCToken	modifier := aSmaCCToken! !!CSFixedParameterNode methodsFor: 'generated'!tokenVariables	^ #(#modifier #name #equalToken)! !!CSFixedParameterNode methodsFor: 'generated'!expression	^ expression! !!CSFixedParameterNode methodsFor: 'generated'!name	^ name! !!CSFixedParameterNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes)! !!CSFixedParameterNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSFixedParameterNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSFixedParameterNode methodsFor: 'generated'!modifier	^ modifier! !!CSFixedParameterNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitFixedParameter: self! !!CSFixedParameterNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSFixedParameterNode methodsFor: 'generated'!equalToken	^ equalToken! !!CSFixedParameterNode methodsFor: 'generated'!nodeVariables	^ #(#type #expression)! !!CSFixedParameterNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !!CSFixedParameterNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSFixedParameterNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.! !CSProgramNode subclass: #CSFixedPointerDeclaratorNode	instanceVariableNames: 'identifierToken equalToken andToken expression'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSFixedPointerDeclaratorNode methodsFor: 'generated'!andToken	^ andToken! !!CSFixedPointerDeclaratorNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSFixedPointerDeclaratorNode methodsFor: 'generated'!expression	^ expression! !!CSFixedPointerDeclaratorNode methodsFor: 'generated'!tokenVariables	^ #(#identifierToken #equalToken #andToken)! !!CSFixedPointerDeclaratorNode methodsFor: 'generated'!andToken: aSmaCCToken	andToken := aSmaCCToken! !!CSFixedPointerDeclaratorNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSFixedPointerDeclaratorNode methodsFor: 'generated'!equalToken	^ equalToken! !!CSFixedPointerDeclaratorNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitFixedPointerDeclarator: self! !!CSFixedPointerDeclaratorNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSFixedPointerDeclaratorNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!CSFixedPointerDeclaratorNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !CSDeclarationNode subclass: #CSFixedSizeBufferDeclarationNode	instanceVariableNames: '_attributes modifiers fixedToken type declarators semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!fixedToken: aSmaCCToken	fixedToken := aSmaCCToken! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!type	^ type! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers)! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#fixedToken)! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!declarators: anOrderedCollection	self setParents: self declarators to: nil.	declarators := anOrderedCollection.	self setParents: self declarators to: self! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #declarators)! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitFixedSizeBufferDeclaration: self! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!declarators	^ declarators! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!fixedToken	^ fixedToken! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSFixedSizeBufferDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.	declarators := OrderedCollection new: 2.! !CSProgramNode subclass: #CSFixedSizeBufferDeclaratorNode	instanceVariableNames: 'name leftBracketToken expression rightBracketToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSFixedSizeBufferDeclaratorNode methodsFor: 'generated'!rightBracketToken	^ rightBracketToken! !!CSFixedSizeBufferDeclaratorNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSFixedSizeBufferDeclaratorNode methodsFor: 'generated'!tokenVariables	^ #(#name #leftBracketToken #rightBracketToken)! !!CSFixedSizeBufferDeclaratorNode methodsFor: 'generated'!expression	^ expression! !!CSFixedSizeBufferDeclaratorNode methodsFor: 'generated'!rightBracketToken: aSmaCCToken	rightBracketToken := aSmaCCToken! !!CSFixedSizeBufferDeclaratorNode methodsFor: 'generated'!leftBracketToken: aSmaCCToken	leftBracketToken := aSmaCCToken! !!CSFixedSizeBufferDeclaratorNode methodsFor: 'generated'!name	^ name! !!CSFixedSizeBufferDeclaratorNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSFixedSizeBufferDeclaratorNode methodsFor: 'generated'!leftBracketToken	^ leftBracketToken! !!CSFixedSizeBufferDeclaratorNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSFixedSizeBufferDeclaratorNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitFixedSizeBufferDeclarator: self! !CSProgramNode subclass: #CSGetAccessorDeclarationNode	instanceVariableNames: '_attributes modifiers getToken body semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSGetAccessorDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers)! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!body	^ body! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#getToken)! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes)! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!getToken	^ getToken! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitGetAccessorDeclaration: self! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#body)! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!getToken: aSmaCCToken	getToken := aSmaCCToken! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!body: aCSBlockStatementNode	self body notNil		ifTrue: [ self body parent: nil ].	body := aCSBlockStatementNode.	self body notNil		ifTrue: [ self body parent: self ]! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSGetAccessorDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSGetAccessorDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.! !CSProgramNode subclass: #CSImplicitAnonymousFunctionSignatureNode	instanceVariableNames: 'leftParenToken names commaTokens rightParenToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSImplicitAnonymousFunctionSignatureNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	names := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !!CSImplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSImplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!compositeTokenVariables	^ #(#names)! !!CSImplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSImplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!tokenVariables	^ #(#leftParenToken #rightParenToken)! !!CSImplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSImplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!names	^ names! !!CSImplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!names: anOrderedCollection	names := anOrderedCollection! !!CSImplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitImplicitAnonymousFunctionSignature: self! !!CSImplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSImplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSImplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSImplicitAnonymousFunctionSignatureNode methodsFor: 'generated'!commaTokens	^ commaTokens! !CSDeclarationNode subclass: #CSIndexerDeclarationNode	instanceVariableNames: '_attributes modifiers returnType thisToken leftBracketToken parameters commas rightBracketToken type periodToken leftBraceToken getAccessor setAccessor rightBraceToken equalGreaterThanToken expression semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSIndexerDeclarationNode methodsFor: 'generated'!leftBracketToken	^ leftBracketToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!thisToken: aSmaCCToken	thisToken := aSmaCCToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!rightBracketToken: aSmaCCToken	rightBracketToken := aSmaCCToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSIndexerDeclarationNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSIndexerDeclarationNode methodsFor: 'generated'!returnType: aCSTypeNode	self returnType notNil		ifTrue: [ self returnType parent: nil ].	returnType := aCSTypeNode.	self returnType notNil		ifTrue: [ self returnType parent: self ]! !!CSIndexerDeclarationNode methodsFor: 'generated'!parameters	^ parameters! !!CSIndexerDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#returnType #type #getAccessor #setAccessor #expression)! !!CSIndexerDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#thisToken #leftBracketToken #rightBracketToken #periodToken #leftBraceToken #rightBraceToken #equalGreaterThanToken)! !!CSIndexerDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitIndexerDeclaration: self! !!CSIndexerDeclarationNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSIndexerDeclarationNode methodsFor: 'generated'!parameters: anOrderedCollection	self setParents: self parameters to: nil.	parameters := anOrderedCollection.	self setParents: self parameters to: self! !!CSIndexerDeclarationNode methodsFor: 'generated'!type	^ type! !!CSIndexerDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSIndexerDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSIndexerDeclarationNode methodsFor: 'generated'!equalGreaterThanToken	^ equalGreaterThanToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!expression	^ expression! !!CSIndexerDeclarationNode methodsFor: 'generated'!commas	^ commas! !!CSIndexerDeclarationNode methodsFor: 'generated'!periodToken	^ periodToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!setAccessor: aCSSetAccessorDeclarationNode	self setAccessor notNil		ifTrue: [ self setAccessor parent: nil ].	setAccessor := aCSSetAccessorDeclarationNode.	self setAccessor notNil		ifTrue: [ self setAccessor parent: self ]! !!CSIndexerDeclarationNode methodsFor: 'generated'!thisToken	^ thisToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!getAccessor: aCSGetAccessorDeclarationNode	self getAccessor notNil		ifTrue: [ self getAccessor parent: nil ].	getAccessor := aCSGetAccessorDeclarationNode.	self getAccessor notNil		ifTrue: [ self getAccessor parent: self ]! !!CSIndexerDeclarationNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSIndexerDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers #commas)! !!CSIndexerDeclarationNode methodsFor: 'generated'!equalGreaterThanToken: aSmaCCToken	equalGreaterThanToken := aSmaCCToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!returnType	^ returnType! !!CSIndexerDeclarationNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSIndexerDeclarationNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #parameters)! !!CSIndexerDeclarationNode methodsFor: 'generated'!periodToken: aSmaCCToken	periodToken := aSmaCCToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSIndexerDeclarationNode methodsFor: 'generated'!leftBracketToken: aSmaCCToken	leftBracketToken := aSmaCCToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!getAccessor	^ getAccessor! !!CSIndexerDeclarationNode methodsFor: 'generated'!rightBracketToken	^ rightBracketToken! !!CSIndexerDeclarationNode methodsFor: 'generated'!setAccessor	^ setAccessor! !!CSIndexerDeclarationNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!CSIndexerDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.	parameters := OrderedCollection new: 2.	commas := OrderedCollection new: 2.! !CSDeclarationNode subclass: #CSInterfaceDeclarationNode	instanceVariableNames: '_attributes modifiers partialToken interfaceToken name typeParameters colon supertypes commas constraintClauses leftBrace declarations rightBrace semicolon'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSInterfaceDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.	supertypes := OrderedCollection new: 2.	commas := OrderedCollection new: 2.	constraintClauses := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.! !!CSInterfaceDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSInterfaceDeclarationNode methodsFor: 'generated'!typeParameters: aCSVariantTypeParameterListNode	self typeParameters notNil		ifTrue: [ self typeParameters parent: nil ].	typeParameters := aCSVariantTypeParameterListNode.	self typeParameters notNil		ifTrue: [ self typeParameters parent: self ]! !!CSInterfaceDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSInterfaceDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSInterfaceDeclarationNode methodsFor: 'generated'!supertypes: anOrderedCollection	self setParents: self supertypes to: nil.	supertypes := anOrderedCollection.	self setParents: self supertypes to: self! !!CSInterfaceDeclarationNode methodsFor: 'generated'!typeParameters	^ typeParameters! !!CSInterfaceDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitInterfaceDeclaration: self! !!CSInterfaceDeclarationNode methodsFor: 'generated'!constraintClauses: anOrderedCollection	self setParents: self constraintClauses to: nil.	constraintClauses := anOrderedCollection.	self setParents: self constraintClauses to: self! !!CSInterfaceDeclarationNode methodsFor: 'generated'!constraintClauses	^ constraintClauses! !!CSInterfaceDeclarationNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSInterfaceDeclarationNode methodsFor: 'generated'!semicolon	^ semicolon! !!CSInterfaceDeclarationNode methodsFor: 'generated'!name	^ name! !!CSInterfaceDeclarationNode methodsFor: 'generated'!interfaceToken: aSmaCCToken	interfaceToken := aSmaCCToken! !!CSInterfaceDeclarationNode methodsFor: 'generated'!commas	^ commas! !!CSInterfaceDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSInterfaceDeclarationNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSInterfaceDeclarationNode methodsFor: 'generated'!rightBrace: aSmaCCToken	rightBrace := aSmaCCToken! !!CSInterfaceDeclarationNode methodsFor: 'generated'!colon	^ colon! !!CSInterfaceDeclarationNode methodsFor: 'generated'!partialToken: aSmaCCToken	partialToken := aSmaCCToken! !!CSInterfaceDeclarationNode methodsFor: 'generated'!interfaceToken	^ interfaceToken! !!CSInterfaceDeclarationNode methodsFor: 'generated'!declarations	^ declarations! !!CSInterfaceDeclarationNode methodsFor: 'generated'!leftBrace: aSmaCCToken	leftBrace := aSmaCCToken! !!CSInterfaceDeclarationNode methodsFor: 'generated'!partialToken	^ partialToken! !!CSInterfaceDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #supertypes #constraintClauses #declarations)! !!CSInterfaceDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers #commas)! !!CSInterfaceDeclarationNode methodsFor: 'generated'!leftBrace	^ leftBrace! !!CSInterfaceDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#typeParameters)! !!CSInterfaceDeclarationNode methodsFor: 'generated'!semicolon: aSmaCCToken	semicolon := aSmaCCToken! !!CSInterfaceDeclarationNode methodsFor: 'generated'!supertypes	^ supertypes! !!CSInterfaceDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#partialToken #interfaceToken #name #colon #leftBrace #rightBrace #semicolon)! !!CSInterfaceDeclarationNode methodsFor: 'generated'!rightBrace	^ rightBrace! !!CSInterfaceDeclarationNode methodsFor: 'generated'!colon: aSmaCCToken	colon := aSmaCCToken! !!CSInterfaceDeclarationNode methodsFor: 'generated'!declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self! !CSDeclarationNode subclass: #CSInterfaceEventDeclarationNode	instanceVariableNames: '_attributes modifier eventToken type name semicolon'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSInterfaceEventDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!eventToken	^ eventToken! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!semicolon: aSmaCCToken	semicolon := aSmaCCToken! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!modifier: aSmaCCToken	modifier := aSmaCCToken! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#modifier #eventToken #name #semicolon)! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!type	^ type! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!name	^ name! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes)! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!modifier	^ modifier! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitInterfaceEventDeclaration: self! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!semicolon	^ semicolon! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!eventToken: aSmaCCToken	eventToken := aSmaCCToken! !!CSInterfaceEventDeclarationNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !CSDeclarationNode subclass: #CSInterfaceIndexerDeclarationNode	instanceVariableNames: '_attributes modifier type thisToken leftBracket parameters commas rightBracket leftBrace getAccessor setAccessor rightBrace'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!setAccessor	^ setAccessor! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!modifier	^ modifier! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitInterfaceIndexerDeclaration: self! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!setAccessor: aCSInterfacePropertyAccessorNode	self setAccessor notNil		ifTrue: [ self setAccessor parent: nil ].	setAccessor := aCSInterfacePropertyAccessorNode.	self setAccessor notNil		ifTrue: [ self setAccessor parent: self ]! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!thisToken	^ thisToken! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!getAccessor	^ getAccessor! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!leftBracket: aSmaCCToken	leftBracket := aSmaCCToken! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!type	^ type! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!commas	^ commas! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!leftBracket	^ leftBracket! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!rightBrace: aSmaCCToken	rightBrace := aSmaCCToken! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!parameters: anOrderedCollection	self setParents: self parameters to: nil.	parameters := anOrderedCollection.	self setParents: self parameters to: self! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!rightBracket: aSmaCCToken	rightBracket := aSmaCCToken! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!rightBracket	^ rightBracket! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!getAccessor: aCSInterfacePropertyAccessorNode	self getAccessor notNil		ifTrue: [ self getAccessor parent: nil ].	getAccessor := aCSInterfacePropertyAccessorNode.	self getAccessor notNil		ifTrue: [ self getAccessor parent: self ]! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!leftBrace: aSmaCCToken	leftBrace := aSmaCCToken! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #parameters)! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#commas)! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!leftBrace	^ leftBrace! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#type #getAccessor #setAccessor)! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!thisToken: aSmaCCToken	thisToken := aSmaCCToken! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#modifier #thisToken #leftBracket #rightBracket #leftBrace #rightBrace)! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!rightBrace	^ rightBrace! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!modifier: aSmaCCToken	modifier := aSmaCCToken! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated'!parameters	^ parameters! !!CSInterfaceIndexerDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	parameters := OrderedCollection new: 2.	commas := OrderedCollection new: 2.! !CSDeclarationNode subclass: #CSInterfaceMethodDeclarationNode	instanceVariableNames: '_attributes modifier type name typeParameters leftParen parameters commas rightParen constraintClauses body'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSInterfaceMethodDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	parameters := OrderedCollection new: 2.	commas := OrderedCollection new: 2.	constraintClauses := OrderedCollection new: 2.! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!typeParameters: aCSTypeParameterListNode	self typeParameters notNil		ifTrue: [ self typeParameters parent: nil ].	typeParameters := aCSTypeParameterListNode.	self typeParameters notNil		ifTrue: [ self typeParameters parent: self ]! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!rightParen	^ rightParen! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!modifier	^ modifier! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!typeParameters	^ typeParameters! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitInterfaceMethodDeclaration: self! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!body	^ body! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!constraintClauses: anOrderedCollection	self setParents: self constraintClauses to: nil.	constraintClauses := anOrderedCollection.	self setParents: self constraintClauses to: self! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!constraintClauses	^ constraintClauses! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!leftParen: aSmaCCToken	leftParen := aSmaCCToken! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!rightParen: aSmaCCToken	rightParen := aSmaCCToken! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!name	^ name! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!type	^ type! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!commas	^ commas! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!body: aCSMethodBodyNode	self body notNil		ifTrue: [ self body parent: nil ].	body := aCSMethodBodyNode.	self body notNil		ifTrue: [ self body parent: self ]! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!leftParen	^ leftParen! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!parameters: anOrderedCollection	self setParents: self parameters to: nil.	parameters := anOrderedCollection.	self setParents: self parameters to: self! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #parameters #constraintClauses)! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#commas)! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#modifier #name #leftParen #rightParen)! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#type #typeParameters #body)! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!modifier: aSmaCCToken	modifier := aSmaCCToken! !!CSInterfaceMethodDeclarationNode methodsFor: 'generated'!parameters	^ parameters! !CSProgramNode subclass: #CSInterfacePropertyAccessorNode	instanceVariableNames: '_attributes accessorType semicolon'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSInterfacePropertyAccessorNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSInterfacePropertyAccessorNode methodsFor: 'generated'!accessorType: aSmaCCToken	accessorType := aSmaCCToken! !!CSInterfacePropertyAccessorNode methodsFor: 'generated'!tokenVariables	^ #(#accessorType #semicolon)! !!CSInterfacePropertyAccessorNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitInterfacePropertyAccessor: self! !!CSInterfacePropertyAccessorNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSInterfacePropertyAccessorNode methodsFor: 'generated'!semicolon	^ semicolon! !!CSInterfacePropertyAccessorNode methodsFor: 'generated'!accessorType	^ accessorType! !!CSInterfacePropertyAccessorNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes)! !!CSInterfacePropertyAccessorNode methodsFor: 'generated'!semicolon: aSmaCCToken	semicolon := aSmaCCToken! !!CSInterfacePropertyAccessorNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.! !CSDeclarationNode subclass: #CSInterfacePropertyDeclarationNode	instanceVariableNames: '_attributes modifier type name leftBrace getAccessor setAccessor rightBrace'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSInterfacePropertyDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!modifier	^ modifier! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitInterfacePropertyDeclaration: self! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!setAccessor: aCSInterfacePropertyAccessorNode	self setAccessor notNil		ifTrue: [ self setAccessor parent: nil ].	setAccessor := aCSInterfacePropertyAccessorNode.	self setAccessor notNil		ifTrue: [ self setAccessor parent: self ]! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!getAccessor	^ getAccessor! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!type	^ type! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!name	^ name! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!rightBrace: aSmaCCToken	rightBrace := aSmaCCToken! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!leftBrace: aSmaCCToken	leftBrace := aSmaCCToken! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!getAccessor: aCSInterfacePropertyAccessorNode	self getAccessor notNil		ifTrue: [ self getAccessor parent: nil ].	getAccessor := aCSInterfacePropertyAccessorNode.	self getAccessor notNil		ifTrue: [ self getAccessor parent: self ]! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#modifier #name #leftBrace #rightBrace)! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes)! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!leftBrace	^ leftBrace! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#type #getAccessor #setAccessor)! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!rightBrace	^ rightBrace! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!modifier: aSmaCCToken	modifier := aSmaCCToken! !!CSInterfacePropertyDeclarationNode methodsFor: 'generated'!setAccessor	^ setAccessor! !CSExpressionNode subclass: #CSInterpolatedStringExpressionNode	instanceVariableNames: 'stringParts interpolations'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSInterpolatedStringExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	stringParts := OrderedCollection new: 2.	interpolations := OrderedCollection new: 2.! !!CSInterpolatedStringExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#stringParts)! !!CSInterpolatedStringExpressionNode methodsFor: 'generated'!interpolations	^ interpolations! !!CSInterpolatedStringExpressionNode methodsFor: 'generated'!stringParts	^ stringParts! !!CSInterpolatedStringExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitInterpolatedStringExpression: self! !!CSInterpolatedStringExpressionNode methodsFor: 'generated'!stringParts: anOrderedCollection	stringParts := anOrderedCollection! !!CSInterpolatedStringExpressionNode methodsFor: 'generated'!interpolations: anOrderedCollection	self setParents: self interpolations to: nil.	interpolations := anOrderedCollection.	self setParents: self interpolations to: self! !!CSInterpolatedStringExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#interpolations)! !CSProgramNode subclass: #CSInterpolationNode	instanceVariableNames: 'expression commaToken constant'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSInterpolationNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSInterpolationNode methodsFor: 'generated'!constant: aCSExpressionNode	self constant notNil		ifTrue: [ self constant parent: nil ].	constant := aCSExpressionNode.	self constant notNil		ifTrue: [ self constant parent: self ]! !!CSInterpolationNode methodsFor: 'generated'!expression	^ expression! !!CSInterpolationNode methodsFor: 'generated'!commaToken: aSmaCCToken	commaToken := aSmaCCToken! !!CSInterpolationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitInterpolation: self! !!CSInterpolationNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#commaToken)! !!CSInterpolationNode methodsFor: 'generated'!constant	^ constant! !!CSInterpolationNode methodsFor: 'generated'!nodeVariables	^ #(#expression #constant)! !!CSInterpolationNode methodsFor: 'generated'!commaToken	^ commaToken! !CSExpressionNode subclass: #CSInvocationExpressionNode	instanceVariableNames: 'expression leftParenToken arguments commaTokens rightParenToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSInvocationExpressionNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSInvocationExpressionNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSInvocationExpressionNode methodsFor: 'generated'!expression	^ expression! !!CSInvocationExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#leftParenToken #rightParenToken)! !!CSInvocationExpressionNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens #_leftParens #_rightParens)! !!CSInvocationExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#arguments)! !!CSInvocationExpressionNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSInvocationExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSInvocationExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitInvocationExpression: self! !!CSInvocationExpressionNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSInvocationExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSInvocationExpressionNode methodsFor: 'generated'!arguments	^ arguments! !!CSInvocationExpressionNode methodsFor: 'generated'!arguments: anOrderedCollection	self setParents: self arguments to: nil.	arguments := anOrderedCollection.	self setParents: self arguments to: self! !!CSInvocationExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSInvocationExpressionNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSInvocationExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	arguments := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSExpressionNode subclass: #CSLambdaExpressionNode	instanceVariableNames: 'signature equalGreaterThanToken body'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSLambdaExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#equalGreaterThanToken)! !!CSLambdaExpressionNode methodsFor: 'generated'!body: aCSProgramNode	self body notNil		ifTrue: [ self body parent: nil ].	body := aCSProgramNode.	self body notNil		ifTrue: [ self body parent: self ]! !!CSLambdaExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#signature #body)! !!CSLambdaExpressionNode methodsFor: 'generated'!equalGreaterThanToken	^ equalGreaterThanToken! !!CSLambdaExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitLambdaExpression: self! !!CSLambdaExpressionNode methodsFor: 'generated'!signature	^ signature! !!CSLambdaExpressionNode methodsFor: 'generated'!signature: aCSProgramNode	self signature notNil		ifTrue: [ self signature parent: nil ].	signature := aCSProgramNode.	self signature notNil		ifTrue: [ self signature parent: self ]! !!CSLambdaExpressionNode methodsFor: 'generated'!body	^ body! !!CSLambdaExpressionNode methodsFor: 'generated'!equalGreaterThanToken: aSmaCCToken	equalGreaterThanToken := aSmaCCToken! !CSExpressionNode subclass: #CSLiteralExpressionNode	instanceVariableNames: 'token'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSLiteralExpressionNode methodsFor: 'generated'!token	^ token! !!CSLiteralExpressionNode methodsFor: 'generated'!token: aSmaCCToken	token := aSmaCCToken! !!CSLiteralExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#token)! !!CSLiteralExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitLiteralExpression: self! !CSLiteralExpressionNode subclass: #CSBooleanLiteralExpressionNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSBooleanLiteralExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitBooleanLiteralExpression: self! !CSLiteralExpressionNode subclass: #CSCharacterLiteralExpressionNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSCharacterLiteralExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitCharacterLiteralExpression: self! !CSLiteralExpressionNode subclass: #CSIntegerLiteralExpressionNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSIntegerLiteralExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitIntegerLiteralExpression: self! !CSDeclarationNode subclass: #CSLocalConstantDeclarationNode	instanceVariableNames: 'constToken type declarators commaTokens'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSLocalConstantDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	declarators := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !!CSLocalConstantDeclarationNode methodsFor: 'generated'!type	^ type! !!CSLocalConstantDeclarationNode methodsFor: 'generated'!constToken: aSmaCCToken	constToken := aSmaCCToken! !!CSLocalConstantDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#constToken)! !!CSLocalConstantDeclarationNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSLocalConstantDeclarationNode methodsFor: 'generated'!declarators: anOrderedCollection	self setParents: self declarators to: nil.	declarators := anOrderedCollection.	self setParents: self declarators to: self! !!CSLocalConstantDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#declarators)! !!CSLocalConstantDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitLocalConstantDeclaration: self! !!CSLocalConstantDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSLocalConstantDeclarationNode methodsFor: 'generated'!constToken	^ constToken! !!CSLocalConstantDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSLocalConstantDeclarationNode methodsFor: 'generated'!declarators	^ declarators! !!CSLocalConstantDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSLocalConstantDeclarationNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !CSDeclarationNode subclass: #CSLocalVariableDeclarationNode	instanceVariableNames: 'type declarators commaTokens'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSLocalVariableDeclarationNode methodsFor: 'generated'!type	^ type! !!CSLocalVariableDeclarationNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSLocalVariableDeclarationNode methodsFor: 'generated'!declarators: anOrderedCollection	self setParents: self declarators to: nil.	declarators := anOrderedCollection.	self setParents: self declarators to: self! !!CSLocalVariableDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#declarators)! !!CSLocalVariableDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSLocalVariableDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitLocalVariableDeclaration: self! !!CSLocalVariableDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSLocalVariableDeclarationNode methodsFor: 'generated'!declarators	^ declarators! !!CSLocalVariableDeclarationNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSLocalVariableDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSLocalVariableDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	declarators := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSProgramNode subclass: #CSLocalVariableDeclaratorNode	instanceVariableNames: 'name equalToken expression'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSLocalVariableDeclaratorNode methodsFor: 'generated'!expression: aCSProgramNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSProgramNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSLocalVariableDeclaratorNode methodsFor: 'generated'!tokenVariables	^ #(#equalToken)! !!CSLocalVariableDeclaratorNode methodsFor: 'generated'!expression	^ expression! !!CSLocalVariableDeclaratorNode methodsFor: 'generated'!nodeVariables	^ #(#name #expression)! !!CSLocalVariableDeclaratorNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitLocalVariableDeclarator: self! !!CSLocalVariableDeclaratorNode methodsFor: 'generated'!name	^ name! !!CSLocalVariableDeclaratorNode methodsFor: 'generated'!equalToken	^ equalToken! !!CSLocalVariableDeclaratorNode methodsFor: 'generated'!name: aCSSimpleNameNode	self name notNil		ifTrue: [ self name parent: nil ].	name := aCSSimpleNameNode.	self name notNil		ifTrue: [ self name parent: self ]! !!CSLocalVariableDeclaratorNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !CSExpressionNode subclass: #CSMemberAccessNode	instanceVariableNames: 'expression periodToken identifier typeArguments'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSMemberAccessNode methodsFor: 'generated'!tokenVariables	^ #(#periodToken #identifier)! !!CSMemberAccessNode methodsFor: 'generated'!expression	^ expression! !!CSMemberAccessNode methodsFor: 'generated'!typeArguments: aCSTypeArgumentListNode	self typeArguments notNil		ifTrue: [ self typeArguments parent: nil ].	typeArguments := aCSTypeArgumentListNode.	self typeArguments notNil		ifTrue: [ self typeArguments parent: self ]! !!CSMemberAccessNode methodsFor: 'generated'!identifier: aSmaCCToken	identifier := aSmaCCToken! !!CSMemberAccessNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSMemberAccessNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitMemberAccess: self! !!CSMemberAccessNode methodsFor: 'generated'!nodeVariables	^ #(#expression #typeArguments)! !!CSMemberAccessNode methodsFor: 'generated'!periodToken: aSmaCCToken	periodToken := aSmaCCToken! !!CSMemberAccessNode methodsFor: 'generated'!typeArguments	^ typeArguments! !!CSMemberAccessNode methodsFor: 'generated'!periodToken	^ periodToken! !!CSMemberAccessNode methodsFor: 'generated'!identifier	^ identifier! !CSProgramNode subclass: #CSMemberDeclaratorNode	instanceVariableNames: 'name access identifierToken equalToken value'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSMemberDeclaratorNode methodsFor: 'generated'!value	^ value! !!CSMemberDeclaratorNode methodsFor: 'generated'!name: aCSSimpleNameNode	self name notNil		ifTrue: [ self name parent: nil ].	name := aCSSimpleNameNode.	self name notNil		ifTrue: [ self name parent: self ]! !!CSMemberDeclaratorNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSMemberDeclaratorNode methodsFor: 'generated'!tokenVariables	^ #(#identifierToken #equalToken)! !!CSMemberDeclaratorNode methodsFor: 'generated'!value: aCSExpressionNode	self value notNil		ifTrue: [ self value parent: nil ].	value := aCSExpressionNode.	self value notNil		ifTrue: [ self value parent: self ]! !!CSMemberDeclaratorNode methodsFor: 'generated'!name	^ name! !!CSMemberDeclaratorNode methodsFor: 'generated'!access: aCSExpressionNode	self access notNil		ifTrue: [ self access parent: nil ].	access := aCSExpressionNode.	self access notNil		ifTrue: [ self access parent: self ]! !!CSMemberDeclaratorNode methodsFor: 'generated'!equalToken	^ equalToken! !!CSMemberDeclaratorNode methodsFor: 'generated'!nodeVariables	^ #(#name #access #value)! !!CSMemberDeclaratorNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitMemberDeclarator: self! !!CSMemberDeclaratorNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!CSMemberDeclaratorNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !!CSMemberDeclaratorNode methodsFor: 'generated'!access	^ access! !CSProgramNode subclass: #CSMemberInitializerNode	instanceVariableNames: 'identifier leftBracketToken arguments commaTokens rightBracketToken equalToken value'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSMemberInitializerNode methodsFor: 'generated'!value: aCSProgramNode	self value notNil		ifTrue: [ self value parent: nil ].	value := aCSProgramNode.	self value notNil		ifTrue: [ self value parent: self ]! !!CSMemberInitializerNode methodsFor: 'generated'!equalToken	^ equalToken! !!CSMemberInitializerNode methodsFor: 'generated'!arguments	^ arguments! !!CSMemberInitializerNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitMemberInitializer: self! !!CSMemberInitializerNode methodsFor: 'generated'!arguments: anOrderedCollection	self setParents: self arguments to: nil.	arguments := anOrderedCollection.	self setParents: self arguments to: self! !!CSMemberInitializerNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSMemberInitializerNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSMemberInitializerNode methodsFor: 'generated'!value	^ value! !!CSMemberInitializerNode methodsFor: 'generated'!rightBracketToken: aSmaCCToken	rightBracketToken := aSmaCCToken! !!CSMemberInitializerNode methodsFor: 'generated'!leftBracketToken: aSmaCCToken	leftBracketToken := aSmaCCToken! !!CSMemberInitializerNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSMemberInitializerNode methodsFor: 'generated'!tokenVariables	^ #(#identifier #leftBracketToken #rightBracketToken #equalToken)! !!CSMemberInitializerNode methodsFor: 'generated'!identifier: aSmaCCToken	identifier := aSmaCCToken! !!CSMemberInitializerNode methodsFor: 'generated'!compositeNodeVariables	^ #(#arguments)! !!CSMemberInitializerNode methodsFor: 'generated'!nodeVariables	^ #(#value)! !!CSMemberInitializerNode methodsFor: 'generated'!identifier	^ identifier! !!CSMemberInitializerNode methodsFor: 'generated'!rightBracketToken	^ rightBracketToken! !!CSMemberInitializerNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !!CSMemberInitializerNode methodsFor: 'generated'!leftBracketToken	^ leftBracketToken! !!CSMemberInitializerNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	arguments := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSProgramNode subclass: #CSMethodBodyNode	instanceVariableNames: 'block equalGreaterThanToken expression semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSMethodBodyNode methodsFor: 'generated'!tokenVariables	^ #(#equalGreaterThanToken)! !!CSMethodBodyNode methodsFor: 'generated'!expression	^ expression! !!CSMethodBodyNode methodsFor: 'generated'!block	^ block! !!CSMethodBodyNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSMethodBodyNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSMethodBodyNode methodsFor: 'generated'!block: aCSBlockStatementNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aCSBlockStatementNode.	self block notNil		ifTrue: [ self block parent: self ]! !!CSMethodBodyNode methodsFor: 'generated'!equalGreaterThanToken	^ equalGreaterThanToken! !!CSMethodBodyNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitMethodBody: self! !!CSMethodBodyNode methodsFor: 'generated'!nodeVariables	^ #(#block #expression)! !!CSMethodBodyNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSMethodBodyNode methodsFor: 'generated'!equalGreaterThanToken: aSmaCCToken	equalGreaterThanToken := aSmaCCToken! !!CSMethodBodyNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !CSDeclarationNode subclass: #CSMethodDeclarationNode	instanceVariableNames: 'header body'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSMethodDeclarationNode methodsFor: 'generated'!body: aCSMethodBodyNode	self body notNil		ifTrue: [ self body parent: nil ].	body := aCSMethodBodyNode.	self body notNil		ifTrue: [ self body parent: self ]! !!CSMethodDeclarationNode methodsFor: 'generated'!header: aCSMethodHeaderNode	self header notNil		ifTrue: [ self header parent: nil ].	header := aCSMethodHeaderNode.	self header notNil		ifTrue: [ self header parent: self ]! !!CSMethodDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#header #body)! !!CSMethodDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitMethodDeclaration: self! !!CSMethodDeclarationNode methodsFor: 'generated'!header	^ header! !!CSMethodDeclarationNode methodsFor: 'generated'!body	^ body! !CSProgramNode subclass: #CSMethodHeaderNode	instanceVariableNames: '_attributes modifiers partialToken returnType name interface periodToken typeParameters leftParenToken parameters commas rightParenToken constraintClauses'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSMethodHeaderNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.	parameters := OrderedCollection new: 2.	commas := OrderedCollection new: 2.	constraintClauses := OrderedCollection new: 2.! !!CSMethodHeaderNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSMethodHeaderNode methodsFor: 'generated'!typeParameters: aCSTypeParameterListNode	self typeParameters notNil		ifTrue: [ self typeParameters parent: nil ].	typeParameters := aCSTypeParameterListNode.	self typeParameters notNil		ifTrue: [ self typeParameters parent: self ]! !!CSMethodHeaderNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSMethodHeaderNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSMethodHeaderNode methodsFor: 'generated'!typeParameters	^ typeParameters! !!CSMethodHeaderNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitMethodHeader: self! !!CSMethodHeaderNode methodsFor: 'generated'!periodToken	^ periodToken! !!CSMethodHeaderNode methodsFor: 'generated'!constraintClauses: anOrderedCollection	self setParents: self constraintClauses to: nil.	constraintClauses := anOrderedCollection.	self setParents: self constraintClauses to: self! !!CSMethodHeaderNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSMethodHeaderNode methodsFor: 'generated'!constraintClauses	^ constraintClauses! !!CSMethodHeaderNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSMethodHeaderNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSMethodHeaderNode methodsFor: 'generated'!interface: aCSTypeNode	self interface notNil		ifTrue: [ self interface parent: nil ].	interface := aCSTypeNode.	self interface notNil		ifTrue: [ self interface parent: self ]! !!CSMethodHeaderNode methodsFor: 'generated'!name	^ name! !!CSMethodHeaderNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSMethodHeaderNode methodsFor: 'generated'!commas	^ commas! !!CSMethodHeaderNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSMethodHeaderNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSMethodHeaderNode methodsFor: 'generated'!returnType	^ returnType! !!CSMethodHeaderNode methodsFor: 'generated'!returnType: aCSTypeNode	self returnType notNil		ifTrue: [ self returnType parent: nil ].	returnType := aCSTypeNode.	self returnType notNil		ifTrue: [ self returnType parent: self ]! !!CSMethodHeaderNode methodsFor: 'generated'!periodToken: aSmaCCToken	periodToken := aSmaCCToken! !!CSMethodHeaderNode methodsFor: 'generated'!partialToken: aSmaCCToken	partialToken := aSmaCCToken! !!CSMethodHeaderNode methodsFor: 'generated'!parameters: anOrderedCollection	self setParents: self parameters to: nil.	parameters := anOrderedCollection.	self setParents: self parameters to: self! !!CSMethodHeaderNode methodsFor: 'generated'!partialToken	^ partialToken! !!CSMethodHeaderNode methodsFor: 'generated'!interface	^ interface! !!CSMethodHeaderNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #parameters #constraintClauses)! !!CSMethodHeaderNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers #commas)! !!CSMethodHeaderNode methodsFor: 'generated'!tokenVariables	^ #(#partialToken #name #periodToken #leftParenToken #rightParenToken)! !!CSMethodHeaderNode methodsFor: 'generated'!nodeVariables	^ #(#returnType #interface #typeParameters)! !!CSMethodHeaderNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSMethodHeaderNode methodsFor: 'generated'!parameters	^ parameters! !CSProgramNode subclass: #CSNamedArgumentNode	instanceVariableNames: 'name equal value'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSNamedArgumentNode methodsFor: 'generated'!tokenVariables	^ #(#name #equal)! !!CSNamedArgumentNode methodsFor: 'generated'!value	^ value! !!CSNamedArgumentNode methodsFor: 'generated'!equal	^ equal! !!CSNamedArgumentNode methodsFor: 'generated'!nodeVariables	^ #(#value)! !!CSNamedArgumentNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitNamedArgument: self! !!CSNamedArgumentNode methodsFor: 'generated'!name	^ name! !!CSNamedArgumentNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSNamedArgumentNode methodsFor: 'generated'!equal: aSmaCCToken	equal := aSmaCCToken! !!CSNamedArgumentNode methodsFor: 'generated'!value: aCSExpressionNode	self value notNil		ifTrue: [ self value parent: nil ].	value := aCSExpressionNode.	self value notNil		ifTrue: [ self value parent: self ]! !CSExpressionNode subclass: #CSNamedEntityNode	instanceVariableNames: 'target periodToken identifierToken typeArguments'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSNamedEntityNode methodsFor: 'generated'!target	^ target! !!CSNamedEntityNode methodsFor: 'generated'!target: aCSExpressionNode	self target notNil		ifTrue: [ self target parent: nil ].	target := aCSExpressionNode.	self target notNil		ifTrue: [ self target parent: self ]! !!CSNamedEntityNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSNamedEntityNode methodsFor: 'generated'!tokenVariables	^ #(#periodToken #identifierToken)! !!CSNamedEntityNode methodsFor: 'generated'!typeArguments: aCSTypeArgumentListNode	self typeArguments notNil		ifTrue: [ self typeArguments parent: nil ].	typeArguments := aCSTypeArgumentListNode.	self typeArguments notNil		ifTrue: [ self typeArguments parent: self ]! !!CSNamedEntityNode methodsFor: 'generated'!nodeVariables	^ #(#target #typeArguments)! !!CSNamedEntityNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitNamedEntity: self! !!CSNamedEntityNode methodsFor: 'generated'!periodToken: aSmaCCToken	periodToken := aSmaCCToken! !!CSNamedEntityNode methodsFor: 'generated'!typeArguments	^ typeArguments! !!CSNamedEntityNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!CSNamedEntityNode methodsFor: 'generated'!periodToken	^ periodToken! !CSExpressionNode subclass: #CSNameofExpressionNode	instanceVariableNames: 'nameofToken leftParenToken name rightParenToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSNameofExpressionNode methodsFor: 'generated'!nameofToken: aSmaCCToken	nameofToken := aSmaCCToken! !!CSNameofExpressionNode methodsFor: 'generated'!name: aCSExpressionNode	self name notNil		ifTrue: [ self name parent: nil ].	name := aCSExpressionNode.	self name notNil		ifTrue: [ self name parent: self ]! !!CSNameofExpressionNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSNameofExpressionNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSNameofExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#nameofToken #leftParenToken #rightParenToken)! !!CSNameofExpressionNode methodsFor: 'generated'!name	^ name! !!CSNameofExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#name)! !!CSNameofExpressionNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSNameofExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitNameofExpression: self! !!CSNameofExpressionNode methodsFor: 'generated'!nameofToken	^ nameofToken! !!CSNameofExpressionNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !CSDeclarationNode subclass: #CSNamespaceDeclarationNode	instanceVariableNames: 'namespaceToken identifier leftBraceToken directives declarations rightBraceToken semicolon'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSNamespaceDeclarationNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!CSNamespaceDeclarationNode methodsFor: 'generated'!declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self! !!CSNamespaceDeclarationNode methodsFor: 'generated'!directives: anOrderedCollection	self setParents: self directives to: nil.	directives := anOrderedCollection.	self setParents: self directives to: self! !!CSNamespaceDeclarationNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!CSNamespaceDeclarationNode methodsFor: 'generated'!semicolon: aSmaCCToken	semicolon := aSmaCCToken! !!CSNamespaceDeclarationNode methodsFor: 'generated'!directives	^ directives! !!CSNamespaceDeclarationNode methodsFor: 'generated'!declarations	^ declarations! !!CSNamespaceDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#namespaceToken #leftBraceToken #rightBraceToken #semicolon)! !!CSNamespaceDeclarationNode methodsFor: 'generated'!identifier: aCSQualifiedIdentifierNode	self identifier notNil		ifTrue: [ self identifier parent: nil ].	identifier := aCSQualifiedIdentifierNode.	self identifier notNil		ifTrue: [ self identifier parent: self ]! !!CSNamespaceDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#directives #declarations)! !!CSNamespaceDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitNamespaceDeclaration: self! !!CSNamespaceDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#identifier)! !!CSNamespaceDeclarationNode methodsFor: 'generated'!semicolon	^ semicolon! !!CSNamespaceDeclarationNode methodsFor: 'generated'!namespaceToken	^ namespaceToken! !!CSNamespaceDeclarationNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!CSNamespaceDeclarationNode methodsFor: 'generated'!identifier	^ identifier! !!CSNamespaceDeclarationNode methodsFor: 'generated'!namespaceToken: aSmaCCToken	namespaceToken := aSmaCCToken! !!CSNamespaceDeclarationNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !!CSNamespaceDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	directives := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.! !CSElementAccessNode subclass: #CSNullConditionalElementAccessNode	instanceVariableNames: 'baseOperations questionMarkToken arguments'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSNullConditionalElementAccessNode methodsFor: 'generated'!baseOperations	^ baseOperations! !!CSNullConditionalElementAccessNode methodsFor: 'generated'!tokenVariables	^ #(#questionMarkToken #leftBracketToken #rightBracketToken)! !!CSNullConditionalElementAccessNode methodsFor: 'generated'!compositeNodeVariables	^ #(#arguments #expressions)! !!CSNullConditionalElementAccessNode methodsFor: 'generated'!nodeVariables	^ #(#baseOperations #baseExpression)! !!CSNullConditionalElementAccessNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitNullConditionalElementAccess: self! !!CSNullConditionalElementAccessNode methodsFor: 'generated'!baseOperations: aCSExpressionNode	self baseOperations notNil		ifTrue: [ self baseOperations parent: nil ].	baseOperations := aCSExpressionNode.	self baseOperations notNil		ifTrue: [ self baseOperations parent: self ]! !!CSNullConditionalElementAccessNode methodsFor: 'generated'!arguments	^ arguments! !!CSNullConditionalElementAccessNode methodsFor: 'generated'!arguments: anOrderedCollection	self setParents: self arguments to: nil.	arguments := anOrderedCollection.	self setParents: self arguments to: self! !!CSNullConditionalElementAccessNode methodsFor: 'generated'!questionMarkToken: aSmaCCToken	questionMarkToken := aSmaCCToken! !!CSNullConditionalElementAccessNode methodsFor: 'generated'!questionMarkToken	^ questionMarkToken! !!CSNullConditionalElementAccessNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	arguments := OrderedCollection new: 2.! !CSExpressionNode subclass: #CSNullConditionalExpressionNode	instanceVariableNames: 'expression nullConditionalOperation'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSNullConditionalExpressionNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSNullConditionalExpressionNode methodsFor: 'generated'!expression	^ expression! !!CSNullConditionalExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#expression #nullConditionalOperation)! !!CSNullConditionalExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitNullConditionalExpression: self! !!CSNullConditionalExpressionNode methodsFor: 'generated'!nullConditionalOperation	^ nullConditionalOperation! !!CSNullConditionalExpressionNode methodsFor: 'generated'!nullConditionalOperation: aCSExpressionNode	self nullConditionalOperation notNil		ifTrue: [ self nullConditionalOperation parent: nil ].	nullConditionalOperation := aCSExpressionNode.	self nullConditionalOperation notNil		ifTrue: [ self nullConditionalOperation parent: self ]! !CSInvocationExpressionNode subclass: #CSNullConditionalInvocationExpressionNode	instanceVariableNames: 'baseOperations'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSNullConditionalInvocationExpressionNode methodsFor: 'generated'!baseOperations: aCSExpressionNode	self baseOperations notNil		ifTrue: [ self baseOperations parent: nil ].	baseOperations := aCSExpressionNode.	self baseOperations notNil		ifTrue: [ self baseOperations parent: self ]! !!CSNullConditionalInvocationExpressionNode methodsFor: 'generated'!baseOperations	^ baseOperations! !!CSNullConditionalInvocationExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#baseOperations #expression)! !!CSNullConditionalInvocationExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitNullConditionalInvocationExpression: self! !CSMemberAccessNode subclass: #CSNullConditionalMemberAccessNode	instanceVariableNames: 'baseOperations questionMarkToken identifierToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSNullConditionalMemberAccessNode methodsFor: 'generated'!baseOperations	^ baseOperations! !!CSNullConditionalMemberAccessNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSNullConditionalMemberAccessNode methodsFor: 'generated'!questionMarkToken: aSmaCCToken	questionMarkToken := aSmaCCToken! !!CSNullConditionalMemberAccessNode methodsFor: 'generated'!nodeVariables	^ #(#baseOperations #expression #typeArguments)! !!CSNullConditionalMemberAccessNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitNullConditionalMemberAccess: self! !!CSNullConditionalMemberAccessNode methodsFor: 'generated'!questionMarkToken	^ questionMarkToken! !!CSNullConditionalMemberAccessNode methodsFor: 'generated'!tokenVariables	^ #(#questionMarkToken #identifierToken #periodToken #identifier)! !!CSNullConditionalMemberAccessNode methodsFor: 'generated'!baseOperations: aCSExpressionNode	self baseOperations notNil		ifTrue: [ self baseOperations parent: nil ].	baseOperations := aCSExpressionNode.	self baseOperations notNil		ifTrue: [ self baseOperations parent: self ]! !!CSNullConditionalMemberAccessNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !CSLiteralExpressionNode subclass: #CSNullLiteralExpressionNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSNullLiteralExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitNullLiteralExpression: self! !CSExpressionNode subclass: #CSObjectCreationExpressionNode	instanceVariableNames: 'newToken type leftParenToken arguments commaTokens rightParenToken initializer'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSObjectCreationExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	arguments := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !!CSObjectCreationExpressionNode methodsFor: 'generated'!initializer: aCSProgramNode	self initializer notNil		ifTrue: [ self initializer parent: nil ].	initializer := aCSProgramNode.	self initializer notNil		ifTrue: [ self initializer parent: self ]! !!CSObjectCreationExpressionNode methodsFor: 'generated'!arguments	^ arguments! !!CSObjectCreationExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitObjectCreationExpression: self! !!CSObjectCreationExpressionNode methodsFor: 'generated'!arguments: anOrderedCollection	self setParents: self arguments to: nil.	arguments := anOrderedCollection.	self setParents: self arguments to: self! !!CSObjectCreationExpressionNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSObjectCreationExpressionNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens #_leftParens #_rightParens)! !!CSObjectCreationExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSObjectCreationExpressionNode methodsFor: 'generated'!newToken	^ newToken! !!CSObjectCreationExpressionNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSObjectCreationExpressionNode methodsFor: 'generated'!type	^ type! !!CSObjectCreationExpressionNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSObjectCreationExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSObjectCreationExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#newToken #leftParenToken #rightParenToken)! !!CSObjectCreationExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#arguments)! !!CSObjectCreationExpressionNode methodsFor: 'generated'!initializer	^ initializer! !!CSObjectCreationExpressionNode methodsFor: 'generated'!newToken: aSmaCCToken	newToken := aSmaCCToken! !!CSObjectCreationExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#type #initializer)! !!CSObjectCreationExpressionNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSObjectCreationExpressionNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !CSProgramNode subclass: #CSObjectInitializerNode	instanceVariableNames: 'leftBraceToken initializers commaTokens rightBraceToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSObjectInitializerNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!CSObjectInitializerNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!CSObjectInitializerNode methodsFor: 'generated'!initializers: anOrderedCollection	self setParents: self initializers to: nil.	initializers := anOrderedCollection.	self setParents: self initializers to: self! !!CSObjectInitializerNode methodsFor: 'generated'!tokenVariables	^ #(#leftBraceToken #rightBraceToken)! !!CSObjectInitializerNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSObjectInitializerNode methodsFor: 'generated'!compositeNodeVariables	^ #(#initializers)! !!CSObjectInitializerNode methodsFor: 'generated'!initializers	^ initializers! !!CSObjectInitializerNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitObjectInitializer: self! !!CSObjectInitializerNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSObjectInitializerNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!CSObjectInitializerNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSObjectInitializerNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !!CSObjectInitializerNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	initializers := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSDeclarationNode subclass: #CSOperatorDeclarationNode	instanceVariableNames: '_attributes modifiers returnType operatorToken operator leftParenToken types arguments rightParenToken commaToken implicitToken explicitToken body'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSOperatorDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.	types := OrderedCollection new: 2.	arguments := OrderedCollection new: 2.! !!CSOperatorDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSOperatorDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSOperatorDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSOperatorDeclarationNode methodsFor: 'generated'!commaToken: aSmaCCToken	commaToken := aSmaCCToken! !!CSOperatorDeclarationNode methodsFor: 'generated'!arguments	^ arguments! !!CSOperatorDeclarationNode methodsFor: 'generated'!operator	^ operator! !!CSOperatorDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitOperatorDeclaration: self! !!CSOperatorDeclarationNode methodsFor: 'generated'!implicitToken: aSmaCCToken	implicitToken := aSmaCCToken! !!CSOperatorDeclarationNode methodsFor: 'generated'!arguments: anOrderedCollection	arguments := anOrderedCollection! !!CSOperatorDeclarationNode methodsFor: 'generated'!body	^ body! !!CSOperatorDeclarationNode methodsFor: 'generated'!operatorToken	^ operatorToken! !!CSOperatorDeclarationNode methodsFor: 'generated'!commaToken	^ commaToken! !!CSOperatorDeclarationNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSOperatorDeclarationNode methodsFor: 'generated'!types	^ types! !!CSOperatorDeclarationNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSOperatorDeclarationNode methodsFor: 'generated'!operator: aSmaCCToken	operator := aSmaCCToken! !!CSOperatorDeclarationNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSOperatorDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSOperatorDeclarationNode methodsFor: 'generated'!body: aCSMethodBodyNode	self body notNil		ifTrue: [ self body parent: nil ].	body := aCSMethodBodyNode.	self body notNil		ifTrue: [ self body parent: self ]! !!CSOperatorDeclarationNode methodsFor: 'generated'!returnType	^ returnType! !!CSOperatorDeclarationNode methodsFor: 'generated'!returnType: aCSTypeNode	self returnType notNil		ifTrue: [ self returnType parent: nil ].	returnType := aCSTypeNode.	self returnType notNil		ifTrue: [ self returnType parent: self ]! !!CSOperatorDeclarationNode methodsFor: 'generated'!explicitToken	^ explicitToken! !!CSOperatorDeclarationNode methodsFor: 'generated'!implicitToken	^ implicitToken! !!CSOperatorDeclarationNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#commaToken)! !!CSOperatorDeclarationNode methodsFor: 'generated'!types: anOrderedCollection	self setParents: self types to: nil.	types := anOrderedCollection.	self setParents: self types to: self! !!CSOperatorDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #types)! !!CSOperatorDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers #arguments)! !!CSOperatorDeclarationNode methodsFor: 'generated'!operatorToken: aSmaCCToken	operatorToken := aSmaCCToken! !!CSOperatorDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#returnType #body)! !!CSOperatorDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#operatorToken #operator #leftParenToken #rightParenToken #implicitToken #explicitToken)! !!CSOperatorDeclarationNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSOperatorDeclarationNode methodsFor: 'generated'!explicitToken: aSmaCCToken	explicitToken := aSmaCCToken! !CSExpressionNode subclass: #CSOutVariableDeclarationExpressionNode	instanceVariableNames: 'type name'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSOutVariableDeclarationExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#name)! !!CSOutVariableDeclarationExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSOutVariableDeclarationExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitOutVariableDeclarationExpression: self! !!CSOutVariableDeclarationExpressionNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSOutVariableDeclarationExpressionNode methodsFor: 'generated'!name	^ name! !!CSOutVariableDeclarationExpressionNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSOutVariableDeclarationExpressionNode methodsFor: 'generated'!type	^ type! !CSExpressionNode subclass: #CSPointerElementAccessNode	instanceVariableNames: 'expression leftBracketToken indexExpression rightBracketToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSPointerElementAccessNode methodsFor: 'generated'!rightBracketToken	^ rightBracketToken! !!CSPointerElementAccessNode methodsFor: 'generated'!indexExpression: aCSExpressionNode	self indexExpression notNil		ifTrue: [ self indexExpression parent: nil ].	indexExpression := aCSExpressionNode.	self indexExpression notNil		ifTrue: [ self indexExpression parent: self ]! !!CSPointerElementAccessNode methodsFor: 'generated'!expression	^ expression! !!CSPointerElementAccessNode methodsFor: 'generated'!rightBracketToken: aSmaCCToken	rightBracketToken := aSmaCCToken! !!CSPointerElementAccessNode methodsFor: 'generated'!leftBracketToken: aSmaCCToken	leftBracketToken := aSmaCCToken! !!CSPointerElementAccessNode methodsFor: 'generated'!tokenVariables	^ #(#leftBracketToken #rightBracketToken)! !!CSPointerElementAccessNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSPointerElementAccessNode methodsFor: 'generated'!leftBracketToken	^ leftBracketToken! !!CSPointerElementAccessNode methodsFor: 'generated'!nodeVariables	^ #(#expression #indexExpression)! !!CSPointerElementAccessNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitPointerElementAccess: self! !!CSPointerElementAccessNode methodsFor: 'generated'!indexExpression	^ indexExpression! !CSExpressionNode subclass: #CSPointerMemberAccessNode	instanceVariableNames: 'expression arrowToken name'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSPointerMemberAccessNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSPointerMemberAccessNode methodsFor: 'generated'!tokenVariables	^ #(#arrowToken #name)! !!CSPointerMemberAccessNode methodsFor: 'generated'!expression	^ expression! !!CSPointerMemberAccessNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSPointerMemberAccessNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitPointerMemberAccess: self! !!CSPointerMemberAccessNode methodsFor: 'generated'!arrowToken	^ arrowToken! !!CSPointerMemberAccessNode methodsFor: 'generated'!arrowToken: aSmaCCToken	arrowToken := aSmaCCToken! !!CSPointerMemberAccessNode methodsFor: 'generated'!name	^ name! !!CSPointerMemberAccessNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !CSExpressionNode subclass: #CSPostExpressionNode	instanceVariableNames: 'expression operator'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSPostExpressionNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSPostExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#operator)! !!CSPostExpressionNode methodsFor: 'generated'!expression	^ expression! !!CSPostExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSPostExpressionNode methodsFor: 'generated'!operator	^ operator! !!CSPostExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitPostExpression: self! !!CSPostExpressionNode methodsFor: 'generated'!operator: aSmaCCToken	operator := aSmaCCToken! !CSExpressionNode subclass: #CSPrefixExpressionNode	instanceVariableNames: 'operator expression'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSPrefixExpressionNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSPrefixExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#operator)! !!CSPrefixExpressionNode methodsFor: 'generated'!expression	^ expression! !!CSPrefixExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSPrefixExpressionNode methodsFor: 'generated'!operator	^ operator! !!CSPrefixExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitPrefixExpression: self! !!CSPrefixExpressionNode methodsFor: 'generated'!operator: aSmaCCToken	operator := aSmaCCToken! !CSProgramNode subclass: #CSPrimaryConstraintNode	instanceVariableNames: 'classToken structToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSPrimaryConstraintNode methodsFor: 'generated'!structToken	^ structToken! !!CSPrimaryConstraintNode methodsFor: 'generated'!tokenVariables	^ #(#classToken #structToken)! !!CSPrimaryConstraintNode methodsFor: 'generated'!classToken: aSmaCCToken	classToken := aSmaCCToken! !!CSPrimaryConstraintNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitPrimaryConstraint: self! !!CSPrimaryConstraintNode methodsFor: 'generated'!classToken	^ classToken! !!CSPrimaryConstraintNode methodsFor: 'generated'!structToken: aSmaCCToken	structToken := aSmaCCToken! !SmaCCParseNodeVisitor subclass: #CSProgramNodeVisitor	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSProgramNodeVisitor methodsFor: 'generated'!visitDeclarationStatement: aDeclarationStatement	^ self visitStatement: aDeclarationStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitNamespaceDeclaration: aNamespaceDeclaration	^ self visitDeclaration: aNamespaceDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitAttributeValue: anAttributeValue	^ self visitProgram: anAttributeValue! !!CSProgramNodeVisitor methodsFor: 'generated'!visitPointerType: aPointerType	^ self visitType: aPointerType! !!CSProgramNodeVisitor methodsFor: 'generated'!visitPropertyDeclaration: aPropertyDeclaration	^ self visitDeclaration: aPropertyDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitLiteralExpression: aLiteralExpression	^ self visitExpression: aLiteralExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitNamedArgument: aNamedArgument	^ self visitProgram: aNamedArgument! !!CSProgramNodeVisitor methodsFor: 'generated'!visitStatement: aStatement	^ self visitProgram: aStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitAssignment: anAssignment	^ self visitExpression: anAssignment! !!CSProgramNodeVisitor methodsFor: 'generated'!visitFieldDeclaration: aFieldDeclaration	^ self visitDeclaration: aFieldDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitClassDeclaration: aClassDeclaration	^ self visitDeclaration: aClassDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitUncheckedExpression: anUncheckedExpression	^ self visitExpression: anUncheckedExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitMemberAccess: aMemberAccess	^ self visitExpression: aMemberAccess! !!CSProgramNodeVisitor methodsFor: 'generated'!visitQueryExpression: aQueryExpression	^ self visitExpression: aQueryExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitInterfaceIndexerDeclaration: anInterfaceIndexerDeclaration	^ self visitDeclaration: anInterfaceIndexerDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitLambdaExpression: aLambdaExpression	^ self visitExpression: aLambdaExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitPointerMemberAccess: aPointerMemberAccess	^ self visitExpression: aPointerMemberAccess! !!CSProgramNodeVisitor methodsFor: 'generated'!visitStatementList: aStatementList	^ self visitProgram: aStatementList! !!CSProgramNodeVisitor methodsFor: 'generated'!visitUsingDirective: anUsingDirective	^ self visitProgram: anUsingDirective! !!CSProgramNodeVisitor methodsFor: 'generated'!visitAwaitExpression: anAwaitExpression	^ self visitExpression: anAwaitExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitAnonymousFunctionParameter: anAnonymousFunctionParameter	^ self visitProgram: anAnonymousFunctionParameter! !!CSProgramNodeVisitor methodsFor: 'generated'!visitVoidType: aVoidType	^ self visitType: aVoidType! !!CSProgramNodeVisitor methodsFor: 'generated'!visitConstantDeclarator: aConstantDeclarator	^ self visitProgram: aConstantDeclarator! !!CSProgramNodeVisitor methodsFor: 'generated'!visitNullConditionalMemberAccess: aNullConditionalMemberAccess	^ self visitMemberAccess: aNullConditionalMemberAccess! !!CSProgramNodeVisitor methodsFor: 'generated'!visitCompilationUnit: aCompilationUnit	^ self visitProgram: aCompilationUnit! !!CSProgramNodeVisitor methodsFor: 'generated'!visitCharacterLiteralExpression: aCharacterLiteralExpression	^ self visitLiteralExpression: aCharacterLiteralExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitAnonymousObjectCreationExpression: anAnonymousObjectCreationExpression	^ self visitExpression: anAnonymousObjectCreationExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitIntegerLiteralExpression: anIntegerLiteralExpression	^ self visitLiteralExpression: anIntegerLiteralExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitDelegateDeclaration: aDelegateDeclaration	^ self visitDeclaration: aDelegateDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitFixedParameter: aFixedParameter	^ self visitProgram: aFixedParameter! !!CSProgramNodeVisitor methodsFor: 'generated'!visitEventDeclaration: anEventDeclaration	^ self visitDeclaration: anEventDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitBaseAccess: aBaseAccess	^ self visitExpression: aBaseAccess! !!CSProgramNodeVisitor methodsFor: 'generated'!visitOutVariableDeclarationExpression: anOutVariableDeclarationExpression	^ self visitExpression: anOutVariableDeclarationExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitPointerElementAccess: aPointerElementAccess	^ self visitExpression: aPointerElementAccess! !!CSProgramNodeVisitor methodsFor: 'generated'!visitObjectCreationExpression: anObjectCreationExpression	^ self visitExpression: anObjectCreationExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitInterpolatedStringExpression: anInterpolatedStringExpression	^ self visitExpression: anInterpolatedStringExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitNullConditionalExpression: aNullConditionalExpression	^ self visitExpression: aNullConditionalExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitQualifiedIdentifier: aQualifiedIdentifier	^ self visitProgram: aQualifiedIdentifier! !!CSProgramNodeVisitor methodsFor: 'generated'!visitNullableType: aNullableType	^ self visitType: aNullableType! !!CSProgramNodeVisitor methodsFor: 'generated'!visitSimpleType: aSimpleType	^ self visitType: aSimpleType! !!CSProgramNodeVisitor methodsFor: 'generated'!visitTypeParameterConstraintsClause: aTypeParameterConstraintsClause	^ self visitProgram: aTypeParameterConstraintsClause! !!CSProgramNodeVisitor methodsFor: 'generated'!visitTypeParameterList: aTypeParameterList	^ self visitProgram: aTypeParameterList! !!CSProgramNodeVisitor methodsFor: 'generated'!visitLocalVariableDeclaration: aLocalVariableDeclaration	^ self visitDeclaration: aLocalVariableDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitOperatorDeclaration: anOperatorDeclaration	^ self visitDeclaration: anOperatorDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitObjectInitializer: anObjectInitializer	^ self visitProgram: anObjectInitializer! !!CSProgramNodeVisitor methodsFor: 'generated'!visitTypeofExpression: aTypeofExpression	^ self visitExpression: aTypeofExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitSwitchSection: aSwitchSection	^ self visitProgram: aSwitchSection! !!CSProgramNodeVisitor methodsFor: 'generated'!visitForeachStatement: aForeachStatement	^ self visitStatement: aForeachStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitInterfaceMethodDeclaration: anInterfaceMethodDeclaration	^ self visitDeclaration: anInterfaceMethodDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitFixedPointerDeclarator: aFixedPointerDeclarator	^ self visitProgram: aFixedPointerDeclarator! !!CSProgramNodeVisitor methodsFor: 'generated'!visitBreakStatement: aBreakStatement	^ self visitStatement: aBreakStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitCheckedExpression: aCheckedExpression	^ self visitExpression: aCheckedExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitGotoStatement: aGotoStatement	^ self visitStatement: aGotoStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitElementAccess: anElementAccess	^ self visitExpression: anElementAccess! !!CSProgramNodeVisitor methodsFor: 'generated'!visitCheckedStatement: aCheckedStatement	^ self visitStatement: aCheckedStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitInvocationExpression: anInvocationExpression	^ self visitExpression: anInvocationExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitSizeofExpression: aSizeofExpression	^ self visitExpression: aSizeofExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitExpression: anExpression	^ self visitProgram: anExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitStackallocInitializer: aStackallocInitializer	^ self visitProgram: aStackallocInitializer! !!CSProgramNodeVisitor methodsFor: 'generated'!visitStaticConstructorDeclaration: aStaticConstructorDeclaration	^ self visitDeclaration: aStaticConstructorDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitExpressionStatement: anExpressionStatement	^ self visitStatement: anExpressionStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitTypeExpression: aTypeExpression	^ self visitExpression: aTypeExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitStructDeclaration: aStructDeclaration	^ self visitDeclaration: aStructDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitYieldStatement: aYieldStatement	^ self visitStatement: aYieldStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitBinaryExpression: aBinaryExpression	^ self visitExpression: aBinaryExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitSwitchStatement: aSwitchStatement	^ self visitStatement: aSwitchStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitPrefixExpression: aPrefixExpression	^ self visitExpression: aPrefixExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitVariantTypeParameterList: aVariantTypeParameterList	^ self visitTypeParameterList: aVariantTypeParameterList! !!CSProgramNodeVisitor methodsFor: 'generated'!visitInterfaceDeclaration: anInterfaceDeclaration	^ self visitDeclaration: anInterfaceDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitCatchClause: aCatchClause	^ self visitProgram: aCatchClause! !!CSProgramNodeVisitor methodsFor: 'generated'!visitVariableDeclarator: aVariableDeclarator	^ self visitProgram: aVariableDeclarator! !!CSProgramNodeVisitor methodsFor: 'generated'!visitGetAccessorDeclaration: aGetAccessorDeclaration	^ self visitProgram: aGetAccessorDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitArgument: anArgument	^ self visitProgram: anArgument! !!CSProgramNodeVisitor methodsFor: 'generated'!visitConstDeclarator: aConstDeclarator	^ self visitProgram: aConstDeclarator! !!CSProgramNodeVisitor methodsFor: 'generated'!visitTypeArgumentList: aTypeArgumentList	^ self visitProgram: aTypeArgumentList! !!CSProgramNodeVisitor methodsFor: 'generated'!visitConstructorDeclaration: aConstructorDeclaration	^ self visitDeclaration: aConstructorDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitAnonymousMethodExpression: anAnonymousMethodExpression	^ self visitExpression: anAnonymousMethodExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitConstructorConstraint: aConstructorConstraint	^ self visitProgram: aConstructorConstraint! !!CSProgramNodeVisitor methodsFor: 'generated'!visitUsingStaticDirective: anUsingStaticDirective	^ self visitUsingDirective: anUsingStaticDirective! !!CSProgramNodeVisitor methodsFor: 'generated'!visitAddAccessorDeclaration: anAddAccessorDeclaration	^ self visitProgram: anAddAccessorDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitInterpolation: anInterpolation	^ self visitProgram: anInterpolation! !!CSProgramNodeVisitor methodsFor: 'generated'!visitContinueStatement: aContinueStatement	^ self visitStatement: aContinueStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitUnsafeStatement: anUnsafeStatement	^ self visitStatement: anUnsafeStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitElementInitializer: anElementInitializer	^ self visitProgram: anElementInitializer! !!CSProgramNodeVisitor methodsFor: 'generated'!visitIndexerDeclaration: anIndexerDeclaration	^ self visitDeclaration: anIndexerDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitConstantDeclaration: aConstantDeclaration	^ self visitDeclaration: aConstantDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitCollectionInitializer: aCollectionInitializer	^ self visitProgram: aCollectionInitializer! !!CSProgramNodeVisitor methodsFor: 'generated'!visitArrayInitializer: anArrayInitializer	^ self visitProgram: anArrayInitializer! !!CSProgramNodeVisitor methodsFor: 'generated'!visitBooleanLiteralExpression: aBooleanLiteralExpression	^ self visitLiteralExpression: aBooleanLiteralExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitArrayType: anArrayType	^ self visitType: anArrayType! !!CSProgramNodeVisitor methodsFor: 'generated'!visitMemberInitializer: aMemberInitializer	^ self visitProgram: aMemberInitializer! !!CSProgramNodeVisitor methodsFor: 'generated'!visitProgram: aProgram	^ self visitSmaCCParseNode: aProgram! !!CSProgramNodeVisitor methodsFor: 'generated'!visitQualifiedAliasMember: aQualifiedAliasMember	^ self visitType: aQualifiedAliasMember! !!CSProgramNodeVisitor methodsFor: 'generated'!visitLabeledStatement: aLabeledStatement	^ self visitStatement: aLabeledStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitEnumDeclaration: anEnumDeclaration	^ self visitDeclaration: anEnumDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitThrowStatement: aThrowStatement	^ self visitStatement: aThrowStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitEmptyStatement: anEmptyStatement	^ self visitStatement: anEmptyStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitMethodHeader: aMethodHeader	^ self visitProgram: aMethodHeader! !!CSProgramNodeVisitor methodsFor: 'generated'!visitDoStatement: aDoStatement	^ self visitStatement: aDoStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitUsingNamespaceDirective: anUsingNamespaceDirective	^ self visitUsingDirective: anUsingNamespaceDirective! !!CSProgramNodeVisitor methodsFor: 'generated'!visitSimpleName: aSimpleName	^ self visitExpression: aSimpleName! !!CSProgramNodeVisitor methodsFor: 'generated'!visitReturnStatement: aReturnStatement	^ self visitStatement: aReturnStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitUsingStatement: anUsingStatement	^ self visitStatement: anUsingStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitBlockStatement: aBlockStatement	^ self visitStatement: aBlockStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitExceptionFilter: anExceptionFilter	^ self visitProgram: anExceptionFilter! !!CSProgramNodeVisitor methodsFor: 'generated'!visitMemberDeclarator: aMemberDeclarator	^ self visitProgram: aMemberDeclarator! !!CSProgramNodeVisitor methodsFor: 'generated'!visitTryStatement: aTryStatement	^ self visitStatement: aTryStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitBaseExpression: aBaseExpression	^ self visitExpression: aBaseExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitExplicitAnonymousFunctionSignature: anExplicitAnonymousFunctionSignature	^ self visitProgram: anExplicitAnonymousFunctionSignature! !!CSProgramNodeVisitor methodsFor: 'generated'!visitStringLiteralExpression: aStringLiteralExpression	^ self visitLiteralExpression: aStringLiteralExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitFixedStatement: aFixedStatement	^ self visitStatement: aFixedStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitLocalConstantDeclaration: aLocalConstantDeclaration	^ self visitDeclaration: aLocalConstantDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitImplicitAnonymousFunctionSignature: anImplicitAnonymousFunctionSignature	^ self visitProgram: anImplicitAnonymousFunctionSignature! !!CSProgramNodeVisitor methodsFor: 'generated'!visitPostExpression: aPostExpression	^ self visitExpression: aPostExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitNameofExpression: aNameofExpression	^ self visitExpression: aNameofExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitVarType: aVarType	^ self visitType: aVarType! !!CSProgramNodeVisitor methodsFor: 'generated'!visitNullLiteralExpression: aNullLiteralExpression	^ self visitLiteralExpression: aNullLiteralExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitFixedSizeBufferDeclaration: aFixedSizeBufferDeclaration	^ self visitDeclaration: aFixedSizeBufferDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitInterfaceEventDeclaration: anInterfaceEventDeclaration	^ self visitDeclaration: anInterfaceEventDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitDeclaration: aDeclaration	^ self visitProgram: aDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitDefaultValueExpression: aDefaultValueExpression	^ self visitExpression: aDefaultValueExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitIfStatement: anIfStatement	^ self visitStatement: anIfStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitRealLiteralExpression: aRealLiteralExpression	^ self visitLiteralExpression: aRealLiteralExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitNullConditionalElementAccess: aNullConditionalElementAccess	^ self visitElementAccess: aNullConditionalElementAccess! !!CSProgramNodeVisitor methodsFor: 'generated'!visitMethodDeclaration: aMethodDeclaration	^ self visitDeclaration: aMethodDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitAttribute: anAttribute	^ self visitProgram: anAttribute! !!CSProgramNodeVisitor methodsFor: 'generated'!visitSetAccessorDeclaration: aSetAccessorDeclaration	^ self visitProgram: aSetAccessorDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitConstructorInitializer: aConstructorInitializer	^ self visitProgram: aConstructorInitializer! !!CSProgramNodeVisitor methodsFor: 'generated'!visitTypeConstraint: aTypeConstraint	^ self visitProgram: aTypeConstraint! !!CSProgramNodeVisitor methodsFor: 'generated'!visitLocalVariableDeclarator: aLocalVariableDeclarator	^ self visitProgram: aLocalVariableDeclarator! !!CSProgramNodeVisitor methodsFor: 'generated'!visitConditionalExpression: aConditionalExpression	^ self visitExpression: aConditionalExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitNamedEntity: aNamedEntity	^ self visitExpression: aNamedEntity! !!CSProgramNodeVisitor methodsFor: 'generated'!visitArrayCreationExpression: anArrayCreationExpression	^ self visitExpression: anArrayCreationExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitType: aType	^ self visitProgram: aType! !!CSProgramNodeVisitor methodsFor: 'generated'!visitMethodBody: aMethodBody	^ self visitProgram: aMethodBody! !!CSProgramNodeVisitor methodsFor: 'generated'!visitFinallyClause: aFinallyClause	^ self visitProgram: aFinallyClause! !!CSProgramNodeVisitor methodsFor: 'generated'!visitExternAliasDirective: anExternAliasDirective	^ self visitProgram: anExternAliasDirective! !!CSProgramNodeVisitor methodsFor: 'generated'!visitCastExpression: aCastExpression	^ self visitExpression: aCastExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitPrimaryConstraint: aPrimaryConstraint	^ self visitProgram: aPrimaryConstraint! !!CSProgramNodeVisitor methodsFor: 'generated'!visitUnboundTypeName: anUnboundTypeName	^ self visitProgram: anUnboundTypeName! !!CSProgramNodeVisitor methodsFor: 'generated'!visitDestructorDeclaration: aDestructorDeclaration	^ self visitDeclaration: aDestructorDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitRankSpecifier: aRankSpecifier	^ self visitProgram: aRankSpecifier! !!CSProgramNodeVisitor methodsFor: 'generated'!visitForStatement: aForStatement	^ self visitStatement: aForStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitLockStatement: aLockStatement	^ self visitStatement: aLockStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitNullConditionalInvocationExpression: aNullConditionalInvocationExpression	^ self		visitInvocationExpression: aNullConditionalInvocationExpression! !!CSProgramNodeVisitor methodsFor: 'generated'!visitThisAccess: aThisAccess	^ self visitExpression: aThisAccess! !!CSProgramNodeVisitor methodsFor: 'generated'!visitWhileStatement: aWhileStatement	^ self visitStatement: aWhileStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitUsingAliasDirective: anUsingAliasDirective	^ self visitUsingDirective: anUsingAliasDirective! !!CSProgramNodeVisitor methodsFor: 'generated'!visitInterfacePropertyAccessor: anInterfacePropertyAccessor	^ self visitProgram: anInterfacePropertyAccessor! !!CSProgramNodeVisitor methodsFor: 'generated'!visitSwitchLabel: aSwitchLabel	^ self visitProgram: aSwitchLabel! !!CSProgramNodeVisitor methodsFor: 'generated'!visitFixedSizeBufferDeclarator: aFixedSizeBufferDeclarator	^ self visitProgram: aFixedSizeBufferDeclarator! !!CSProgramNodeVisitor methodsFor: 'generated'!visitInterfacePropertyDeclaration: anInterfacePropertyDeclaration	^ self visitDeclaration: anInterfacePropertyDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitUncheckedStatement: anUncheckedStatement	^ self visitStatement: anUncheckedStatement! !!CSProgramNodeVisitor methodsFor: 'generated'!visitRemoveAccessorDeclaration: aRemoveAccessorDeclaration	^ self visitProgram: aRemoveAccessorDeclaration! !!CSProgramNodeVisitor methodsFor: 'generated'!visitTypeName: aTypeName	^ self visitType: aTypeName! !!CSProgramNodeVisitor methodsFor: 'generated'!visitArrayParameter: anArrayParameter	^ self visitProgram: anArrayParameter! !!CSProgramNodeVisitor methodsFor: 'generated'!visitDelegateCreationExpression: aDelegateCreationExpression	^ self visitExpression: aDelegateCreationExpression! !CSDeclarationNode subclass: #CSPropertyDeclarationNode	instanceVariableNames: '_attributes modifiers type name interface periodToken leftBraceToken getAccessor setAccessor rightBraceToken equalToken initializer equalGreaterThanToken expression semicolon'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSPropertyDeclarationNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSPropertyDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSPropertyDeclarationNode methodsFor: 'generated'!initializer: aCSProgramNode	self initializer notNil		ifTrue: [ self initializer parent: nil ].	initializer := aCSProgramNode.	self initializer notNil		ifTrue: [ self initializer parent: self ]! !!CSPropertyDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSPropertyDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSPropertyDeclarationNode methodsFor: 'generated'!equalToken	^ equalToken! !!CSPropertyDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitPropertyDeclaration: self! !!CSPropertyDeclarationNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSPropertyDeclarationNode methodsFor: 'generated'!periodToken	^ periodToken! !!CSPropertyDeclarationNode methodsFor: 'generated'!setAccessor: aCSSetAccessorDeclarationNode	self setAccessor notNil		ifTrue: [ self setAccessor parent: nil ].	setAccessor := aCSSetAccessorDeclarationNode.	self setAccessor notNil		ifTrue: [ self setAccessor parent: self ]! !!CSPropertyDeclarationNode methodsFor: 'generated'!semicolon	^ semicolon! !!CSPropertyDeclarationNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSPropertyDeclarationNode methodsFor: 'generated'!interface: aCSTypeNode	self interface notNil		ifTrue: [ self interface parent: nil ].	interface := aCSTypeNode.	self interface notNil		ifTrue: [ self interface parent: self ]! !!CSPropertyDeclarationNode methodsFor: 'generated'!equalGreaterThanToken: aSmaCCToken	equalGreaterThanToken := aSmaCCToken! !!CSPropertyDeclarationNode methodsFor: 'generated'!getAccessor	^ getAccessor! !!CSPropertyDeclarationNode methodsFor: 'generated'!name	^ name! !!CSPropertyDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSPropertyDeclarationNode methodsFor: 'generated'!type	^ type! !!CSPropertyDeclarationNode methodsFor: 'generated'!equalGreaterThanToken	^ equalGreaterThanToken! !!CSPropertyDeclarationNode methodsFor: 'generated'!periodToken: aSmaCCToken	periodToken := aSmaCCToken! !!CSPropertyDeclarationNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !!CSPropertyDeclarationNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!CSPropertyDeclarationNode methodsFor: 'generated'!expression	^ expression! !!CSPropertyDeclarationNode methodsFor: 'generated'!getAccessor: aCSGetAccessorDeclarationNode	self getAccessor notNil		ifTrue: [ self getAccessor parent: nil ].	getAccessor := aCSGetAccessorDeclarationNode.	self getAccessor notNil		ifTrue: [ self getAccessor parent: self ]! !!CSPropertyDeclarationNode methodsFor: 'generated'!interface	^ interface! !!CSPropertyDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes)! !!CSPropertyDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers)! !!CSPropertyDeclarationNode methodsFor: 'generated'!initializer	^ initializer! !!CSPropertyDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#type #interface #getAccessor #setAccessor #initializer #expression)! !!CSPropertyDeclarationNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!CSPropertyDeclarationNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !!CSPropertyDeclarationNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!CSPropertyDeclarationNode methodsFor: 'generated'!semicolon: aSmaCCToken	semicolon := aSmaCCToken! !!CSPropertyDeclarationNode methodsFor: 'generated'!setAccessor	^ setAccessor! !!CSPropertyDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#name #periodToken #leftBraceToken #rightBraceToken #equalToken #semicolon #equalGreaterThanToken)! !!CSPropertyDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.! !CSProgramNode subclass: #CSQualifiedIdentifierNode	instanceVariableNames: 'names periodTokens'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSQualifiedIdentifierNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	names := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.! !!CSQualifiedIdentifierNode methodsFor: 'generated'!compositeTokenVariables	^ #(#names #periodTokens)! !!CSQualifiedIdentifierNode methodsFor: 'generated'!names	^ names! !!CSQualifiedIdentifierNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitQualifiedIdentifier: self! !!CSQualifiedIdentifierNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!CSQualifiedIdentifierNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!CSQualifiedIdentifierNode methodsFor: 'generated'!names: anOrderedCollection	names := anOrderedCollection! !CSExpressionNode subclass: #CSQueryExpressionNode	instanceVariableNames: 'fromTokens types identifierTokens inTokens expressions letTokens equalTokens whereTokens joinTokens joinInExpressions onTokens joinOnExpressions equalsTokens joinEqualsExpressions intoTokens orderbyTokens ascendingTokens descendingTokens commaTokens selectTokens groupTokens groupExpressions byTokens groupByExpressions'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSQueryExpressionNode methodsFor: 'generated'!byTokens	^ byTokens! !!CSQueryExpressionNode methodsFor: 'generated'!joinOnExpressions	^ joinOnExpressions! !!CSQueryExpressionNode methodsFor: 'generated'!fromTokens	^ fromTokens! !!CSQueryExpressionNode methodsFor: 'generated'!expressions	^ expressions! !!CSQueryExpressionNode methodsFor: 'generated'!intoTokens	^ intoTokens! !!CSQueryExpressionNode methodsFor: 'generated'!fromTokens: anOrderedCollection	fromTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!groupExpressions: anOrderedCollection	self setParents: self groupExpressions to: nil.	groupExpressions := anOrderedCollection.	self setParents: self groupExpressions to: self! !!CSQueryExpressionNode methodsFor: 'generated'!joinInExpressions	^ joinInExpressions! !!CSQueryExpressionNode methodsFor: 'generated'!joinOnExpressions: anOrderedCollection	self setParents: self joinOnExpressions to: nil.	joinOnExpressions := anOrderedCollection.	self setParents: self joinOnExpressions to: self! !!CSQueryExpressionNode methodsFor: 'generated'!joinEqualsExpressions: anOrderedCollection	self setParents: self joinEqualsExpressions to: nil.	joinEqualsExpressions := anOrderedCollection.	self setParents: self joinEqualsExpressions to: self! !!CSQueryExpressionNode methodsFor: 'generated'!onTokens: anOrderedCollection	onTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!orderbyTokens: anOrderedCollection	orderbyTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!groupTokens: anOrderedCollection	groupTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!joinEqualsExpressions	^ joinEqualsExpressions! !!CSQueryExpressionNode methodsFor: 'generated'!equalsTokens	^ equalsTokens! !!CSQueryExpressionNode methodsFor: 'generated'!descendingTokens	^ descendingTokens! !!CSQueryExpressionNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!selectTokens: anOrderedCollection	selectTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSQueryExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitQueryExpression: self! !!CSQueryExpressionNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!CSQueryExpressionNode methodsFor: 'generated'!joinTokens: anOrderedCollection	joinTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!orderbyTokens	^ orderbyTokens! !!CSQueryExpressionNode methodsFor: 'generated'!selectTokens	^ selectTokens! !!CSQueryExpressionNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!groupTokens	^ groupTokens! !!CSQueryExpressionNode methodsFor: 'generated'!equalsTokens: anOrderedCollection	equalsTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!letTokens	^ letTokens! !!CSQueryExpressionNode methodsFor: 'generated'!descendingTokens: anOrderedCollection	descendingTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens #_leftParens #_rightParens)! !!CSQueryExpressionNode methodsFor: 'generated'!whereTokens	^ whereTokens! !!CSQueryExpressionNode methodsFor: 'generated'!groupExpressions	^ groupExpressions! !!CSQueryExpressionNode methodsFor: 'generated'!expressions: anOrderedCollection	self setParents: self expressions to: nil.	expressions := anOrderedCollection.	self setParents: self expressions to: self! !!CSQueryExpressionNode methodsFor: 'generated'!ascendingTokens: anOrderedCollection	ascendingTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!types: anOrderedCollection	self setParents: self types to: nil.	types := anOrderedCollection.	self setParents: self types to: self! !!CSQueryExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#fromTokens #identifierTokens #inTokens #letTokens #equalTokens #whereTokens #joinTokens #onTokens #equalsTokens #intoTokens #orderbyTokens #ascendingTokens #descendingTokens #selectTokens #groupTokens #byTokens)! !!CSQueryExpressionNode methodsFor: 'generated'!joinInExpressions: anOrderedCollection	self setParents: self joinInExpressions to: nil.	joinInExpressions := anOrderedCollection.	self setParents: self joinInExpressions to: self! !!CSQueryExpressionNode methodsFor: 'generated'!whereTokens: anOrderedCollection	whereTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!onTokens	^ onTokens! !!CSQueryExpressionNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!CSQueryExpressionNode methodsFor: 'generated'!types	^ types! !!CSQueryExpressionNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!intoTokens: anOrderedCollection	intoTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!inTokens: anOrderedCollection	inTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!ascendingTokens	^ ascendingTokens! !!CSQueryExpressionNode methodsFor: 'generated'!joinTokens	^ joinTokens! !!CSQueryExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#types #expressions #joinInExpressions #joinOnExpressions #joinEqualsExpressions #groupExpressions #groupByExpressions)! !!CSQueryExpressionNode methodsFor: 'generated'!inTokens	^ inTokens! !!CSQueryExpressionNode methodsFor: 'generated'!byTokens: anOrderedCollection	byTokens := anOrderedCollection! !!CSQueryExpressionNode methodsFor: 'generated'!groupByExpressions	^ groupByExpressions! !!CSQueryExpressionNode methodsFor: 'generated'!groupByExpressions: anOrderedCollection	self setParents: self groupByExpressions to: nil.	groupByExpressions := anOrderedCollection.	self setParents: self groupByExpressions to: self! !!CSQueryExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	fromTokens := OrderedCollection new: 2.	types := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	inTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	whereTokens := OrderedCollection new: 2.	joinTokens := OrderedCollection new: 2.	joinInExpressions := OrderedCollection new: 2.	onTokens := OrderedCollection new: 2.	joinOnExpressions := OrderedCollection new: 2.	equalsTokens := OrderedCollection new: 2.	joinEqualsExpressions := OrderedCollection new: 2.	intoTokens := OrderedCollection new: 2.	orderbyTokens := OrderedCollection new: 2.	ascendingTokens := OrderedCollection new: 2.	descendingTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	selectTokens := OrderedCollection new: 2.	groupTokens := OrderedCollection new: 2.	groupExpressions := OrderedCollection new: 2.	byTokens := OrderedCollection new: 2.	groupByExpressions := OrderedCollection new: 2.! !CSProgramNode subclass: #CSRankSpecifierNode	instanceVariableNames: 'leftBracketToken commaTokens rightBracketToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSRankSpecifierNode methodsFor: 'generated'!rightBracketToken: aSmaCCToken	rightBracketToken := aSmaCCToken! !!CSRankSpecifierNode methodsFor: 'generated'!tokenVariables	^ #(#leftBracketToken #rightBracketToken)! !!CSRankSpecifierNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitRankSpecifier: self! !!CSRankSpecifierNode methodsFor: 'generated'!rightBracketToken	^ rightBracketToken! !!CSRankSpecifierNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSRankSpecifierNode methodsFor: 'generated'!leftBracketToken	^ leftBracketToken! !!CSRankSpecifierNode methodsFor: 'generated'!leftBracketToken: aSmaCCToken	leftBracketToken := aSmaCCToken! !!CSRankSpecifierNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSRankSpecifierNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSRankSpecifierNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	commaTokens := OrderedCollection new: 2.! !CSLiteralExpressionNode subclass: #CSRealLiteralExpressionNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSRealLiteralExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitRealLiteralExpression: self! !CSProgramNode subclass: #CSRemoveAccessorDeclarationNode	instanceVariableNames: '_attributes removeToken block'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSRemoveAccessorDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#removeToken)! !!CSRemoveAccessorDeclarationNode methodsFor: 'generated'!block	^ block! !!CSRemoveAccessorDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes)! !!CSRemoveAccessorDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSRemoveAccessorDeclarationNode methodsFor: 'generated'!block: aCSBlockStatementNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aCSBlockStatementNode.	self block notNil		ifTrue: [ self block parent: self ]! !!CSRemoveAccessorDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitRemoveAccessorDeclaration: self! !!CSRemoveAccessorDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSRemoveAccessorDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!CSRemoveAccessorDeclarationNode methodsFor: 'generated'!removeToken	^ removeToken! !!CSRemoveAccessorDeclarationNode methodsFor: 'generated'!removeToken: aSmaCCToken	removeToken := aSmaCCToken! !!CSRemoveAccessorDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.! !CSProgramNode subclass: #CSSetAccessorDeclarationNode	instanceVariableNames: '_attributes modifiers setToken body semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSSetAccessorDeclarationNode methodsFor: 'generated'!setToken: aSmaCCToken	setToken := aSmaCCToken! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers)! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!setToken	^ setToken! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!body	^ body! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#setToken)! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes)! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitSetAccessorDeclaration: self! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#body)! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!body: aCSBlockStatementNode	self body notNil		ifTrue: [ self body parent: nil ].	body := aCSBlockStatementNode.	self body notNil		ifTrue: [ self body parent: self ]! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSSetAccessorDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSSetAccessorDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.! !CSExpressionNode subclass: #CSSimpleNameNode	instanceVariableNames: 'identifierToken typeArguments'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSSimpleNameNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSSimpleNameNode methodsFor: 'generated'!tokenVariables	^ #(#identifierToken)! !!CSSimpleNameNode methodsFor: 'generated'!typeArguments	^ typeArguments! !!CSSimpleNameNode methodsFor: 'generated'!nodeVariables	^ #(#typeArguments)! !!CSSimpleNameNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitSimpleName: self! !!CSSimpleNameNode methodsFor: 'generated'!typeArguments: aCSTypeArgumentListNode	self typeArguments notNil		ifTrue: [ self typeArguments parent: nil ].	typeArguments := aCSTypeArgumentListNode.	self typeArguments notNil		ifTrue: [ self typeArguments parent: self ]! !!CSSimpleNameNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !CSExpressionNode subclass: #CSSizeofExpressionNode	instanceVariableNames: 'sizeofToken leftParenToken type rightParenToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSSizeofExpressionNode methodsFor: 'generated'!type	^ type! !!CSSizeofExpressionNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSSizeofExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#sizeofToken #leftParenToken #rightParenToken)! !!CSSizeofExpressionNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSSizeofExpressionNode methodsFor: 'generated'!sizeofToken: aSmaCCToken	sizeofToken := aSmaCCToken! !!CSSizeofExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSSizeofExpressionNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSSizeofExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitSizeofExpression: self! !!CSSizeofExpressionNode methodsFor: 'generated'!sizeofToken	^ sizeofToken! !!CSSizeofExpressionNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSSizeofExpressionNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !CSProgramNode subclass: #CSStackallocInitializerNode	instanceVariableNames: 'stackallocToken type leftBracketToken expression rightBracketToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSStackallocInitializerNode methodsFor: 'generated'!rightBracketToken	^ rightBracketToken! !!CSStackallocInitializerNode methodsFor: 'generated'!type	^ type! !!CSStackallocInitializerNode methodsFor: 'generated'!stackallocToken	^ stackallocToken! !!CSStackallocInitializerNode methodsFor: 'generated'!tokenVariables	^ #(#stackallocToken #leftBracketToken #rightBracketToken)! !!CSStackallocInitializerNode methodsFor: 'generated'!expression	^ expression! !!CSStackallocInitializerNode methodsFor: 'generated'!rightBracketToken: aSmaCCToken	rightBracketToken := aSmaCCToken! !!CSStackallocInitializerNode methodsFor: 'generated'!leftBracketToken: aSmaCCToken	leftBracketToken := aSmaCCToken! !!CSStackallocInitializerNode methodsFor: 'generated'!stackallocToken: aSmaCCToken	stackallocToken := aSmaCCToken! !!CSStackallocInitializerNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSStackallocInitializerNode methodsFor: 'generated'!leftBracketToken	^ leftBracketToken! !!CSStackallocInitializerNode methodsFor: 'generated'!nodeVariables	^ #(#type #expression)! !!CSStackallocInitializerNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitStackallocInitializer: self! !!CSStackallocInitializerNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !CSProgramNode subclass: #CSStatementListNode	instanceVariableNames: 'expressions commaTokens'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSStatementListNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	expressions := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !!CSStatementListNode methodsFor: 'generated'!expressions	^ expressions! !!CSStatementListNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitStatementList: self! !!CSStatementListNode methodsFor: 'generated'!expressions: anOrderedCollection	self setParents: self expressions to: nil.	expressions := anOrderedCollection.	self setParents: self expressions to: self! !!CSStatementListNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSStatementListNode methodsFor: 'generated'!compositeNodeVariables	^ #(#expressions)! !!CSStatementListNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSStatementListNode methodsFor: 'generated'!commaTokens	^ commaTokens! !CSProgramNode subclass: #CSStatementNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitStatement: self! !CSStatementNode subclass: #CSBlockStatementNode	instanceVariableNames: 'leftBraceToken statements rightBraceToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSBlockStatementNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!CSBlockStatementNode methodsFor: 'generated'!statements	^ statements! !!CSBlockStatementNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!CSBlockStatementNode methodsFor: 'generated'!tokenVariables	^ #(#leftBraceToken #rightBraceToken)! !!CSBlockStatementNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!CSBlockStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitBlockStatement: self! !!CSBlockStatementNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!CSBlockStatementNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!CSBlockStatementNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !!CSBlockStatementNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	statements := OrderedCollection new: 2.! !CSStatementNode subclass: #CSBreakStatementNode	instanceVariableNames: 'breakToken semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSBreakStatementNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSBreakStatementNode methodsFor: 'generated'!breakToken	^ breakToken! !!CSBreakStatementNode methodsFor: 'generated'!tokenVariables	^ #(#breakToken)! !!CSBreakStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSBreakStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitBreakStatement: self! !!CSBreakStatementNode methodsFor: 'generated'!breakToken: aSmaCCToken	breakToken := aSmaCCToken! !!CSBreakStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !CSStatementNode subclass: #CSCheckedStatementNode	instanceVariableNames: 'checkedToken block'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSCheckedStatementNode methodsFor: 'generated'!checkedToken	^ checkedToken! !!CSCheckedStatementNode methodsFor: 'generated'!tokenVariables	^ #(#checkedToken)! !!CSCheckedStatementNode methodsFor: 'generated'!block: aCSBlockStatementNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aCSBlockStatementNode.	self block notNil		ifTrue: [ self block parent: self ]! !!CSCheckedStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitCheckedStatement: self! !!CSCheckedStatementNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!CSCheckedStatementNode methodsFor: 'generated'!checkedToken: aSmaCCToken	checkedToken := aSmaCCToken! !!CSCheckedStatementNode methodsFor: 'generated'!block	^ block! !CSStatementNode subclass: #CSContinueStatementNode	instanceVariableNames: 'continueToken semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSContinueStatementNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSContinueStatementNode methodsFor: 'generated'!tokenVariables	^ #(#continueToken)! !!CSContinueStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSContinueStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitContinueStatement: self! !!CSContinueStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSContinueStatementNode methodsFor: 'generated'!continueToken	^ continueToken! !!CSContinueStatementNode methodsFor: 'generated'!continueToken: aSmaCCToken	continueToken := aSmaCCToken! !CSStatementNode subclass: #CSDeclarationStatementNode	instanceVariableNames: 'declaration semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSDeclarationStatementNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSDeclarationStatementNode methodsFor: 'generated'!nodeVariables	^ #(#declaration)! !!CSDeclarationStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitDeclarationStatement: self! !!CSDeclarationStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSDeclarationStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSDeclarationStatementNode methodsFor: 'generated'!declaration	^ declaration! !!CSDeclarationStatementNode methodsFor: 'generated'!declaration: aCSDeclarationNode	self declaration notNil		ifTrue: [ self declaration parent: nil ].	declaration := aCSDeclarationNode.	self declaration notNil		ifTrue: [ self declaration parent: self ]! !CSStatementNode subclass: #CSDoStatementNode	instanceVariableNames: 'doToken statement whileToken leftParenToken expression rightParenToken semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSDoStatementNode methodsFor: 'generated'!statement: aCSStatementNode	self statement notNil		ifTrue: [ self statement parent: nil ].	statement := aCSStatementNode.	self statement notNil		ifTrue: [ self statement parent: self ]! !!CSDoStatementNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSDoStatementNode methodsFor: 'generated'!doToken	^ doToken! !!CSDoStatementNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSDoStatementNode methodsFor: 'generated'!expression	^ expression! !!CSDoStatementNode methodsFor: 'generated'!statement	^ statement! !!CSDoStatementNode methodsFor: 'generated'!tokenVariables	^ #(#doToken #whileToken #leftParenToken #rightParenToken)! !!CSDoStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSDoStatementNode methodsFor: 'generated'!whileToken	^ whileToken! !!CSDoStatementNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSDoStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSDoStatementNode methodsFor: 'generated'!nodeVariables	^ #(#statement #expression)! !!CSDoStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitDoStatement: self! !!CSDoStatementNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSDoStatementNode methodsFor: 'generated'!whileToken: aSmaCCToken	whileToken := aSmaCCToken! !!CSDoStatementNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSDoStatementNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSDoStatementNode methodsFor: 'generated'!doToken: aSmaCCToken	doToken := aSmaCCToken! !CSStatementNode subclass: #CSEmptyStatementNode	instanceVariableNames: 'semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSEmptyStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSEmptyStatementNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSEmptyStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSEmptyStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitEmptyStatement: self! !CSStatementNode subclass: #CSExpressionStatementNode	instanceVariableNames: 'expression semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSExpressionStatementNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSExpressionStatementNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSExpressionStatementNode methodsFor: 'generated'!expression	^ expression! !!CSExpressionStatementNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSExpressionStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitExpressionStatement: self! !!CSExpressionStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSExpressionStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !CSStatementNode subclass: #CSFixedStatementNode	instanceVariableNames: 'fixedToken leftParenToken type declarators commaTokens rightParenToken statement'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSFixedStatementNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	declarators := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !!CSFixedStatementNode methodsFor: 'generated'!fixedToken	^ fixedToken! !!CSFixedStatementNode methodsFor: 'generated'!statement	^ statement! !!CSFixedStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitFixedStatement: self! !!CSFixedStatementNode methodsFor: 'generated'!declarators	^ declarators! !!CSFixedStatementNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSFixedStatementNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSFixedStatementNode methodsFor: 'generated'!statement: aCSStatementNode	self statement notNil		ifTrue: [ self statement parent: nil ].	statement := aCSStatementNode.	self statement notNil		ifTrue: [ self statement parent: self ]! !!CSFixedStatementNode methodsFor: 'generated'!fixedToken: aSmaCCToken	fixedToken := aSmaCCToken! !!CSFixedStatementNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSFixedStatementNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSFixedStatementNode methodsFor: 'generated'!type	^ type! !!CSFixedStatementNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSFixedStatementNode methodsFor: 'generated'!declarators: anOrderedCollection	self setParents: self declarators to: nil.	declarators := anOrderedCollection.	self setParents: self declarators to: self! !!CSFixedStatementNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSFixedStatementNode methodsFor: 'generated'!tokenVariables	^ #(#fixedToken #leftParenToken #rightParenToken)! !!CSFixedStatementNode methodsFor: 'generated'!compositeNodeVariables	^ #(#declarators)! !!CSFixedStatementNode methodsFor: 'generated'!nodeVariables	^ #(#type #statement)! !!CSFixedStatementNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSFixedStatementNode methodsFor: 'generated'!type: aCSPointerTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSPointerTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !CSStatementNode subclass: #CSForStatementNode	instanceVariableNames: 'forToken leftParenToken initializer semicolonTokens condition iterator rightParenToken statement'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSForStatementNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	semicolonTokens := OrderedCollection new: 2.! !!CSForStatementNode methodsFor: 'generated'!condition	^ condition! !!CSForStatementNode methodsFor: 'generated'!iterator: aCSStatementListNode	self iterator notNil		ifTrue: [ self iterator parent: nil ].	iterator := aCSStatementListNode.	self iterator notNil		ifTrue: [ self iterator parent: self ]! !!CSForStatementNode methodsFor: 'generated'!initializer: aCSProgramNode	self initializer notNil		ifTrue: [ self initializer parent: nil ].	initializer := aCSProgramNode.	self initializer notNil		ifTrue: [ self initializer parent: self ]! !!CSForStatementNode methodsFor: 'generated'!semicolonTokens: anOrderedCollection	semicolonTokens := anOrderedCollection! !!CSForStatementNode methodsFor: 'generated'!condition: aCSExpressionNode	self condition notNil		ifTrue: [ self condition parent: nil ].	condition := aCSExpressionNode.	self condition notNil		ifTrue: [ self condition parent: self ]! !!CSForStatementNode methodsFor: 'generated'!statement	^ statement! !!CSForStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitForStatement: self! !!CSForStatementNode methodsFor: 'generated'!forToken	^ forToken! !!CSForStatementNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#semicolonTokens)! !!CSForStatementNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSForStatementNode methodsFor: 'generated'!statement: aCSStatementNode	self statement notNil		ifTrue: [ self statement parent: nil ].	statement := aCSStatementNode.	self statement notNil		ifTrue: [ self statement parent: self ]! !!CSForStatementNode methodsFor: 'generated'!forToken: aSmaCCToken	forToken := aSmaCCToken! !!CSForStatementNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSForStatementNode methodsFor: 'generated'!semicolonTokens	^ semicolonTokens! !!CSForStatementNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSForStatementNode methodsFor: 'generated'!iterator	^ iterator! !!CSForStatementNode methodsFor: 'generated'!tokenVariables	^ #(#forToken #leftParenToken #rightParenToken)! !!CSForStatementNode methodsFor: 'generated'!initializer	^ initializer! !!CSForStatementNode methodsFor: 'generated'!nodeVariables	^ #(#initializer #condition #iterator #statement)! !!CSForStatementNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !CSStatementNode subclass: #CSForeachStatementNode	instanceVariableNames: 'foreachToken leftParenToken type name inToken expression rightParenToken statement'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSForeachStatementNode methodsFor: 'generated'!inToken	^ inToken! !!CSForeachStatementNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!CSForeachStatementNode methodsFor: 'generated'!statement	^ statement! !!CSForeachStatementNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSForeachStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitForeachStatement: self! !!CSForeachStatementNode methodsFor: 'generated'!foreachToken: aSmaCCToken	foreachToken := aSmaCCToken! !!CSForeachStatementNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSForeachStatementNode methodsFor: 'generated'!statement: aCSStatementNode	self statement notNil		ifTrue: [ self statement parent: nil ].	statement := aCSStatementNode.	self statement notNil		ifTrue: [ self statement parent: self ]! !!CSForeachStatementNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSForeachStatementNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSForeachStatementNode methodsFor: 'generated'!type	^ type! !!CSForeachStatementNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSForeachStatementNode methodsFor: 'generated'!name	^ name! !!CSForeachStatementNode methodsFor: 'generated'!foreachToken	^ foreachToken! !!CSForeachStatementNode methodsFor: 'generated'!expression	^ expression! !!CSForeachStatementNode methodsFor: 'generated'!tokenVariables	^ #(#foreachToken #leftParenToken #name #inToken #rightParenToken)! !!CSForeachStatementNode methodsFor: 'generated'!nodeVariables	^ #(#type #expression #statement)! !!CSForeachStatementNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSForeachStatementNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !CSStatementNode subclass: #CSGotoStatementNode	instanceVariableNames: 'gotoToken identifierToken semicolonToken caseToken expression defaultToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSGotoStatementNode methodsFor: 'generated'!caseToken	^ caseToken! !!CSGotoStatementNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSGotoStatementNode methodsFor: 'generated'!expression	^ expression! !!CSGotoStatementNode methodsFor: 'generated'!tokenVariables	^ #(#gotoToken #identifierToken #caseToken #defaultToken)! !!CSGotoStatementNode methodsFor: 'generated'!defaultToken: aSmaCCToken	defaultToken := aSmaCCToken! !!CSGotoStatementNode methodsFor: 'generated'!gotoToken: aSmaCCToken	gotoToken := aSmaCCToken! !!CSGotoStatementNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSGotoStatementNode methodsFor: 'generated'!caseToken: aSmaCCToken	caseToken := aSmaCCToken! !!CSGotoStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitGotoStatement: self! !!CSGotoStatementNode methodsFor: 'generated'!gotoToken	^ gotoToken! !!CSGotoStatementNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!CSGotoStatementNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSGotoStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSGotoStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSGotoStatementNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSGotoStatementNode methodsFor: 'generated'!defaultToken	^ defaultToken! !CSStatementNode subclass: #CSIfStatementNode	instanceVariableNames: 'ifToken leftParenToken expression rightParenToken thenStatement elseToken elseStatement'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSIfStatementNode methodsFor: 'generated'!thenStatement: aCSStatementNode	self thenStatement notNil		ifTrue: [ self thenStatement parent: nil ].	thenStatement := aCSStatementNode.	self thenStatement notNil		ifTrue: [ self thenStatement parent: self ]! !!CSIfStatementNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSIfStatementNode methodsFor: 'generated'!thenStatement	^ thenStatement! !!CSIfStatementNode methodsFor: 'generated'!ifToken	^ ifToken! !!CSIfStatementNode methodsFor: 'generated'!expression	^ expression! !!CSIfStatementNode methodsFor: 'generated'!elseStatement	^ elseStatement! !!CSIfStatementNode methodsFor: 'generated'!elseToken	^ elseToken! !!CSIfStatementNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSIfStatementNode methodsFor: 'generated'!tokenVariables	^ #(#ifToken #leftParenToken #rightParenToken #elseToken)! !!CSIfStatementNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSIfStatementNode methodsFor: 'generated'!elseToken: aSmaCCToken	elseToken := aSmaCCToken! !!CSIfStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitIfStatement: self! !!CSIfStatementNode methodsFor: 'generated'!ifToken: aSmaCCToken	ifToken := aSmaCCToken! !!CSIfStatementNode methodsFor: 'generated'!elseStatement: aCSStatementNode	self elseStatement notNil		ifTrue: [ self elseStatement parent: nil ].	elseStatement := aCSStatementNode.	self elseStatement notNil		ifTrue: [ self elseStatement parent: self ]! !!CSIfStatementNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSIfStatementNode methodsFor: 'generated'!nodeVariables	^ #(#expression #thenStatement #elseStatement)! !!CSIfStatementNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !CSStatementNode subclass: #CSLabeledStatementNode	instanceVariableNames: 'identifierToken colonToken statement'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSLabeledStatementNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSLabeledStatementNode methodsFor: 'generated'!colonToken: aSmaCCToken	colonToken := aSmaCCToken! !!CSLabeledStatementNode methodsFor: 'generated'!statement: aCSStatementNode	self statement notNil		ifTrue: [ self statement parent: nil ].	statement := aCSStatementNode.	self statement notNil		ifTrue: [ self statement parent: self ]! !!CSLabeledStatementNode methodsFor: 'generated'!nodeVariables	^ #(#statement)! !!CSLabeledStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitLabeledStatement: self! !!CSLabeledStatementNode methodsFor: 'generated'!statement	^ statement! !!CSLabeledStatementNode methodsFor: 'generated'!tokenVariables	^ #(#identifierToken #colonToken)! !!CSLabeledStatementNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!CSLabeledStatementNode methodsFor: 'generated'!colonToken	^ colonToken! !CSStatementNode subclass: #CSLockStatementNode	instanceVariableNames: 'lockToken leftParenToken expression rightParenToken statement'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSLockStatementNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSLockStatementNode methodsFor: 'generated'!lockToken: aSmaCCToken	lockToken := aSmaCCToken! !!CSLockStatementNode methodsFor: 'generated'!expression	^ expression! !!CSLockStatementNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSLockStatementNode methodsFor: 'generated'!statement	^ statement! !!CSLockStatementNode methodsFor: 'generated'!tokenVariables	^ #(#lockToken #leftParenToken #rightParenToken)! !!CSLockStatementNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSLockStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitLockStatement: self! !!CSLockStatementNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSLockStatementNode methodsFor: 'generated'!nodeVariables	^ #(#expression #statement)! !!CSLockStatementNode methodsFor: 'generated'!lockToken	^ lockToken! !!CSLockStatementNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSLockStatementNode methodsFor: 'generated'!statement: aCSStatementNode	self statement notNil		ifTrue: [ self statement parent: nil ].	statement := aCSStatementNode.	self statement notNil		ifTrue: [ self statement parent: self ]! !CSStatementNode subclass: #CSReturnStatementNode	instanceVariableNames: 'returnToken expression semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSReturnStatementNode methodsFor: 'generated'!tokenVariables	^ #(#returnToken)! !!CSReturnStatementNode methodsFor: 'generated'!expression	^ expression! !!CSReturnStatementNode methodsFor: 'generated'!returnToken	^ returnToken! !!CSReturnStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSReturnStatementNode methodsFor: 'generated'!returnToken: aSmaCCToken	returnToken := aSmaCCToken! !!CSReturnStatementNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSReturnStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSReturnStatementNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSReturnStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitReturnStatement: self! !!CSReturnStatementNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !CSDeclarationNode subclass: #CSStaticConstructorDeclarationNode	instanceVariableNames: '_attributes modifiers staticToken unsafeToken identifierToken leftParenToken rightParenToken block semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSStaticConstructorDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!unsafeToken: aSmaCCToken	unsafeToken := aSmaCCToken! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!block	^ block! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitStaticConstructorDeclaration: self! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!staticToken	^ staticToken! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!unsafeToken	^ unsafeToken! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!staticToken: aSmaCCToken	staticToken := aSmaCCToken! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes)! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers)! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!block: aCSBlockStatementNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aCSBlockStatementNode.	self block notNil		ifTrue: [ self block parent: self ]! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#staticToken #unsafeToken #identifierToken #leftParenToken #rightParenToken)! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSStaticConstructorDeclarationNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!CSStaticConstructorDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.! !CSLiteralExpressionNode subclass: #CSStringLiteralExpressionNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSStringLiteralExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitStringLiteralExpression: self! !CSDeclarationNode subclass: #CSStructDeclarationNode	instanceVariableNames: '_attributes modifiers partialToken structToken identifierToken typeParameters colonToken supertypes commas constraintClauses leftBraceToken declarations rightBraceToken semicolon'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSStructDeclarationNode methodsFor: 'generated'!modifiers: anOrderedCollection	modifiers := anOrderedCollection! !!CSStructDeclarationNode methodsFor: 'generated'!typeParameters: aCSTypeParameterListNode	self typeParameters notNil		ifTrue: [ self typeParameters parent: nil ].	typeParameters := aCSTypeParameterListNode.	self typeParameters notNil		ifTrue: [ self typeParameters parent: self ]! !!CSStructDeclarationNode methodsFor: 'generated'!modifiers	^ modifiers! !!CSStructDeclarationNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSStructDeclarationNode methodsFor: 'generated'!supertypes: anOrderedCollection	self setParents: self supertypes to: nil.	supertypes := anOrderedCollection.	self setParents: self supertypes to: self! !!CSStructDeclarationNode methodsFor: 'generated'!typeParameters	^ typeParameters! !!CSStructDeclarationNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitStructDeclaration: self! !!CSStructDeclarationNode methodsFor: 'generated'!colonToken: aSmaCCToken	colonToken := aSmaCCToken! !!CSStructDeclarationNode methodsFor: 'generated'!structToken	^ structToken! !!CSStructDeclarationNode methodsFor: 'generated'!constraintClauses: anOrderedCollection	self setParents: self constraintClauses to: nil.	constraintClauses := anOrderedCollection.	self setParents: self constraintClauses to: self! !!CSStructDeclarationNode methodsFor: 'generated'!constraintClauses	^ constraintClauses! !!CSStructDeclarationNode methodsFor: 'generated'!semicolon	^ semicolon! !!CSStructDeclarationNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSStructDeclarationNode methodsFor: 'generated'!commas	^ commas! !!CSStructDeclarationNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSStructDeclarationNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSStructDeclarationNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !!CSStructDeclarationNode methodsFor: 'generated'!partialToken: aSmaCCToken	partialToken := aSmaCCToken! !!CSStructDeclarationNode methodsFor: 'generated'!declarations	^ declarations! !!CSStructDeclarationNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!CSStructDeclarationNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!CSStructDeclarationNode methodsFor: 'generated'!partialToken	^ partialToken! !!CSStructDeclarationNode methodsFor: 'generated'!supertypes	^ supertypes! !!CSStructDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #supertypes #constraintClauses #declarations)! !!CSStructDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#modifiers #commas)! !!CSStructDeclarationNode methodsFor: 'generated'!semicolon: aSmaCCToken	semicolon := aSmaCCToken! !!CSStructDeclarationNode methodsFor: 'generated'!colonToken	^ colonToken! !!CSStructDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#typeParameters)! !!CSStructDeclarationNode methodsFor: 'generated'!structToken: aSmaCCToken	structToken := aSmaCCToken! !!CSStructDeclarationNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!CSStructDeclarationNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!CSStructDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#partialToken #structToken #identifierToken #colonToken #leftBraceToken #rightBraceToken #semicolon)! !!CSStructDeclarationNode methodsFor: 'generated'!declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self! !!CSStructDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	modifiers := OrderedCollection new: 2.	supertypes := OrderedCollection new: 2.	commas := OrderedCollection new: 2.	constraintClauses := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.! !CSProgramNode subclass: #CSSwitchLabelNode	instanceVariableNames: 'caseToken expression colonToken defaultToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSSwitchLabelNode methodsFor: 'generated'!caseToken	^ caseToken! !!CSSwitchLabelNode methodsFor: 'generated'!tokenVariables	^ #(#caseToken #colonToken #defaultToken)! !!CSSwitchLabelNode methodsFor: 'generated'!expression	^ expression! !!CSSwitchLabelNode methodsFor: 'generated'!defaultToken: aSmaCCToken	defaultToken := aSmaCCToken! !!CSSwitchLabelNode methodsFor: 'generated'!colonToken	^ colonToken! !!CSSwitchLabelNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSSwitchLabelNode methodsFor: 'generated'!caseToken: aSmaCCToken	caseToken := aSmaCCToken! !!CSSwitchLabelNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitSwitchLabel: self! !!CSSwitchLabelNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSSwitchLabelNode methodsFor: 'generated'!colonToken: aSmaCCToken	colonToken := aSmaCCToken! !!CSSwitchLabelNode methodsFor: 'generated'!defaultToken	^ defaultToken! !CSProgramNode subclass: #CSSwitchSectionNode	instanceVariableNames: 'labels statements'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSSwitchSectionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	labels := OrderedCollection new: 2.	statements := OrderedCollection new: 2.! !!CSSwitchSectionNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!CSSwitchSectionNode methodsFor: 'generated'!statements	^ statements! !!CSSwitchSectionNode methodsFor: 'generated'!labels: anOrderedCollection	self setParents: self labels to: nil.	labels := anOrderedCollection.	self setParents: self labels to: self! !!CSSwitchSectionNode methodsFor: 'generated'!labels	^ labels! !!CSSwitchSectionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitSwitchSection: self! !!CSSwitchSectionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#labels #statements)! !CSStatementNode subclass: #CSSwitchStatementNode	instanceVariableNames: 'switchToken leftParenToken expression rightParenToken leftBraceToken sections rightBraceToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSSwitchStatementNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	sections := OrderedCollection new: 2.! !!CSSwitchStatementNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!CSSwitchStatementNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!CSSwitchStatementNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSSwitchStatementNode methodsFor: 'generated'!switchToken	^ switchToken! !!CSSwitchStatementNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSSwitchStatementNode methodsFor: 'generated'!expression	^ expression! !!CSSwitchStatementNode methodsFor: 'generated'!tokenVariables	^ #(#switchToken #leftParenToken #rightParenToken #leftBraceToken #rightBraceToken)! !!CSSwitchStatementNode methodsFor: 'generated'!sections	^ sections! !!CSSwitchStatementNode methodsFor: 'generated'!compositeNodeVariables	^ #(#sections)! !!CSSwitchStatementNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSSwitchStatementNode methodsFor: 'generated'!sections: anOrderedCollection	self setParents: self sections to: nil.	sections := anOrderedCollection.	self setParents: self sections to: self! !!CSSwitchStatementNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSSwitchStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitSwitchStatement: self! !!CSSwitchStatementNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSSwitchStatementNode methodsFor: 'generated'!switchToken: aSmaCCToken	switchToken := aSmaCCToken! !!CSSwitchStatementNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!CSSwitchStatementNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSSwitchStatementNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !CSExpressionNode subclass: #CSThisAccessNode	instanceVariableNames: 'thisToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSThisAccessNode methodsFor: 'generated'!tokenVariables	^ #(#thisToken)! !!CSThisAccessNode methodsFor: 'generated'!thisToken	^ thisToken! !!CSThisAccessNode methodsFor: 'generated'!thisToken: aSmaCCToken	thisToken := aSmaCCToken! !!CSThisAccessNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitThisAccess: self! !CSStatementNode subclass: #CSThrowStatementNode	instanceVariableNames: 'throwToken expression semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSThrowStatementNode methodsFor: 'generated'!throwToken: aSmaCCToken	throwToken := aSmaCCToken! !!CSThrowStatementNode methodsFor: 'generated'!throwToken	^ throwToken! !!CSThrowStatementNode methodsFor: 'generated'!tokenVariables	^ #(#throwToken)! !!CSThrowStatementNode methodsFor: 'generated'!expression	^ expression! !!CSThrowStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSThrowStatementNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSThrowStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSThrowStatementNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSThrowStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitThrowStatement: self! !!CSThrowStatementNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !CSStatementNode subclass: #CSTryStatementNode	instanceVariableNames: 'tryToken block clauses finally'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSTryStatementNode methodsFor: 'generated'!tryToken	^ tryToken! !!CSTryStatementNode methodsFor: 'generated'!clauses	^ clauses! !!CSTryStatementNode methodsFor: 'generated'!tokenVariables	^ #(#tryToken)! !!CSTryStatementNode methodsFor: 'generated'!block	^ block! !!CSTryStatementNode methodsFor: 'generated'!compositeNodeVariables	^ #(#clauses)! !!CSTryStatementNode methodsFor: 'generated'!block: aCSBlockStatementNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aCSBlockStatementNode.	self block notNil		ifTrue: [ self block parent: self ]! !!CSTryStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitTryStatement: self! !!CSTryStatementNode methodsFor: 'generated'!nodeVariables	^ #(#block #finally)! !!CSTryStatementNode methodsFor: 'generated'!finally: aCSFinallyClauseNode	self finally notNil		ifTrue: [ self finally parent: nil ].	finally := aCSFinallyClauseNode.	self finally notNil		ifTrue: [ self finally parent: self ]! !!CSTryStatementNode methodsFor: 'generated'!finally	^ finally! !!CSTryStatementNode methodsFor: 'generated'!tryToken: aSmaCCToken	tryToken := aSmaCCToken! !!CSTryStatementNode methodsFor: 'generated'!clauses: anOrderedCollection	self setParents: self clauses to: nil.	clauses := anOrderedCollection.	self setParents: self clauses to: self! !!CSTryStatementNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	clauses := OrderedCollection new: 2.! !CSProgramNode subclass: #CSTypeArgumentListNode	instanceVariableNames: 'lessThanToken types commaTokens greaterThanToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSTypeArgumentListNode methodsFor: 'generated'!greaterThanToken	^ greaterThanToken! !!CSTypeArgumentListNode methodsFor: 'generated'!lessThanToken	^ lessThanToken! !!CSTypeArgumentListNode methodsFor: 'generated'!tokenVariables	^ #(#lessThanToken #greaterThanToken)! !!CSTypeArgumentListNode methodsFor: 'generated'!types: anOrderedCollection	self setParents: self types to: nil.	types := anOrderedCollection.	self setParents: self types to: self! !!CSTypeArgumentListNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSTypeArgumentListNode methodsFor: 'generated'!compositeNodeVariables	^ #(#types)! !!CSTypeArgumentListNode methodsFor: 'generated'!types	^ types! !!CSTypeArgumentListNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitTypeArgumentList: self! !!CSTypeArgumentListNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSTypeArgumentListNode methodsFor: 'generated'!greaterThanToken: aSmaCCToken	greaterThanToken := aSmaCCToken! !!CSTypeArgumentListNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSTypeArgumentListNode methodsFor: 'generated'!lessThanToken: aSmaCCToken	lessThanToken := aSmaCCToken! !!CSTypeArgumentListNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	types := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSProgramNode subclass: #CSTypeConstraintNode	instanceVariableNames: 'type'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSTypeConstraintNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSTypeConstraintNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSTypeConstraintNode methodsFor: 'generated'!type	^ type! !!CSTypeConstraintNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitTypeConstraint: self! !CSExpressionNode subclass: #CSTypeExpressionNode	instanceVariableNames: 'type'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSTypeExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSTypeExpressionNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSTypeExpressionNode methodsFor: 'generated'!type	^ type! !!CSTypeExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitTypeExpression: self! !CSProgramNode subclass: #CSTypeNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSTypeNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitType: self! !CSTypeNode subclass: #CSArrayTypeNode	instanceVariableNames: 'type rankSpecifiers'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSArrayTypeNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	rankSpecifiers := OrderedCollection new: 2.! !!CSArrayTypeNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSArrayTypeNode methodsFor: 'generated'!rankSpecifiers: anOrderedCollection	self setParents: self rankSpecifiers to: nil.	rankSpecifiers := anOrderedCollection.	self setParents: self rankSpecifiers to: self! !!CSArrayTypeNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitArrayType: self! !!CSArrayTypeNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSArrayTypeNode methodsFor: 'generated'!type	^ type! !!CSArrayTypeNode methodsFor: 'generated'!rankSpecifiers	^ rankSpecifiers! !!CSArrayTypeNode methodsFor: 'generated'!compositeNodeVariables	^ #(#rankSpecifiers)! !CSTypeNode subclass: #CSNullableTypeNode	instanceVariableNames: 'type questionMarkToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSNullableTypeNode methodsFor: 'generated'!tokenVariables	^ #(#questionMarkToken)! !!CSNullableTypeNode methodsFor: 'generated'!questionMarkToken: aSmaCCToken	questionMarkToken := aSmaCCToken! !!CSNullableTypeNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSNullableTypeNode methodsFor: 'generated'!questionMarkToken	^ questionMarkToken! !!CSNullableTypeNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitNullableType: self! !!CSNullableTypeNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSNullableTypeNode methodsFor: 'generated'!type	^ type! !CSTypeNode subclass: #CSPointerTypeNode	instanceVariableNames: 'type timesToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSPointerTypeNode methodsFor: 'generated'!tokenVariables	^ #(#timesToken)! !!CSPointerTypeNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSPointerTypeNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitPointerType: self! !!CSPointerTypeNode methodsFor: 'generated'!timesToken: aSmaCCToken	timesToken := aSmaCCToken! !!CSPointerTypeNode methodsFor: 'generated'!timesToken	^ timesToken! !!CSPointerTypeNode methodsFor: 'generated'!type	^ type! !!CSPointerTypeNode methodsFor: 'generated'!type: aCSTypeNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSTypeNode.	self type notNil		ifTrue: [ self type parent: self ]! !CSTypeNode subclass: #CSQualifiedAliasMemberNode	instanceVariableNames: 'global colonColonToken name typeArguments'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSQualifiedAliasMemberNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSQualifiedAliasMemberNode methodsFor: 'generated'!tokenVariables	^ #(#global #colonColonToken #name)! !!CSQualifiedAliasMemberNode methodsFor: 'generated'!typeArguments: aCSTypeArgumentListNode	self typeArguments notNil		ifTrue: [ self typeArguments parent: nil ].	typeArguments := aCSTypeArgumentListNode.	self typeArguments notNil		ifTrue: [ self typeArguments parent: self ]! !!CSQualifiedAliasMemberNode methodsFor: 'generated'!name	^ name! !!CSQualifiedAliasMemberNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitQualifiedAliasMember: self! !!CSQualifiedAliasMemberNode methodsFor: 'generated'!colonColonToken	^ colonColonToken! !!CSQualifiedAliasMemberNode methodsFor: 'generated'!nodeVariables	^ #(#typeArguments)! !!CSQualifiedAliasMemberNode methodsFor: 'generated'!typeArguments	^ typeArguments! !!CSQualifiedAliasMemberNode methodsFor: 'generated'!global	^ global! !!CSQualifiedAliasMemberNode methodsFor: 'generated'!colonColonToken: aSmaCCToken	colonColonToken := aSmaCCToken! !!CSQualifiedAliasMemberNode methodsFor: 'generated'!global: aSmaCCToken	global := aSmaCCToken! !CSTypeNode subclass: #CSSimpleTypeNode	instanceVariableNames: 'token'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSSimpleTypeNode methodsFor: 'generated'!token	^ token! !!CSSimpleTypeNode methodsFor: 'generated'!token: aSmaCCToken	token := aSmaCCToken! !!CSSimpleTypeNode methodsFor: 'generated'!tokenVariables	^ #(#token)! !!CSSimpleTypeNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitSimpleType: self! !CSTypeNode subclass: #CSTypeNameNode	instanceVariableNames: 'name typeArguments namespace periodToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSTypeNameNode methodsFor: 'generated'!namespace	^ namespace! !!CSTypeNameNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSTypeNameNode methodsFor: 'generated'!tokenVariables	^ #(#name #periodToken)! !!CSTypeNameNode methodsFor: 'generated'!typeArguments: aCSTypeArgumentListNode	self typeArguments notNil		ifTrue: [ self typeArguments parent: nil ].	typeArguments := aCSTypeArgumentListNode.	self typeArguments notNil		ifTrue: [ self typeArguments parent: self ]! !!CSTypeNameNode methodsFor: 'generated'!name	^ name! !!CSTypeNameNode methodsFor: 'generated'!nodeVariables	^ #(#typeArguments #namespace)! !!CSTypeNameNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitTypeName: self! !!CSTypeNameNode methodsFor: 'generated'!namespace: aCSTypeNode	self namespace notNil		ifTrue: [ self namespace parent: nil ].	namespace := aCSTypeNode.	self namespace notNil		ifTrue: [ self namespace parent: self ]! !!CSTypeNameNode methodsFor: 'generated'!typeArguments	^ typeArguments! !!CSTypeNameNode methodsFor: 'generated'!periodToken: aSmaCCToken	periodToken := aSmaCCToken! !!CSTypeNameNode methodsFor: 'generated'!periodToken	^ periodToken! !CSProgramNode subclass: #CSTypeParameterConstraintsClauseNode	instanceVariableNames: 'whereToken parameter colon constraints commaTokens'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!whereToken: aSmaCCToken	whereToken := aSmaCCToken! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!constraints: anOrderedCollection	self setParents: self constraints to: nil.	constraints := anOrderedCollection.	self setParents: self constraints to: self! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!tokenVariables	^ #(#whereToken #colon)! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!parameter: aCSTypeNameNode	self parameter notNil		ifTrue: [ self parameter parent: nil ].	parameter := aCSTypeNameNode.	self parameter notNil		ifTrue: [ self parameter parent: self ]! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!compositeNodeVariables	^ #(#constraints)! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitTypeParameterConstraintsClause: self! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!nodeVariables	^ #(#parameter)! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!colon: aSmaCCToken	colon := aSmaCCToken! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!parameter	^ parameter! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!colon	^ colon! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!constraints	^ constraints! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated'!whereToken	^ whereToken! !!CSTypeParameterConstraintsClauseNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	constraints := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSProgramNode subclass: #CSTypeParameterListNode	instanceVariableNames: 'lessThan _attributes parameters commaTokens greaterThan'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSTypeParameterListNode methodsFor: 'generated'!greaterThan	^ greaterThan! !!CSTypeParameterListNode methodsFor: 'generated'!parameters	^ parameters! !!CSTypeParameterListNode methodsFor: 'generated'!parameters: anOrderedCollection	self setParents: self parameters to: nil.	parameters := anOrderedCollection.	self setParents: self parameters to: self! !!CSTypeParameterListNode methodsFor: 'generated'!lessThan	^ lessThan! !!CSTypeParameterListNode methodsFor: 'generated'!tokenVariables	^ #(#lessThan #greaterThan)! !!CSTypeParameterListNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commaTokens)! !!CSTypeParameterListNode methodsFor: 'generated'!compositeNodeVariables	^ #(#_attributes #parameters)! !!CSTypeParameterListNode methodsFor: 'generated'!_attributes: anOrderedCollection	self setParents: self _attributes to: nil.	_attributes := anOrderedCollection.	self setParents: self _attributes to: self! !!CSTypeParameterListNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitTypeParameterList: self! !!CSTypeParameterListNode methodsFor: 'generated'!_attributes	^ _attributes! !!CSTypeParameterListNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!CSTypeParameterListNode methodsFor: 'generated'!greaterThan: aSmaCCToken	greaterThan := aSmaCCToken! !!CSTypeParameterListNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!CSTypeParameterListNode methodsFor: 'generated'!lessThan: aSmaCCToken	lessThan := aSmaCCToken! !!CSTypeParameterListNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_attributes := OrderedCollection new: 2.	parameters := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !CSExpressionNode subclass: #CSTypeofExpressionNode	instanceVariableNames: 'typeofToken leftParenToken type rightParenToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSTypeofExpressionNode methodsFor: 'generated'!type	^ type! !!CSTypeofExpressionNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSTypeofExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#typeofToken #leftParenToken #rightParenToken)! !!CSTypeofExpressionNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSTypeofExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!CSTypeofExpressionNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSTypeofExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitTypeofExpression: self! !!CSTypeofExpressionNode methodsFor: 'generated'!typeofToken: aSmaCCToken	typeofToken := aSmaCCToken! !!CSTypeofExpressionNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSTypeofExpressionNode methodsFor: 'generated'!type: aCSProgramNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aCSProgramNode.	self type notNil		ifTrue: [ self type parent: self ]! !!CSTypeofExpressionNode methodsFor: 'generated'!typeofToken	^ typeofToken! !CSProgramNode subclass: #CSUnboundTypeNameNode	instanceVariableNames: 'identifierTokens lessThanTokens commas gtTokens colonColonToken periodTokens'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSUnboundTypeNameNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commas := OrderedCollection new: 2.	gtTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.! !!CSUnboundTypeNameNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!CSUnboundTypeNameNode methodsFor: 'generated'!compositeTokenVariables	^ #(#identifierTokens #lessThanTokens #commas #gtTokens #periodTokens)! !!CSUnboundTypeNameNode methodsFor: 'generated'!gtTokens: anOrderedCollection	gtTokens := anOrderedCollection! !!CSUnboundTypeNameNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!CSUnboundTypeNameNode methodsFor: 'generated'!tokenVariables	^ #(#colonColonToken)! !!CSUnboundTypeNameNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!CSUnboundTypeNameNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSUnboundTypeNameNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitUnboundTypeName: self! !!CSUnboundTypeNameNode methodsFor: 'generated'!colonColonToken	^ colonColonToken! !!CSUnboundTypeNameNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!CSUnboundTypeNameNode methodsFor: 'generated'!colonColonToken: aSmaCCToken	colonColonToken := aSmaCCToken! !!CSUnboundTypeNameNode methodsFor: 'generated'!commas	^ commas! !!CSUnboundTypeNameNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!CSUnboundTypeNameNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!CSUnboundTypeNameNode methodsFor: 'generated'!gtTokens	^ gtTokens! !CSExpressionNode subclass: #CSUncheckedExpressionNode	instanceVariableNames: 'uncheckedToken leftParenToken expression rightParenToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSUncheckedExpressionNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSUncheckedExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#uncheckedToken #leftParenToken #rightParenToken)! !!CSUncheckedExpressionNode methodsFor: 'generated'!expression	^ expression! !!CSUncheckedExpressionNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSUncheckedExpressionNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSUncheckedExpressionNode methodsFor: 'generated'!uncheckedToken	^ uncheckedToken! !!CSUncheckedExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSUncheckedExpressionNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSUncheckedExpressionNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitUncheckedExpression: self! !!CSUncheckedExpressionNode methodsFor: 'generated'!uncheckedToken: aSmaCCToken	uncheckedToken := aSmaCCToken! !!CSUncheckedExpressionNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !CSStatementNode subclass: #CSUncheckedStatementNode	instanceVariableNames: 'uncheckedToken block'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSUncheckedStatementNode methodsFor: 'generated'!tokenVariables	^ #(#uncheckedToken)! !!CSUncheckedStatementNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!CSUncheckedStatementNode methodsFor: 'generated'!block: aCSBlockStatementNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aCSBlockStatementNode.	self block notNil		ifTrue: [ self block parent: self ]! !!CSUncheckedStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitUncheckedStatement: self! !!CSUncheckedStatementNode methodsFor: 'generated'!uncheckedToken	^ uncheckedToken! !!CSUncheckedStatementNode methodsFor: 'generated'!block	^ block! !!CSUncheckedStatementNode methodsFor: 'generated'!uncheckedToken: aSmaCCToken	uncheckedToken := aSmaCCToken! !CSStatementNode subclass: #CSUnsafeStatementNode	instanceVariableNames: 'unsafeToken block'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSUnsafeStatementNode methodsFor: 'generated'!tokenVariables	^ #(#unsafeToken)! !!CSUnsafeStatementNode methodsFor: 'generated'!unsafeToken: aSmaCCToken	unsafeToken := aSmaCCToken! !!CSUnsafeStatementNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!CSUnsafeStatementNode methodsFor: 'generated'!block: aCSBlockStatementNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aCSBlockStatementNode.	self block notNil		ifTrue: [ self block parent: self ]! !!CSUnsafeStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitUnsafeStatement: self! !!CSUnsafeStatementNode methodsFor: 'generated'!unsafeToken	^ unsafeToken! !!CSUnsafeStatementNode methodsFor: 'generated'!block	^ block! !CSProgramNode subclass: #CSUsingDirectiveNode	instanceVariableNames: 'usingToken namespace semicolonToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSUsingDirectiveNode methodsFor: 'generated'!namespace	^ namespace! !!CSUsingDirectiveNode methodsFor: 'generated'!tokenVariables	^ #(#usingToken)! !!CSUsingDirectiveNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSUsingDirectiveNode methodsFor: 'generated'!usingToken: aSmaCCToken	usingToken := aSmaCCToken! !!CSUsingDirectiveNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSUsingDirectiveNode methodsFor: 'generated'!nodeVariables	^ #(#namespace)! !!CSUsingDirectiveNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitUsingDirective: self! !!CSUsingDirectiveNode methodsFor: 'generated'!namespace: aCSTypeNode	self namespace notNil		ifTrue: [ self namespace parent: nil ].	namespace := aCSTypeNode.	self namespace notNil		ifTrue: [ self namespace parent: self ]! !!CSUsingDirectiveNode methodsFor: 'generated'!usingToken	^ usingToken! !!CSUsingDirectiveNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !CSUsingDirectiveNode subclass: #CSUsingAliasDirectiveNode	instanceVariableNames: 'name equalToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSUsingAliasDirectiveNode methodsFor: 'generated'!tokenVariables	^ #(#name #equalToken #usingToken)! !!CSUsingAliasDirectiveNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitUsingAliasDirective: self! !!CSUsingAliasDirectiveNode methodsFor: 'generated'!name	^ name! !!CSUsingAliasDirectiveNode methodsFor: 'generated'!equalToken	^ equalToken! !!CSUsingAliasDirectiveNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!CSUsingAliasDirectiveNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !CSUsingDirectiveNode subclass: #CSUsingNamespaceDirectiveNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSUsingNamespaceDirectiveNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitUsingNamespaceDirective: self! !CSStatementNode subclass: #CSUsingStatementNode	instanceVariableNames: 'usingToken leftParenToken expression rightParenToken statement'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSUsingStatementNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSUsingStatementNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSUsingStatementNode methodsFor: 'generated'!expression	^ expression! !!CSUsingStatementNode methodsFor: 'generated'!statement	^ statement! !!CSUsingStatementNode methodsFor: 'generated'!tokenVariables	^ #(#usingToken #leftParenToken #rightParenToken)! !!CSUsingStatementNode methodsFor: 'generated'!usingToken: aSmaCCToken	usingToken := aSmaCCToken! !!CSUsingStatementNode methodsFor: 'generated'!expression: aCSProgramNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSProgramNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSUsingStatementNode methodsFor: 'generated'!nodeVariables	^ #(#expression #statement)! !!CSUsingStatementNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSUsingStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitUsingStatement: self! !!CSUsingStatementNode methodsFor: 'generated'!usingToken	^ usingToken! !!CSUsingStatementNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSUsingStatementNode methodsFor: 'generated'!statement: aCSStatementNode	self statement notNil		ifTrue: [ self statement parent: nil ].	statement := aCSStatementNode.	self statement notNil		ifTrue: [ self statement parent: self ]! !CSUsingDirectiveNode subclass: #CSUsingStaticDirectiveNode	instanceVariableNames: 'staticToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSUsingStaticDirectiveNode methodsFor: 'generated'!staticToken: aSmaCCToken	staticToken := aSmaCCToken! !!CSUsingStaticDirectiveNode methodsFor: 'generated'!staticToken	^ staticToken! !!CSUsingStaticDirectiveNode methodsFor: 'generated'!tokenVariables	^ #(#staticToken #usingToken)! !!CSUsingStaticDirectiveNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitUsingStaticDirective: self! !CSTypeNode subclass: #CSVarTypeNode	instanceVariableNames: 'varToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSVarTypeNode methodsFor: 'generated'!varToken	^ varToken! !!CSVarTypeNode methodsFor: 'generated'!tokenVariables	^ #(#varToken)! !!CSVarTypeNode methodsFor: 'generated'!varToken: aSmaCCToken	varToken := aSmaCCToken! !!CSVarTypeNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitVarType: self! !CSProgramNode subclass: #CSVariableDeclaratorNode	instanceVariableNames: 'identifierToken equalToken initializer'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSVariableDeclaratorNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!CSVariableDeclaratorNode methodsFor: 'generated'!tokenVariables	^ #(#identifierToken #equalToken)! !!CSVariableDeclaratorNode methodsFor: 'generated'!nodeVariables	^ #(#initializer)! !!CSVariableDeclaratorNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitVariableDeclarator: self! !!CSVariableDeclaratorNode methodsFor: 'generated'!initializer	^ initializer! !!CSVariableDeclaratorNode methodsFor: 'generated'!initializer: aCSProgramNode	self initializer notNil		ifTrue: [ self initializer parent: nil ].	initializer := aCSProgramNode.	self initializer notNil		ifTrue: [ self initializer parent: self ]! !!CSVariableDeclaratorNode methodsFor: 'generated'!equalToken	^ equalToken! !!CSVariableDeclaratorNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!CSVariableDeclaratorNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !CSTypeParameterListNode subclass: #CSVariantTypeParameterListNode	instanceVariableNames: 'annotations'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSVariantTypeParameterListNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	annotations := OrderedCollection new: 2.! !!CSVariantTypeParameterListNode methodsFor: 'generated'!annotations: anOrderedCollection	annotations := anOrderedCollection! !!CSVariantTypeParameterListNode methodsFor: 'generated'!compositeTokenVariables	^ #(#annotations)! !!CSVariantTypeParameterListNode methodsFor: 'generated'!annotations	^ annotations! !!CSVariantTypeParameterListNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitVariantTypeParameterList: self! !CSTypeNode subclass: #CSVoidTypeNode	instanceVariableNames: 'voidToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSVoidTypeNode methodsFor: 'generated'!voidToken: aSmaCCToken	voidToken := aSmaCCToken! !!CSVoidTypeNode methodsFor: 'generated'!tokenVariables	^ #(#voidToken)! !!CSVoidTypeNode methodsFor: 'generated'!voidToken	^ voidToken! !!CSVoidTypeNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitVoidType: self! !CSStatementNode subclass: #CSWhileStatementNode	instanceVariableNames: 'whileToken leftParenToken expression rightParenToken statement'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSWhileStatementNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!CSWhileStatementNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!CSWhileStatementNode methodsFor: 'generated'!expression	^ expression! !!CSWhileStatementNode methodsFor: 'generated'!statement	^ statement! !!CSWhileStatementNode methodsFor: 'generated'!tokenVariables	^ #(#whileToken #leftParenToken #rightParenToken)! !!CSWhileStatementNode methodsFor: 'generated'!whileToken	^ whileToken! !!CSWhileStatementNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSWhileStatementNode methodsFor: 'generated'!nodeVariables	^ #(#expression #statement)! !!CSWhileStatementNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!CSWhileStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitWhileStatement: self! !!CSWhileStatementNode methodsFor: 'generated'!whileToken: aSmaCCToken	whileToken := aSmaCCToken! !!CSWhileStatementNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!CSWhileStatementNode methodsFor: 'generated'!statement: aCSStatementNode	self statement notNil		ifTrue: [ self statement parent: nil ].	statement := aCSStatementNode.	self statement notNil		ifTrue: [ self statement parent: self ]! !CSStatementNode subclass: #CSYieldStatementNode	instanceVariableNames: 'yieldToken returnToken expression semicolonToken breakToken'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSYieldStatementNode methodsFor: 'generated'!tokenVariables	^ #(#yieldToken #returnToken #breakToken)! !!CSYieldStatementNode methodsFor: 'generated'!expression	^ expression! !!CSYieldStatementNode methodsFor: 'generated'!returnToken	^ returnToken! !!CSYieldStatementNode methodsFor: 'generated'!breakToken	^ breakToken! !!CSYieldStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!CSYieldStatementNode methodsFor: 'generated'!breakToken: aSmaCCToken	breakToken := aSmaCCToken! !!CSYieldStatementNode methodsFor: 'generated'!expression: aCSExpressionNode	self expression notNil		ifTrue: [ self expression parent: nil ].	expression := aCSExpressionNode.	self expression notNil		ifTrue: [ self expression parent: self ]! !!CSYieldStatementNode methodsFor: 'generated'!returnToken: aSmaCCToken	returnToken := aSmaCCToken! !!CSYieldStatementNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitYieldStatement: self! !!CSYieldStatementNode methodsFor: 'generated'!nodeVariables	^ #(#expression)! !!CSYieldStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!CSYieldStatementNode methodsFor: 'generated'!yieldToken: aSmaCCToken	yieldToken := aSmaCCToken! !!CSYieldStatementNode methodsFor: 'generated'!yieldToken	^ yieldToken! !!CSYieldStatementNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#semicolonToken)! !SmaCCGLRParser subclass: #CSharpParser	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSharpParser methodsFor: 'private'!actionsForCurrentToken	| actions |	actions := super actionsForCurrentToken.	actions isEmpty		ifTrue: [ (currentToken ids includes: scanner rightBraceId)				ifTrue: [ | i scannerState stackItem |					i := nodeStack size.					scannerState := nil.					[ i > 0 and: [ scannerState isNil ] ]						whileTrue: [ stackItem := nodeStack at: i.							(stackItem = #interpolatedString or: [ stackItem = #interpolatedVerbatimString ])								ifTrue: [ scannerState := stackItem ].							i := i - 1 ].					scannerState notNil						ifTrue: [ self scope: scannerState.							self position: currentToken startPosition - 1.							currentToken := nil.							self getNextToken.							self scope: #default.							(currentToken ids includes: scanner rightBraceId)								ifTrue: [ ^ actions ].							^ self actionsForCurrentToken ] ].			(currentToken ids includes: scanner gtgtId)				ifTrue: [ currentToken := currentToken class value: '>' start: currentToken startPosition ids: (Array with: scanner gtId).					self position: currentToken startPosition.					actions := super actionsForCurrentToken ] ].	^ actions! !!CSharpParser methodsFor: 'private'!tryAllTokens	| id ids |	id := scanner IdentifierId.	ids := currentToken ids.	^ (ids includes: id)		ifTrue:			[ ids first = id				ifTrue: [ ^ false ].			^ (self class keywords includes: currentToken value) not ]		ifFalse: [ ^ false ]! !!CSharpParser methodsFor: 'accessing'!parse	| node |	node := super parse.	(node isKindOf: SmaCCParseNode)		ifTrue: [ node				attributeNamed: #preprocessorDirectives				put: scanner preprocessorDirectives ].	^ node! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForif_statement1: nodes	| result |	result := CSIfStatementNode new.	result ifToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result expression: (nodes at: 3).	result rightParenToken: (nodes at: 4).	result thenStatement: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFormember_initializer1: nodes	| result |	result := CSMemberInitializerNode new.	result identifier: ((nodes at: 1) at: 1).	result leftBracketToken: ((nodes at: 1) at: 2).	result addNodes: ((nodes at: 1) at: 3) to: result arguments.	result addTokens: ((nodes at: 1) at: 4) to: result commaTokens.	result rightBracketToken: ((nodes at: 1) at: 5).	result equalToken: (nodes at: 2).	result value: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForlock_statement1: nodes	| result |	result := CSLockStatementNode new.	result lockToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result expression: (nodes at: 3).	result rightParenToken: (nodes at: 4).	result statement: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForinterface_event_declaration1: nodes	| result |	result := CSInterfaceEventDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result modifier: (nodes at: 2).	result eventToken: (nodes at: 3).	result type: (nodes at: 4).	result name: (nodes at: 5).	result semicolon: (nodes at: 6).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForpost_increment_expression1: nodes	| result |	result := CSPostExpressionNode new.	result expression: (nodes at: 1).	result operator: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForassignment1: nodes	| result |	result := CSAssignmentNode new.	result lhs: (nodes at: 1).	result operator: (nodes at: 2).	result rhs: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForselect_or_group_clause2: nodes	| result |	result := Array new: 6.	result at: 3 put: ((nodes at: 1) at: 1).	result at: 4 put: ((nodes at: 1) at: 2).	result at: 5 put: ((nodes at: 1) at: 3).	result at: 6 put: ((nodes at: 1) at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForunchecked_statement1: nodes	| result |	result := CSUncheckedStatementNode new.	result uncheckedToken: (nodes at: 1).	result block: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornull_conditional_operations3: nodes	| result |	result := CSNullConditionalMemberAccessNode new.	result baseOperations: (nodes at: 1).	result periodToken: (nodes at: 2).	result identifierToken: (nodes at: 3).	result typeArguments: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornull_conditional_operations4: nodes	| result |	result := CSNullConditionalElementAccessNode new.	result baseOperations: (nodes at: 1).	result leftBracketToken: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result arguments.	result addTokens: ((nodes at: 3) at: 2) to: result commaTokens.	result rightBracketToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForsimple_name1: nodes	| result |	result := CSSimpleNameNode new.	result identifierToken: (nodes at: 1).	result typeArguments: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForexplicit_anonymous_function_paramenter1: nodes	| result |	result := CSAnonymousFunctionParameterNode new.	result modifier: (nodes at: 1).	result type: (nodes at: 2).	result name: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForlocal_variable_declaration1: nodes	| result |	result := CSLocalVariableDeclarationNode new.	result type: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result declarators.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFormember_declarator1: nodes	| result |	result := CSMemberDeclaratorNode new.	result name: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForstruct_interfaces1: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForquery_body_clause5: nodes	| result |	result := Array new: 19.	result at: 3 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 9 put: ((nodes at: 1) at: 1).	result at: 2 put: ((nodes at: 1) at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	result at: 4 put: ((nodes at: 1) at: 4).	result at: 10 put: ((nodes at: 1) at: 5).	result at: 11 put: ((nodes at: 1) at: 6).	result at: 12 put: ((nodes at: 1) at: 7).	result at: 13 put: ((nodes at: 1) at: 8).	result at: 14 put: ((nodes at: 1) at: 9).	result at: 15 put: ((nodes at: 1) at: 10).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForunary_operator_declarator1: nodes	| result |	result := Array new: 7.	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	result at: 3 put: (nodes at: 3).	result at: 4 put: (nodes at: 4).	result at: 5 put: (nodes at: 5).	result at: 6 put: (nodes at: 6).	result at: 7 put: (nodes at: 7).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForindexer_body2: nodes	| result |	result := Array new: 7.	result at: 5 put: (nodes at: 1).	result at: 6 put: (nodes at: 2).	result at: 7 put: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornamespace_body1: nodes	| result |	result := Array new: 4.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: (nodes at: 2) to: (result at: 2).	self addAll: (nodes at: 3) to: (result at: 2).	self addAll: (nodes at: 4) to: (result at: 3).	result at: 4 put: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFordelegate_declaration1: nodes	| result |	result := CSDelegateDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result delegateToken: (nodes at: 3).	result type: (nodes at: 4).	result name: (nodes at: 5).	result typeParameters: (nodes at: 6).	result leftParen: (nodes at: 7).	result addNodes: ((nodes at: 8) at: 1) to: result parameters.	result addTokens: ((nodes at: 8) at: 2) to: result commas.	result rightParen: (nodes at: 9).	result addNodes: (nodes at: 10) to: result constraintClauses.	result semicolon: (nodes at: 11).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForcontinue_statement1: nodes	| result |	result := CSContinueStatementNode new.	result continueToken: (nodes at: 1).	result semicolonToken: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornull_conditional_operations5: nodes	| result |	result := CSNullConditionalInvocationExpressionNode new.	result baseOperations: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result arguments.	result addTokens: ((nodes at: 3) at: 2) to: result commaTokens.	result rightParenToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForif_statement2: nodes	| result |	result := CSIfStatementNode new.	result ifToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result expression: (nodes at: 3).	result rightParenToken: (nodes at: 4).	result thenStatement: (nodes at: 5).	result elseToken: (nodes at: 6).	result elseStatement: (nodes at: 7).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForoperator_declarator1: nodes	| result |	result := Array new: 10.	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 1 put: ((nodes at: 1) at: 1).	result at: 2 put: ((nodes at: 1) at: 2).	result at: 3 put: ((nodes at: 1) at: 3).	result at: 4 put: ((nodes at: 1) at: 4).	self add: ((nodes at: 1) at: 5) to: (result at: 5).	self add: ((nodes at: 1) at: 6) to: (result at: 6).	result at: 7 put: ((nodes at: 1) at: 7).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFororderings2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 4).	self add: ((nodes at: 3) at: 1) to: (result at: 1).	self add: ((nodes at: 3) at: 2) to: (result at: 2).	self add: ((nodes at: 3) at: 3) to: (result at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForfor_statement1: nodes	| result |	result := CSForStatementNode new.	result forToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result initializer: (nodes at: 3).	result addToken: (nodes at: 4) to: result semicolonTokens.	result condition: (nodes at: 5).	result addToken: (nodes at: 6) to: result semicolonTokens.	result iterator: (nodes at: 7).	result rightParenToken: (nodes at: 8).	result statement: (nodes at: 9).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForvariable_declarator2: nodes	| result |	result := CSVariableDeclaratorNode new.	result identifierToken: (nodes at: 1).	result equalToken: (nodes at: 2).	result initializer: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForenum_member_declaration1: nodes	| result |	result := CSEnumDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result name: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForproperty_body1: nodes	| result |	result := Array new: 9.	result at: 1 put: (nodes at: 1).	result at: 2 put: ((nodes at: 2) at: 1).	result at: 3 put: ((nodes at: 2) at: 2).	result at: 4 put: (nodes at: 3).	result at: 5 put: ((nodes at: 4) at: 1).	result at: 6 put: ((nodes at: 4) at: 2).	result at: 7 put: ((nodes at: 4) at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFortype_parameter_list1: nodes	| result |	result := CSTypeParameterListNode new.	result lessThan: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.	result addNodes: ((nodes at: 2) at: 2) to: result parameters.	result addTokens: ((nodes at: 2) at: 3) to: result commaTokens.	result greaterThan: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFormethod_body3: nodes	| result |	result := CSMethodBodyNode new.	result semicolonToken: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornamed_entity2: nodes	| result |	result := CSNamedEntityNode new.	result target: (nodes at: 1).	result periodToken: (nodes at: 2).	result identifierToken: (nodes at: 3).	result typeArguments: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForStartInterpolatedVerbatimString1: nodes	^ #interpolatedVerbatimString! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForgoto_statement2: nodes	| result |	result := CSGotoStatementNode new.	result gotoToken: (nodes at: 1).	result caseToken: (nodes at: 2).	result expression: (nodes at: 3).	result semicolonToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFortype_parameter_constraints4: nodes	| result |	result := nodes at: 3.	self addFirst: (nodes at: 1) to: (result at: 1).	self addFirst: (nodes at: 2) to: (result at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_class_base1: nodes	| result |	result := Array new: 4.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFordefault_value_expression1: nodes	| result |	result := CSDefaultValueExpressionNode new.	result defaultToken: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForarray_type1: nodes	| result |	result := CSArrayTypeNode new.	result type: (nodes at: 1).	result addNodes: (nodes at: 2) to: result rankSpecifiers.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFortype_argument_list1: nodes	| result |	result := CSTypeArgumentListNode new.	result lessThanToken: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result types.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result greaterThanToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForvariable_declarator1: nodes	| result |	result := CSVariableDeclaratorNode new.	result identifierToken: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForconstructor_declarator1: nodes	| result |	result := Array new: 6.	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).	result at: 5 put: (nodes at: 4).	result at: 6 put: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForexplicit_anonymous_function_signature1: nodes	| result |	result := CSExplicitAnonymousFunctionSignatureNode new.	result leftParenToken: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result parameters.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result rightParenToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFortype_parameter_constraints7: nodes	| result |	result := nodes at: 3.	self addFirst: (nodes at: 1) to: (result at: 1).	self addFirst: (nodes at: 2) to: (result at: 2).	self add: (nodes at: 4) to: (result at: 2).	self add: (nodes at: 5) to: (result at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForfixed_pointer_declarator1: nodes	| result |	result := CSFixedPointerDeclaratorNode new.	result identifierToken: (nodes at: 1).	result equalToken: (nodes at: 2).	result andToken: ((nodes at: 3) at: 1).	result expression: ((nodes at: 3) at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornamed_argument1: nodes	| result |	result := CSNamedArgumentNode new.	result name: (nodes at: 1).	result equal: (nodes at: 2).	result value: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForattribute_arguments2: nodes	| result |	result := Array new: 4.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self add: (nodes at: 3) to: (result at: 3).	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).	result at: 4 put: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForliteral4: nodes	| result |	result := CSCharacterLiteralExpressionNode new.	result token: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFortype_parameters1: nodes	| result |	result := Array new: 3.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	self addAll: (nodes at: 1) to: (result at: 1).	self add: (nodes at: 2) to: (result at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForargument1: nodes	| result |	result := CSArgumentNode new.	result identifier: ((nodes at: 1) at: 1).	result colonToken: ((nodes at: 1) at: 2).	result expression: ((nodes at: 2) at: 1).	result refToken: ((nodes at: 2) at: 2).	result outToken: ((nodes at: 2) at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForobject_initializer2: nodes	| result |	result := CSObjectInitializerNode new.	result leftBraceToken: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result initializers.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result addToken: (nodes at: 3) to: result commaTokens.	result rightBraceToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForlocal_variable_declarator1: nodes	| result |	result := CSLocalVariableDeclaratorNode new.	result name: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForpointer_member_access1: nodes	| result |	result := CSPointerMemberAccessNode new.	result expression: (nodes at: 1).	result arrowToken: (nodes at: 2).	result name: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForcast_expression1: nodes	| result |	result := CSCastExpressionNode new.	result leftParenToken: (nodes at: 1).	result type: (nodes at: 2).	result rightParenToken: (nodes at: 3).	result expression: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFordestructor_declaration1: nodes	| result |	result := CSDestructorDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addToken: (nodes at: 2) to: result modifiers.	result addToken: (nodes at: 3) to: result modifiers.	result tildeToken: (nodes at: 4).	result identifierToken: (nodes at: 5).	result leftParenToken: (nodes at: 6).	result rightParenToken: (nodes at: 7).	result body: (nodes at: 8).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForcollection_initializer1: nodes	| result |	result := CSCollectionInitializerNode new.	result leftBraceToken: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result initializers.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result rightBraceToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForexpression_statement1: nodes	| result |	result := CSExpressionStatementNode new.	result expression: (nodes at: 1).	result semicolonToken: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForimplicit_anonymous_function_signature2: nodes	| result |	result := CSImplicitAnonymousFunctionSignatureNode new.	result addToken: (nodes at: 1) to: result names.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForconditional_expression2: nodes	| result |	result := CSConditionalExpressionNode new.	result booleanExpression: (nodes at: 1).	result questionMarkToken: (nodes at: 2).	result trueExpression: (nodes at: 3).	result colonToken: (nodes at: 4).	result falseExpression: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForthis_access1: nodes	| result |	result := CSThisAccessNode new.	result thisToken: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForvariant_type_parameter_list1: nodes	| result |	result := CSVariantTypeParameterListNode new.	result lessThan: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.	result addTokens: ((nodes at: 2) at: 2) to: result annotations.	result addNodes: ((nodes at: 2) at: 3) to: result parameters.	result addTokens: ((nodes at: 2) at: 4) to: result commaTokens.	result greaterThan: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForswitch_label1: nodes	| result |	result := CSSwitchLabelNode new.	result caseToken: (nodes at: 1).	result expression: (nodes at: 2).	result colonToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFororderings1: nodes	| result |	result := Array new: 4.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	self add: ((nodes at: 1) at: 1) to: (result at: 1).	self add: ((nodes at: 1) at: 2) to: (result at: 2).	self add: ((nodes at: 1) at: 3) to: (result at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForinterpolation2: nodes	| result |	result := CSInterpolationNode new.	result expression: (nodes at: 1).	result commaToken: (nodes at: 2).	result constant: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFordeclaration_statement1: nodes	| result |	result := CSDeclarationStatementNode new.	result declaration: (nodes at: 1).	result semicolonToken: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForarray_creation_expression1: nodes	| result |	result := CSArrayCreationExpressionNode new.	result newToken: (nodes at: 1).	result type: (nodes at: 2).	result leftBracketToken: (nodes at: 3).	result addNodes: ((nodes at: 4) at: 1) to: result expressions.	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.	result rightBracketToken: (nodes at: 5).	result addNodes: (nodes at: 6) to: result rankSpecifiers.	result arrayInitializer: (nodes at: 7).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForlocal_variable_type2: nodes	| result |	result := CSVarTypeNode new.	result varToken: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForfrom_clause1: nodes	| result |	result := Array new: 5.	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	result at: 3 put: (nodes at: 3).	result at: 4 put: (nodes at: 4).	result at: 5 put: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForbinary_operator_declarator1: nodes	| result |	result := Array new: 8.	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	result at: 3 put: (nodes at: 3).	result at: 4 put: (nodes at: 4).	self add: (nodes at: 5) to: (result at: 5).	self add: (nodes at: 6) to: (result at: 6).	result at: 7 put: (nodes at: 7).	self add: (nodes at: 8) to: (result at: 5).	self add: (nodes at: 9) to: (result at: 6).	result at: 8 put: (nodes at: 10).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForexception_filter1: nodes	| result |	result := CSExceptionFilterNode new.	result whenToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result expression: (nodes at: 3).	result rightParenToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForelement_access1: nodes	| result |	result := CSElementAccessNode new.	result baseExpression: (nodes at: 1).	result leftBracketToken: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result expressions.	result addTokens: ((nodes at: 3) at: 2) to: result commaTokens.	result rightBracketToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForinterface_declaration1: nodes	| result |	result := CSInterfaceDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result partialToken: (nodes at: 3).	result interfaceToken: (nodes at: 4).	result name: (nodes at: 5).	result typeParameters: (nodes at: 6).	result colon: ((nodes at: 7) at: 1).	result addNodes: ((nodes at: 7) at: 2) to: result supertypes.	result addTokens: ((nodes at: 7) at: 3) to: result commas.	result addNodes: (nodes at: 8) to: result constraintClauses.	result leftBrace: ((nodes at: 9) at: 1).	result addNodes: ((nodes at: 9) at: 2) to: result declarations.	result rightBrace: ((nodes at: 9) at: 3).	result semicolon: (nodes at: 10).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForblock1: nodes	| result |	result := CSBlockStatementNode new.	result leftBraceToken: (nodes at: 1).	result addNodes: (nodes at: 2) to: result statements.	result rightBraceToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForvariant_type_parameters2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 4).	self addAll: (nodes at: 3) to: (result at: 1).	self add: (nodes at: 4) to: (result at: 2).	self add: (nodes at: 5) to: (result at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_attribute_arguments1: nodes	| result |	result := Array new: 4.	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForlocal_variable_declarator2: nodes	| result |	result := CSLocalVariableDeclaratorNode new.	result name: (nodes at: 1).	result equalToken: (nodes at: 2).	result expression: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForinterpolated_string_expression1: nodes	| result |	result := CSInterpolatedStringExpressionNode new.	result addTokens: ((nodes at: 1) at: 1) to: result stringParts.	result addNodes: ((nodes at: 1) at: 2) to: result interpolations.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForcatch_clause1: nodes	| result |	result := CSCatchClauseNode new.	result catchToken: (nodes at: 1).	result leftParenToken: ((nodes at: 2) at: 1).	result type: ((nodes at: 2) at: 2).	result name: ((nodes at: 2) at: 3).	result rightParenToken: ((nodes at: 2) at: 4).	result filter: (nodes at: 3).	result block: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForanonymous_object_creation_expression1: nodes	| result |	result := CSAnonymousObjectCreationExpressionNode new.	result newToken: (nodes at: 1).	result leftBraceToken: ((nodes at: 2) at: 1).	result addNodes: ((nodes at: 2) at: 2) to: result declarators.	result addTokens: ((nodes at: 2) at: 3) to: result commaTokens.	result rightBraceToken: ((nodes at: 2) at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFordefault_value_expression2: nodes	| result |	result := CSDefaultValueExpressionNode new.	result defaultToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result type: (nodes at: 3).	result rightParenToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForpointer_element_access1: nodes	| result |	result := CSPointerElementAccessNode new.	result expression: (nodes at: 1).	result leftBracketToken: (nodes at: 2).	result indexExpression: (nodes at: 3).	result rightBracketToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForselect_or_group_clause1: nodes	| result |	result := Array new: 6.	result at: 1 put: ((nodes at: 1) at: 1).	result at: 2 put: ((nodes at: 1) at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFortry_statement3: nodes	| result |	result := CSTryStatementNode new.	result tryToken: (nodes at: 1).	result block: (nodes at: 2).	result addNodes: (nodes at: 3) to: result clauses.	result finally: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFortype_parameter_constraints_clause1: nodes	| result |	result := CSTypeParameterConstraintsClauseNode new.	result whereToken: (nodes at: 1).	result parameter: (nodes at: 2).	result colon: (nodes at: 3).	result addNodes: ((nodes at: 4) at: 1) to: result constraints.	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForfinally_clause1: nodes	| result |	result := CSFinallyClauseNode new.	result finallyToken: (nodes at: 1).	result block: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForcompilation_unit1: nodes	| result |	result := CSCompilationUnitNode new.	result addNodes: (nodes at: 1) to: result directives.	result addNodes: (nodes at: 2) to: result directives.	result addNodes: (nodes at: 3) to: result _attributes.	result addNodes: (nodes at: 4) to: result declarations.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForinterpolated_regular_string_body2: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	result at: 2 put: (nodes at: 2).	self add: (nodes at: 3) to: (result at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornull_conditional_invocation_expression1: nodes	| result |	result := CSNullConditionalInvocationExpressionNode new.	result expression: (nodes at: 1).	result baseOperations: (nodes at: 2).	result leftParenToken: (nodes at: 3).	result addNodes: ((nodes at: 4) at: 1) to: result arguments.	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.	result rightParenToken: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForindexer_body1: nodes	| result |	result := Array new: 7.	result at: 1 put: (nodes at: 1).	result at: 2 put: ((nodes at: 2) at: 1).	result at: 3 put: ((nodes at: 2) at: 2).	result at: 4 put: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForparenthesized_expression1: nodes	| result |	result := nodes at: 2.	result addFirstToken: (nodes at: 1) to: result _leftParens.	result addToken: (nodes at: 3) to: result _rightParens.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForattribute1: nodes	| result |	result := CSAttributeValueNode new.	result name: (nodes at: 1).	result leftParen: ((nodes at: 2) at: 1).	result rightParen: ((nodes at: 2) at: 2).	result addNodes: ((nodes at: 2) at: 3) to: result arguments.	result addTokens: ((nodes at: 2) at: 4) to: result commas.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForconstructor_initializer2: nodes	| result |	result := CSConstructorInitializerNode new.	result colonToken: (nodes at: 1).	result thisToken: (nodes at: 2).	result leftParenToken: (nodes at: 3).	result addNodes: ((nodes at: 4) at: 1) to: result arguments.	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.	result rightParenToken: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForliteral2: nodes	| result |	result := CSIntegerLiteralExpressionNode new.	result token: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForout_expression2: nodes	| result |	result := CSOutVariableDeclarationExpressionNode new.	result type: (nodes at: 1).	result name: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_explicit_anonymous_function_paramenter_list1: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForquery_body_clauses1: nodes	| result |	result := Array new: 19.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	self add: ((nodes at: 1) at: 1) to: (result at: 1).	self add: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self add: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self add: ((nodes at: 1) at: 6) to: (result at: 6).	self add: ((nodes at: 1) at: 7) to: (result at: 7).	self add: ((nodes at: 1) at: 8) to: (result at: 8).	self add: ((nodes at: 1) at: 9) to: (result at: 9).	self add: ((nodes at: 1) at: 10) to: (result at: 10).	self add: ((nodes at: 1) at: 11) to: (result at: 11).	self add: ((nodes at: 1) at: 12) to: (result at: 12).	self add: ((nodes at: 1) at: 13) to: (result at: 13).	self add: ((nodes at: 1) at: 14) to: (result at: 14).	self add: ((nodes at: 1) at: 15) to: (result at: 15).	self add: ((nodes at: 1) at: 16) to: (result at: 16).	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForswitch_label2: nodes	| result |	result := CSSwitchLabelNode new.	result defaultToken: (nodes at: 1).	result colonToken: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForchecked_expression1: nodes	| result |	result := CSCheckedExpressionNode new.	result checkedToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result expression: (nodes at: 3).	result rightParenToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForusing_statement1: nodes	| result |	result := CSUsingStatementNode new.	result usingToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result expression: (nodes at: 3).	result rightParenToken: (nodes at: 4).	result statement: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForgoto_statement3: nodes	| result |	result := CSGotoStatementNode new.	result gotoToken: (nodes at: 1).	result defaultToken: (nodes at: 2).	result semicolonToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForyield_statement2: nodes	| result |	result := CSYieldStatementNode new.	result yieldToken: (nodes at: 1).	result breakToken: (nodes at: 2).	result semicolonToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForarray_initializer1: nodes	| result |	result := CSArrayInitializerNode new.	result leftBraceToken: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result initializers.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result rightBraceToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForconstant_declaration1: nodes	| result |	result := CSConstantDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result constToken: (nodes at: 3).	result type: (nodes at: 4).	result addNodes: ((nodes at: 5) at: 1) to: result declarators.	result addTokens: ((nodes at: 5) at: 2) to: result commaTokens.	result semicolonToken: (nodes at: 6).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornull_conditional_operations1: nodes	| result |	result := CSNullConditionalMemberAccessNode new.	result baseOperations: (nodes at: 1).	result questionMarkToken: (nodes at: 2).	result periodToken: (nodes at: 3).	result identifierToken: (nodes at: 4).	result typeArguments: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForclass_declaration1: nodes	| result |	result := CSClassDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result partialToken: (nodes at: 3).	result classToken: (nodes at: 4).	result name: (nodes at: 5).	result typeParameters: (nodes at: 6).	result colonToken: ((nodes at: 7) at: 1).	result addNodes: ((nodes at: 7) at: 2) to: result supertypes.	result addTokens: ((nodes at: 7) at: 3) to: result commas.	result commaToken: ((nodes at: 7) at: 4).	result addNodes: (nodes at: 8) to: result constraintClauses.	result leftBraceToken: ((nodes at: 9) at: 1).	result addNodes: ((nodes at: 9) at: 2) to: result declarations.	result rightBraceToken: ((nodes at: 9) at: 3).	result semicolon: (nodes at: 10).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForattribute_section2: nodes	| result |	result := CSAttributeNode new.	result leftBracket: (nodes at: 1).	result target: ((nodes at: 2) at: 1).	result colon: ((nodes at: 2) at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result attributeValues.	result addTokens: ((nodes at: 3) at: 2) to: result commas.	result addToken: (nodes at: 4) to: result commas.	result rightBracket: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForparameter_array1: nodes	| result |	result := CSArrayParameterNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result paramsToken: (nodes at: 2).	result type: (nodes at: 3).	result name: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForevent_declaration2: nodes	| result |	result := CSEventDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result eventToken: (nodes at: 3).	result type: (nodes at: 4).	result name: ((nodes at: 5) at: 1).	result interface: ((nodes at: 5) at: 2).	result periodToken: ((nodes at: 5) at: 3).	result leftBraceToken: (nodes at: 6).	result addDeclaration: ((nodes at: 7) at: 1).	result removeDeclaration: ((nodes at: 7) at: 2).	result rightBraceToken: (nodes at: 8).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForfield_declaration1: nodes	| result |	result := CSFieldDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result type: (nodes at: 3).	result addNodes: ((nodes at: 4) at: 1) to: result declarators.	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.	result semicolonToken: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForaccessor_modifiers5: nodes	| result |	result := OrderedCollection new: 2.	self add: (nodes at: 1) to: result.	self add: (nodes at: 2) to: result.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForquery_body_clause1: nodes	| result |	result := Array new: 19.	result at: 3 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 1 put: ((nodes at: 1) at: 1).	result at: 2 put: ((nodes at: 1) at: 2).	self add: ((nodes at: 1) at: 3) to: (result at: 3).	result at: 4 put: ((nodes at: 1) at: 4).	self add: ((nodes at: 1) at: 5) to: (result at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornull_conditional_member_access1: nodes	| result |	result := CSNullConditionalMemberAccessNode new.	result expression: (nodes at: 1).	result baseOperations: (nodes at: 2).	result questionMarkToken: (nodes at: 3).	result periodToken: (nodes at: 4).	result identifierToken: (nodes at: 5).	result typeArguments: (nodes at: 6).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForattribute_target_specifier1: nodes	| result |	result := Array new: 2.	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForclass_base1: nodes	| result |	result := Array new: 4.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self add: (nodes at: 2) to: (result at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForquery_body_clause2: nodes	| result |	result := Array new: 19.	result at: 3 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 6 put: ((nodes at: 1) at: 1).	self add: ((nodes at: 1) at: 2) to: (result at: 3).	result at: 7 put: ((nodes at: 1) at: 3).	self add: ((nodes at: 1) at: 4) to: (result at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForquery_continuation1: nodes	| result |	result := Array new: 24.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self add: (nodes at: 2) to: (result at: 2).	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).	self addAll: ((nodes at: 3) at: 7) to: (result at: 8).	self addAll: ((nodes at: 3) at: 8) to: (result at: 9).	self addAll: ((nodes at: 3) at: 9) to: (result at: 10).	self addAll: ((nodes at: 3) at: 10) to: (result at: 11).	self addAll: ((nodes at: 3) at: 11) to: (result at: 12).	self addAll: ((nodes at: 3) at: 12) to: (result at: 13).	self addAll: ((nodes at: 3) at: 13) to: (result at: 14).	self addAll: ((nodes at: 3) at: 14) to: (result at: 15).	self addAll: ((nodes at: 3) at: 15) to: (result at: 1).	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForelement_initializer2: nodes	| result |	result := CSElementInitializerNode new.	result leftBraceToken: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result expressions.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result rightBraceToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForarray_creation_expression2: nodes	| result |	result := CSArrayCreationExpressionNode new.	result newToken: (nodes at: 1).	result type: (nodes at: 2).	result arrayInitializer: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForarray_creation_expression3: nodes	| result |	result := CSArrayCreationExpressionNode new.	result newToken: (nodes at: 1).	result addNode: (nodes at: 2) to: result rankSpecifiers.	result arrayInitializer: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForsimple_type2: nodes	| result |	result := CSSimpleTypeNode new.	result token: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForusing_namespace_directive1: nodes	| result |	result := CSUsingNamespaceDirectiveNode new.	result usingToken: (nodes at: 1).	result namespace: (nodes at: 2).	result semicolonToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForlambda_expression1: nodes	| result |	result := CSLambdaExpressionNode new.	result signature: (nodes at: 1).	result equalGreaterThanToken: (nodes at: 2).	result body: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForstatic_constructor_modifiers2: nodes	| result |	result := Array new: 3.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (nodes at: 1).	self add: (nodes at: 2) to: (result at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForfixed_statement1: nodes	| result |	result := CSFixedStatementNode new.	result fixedToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result type: (nodes at: 3).	result addNodes: ((nodes at: 4) at: 1) to: result declarators.	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.	result rightParenToken: (nodes at: 5).	result statement: (nodes at: 6).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForlocal_constant_declaration1: nodes	| result |	result := CSLocalConstantDeclarationNode new.	result constToken: (nodes at: 1).	result type: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result declarators.	result addTokens: ((nodes at: 3) at: 2) to: result commaTokens.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_local_variable_declarator_name1: nodes	| result |	result := CSSimpleNameNode new.	result identifierToken: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForunsafe_statement1: nodes	| result |	result := CSUnsafeStatementNode new.	result unsafeToken: (nodes at: 1).	result block: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForliteral5: nodes	| result |	result := CSStringLiteralExpressionNode new.	result token: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForprimary_constraint3: nodes	| result |	result := CSPrimaryConstraintNode new.	result structToken: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForgeneric_dimension_specifier1: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: (nodes at: 2) to: (result at: 2).	result at: 3 put: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornameof_expression1: nodes	| result |	result := CSNameofExpressionNode new.	result nameofToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result name: (nodes at: 3).	result rightParenToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForswitch_statement1: nodes	| result |	result := CSSwitchStatementNode new.	result switchToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result expression: (nodes at: 3).	result rightParenToken: (nodes at: 4).	result leftBraceToken: ((nodes at: 5) at: 1).	result addNodes: ((nodes at: 5) at: 2) to: result sections.	result rightBraceToken: ((nodes at: 5) at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForwhile_statement1: nodes	| result |	result := CSWhileStatementNode new.	result whileToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result expression: (nodes at: 3).	result rightParenToken: (nodes at: 4).	result statement: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForempty_statement1: nodes	| result |	result := CSEmptyStatementNode new.	result semicolonToken: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForliteral1: nodes	| result |	result := CSBooleanLiteralExpressionNode new.	result token: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForstackalloc_initializer1: nodes	| result |	result := CSStackallocInitializerNode new.	result stackallocToken: (nodes at: 1).	result type: (nodes at: 2).	result leftBracketToken: (nodes at: 3).	result expression: (nodes at: 4).	result rightBracketToken: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForindexer_declarator1: nodes	| result |	result := Array new: 8.	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	result at: 3 put: (nodes at: 3).	self addAll: ((nodes at: 4) at: 1) to: (result at: 4).	self addAll: ((nodes at: 4) at: 2) to: (result at: 5).	result at: 6 put: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForcollection_initializer2: nodes	| result |	result := CSCollectionInitializerNode new.	result leftBraceToken: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result initializers.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result addToken: (nodes at: 3) to: result commaTokens.	result rightBraceToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornull_conditional_operations2: nodes	| result |	result := CSNullConditionalElementAccessNode new.	result baseOperations: (nodes at: 1).	result questionMarkToken: (nodes at: 2).	result leftBracketToken: (nodes at: 3).	result addNodes: ((nodes at: 4) at: 1) to: result arguments.	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.	result rightBracketToken: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFormember_access3: nodes	| result |	result := CSMemberAccessNode new.	result expression: (nodes at: 1).	result periodToken: (nodes at: 2).	result identifier: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFormethod_header1: nodes	| result |	result := CSMethodHeaderNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result partialToken: (nodes at: 3).	result returnType: (nodes at: 4).	result name: ((nodes at: 5) at: 1).	result interface: ((nodes at: 5) at: 2).	result periodToken: ((nodes at: 5) at: 3).	result typeParameters: (nodes at: 6).	result leftParenToken: (nodes at: 7).	result addNodes: ((nodes at: 8) at: 1) to: result parameters.	result addTokens: ((nodes at: 8) at: 2) to: result commas.	result rightParenToken: (nodes at: 9).	result addNodes: (nodes at: 10) to: result constraintClauses.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForremove_accessor_declaration1: nodes	| result |	result := CSRemoveAccessorDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result removeToken: (nodes at: 2).	result block: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFortry_statement2: nodes	| result |	result := CSTryStatementNode new.	result tryToken: (nodes at: 1).	result block: (nodes at: 2).	result finally: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForobject_creation_expression1: nodes	| result |	result := CSObjectCreationExpressionNode new.	result newToken: (nodes at: 1).	result type: (nodes at: 2).	result leftParenToken: (nodes at: 3).	result addNodes: ((nodes at: 4) at: 1) to: result arguments.	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.	result rightParenToken: (nodes at: 5).	result initializer: (nodes at: 6).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForusing_static_directive1: nodes	| result |	result := CSUsingStaticDirectiveNode new.	result usingToken: (nodes at: 1).	result staticToken: (nodes at: 2).	result namespace: (nodes at: 3).	result semicolonToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForadd_accessor_declaration1: nodes	| result |	result := CSAddAccessorDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addToken: (nodes at: 2).	result block: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForoperator_declarator3: nodes	| result |	result := Array new: 10.	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 9 put: ((nodes at: 1) at: 1).	result at: 2 put: ((nodes at: 1) at: 2).	result at: 1 put: ((nodes at: 1) at: 3).	result at: 4 put: ((nodes at: 1) at: 4).	self add: ((nodes at: 1) at: 5) to: (result at: 5).	self add: ((nodes at: 1) at: 6) to: (result at: 6).	result at: 7 put: ((nodes at: 1) at: 7).	result at: 10 put: ((nodes at: 1) at: 8).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForqualified_identifier1: nodes	| result |	result := CSQualifiedIdentifierNode new.	result addToken: (nodes at: 1) to: result names.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForanonymous_method_expression1: nodes	| result |	result := CSAnonymousMethodExpressionNode new.	result delegateToken: (nodes at: 1).	result signature: (nodes at: 2).	result block: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForlet_clause1: nodes	| result |	result := Array new: 4.	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	result at: 3 put: (nodes at: 3).	result at: 4 put: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForqualified_alias_member_expression1: nodes	| result |	result := CSTypeExpressionNode new.	result type: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForunbound_type_name1: nodes	| result |	result := CSUnboundTypeNameNode new.	result addToken: (nodes at: 1) to: result identifierTokens.	result addToken: ((nodes at: 2) at: 1) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 2) to: result commas.	result addToken: ((nodes at: 2) at: 3) to: result gtTokens.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForquery_body_clause6: nodes	| result |	result := Array new: 19.	result at: 3 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 16 put: ((nodes at: 1) at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 5).	self addAll: ((nodes at: 1) at: 3) to: (result at: 17).	self addAll: ((nodes at: 1) at: 4) to: (result at: 18).	self addAll: ((nodes at: 1) at: 5) to: (result at: 19).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForextern_alias_directive1: nodes	| result |	result := CSExternAliasDirectiveNode new.	result externToken: (nodes at: 1).	result aliasToken: (nodes at: 2).	result identifierToken: (nodes at: 3).	result semicolonToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFormember_declarator5: nodes	| result |	result := CSMemberDeclaratorNode new.	result identifierToken: (nodes at: 1).	result equalToken: (nodes at: 2).	result value: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForindexer_declaration1: nodes	| result |	result := CSIndexerDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result returnType: ((nodes at: 3) at: 1).	result thisToken: ((nodes at: 3) at: 2).	result leftBracketToken: ((nodes at: 3) at: 3).	result addNodes: ((nodes at: 3) at: 4) to: result parameters.	result addTokens: ((nodes at: 3) at: 5) to: result commas.	result rightBracketToken: ((nodes at: 3) at: 6).	result type: ((nodes at: 3) at: 7).	result periodToken: ((nodes at: 3) at: 8).	result leftBraceToken: ((nodes at: 4) at: 1).	result getAccessor: ((nodes at: 4) at: 2).	result setAccessor: ((nodes at: 4) at: 3).	result rightBraceToken: ((nodes at: 4) at: 4).	result equalGreaterThanToken: ((nodes at: 4) at: 5).	result expression: ((nodes at: 4) at: 6).	result semicolonToken: ((nodes at: 4) at: 7).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForinterpolated_regular_string2: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self add: (nodes at: 2) to: (result at: 1).	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).	self add: ((nodes at: 3) at: 2) to: (result at: 1).	self add: (nodes at: 4) to: (result at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFormember_name2: nodes	| result |	result := Array new: 3.	result at: 2 put: (nodes at: 1).	result at: 3 put: (nodes at: 2).	result at: 1 put: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForvoid_type1: nodes	| result |	result := CSVoidTypeNode new.	result voidToken: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_struct_interfaces1: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFormethod_body1: nodes	| result |	result := CSMethodBodyNode new.	result block: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForimplicit_anonymous_function_signature1: nodes	| result |	result := CSImplicitAnonymousFunctionSignatureNode new.	result leftParenToken: (nodes at: 1).	result addTokens: ((nodes at: 2) at: 1) to: result names.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result rightParenToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForanonymous_object_initializer1: nodes	| result |	result := Array new: 4.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	result at: 4 put: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForfor_initializer2: nodes	| result |	result := CSStatementListNode new.	result addNodes: ((nodes at: 1) at: 1) to: result expressions.	result addTokens: ((nodes at: 1) at: 2) to: result commaTokens.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForargument_value2: nodes	| result |	result := Array new: 3.	result at: 2 put: (nodes at: 1).	result at: 1 put: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornull_conditional_expression1: nodes	| result |	result := CSNullConditionalExpressionNode new.	result expression: (nodes at: 1).	result nullConditionalOperation: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForforeach_statement1: nodes	| result |	result := CSForeachStatementNode new.	result foreachToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result type: (nodes at: 3).	result name: (nodes at: 4).	result inToken: (nodes at: 5).	result expression: (nodes at: 6).	result rightParenToken: (nodes at: 7).	result statement: (nodes at: 8).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_extern_alias_directives1: nodes	| result |	result := OrderedCollection new: 2.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForquery_expression1: nodes	| result |	result := CSQueryExpressionNode new.	result addToken: ((nodes at: 1) at: 1) to: result fromTokens.	result addNode: ((nodes at: 1) at: 2) to: result types.	result addToken: ((nodes at: 1) at: 3) to: result identifierTokens.	result addToken: ((nodes at: 1) at: 4) to: result inTokens.	result addNode: ((nodes at: 1) at: 5) to: result expressions.	result addTokens: ((nodes at: 2) at: 1) to: result fromTokens.	result addNodes: ((nodes at: 2) at: 2) to: result types.	result addTokens: ((nodes at: 2) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 4) to: result inTokens.	result addNodes: ((nodes at: 2) at: 5) to: result expressions.	result addTokens: ((nodes at: 2) at: 6) to: result letTokens.	result addTokens: ((nodes at: 2) at: 7) to: result equalTokens.	result addTokens: ((nodes at: 2) at: 8) to: result whereTokens.	result addTokens: ((nodes at: 2) at: 9) to: result joinTokens.	result addNodes: ((nodes at: 2) at: 10) to: result joinInExpressions.	result addTokens: ((nodes at: 2) at: 11) to: result onTokens.	result addNodes: ((nodes at: 2) at: 12) to: result joinOnExpressions.	result addTokens: ((nodes at: 2) at: 13) to: result equalsTokens.	result		addNodes: ((nodes at: 2) at: 14)		to: result joinEqualsExpressions.	result addTokens: ((nodes at: 2) at: 15) to: result intoTokens.	result addTokens: ((nodes at: 2) at: 16) to: result orderbyTokens.	result addTokens: ((nodes at: 2) at: 17) to: result ascendingTokens.	result addTokens: ((nodes at: 2) at: 18) to: result descendingTokens.	result addTokens: ((nodes at: 2) at: 19) to: result commaTokens.	result addTokens: ((nodes at: 2) at: 20) to: result selectTokens.	result addTokens: ((nodes at: 2) at: 21) to: result groupTokens.	result addNodes: ((nodes at: 2) at: 22) to: result groupExpressions.	result addTokens: ((nodes at: 2) at: 23) to: result byTokens.	result addNodes: ((nodes at: 2) at: 24) to: result groupByExpressions.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForclass_base3: nodes	| result |	result := Array new: 4.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self add: (nodes at: 2) to: (result at: 2).	result at: 4 put: (nodes at: 3).	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_extern_alias_directives2: nodes	| result |	result := nodes at: 1.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForaccessor_declarations2: nodes	| result |	result := Array new: 2.	result at: 2 put: (nodes at: 1).	result at: 1 put: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForordering_direction1: nodes	| result |	result := Array new: 2.	result at: 1 put: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForpointer_type1: nodes	| result |	result := CSPointerTypeNode new.	result type: (nodes at: 1).	result timesToken: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForindexer_declarator2: nodes	| result |	result := Array new: 8.	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	result at: 7 put: (nodes at: 2).	result at: 8 put: (nodes at: 3).	result at: 2 put: (nodes at: 4).	result at: 3 put: (nodes at: 5).	self addAll: ((nodes at: 6) at: 1) to: (result at: 4).	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).	result at: 6 put: (nodes at: 7).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFortype_parameter_constraints5: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self add: (nodes at: 2) to: (result at: 2).	self add: (nodes at: 3) to: (result at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFororderby_clause1: nodes	| result |	result := Array new: 5.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForconstructor_initializer1: nodes	| result |	result := CSConstructorInitializerNode new.	result colonToken: (nodes at: 1).	result baseToken: (nodes at: 2).	result leftParenToken: (nodes at: 3).	result addNodes: ((nodes at: 4) at: 1) to: result arguments.	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.	result rightParenToken: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForinterpolated_regular_string1: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForstatic_constructor_modifiers6: nodes	| result |	result := Array new: 3.	result at: 1 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	result at: 2 put: (nodes at: 2).	self add: (nodes at: 3) to: (result at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForgoto_statement1: nodes	| result |	result := CSGotoStatementNode new.	result gotoToken: (nodes at: 1).	result identifierToken: (nodes at: 2).	result semicolonToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForunary_expression5: nodes	| result |	result := CSPrefixExpressionNode new.	result operator: (nodes at: 1).	result expression: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForfixed_parameter1: nodes	| result |	result := CSFixedParameterNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result modifier: (nodes at: 2).	result type: (nodes at: 3).	result name: (nodes at: 4).	result equalToken: ((nodes at: 5) at: 1).	result expression: ((nodes at: 5) at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornamespace_declaration1: nodes	| result |	result := CSNamespaceDeclarationNode new.	result namespaceToken: (nodes at: 1).	result identifier: (nodes at: 2).	result leftBraceToken: ((nodes at: 3) at: 1).	result addNodes: ((nodes at: 3) at: 2) to: result directives.	result addNodes: ((nodes at: 3) at: 3) to: result declarations.	result rightBraceToken: ((nodes at: 3) at: 4).	result semicolon: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFormember_declarator2: nodes	| result |	result := CSMemberDeclaratorNode new.	result access: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFormethod_declaration1: nodes	| result |	result := CSMethodDeclarationNode new.	result header: (nodes at: 1).	result body: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForattribute_section1: nodes	| result |	result := CSAttributeNode new.	result leftBracket: (nodes at: 1).	result target: ((nodes at: 2) at: 1).	result colon: ((nodes at: 2) at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result attributeValues.	result addTokens: ((nodes at: 3) at: 2) to: result commas.	result rightBracket: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForobject_creation_expression2: nodes	| result |	result := CSObjectCreationExpressionNode new.	result newToken: (nodes at: 1).	result type: (nodes at: 2).	result initializer: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForquery_body_clause4: nodes	| result |	result := Array new: 19.	result at: 3 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 9 put: ((nodes at: 1) at: 1).	result at: 2 put: ((nodes at: 1) at: 2).	self add: ((nodes at: 1) at: 3) to: (result at: 3).	result at: 4 put: ((nodes at: 1) at: 4).	result at: 10 put: ((nodes at: 1) at: 5).	result at: 11 put: ((nodes at: 1) at: 6).	result at: 12 put: ((nodes at: 1) at: 7).	result at: 13 put: ((nodes at: 1) at: 8).	result at: 14 put: ((nodes at: 1) at: 9).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForinitializer_target2: nodes	| result |	result := Array new: 5.	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 2 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).	result at: 5 put: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_query_continuation1: nodes	| result |	result := Array new: 24.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForget_accessor_declaration1: nodes	| result |	result := CSGetAccessorDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result getToken: (nodes at: 3).	result body: ((nodes at: 4) at: 1).	result semicolonToken: ((nodes at: 4) at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_exception_specifier1: nodes	| result |	result := Array new: 4.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForjoin_into_clause1: nodes	| result |	result := Array new: 10.	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	self add: (nodes at: 3) to: (result at: 3).	result at: 4 put: (nodes at: 4).	result at: 5 put: (nodes at: 5).	result at: 6 put: (nodes at: 6).	result at: 7 put: (nodes at: 7).	result at: 8 put: (nodes at: 8).	result at: 9 put: (nodes at: 9).	result at: 10 put: (nodes at: 10).	self add: (nodes at: 11) to: (result at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForstatic_constructor_modifiers5: nodes	| result |	result := Array new: 3.	result at: 1 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	result at: 2 put: (nodes at: 2).	result at: 3 put: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForvariant_type_parameters1: nodes	| result |	result := Array new: 4.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	self addAll: (nodes at: 1) to: (result at: 1).	self add: (nodes at: 2) to: (result at: 2).	self add: (nodes at: 3) to: (result at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornamespace_or_type_name2: nodes	| result |	result := CSTypeNameNode new.	result namespace: (nodes at: 1).	result periodToken: (nodes at: 2).	result name: (nodes at: 3).	result typeArguments: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForquery_body_clause3: nodes	| result |	result := Array new: 19.	result at: 3 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 8 put: ((nodes at: 1) at: 1).	self add: ((nodes at: 1) at: 2) to: (result at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForinvocation_expression1: nodes	| result |	result := CSInvocationExpressionNode new.	result expression: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result arguments.	result addTokens: ((nodes at: 3) at: 2) to: result commaTokens.	result rightParenToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForobject_initializer1: nodes	| result |	result := CSObjectInitializerNode new.	result leftBraceToken: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result initializers.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result rightBraceToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornamed_entity_target2: nodes	| result |	result := CSBaseExpressionNode new.	result baseToken: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForreturn_statement1: nodes	| result |	result := CSReturnStatementNode new.	result returnToken: (nodes at: 1).	result expression: (nodes at: 2).	result semicolonToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForstatic_constructor_modifiers3: nodes	| result |	result := Array new: 3.	result at: 1 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self add: (nodes at: 2) to: (result at: 1).	result at: 2 put: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForoperator_declaration1: nodes	| result |	result := CSOperatorDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result returnType: ((nodes at: 3) at: 1).	result operatorToken: ((nodes at: 3) at: 2).	result operator: ((nodes at: 3) at: 3).	result leftParenToken: ((nodes at: 3) at: 4).	result addNodes: ((nodes at: 3) at: 5) to: result types.	result addTokens: ((nodes at: 3) at: 6) to: result arguments.	result rightParenToken: ((nodes at: 3) at: 7).	result commaToken: ((nodes at: 3) at: 8).	result implicitToken: ((nodes at: 3) at: 9).	result explicitToken: ((nodes at: 3) at: 10).	result body: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFortypeof_expression1: nodes	| result |	result := CSTypeofExpressionNode new.	result typeofToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result type: (nodes at: 3).	result rightParenToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForStartInterpolatedString1: nodes	^ #interpolatedString! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForyield_statement1: nodes	| result |	result := CSYieldStatementNode new.	result yieldToken: (nodes at: 1).	result returnToken: (nodes at: 2).	result expression: (nodes at: 3).	result semicolonToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForelement_initializer1: nodes	| result |	result := CSElementInitializerNode new.	result addNode: (nodes at: 1) to: result expressions.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForinitializer_target1: nodes	| result |	result := Array new: 5.	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForunbound_type_name2: nodes	| result |	result := CSUnboundTypeNameNode new.	result addToken: (nodes at: 1) to: result identifierTokens.	result colonColonToken: (nodes at: 2).	result addToken: (nodes at: 3) to: result identifierTokens.	result addToken: ((nodes at: 4) at: 1) to: result lessThanTokens.	result addTokens: ((nodes at: 4) at: 2) to: result commas.	result addToken: ((nodes at: 4) at: 3) to: result gtTokens.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForconversion_operator_declarator2: nodes	| result |	result := Array new: 8.	result at: 8 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	result at: 3 put: (nodes at: 3).	result at: 4 put: (nodes at: 4).	result at: 5 put: (nodes at: 5).	result at: 6 put: (nodes at: 6).	result at: 7 put: (nodes at: 7).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForqualified_identifier2: nodes	| result |	result := nodes at: 1.	result addToken: (nodes at: 2) to: result periodTokens.	result addToken: (nodes at: 3) to: result names.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForjoin_clause1: nodes	| result |	result := Array new: 9.	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	result at: 3 put: (nodes at: 3).	result at: 4 put: (nodes at: 4).	result at: 5 put: (nodes at: 5).	result at: 6 put: (nodes at: 6).	result at: 7 put: (nodes at: 7).	result at: 8 put: (nodes at: 8).	result at: 9 put: (nodes at: 9).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForinterpolated_regular_string_body1: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForbase_access2: nodes	| result |	result := CSBaseAccessNode new.	result baseToken: (nodes at: 1).	result leftBracketToken: (nodes at: 2).	result addNodes: ((nodes at: 3) at: 1) to: result expressions.	result addTokens: ((nodes at: 3) at: 2) to: result commaTokens.	result rightBracketToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_generic_dimension_specifier1: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForchecked_statement1: nodes	| result |	result := CSCheckedStatementNode new.	result checkedToken: (nodes at: 1).	result block: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForfixed_size_buffer_declaration1: nodes	| result |	result := CSFixedSizeBufferDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result fixedToken: (nodes at: 3).	result type: (nodes at: 4).	result addNodes: (nodes at: 5) to: result declarators.	result semicolonToken: (nodes at: 6).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForextern_alias_directives1: nodes	| result |	result := OrderedCollection new: 2.	self add: (nodes at: 1) to: result.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForthrow_statement1: nodes	| result |	result := CSThrowStatementNode new.	result throwToken: (nodes at: 1).	result expression: (nodes at: 2).	result semicolonToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForargument_value3: nodes	| result |	result := Array new: 3.	result at: 3 put: (nodes at: 1).	result at: 1 put: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForclass_base2: nodes	| result |	result := Array new: 4.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForusing_alias_directive1: nodes	| result |	result := CSUsingAliasDirectiveNode new.	result usingToken: (nodes at: 1).	result name: (nodes at: 2).	result equalToken: (nodes at: 3).	result namespace: (nodes at: 4).	result semicolonToken: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForrank_specifier1: nodes	| result |	result := CSRankSpecifierNode new.	result leftBracketToken: (nodes at: 1).	result addTokens: (nodes at: 2) to: result commaTokens.	result rightBracketToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForconstructor_declaration1: nodes	| result |	result := CSConstructorDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result identifierToken: ((nodes at: 3) at: 1).	result leftParenToken: ((nodes at: 3) at: 2).	result addNodes: ((nodes at: 3) at: 3) to: result parameters.	result addTokens: ((nodes at: 3) at: 4) to: result commas.	result rightParenToken: ((nodes at: 3) at: 5).	result initializer: ((nodes at: 3) at: 6).	result block: ((nodes at: 4) at: 1).	result semicolonToken: ((nodes at: 4) at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForsizeof_expression1: nodes	| result |	result := CSSizeofExpressionNode new.	result sizeofToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result type: (nodes at: 3).	result rightParenToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFordelegate_creation_expression1: nodes	| result |	result := CSDelegateCreationExpressionNode new.	result newToken: (nodes at: 1).	result type: (nodes at: 2).	result leftParenToken: (nodes at: 3).	result expression: (nodes at: 4).	result rightParenToken: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForenum_declaration1: nodes	| result |	result := CSEnumDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result enumToken: (nodes at: 3).	result name: (nodes at: 4).	result colonToken: ((nodes at: 5) at: 1).	result typeToken: ((nodes at: 5) at: 2).	result leftBrace: ((nodes at: 6) at: 1).	result addNodes: ((nodes at: 6) at: 2) to: result declarations.	result addTokens: ((nodes at: 6) at: 3) to: result commas.	result rightBrace: ((nodes at: 6) at: 4).	result semicolon: (nodes at: 7).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornullable_type1: nodes	| result |	result := CSNullableTypeNode new.	result type: (nodes at: 1).	result questionMarkToken: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForqualified_alias_member1: nodes	| result |	result := CSQualifiedAliasMemberNode new.	result global: (nodes at: 1).	result colonColonToken: (nodes at: 2).	result name: (nodes at: 3).	result typeArguments: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForproperty_declaration1: nodes	| result |	result := CSPropertyDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result type: (nodes at: 3).	result name: ((nodes at: 4) at: 1).	result interface: ((nodes at: 4) at: 2).	result periodToken: ((nodes at: 4) at: 3).	result leftBraceToken: ((nodes at: 5) at: 1).	result getAccessor: ((nodes at: 5) at: 2).	result setAccessor: ((nodes at: 5) at: 3).	result rightBraceToken: ((nodes at: 5) at: 4).	result equalToken: ((nodes at: 5) at: 5).	result initializer: ((nodes at: 5) at: 6).	result semicolon: ((nodes at: 5) at: 7).	result equalGreaterThanToken: ((nodes at: 5) at: 8).	result expression: ((nodes at: 5) at: 9).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForarray_initializer2: nodes	| result |	result := CSArrayInitializerNode new.	result leftBraceToken: (nodes at: 1).	result addNodes: ((nodes at: 2) at: 1) to: result initializers.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result addToken: (nodes at: 3) to: result commaTokens.	result rightBraceToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForliteral6: nodes	| result |	result := CSNullLiteralExpressionNode new.	result token: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForanonymous_object_initializer2: nodes	| result |	result := Array new: 4.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self add: (nodes at: 3) to: (result at: 3).	result at: 4 put: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFormultiplicative_expression4: nodes	| result |	result := CSBinaryExpressionNode new.	result left: (nodes at: 1).	result operator: (nodes at: 2).	result right: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForordering_direction2: nodes	| result |	result := Array new: 2.	result at: 2 put: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForset_accessor_declaration1: nodes	| result |	result := CSSetAccessorDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result setToken: (nodes at: 3).	result body: ((nodes at: 4) at: 1).	result semicolonToken: ((nodes at: 4) at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForswitch_section1: nodes	| result |	result := CSSwitchSectionNode new.	result addNodes: (nodes at: 1) to: result labels.	result addNodes: (nodes at: 2) to: result statements.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForordering1: nodes	| result |	result := Array new: 3.	result at: 1 put: (nodes at: 1).	result at: 2 put: ((nodes at: 2) at: 1).	result at: 3 put: ((nodes at: 2) at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForfixed_size_buffer_declarator1: nodes	| result |	result := CSFixedSizeBufferDeclaratorNode new.	result name: (nodes at: 1).	result leftBracketToken: (nodes at: 2).	result expression: (nodes at: 3).	result rightBracketToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForargument_value1: nodes	| result |	result := Array new: 3.	result at: 1 put: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForprimary_constraint2: nodes	| result |	result := CSPrimaryConstraintNode new.	result classToken: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForconstructor_constraint1: nodes	| result |	result := CSConstructorConstraintNode new.	result newToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result rightParenToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForquery_body1: nodes	| result |	result := Array new: 24.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	self addAll: ((nodes at: 1) at: 13) to: (result at: 13).	self addAll: ((nodes at: 1) at: 14) to: (result at: 14).	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).	self addAll: ((nodes at: 1) at: 16) to: (result at: 16).	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).	self add: ((nodes at: 2) at: 1) to: (result at: 20).	self add: ((nodes at: 2) at: 2) to: (result at: 5).	self add: ((nodes at: 2) at: 3) to: (result at: 21).	self add: ((nodes at: 2) at: 4) to: (result at: 22).	self add: ((nodes at: 2) at: 5) to: (result at: 23).	self add: ((nodes at: 2) at: 6) to: (result at: 24).	self addAll: ((nodes at: 3) at: 1) to: (result at: 15).	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).	self addAll: ((nodes at: 3) at: 3) to: (result at: 1).	self addAll: ((nodes at: 3) at: 4) to: (result at: 2).	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).	self addAll: ((nodes at: 3) at: 8) to: (result at: 7).	self addAll: ((nodes at: 3) at: 9) to: (result at: 8).	self addAll: ((nodes at: 3) at: 10) to: (result at: 9).	self addAll: ((nodes at: 3) at: 11) to: (result at: 10).	self addAll: ((nodes at: 3) at: 12) to: (result at: 11).	self addAll: ((nodes at: 3) at: 13) to: (result at: 12).	self addAll: ((nodes at: 3) at: 14) to: (result at: 13).	self addAll: ((nodes at: 3) at: 15) to: (result at: 14).	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFortype_parameters2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 3).	self addAll: (nodes at: 3) to: (result at: 1).	self add: (nodes at: 4) to: (result at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForunchecked_expression1: nodes	| result |	result := CSUncheckedExpressionNode new.	result uncheckedToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result expression: (nodes at: 3).	result rightParenToken: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFormember_access1: nodes	| result |	result := CSMemberAccessNode new.	result expression: (nodes at: 1).	result periodToken: (nodes at: 2).	result identifier: (nodes at: 3).	result typeArguments: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_attribute_arguments2: nodes	| result |	result := Array new: 4.	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 1 put: ((nodes at: 1) at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 3).	self addAll: ((nodes at: 1) at: 3) to: (result at: 4).	result at: 2 put: ((nodes at: 1) at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForlocal_variable_declarators2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 2).	self add: (nodes at: 3) to: (result at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_attribute_target_specifier1: nodes	| result |	result := Array new: 2.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFortype_parameter1: nodes	| result |	result := CSTypeNameNode new.	result name: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFortry_statement1: nodes	| result |	result := CSTryStatementNode new.	result tryToken: (nodes at: 1).	result block: (nodes at: 2).	result addNodes: (nodes at: 3) to: result clauses.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForoperator_declarator2: nodes	| result |	result := Array new: 10.	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 1 put: ((nodes at: 1) at: 1).	result at: 2 put: ((nodes at: 1) at: 2).	result at: 3 put: ((nodes at: 1) at: 3).	result at: 4 put: ((nodes at: 1) at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	result at: 8 put: ((nodes at: 1) at: 7).	result at: 7 put: ((nodes at: 1) at: 8).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForquery_body_clauses2: nodes	| result |	result := nodes at: 1.	self add: ((nodes at: 2) at: 1) to: (result at: 1).	self add: ((nodes at: 2) at: 2) to: (result at: 2).	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).	self add: ((nodes at: 2) at: 4) to: (result at: 4).	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).	self add: ((nodes at: 2) at: 6) to: (result at: 6).	self add: ((nodes at: 2) at: 7) to: (result at: 7).	self add: ((nodes at: 2) at: 8) to: (result at: 8).	self add: ((nodes at: 2) at: 9) to: (result at: 9).	self add: ((nodes at: 2) at: 10) to: (result at: 10).	self add: ((nodes at: 2) at: 11) to: (result at: 11).	self add: ((nodes at: 2) at: 12) to: (result at: 12).	self add: ((nodes at: 2) at: 13) to: (result at: 13).	self add: ((nodes at: 2) at: 14) to: (result at: 14).	self add: ((nodes at: 2) at: 15) to: (result at: 15).	self add: ((nodes at: 2) at: 16) to: (result at: 16).	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForextern_alias_directives2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: result.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForstatic_constructor_modifiers7: nodes	| result |	result := Array new: 3.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (nodes at: 1).	self add: (nodes at: 2) to: (result at: 1).	self add: (nodes at: 3) to: (result at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_property_initializer1: nodes	| result |	result := Array new: 3.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForproperty_body2: nodes	| result |	result := Array new: 9.	result at: 8 put: (nodes at: 1).	result at: 9 put: (nodes at: 2).	result at: 7 put: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForenum_member_declaration2: nodes	| result |	result := CSEnumDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result name: (nodes at: 2).	result equal: (nodes at: 3).	result value: (nodes at: 4).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForproperty_initializer1: nodes	| result |	result := Array new: 3.	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	result at: 3 put: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornamespace_or_type_name1: nodes	| result |	result := CSTypeNameNode new.	result name: (nodes at: 1).	result typeArguments: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForstatic_constructor_declaration1: nodes	| result |	result := CSStaticConstructorDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: ((nodes at: 2) at: 1) to: result modifiers.	result staticToken: ((nodes at: 2) at: 2).	result unsafeToken: ((nodes at: 2) at: 3).	result identifierToken: (nodes at: 3).	result leftParenToken: (nodes at: 4).	result rightParenToken: (nodes at: 5).	result block: ((nodes at: 6) at: 1).	result semicolonToken: ((nodes at: 6) at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForstruct_declaration1: nodes	| result |	result := CSStructDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result partialToken: (nodes at: 3).	result structToken: (nodes at: 4).	result identifierToken: (nodes at: 5).	result typeParameters: (nodes at: 6).	result colonToken: ((nodes at: 7) at: 1).	result addNodes: ((nodes at: 7) at: 2) to: result supertypes.	result addTokens: ((nodes at: 7) at: 3) to: result commas.	result addNodes: (nodes at: 8) to: result constraintClauses.	result leftBraceToken: ((nodes at: 9) at: 1).	result addNodes: ((nodes at: 9) at: 2) to: result declarations.	result rightBraceToken: ((nodes at: 9) at: 3).	result semicolon: (nodes at: 10).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForawait_expression1: nodes	| result |	result := CSAwaitExpressionNode new.	result awaitToken: (nodes at: 1).	result expression: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForconversion_operator_declarator1: nodes	| result |	result := Array new: 8.	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	result at: 3 put: (nodes at: 3).	result at: 4 put: (nodes at: 4).	result at: 5 put: (nodes at: 5).	result at: 6 put: (nodes at: 6).	result at: 7 put: (nodes at: 7).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFordo_statement1: nodes	| result |	result := CSDoStatementNode new.	result doToken: (nodes at: 1).	result statement: (nodes at: 2).	result whileToken: (nodes at: 3).	result leftParenToken: (nodes at: 4).	result expression: (nodes at: 5).	result rightParenToken: (nodes at: 6).	result semicolonToken: (nodes at: 7).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForbase_access1: nodes	| result |	result := CSBaseAccessNode new.	result baseToken: (nodes at: 1).	result periodToken: (nodes at: 2).	result identifier: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForevent_declaration1: nodes	| result |	result := CSEventDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result addTokens: (nodes at: 2) to: result modifiers.	result eventToken: (nodes at: 3).	result type: (nodes at: 4).	result addNodes: ((nodes at: 5) at: 1) to: result declarators.	result addTokens: ((nodes at: 5) at: 2) to: result commaTokens.	result semicolonToken: (nodes at: 6).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForliteral3: nodes	| result |	result := CSRealLiteralExpressionNode new.	result token: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForconstant_declarator1: nodes	| result |	result := CSConstantDeclaratorNode new.	result identifierToken: (nodes at: 1).	result equalToken: (nodes at: 2).	result expression: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForprimary_constraint1: nodes	| result |	result := CSTypeConstraintNode new.	result type: (nodes at: 1).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForbreak_statement1: nodes	| result |	result := CSBreakStatementNode new.	result breakToken: (nodes at: 1).	result semicolonToken: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFor_query_body_clauses1: nodes	| result |	result := Array new: 19.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForstatic_constructor_modifiers1: nodes	| result |	result := Array new: 3.	result at: 1 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	result at: 2 put: (nodes at: 2).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFornull_conditional_member_access2: nodes	| result |	result := CSNullConditionalMemberAccessNode new.	result expression: (nodes at: 1).	result baseOperations: (nodes at: 2).	result periodToken: (nodes at: 3).	result identifierToken: (nodes at: 4).	result typeArguments: (nodes at: 5).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForlabeled_statement1: nodes	| result |	result := CSLabeledStatementNode new.	result identifierToken: (nodes at: 1).	result colonToken: (nodes at: 2).	result statement: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionFormethod_body2: nodes	| result |	result := CSMethodBodyNode new.	result equalGreaterThanToken: (nodes at: 1).	result expression: (nodes at: 2).	result semicolonToken: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForunbound_type_name3: nodes	| result |	result := nodes at: 1.	result addToken: (nodes at: 2) to: result periodTokens.	result addToken: (nodes at: 3) to: result identifierTokens.	result addToken: ((nodes at: 4) at: 1) to: result lessThanTokens.	result addTokens: ((nodes at: 4) at: 2) to: result commas.	result addToken: ((nodes at: 4) at: 3) to: result gtTokens.	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForinterface_method_declaration1: nodes	| result |	result := CSInterfaceMethodDeclarationNode new.	result addNodes: (nodes at: 1) to: result _attributes.	result modifier: (nodes at: 2).	result type: (nodes at: 3).	result name: (nodes at: 4).	result typeParameters: (nodes at: 5).	result leftParen: (nodes at: 6).	result addNodes: ((nodes at: 7) at: 1) to: result parameters.	result addTokens: ((nodes at: 7) at: 2) to: result commas.	result rightParen: (nodes at: 8).	result addNodes: (nodes at: 9) to: result constraintClauses.	result body: (nodes at: 10).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForconst_declarator1: nodes	| result |	result := CSConstDeclaratorNode new.	result name: (nodes at: 1).	result equalToken: (nodes at: 2).	result expression: (nodes at: 3).	^ result! !!CSharpParser methodsFor: 'generated-reduction actions'!reduceActionForinterpolation1: nodes	| result |	result := CSInterpolationNode new.	result expression: (nodes at: 1).	^ result! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CSharpParser class	instanceVariableNames: 'keywords'!!CSharpParser class methodsFor: 'generated-accessing'!scannerClass	^CSharpScanner! !!CSharpParser class methodsFor: 'generated-accessing'!cacheId	^'2020-03-27T14:36:14.2366-05:00'! !!CSharpParser class methodsFor: 'file types'!fileExtension	^ '.cs'! !!CSharpParser class methodsFor: 'file types'!fileExtensionType	^ 'C# files'! !!CSharpParser class methodsFor: 'generated'!startingStateForstatement	^ 3! !!CSharpParser class methodsFor: 'generated'!definitionComment"%glr;%id <Identifier> <gt> <gtgt> <rightBrace>;%scopes default interpolatedString interpolatedVerbatimString;%start compilation_unit namespace_member_declaration statement expression block class_member_declaration;%ignore_variables commaToken _leftParen _rightParen semicolonToken;%root Program;%prefix CS;%suffix Node;%annotate_tokens;%hierarchy TypeParameterList (	VariantTypeParameterList);%hierarchy UsingDirective (	UsingAliasDirective	UsingNamespaceDirective	UsingStaticDirective);%hierarchy Declaration (	ClassDeclaration	ConstantDeclaration	ConstructorDeclaration	DelegateDeclaration	DestructorDeclaration	EnumDeclaration	EventDeclaration	FieldDeclaration	FixedSizeBufferDeclaration	IndexerDeclaration	InterfaceDeclaration	InterfaceEventDeclaration	InterfaceIndexerDeclaration	InterfaceMethodDeclaration	InterfacePropertyDeclaration	LocalConstantDeclaration	LocalVariableDeclaration	MethodDeclaration	NamespaceDeclaration	OperatorDeclaration	PropertyDeclaration	StaticConstructorDeclaration	StructDeclaration);%hierarchy Statement (	BlockStatement	BreakStatement	CheckedStatement	ContinueStatement	DeclarationStatement	DoStatement	EmptyStatement	ExpressionStatement	FixedStatement	ForeachStatement	ForStatement	GotoStatement	IfStatement	LabeledStatement	LockStatement	ReturnStatement	SwitchStatement	ThrowStatement	TryStatement	UncheckedStatement	UnsafeStatement	UsingStatement	WhileStatement	YieldStatement);%hierarchy Expression (	AnonymousMethodExpression	AnonymousObjectCreationExpression	ArrayCreationExpression	Assignment	AwaitExpression	BaseAccess	BaseExpression	BinaryExpression	CastExpression	CheckedExpression	ConditionalExpression	DefaultValueExpression	DelegateCreationExpression	ElementAccess	InterpolatedStringExpression	InvocationExpression	LambdaExpression	LiteralExpression	MemberAccess	NamedEntity	NameofExpression	NullConditionalExpression	ObjectCreationExpression	OutVariableDeclarationExpression	PrefixExpression	PointerElementAccess	PointerMemberAccess	PostExpression	QueryExpression	SimpleName	SizeofExpression	ThisAccess	TypeExpression	TypeofExpression	UncheckedExpression);%hierarchy LiteralExpression (	BooleanLiteralExpression 	IntegerLiteralExpression	RealLiteralExpression	CharacterLiteralExpression	StringLiteralExpression	NullLiteralExpression);%hierarchy ElementAccess (	NullConditionalElementAccess);%hierarchy InvocationExpression (	NullConditionalInvocationExpression);%hierarchy MemberAccess (	NullConditionalMemberAccess);%hierarchy Type (	ArrayType	NullableType	PointerType	QualifiedAliasMember	SimpleType	TypeName	VarType	VoidType);default <gt>	: \>	;default <gtgt>	: <gt> <gt>	;default <rightBrace>	: \}	;<LineTerminator>	: \r	| \n	| \r\n#	| \x85#	| \x2028#	| \x2029	;default <comment>	: \/\/ [^\r\n]*	| (\/\* [^\*]* \*+ ([^\/\*] [^\*]* \*+)* \/)	;<Identifier>	: (<isLetter> | _) (<isLetter> | <isDigit> | _)*	| \@ (<isLetter> | _) (<isLetter> | <isDigit> | _)*	;<IntegerSuffix>	: [Uu]	| [Ll]	| [Uu][Ll]	| [Ll][Uu]	;default <IntegerLiteral>	: \d+ <IntegerSuffix>?	| 0[Xx] [0-9A-Fa-f]+ <IntegerSuffix>?	;<ExponentPart>	: [Ee] [\+\-]? \d+	;<RealSuffix>	: [Ff]	| [Dd]	| [Mm]	;default <RealLiteral>	: \d* \. \d+ <ExponentPart>? <RealSuffix>?	| \d+ <ExponentPart>? <RealSuffix>?	| \d+ <RealSuffix>	;<SimpleEscapeSequence>	: \\\'	| \\\""	| \\\\	| \\0	| \\a	| \\b	| \\f	| \\n	| \\r	| \\t	| \\v	;<HexadecimalEscapeSequence>	: \\x [0-9A-Fa-f]{1,4}	;<UnicodeCharacterEscapeSequence>	: \\[Uu] ([0-9A-Fa-f]{4,4}){1,2}	;<Character>	: [^\'\\\n]	| <SimpleEscapeSequence>	| <HexadecimalEscapeSequence>	| <UnicodeCharacterEscapeSequence>	;default <CharacterLiteral>	: \' <Character> \'	;<SingleRegularStringLiteralCharacter>	: [^\""\\\n]	;<RegularStringLiteralCharacter>	: <SingleRegularStringLiteralCharacter>	| <SimpleEscapeSequence>	| <HexadecimalEscapeSequence>	| <UnicodeCharacterEscapeSequence>	;<RegularStringLiteral>	: \"" <RegularStringLiteralCharacter>* \""	;<InterpolatedSingleRegularStringLiteralCharacter>	: [^\""\\\n\{]	;<InterpolatedRegularStringLiteralCharacter>	: <InterpolatedSingleRegularStringLiteralCharacter>	| <SimpleEscapeSequence>	| <HexadecimalEscapeSequence>	| <UnicodeCharacterEscapeSequence>	| \{ \{	;default <InterpolatedRegularStringWhole>	: \$\"" <InterpolatedRegularStringLiteralCharacter>* \""	;default <InterpolatedRegularStringStart>	: \$\"" <InterpolatedRegularStringLiteralCharacter>* \{ 	;interpolatedString <InterpolatedRegularStringEnd>	: \} <InterpolatedRegularStringLiteralCharacter>* \""	;interpolatedString <InterpolatedRegularStringMid>	: \} <InterpolatedRegularStringLiteralCharacter>* \{	;<VerbatimStringLiteralCharacter>	: [^\""]	| \""\""	;<VerbatimStringLiteral>	: \@\"" <VerbatimStringLiteralCharacter>* \""	;<InterpolatedVerbatimStringLiteralCharacter>	: [^\""\{]	| \""\""	| \{ \{	;default <InterpolatedVerbatimStringLiteral>	: \$\@\"" <InterpolatedVerbatimStringLiteralCharacter>* \""	;default <InterpolatedVerbatimStringStart>	: \$\@\"" <InterpolatedVerbatimStringLiteralCharacter>* \{	;interpolatedVerbatimString <InterpolatedVerbatimStringEnd>	: \} <InterpolatedVerbatimStringLiteralCharacter>* \""	;interpolatedVerbatimString <InterpolatedVerbatimStringMid>	: \} <InterpolatedVerbatimStringLiteralCharacter>* \{	;default <StringLiteral>	: <RegularStringLiteral>	| <VerbatimStringLiteral>	;default <NullLiteral>	: null	;default <whitespace>	: \s+	;default <preprocessorDirective>	: \# [^\r\n]*	;<patternToken>	: (\`  [^\`]* \`)+	;# B.2# B.2.6 Namespacescompilation_unit	: _extern_alias_directives _using_directives _global_attributes _namespace_member_declarations {{}}	;namespace_declaration	: ""namespace"" qualified_identifier 'identifier' namespace_body _semicolon {{}}	;qualified_identifier	: <Identifier> 'name' {{}}	| qualified_identifier ""."" <Identifier> 'name' {{}}	;namespace_body	: ""{"" _extern_alias_directives _using_directives _namespace_member_declarations <rightBrace>	;_extern_alias_directives	:	| extern_alias_directives	;extern_alias_directives	: extern_alias_directive 'directive'	| extern_alias_directives extern_alias_directive 'directive'	;extern_alias_directive	: ""extern"" ""alias"" <Identifier> "";"" {{}}	;_using_directives	:	| using_directives	;using_directives	: using_directive 'directive'	| using_directives using_directive 'directive'	;using_directive	: using_alias_directive	| using_namespace_directive	| using_static_directive	;using_alias_directive	: ""using"" <Identifier> 'name' ""="" namespace_or_type_name 'namespace' "";"" {{}}	;using_namespace_directive	: ""using"" namespace_name 'namespace' "";"" {{}}	;using_static_directive	: ""using"" ""static"" type_name 'namespace' "";"" {{}}	;_namespace_member_declarations	: 	| namespace_member_declarations	;namespace_member_declarations	: namespace_member_declaration 'declaration'	| namespace_member_declarations namespace_member_declaration 'declaration'	;namespace_member_declaration	: namespace_declaration	| type_declaration	;type_declaration	: class_declaration	| struct_declaration	| interface_declaration	| enum_declaration	| delegate_declaration	;qualified_alias_member	: <Identifier> 'global' ""::"" <Identifier> 'name' _type_argument_list 'typeArguments' {{}}	;# B.2.1namespace_name	: namespace_or_type_name	;type_name	: namespace_or_type_name	;namespace_or_type_name	: <Identifier> 'name' _type_argument_list 'typeArguments' {{TypeName}}	| namespace_or_type_name 'namespace' ""."" <Identifier> 'name' _type_argument_list 'typeArguments' {{TypeName}}	| qualified_alias_member 	;# B.2.2_type	:	| type 'type'	;type	: value_type	| reference_type	| type_parameter	;value_type	: struct_type	| enum_type	;struct_type	: type_name	| simple_type	| nullable_type	;simple_type	: numeric_type 'token' {{}}	| ""bool"" 'token' {{}}	;numeric_type	: integral_type	| floating_point_type	| ""decimal""	;integral_type	: ""sbyte""	| ""byte""	| ""short""	| ""ushort""	| ""int""	| ""uint""	| ""long""	| ""ulong""	| ""char""	;floating_point_type	: ""float""	| ""double""	;nullable_type	: non_nullable_value_type 'type' ""?"" {{}}	;non_nullable_value_type	: type	;enum_type	: type_name	;reference_type	: class_type	| interface_type	| array_type	| delegate_type	;class_type	: type_name	| ""object"" 'token' {{SimpleType}}	| ""string"" 'token' {{SimpleType}}	;interface_type	: type_name	;array_type	: non_array_type 'type' rank_specifiers {{}}	;non_array_type	: type	;_rank_specifiers	: 	| rank_specifiers	;rank_specifiers	: rank_specifier 'rankSpecifier'	| rank_specifiers rank_specifier 'rankSpecifier'	;rank_specifier	: ""["" _dim_separators ""]"" {{}}	;_dim_separators	: 	| dim_separators	;dim_separators	: "",""	| dim_separators "",""	;delegate_type	: type_name	;type_argument_list	: ""<"" type_arguments <gt> 'greaterThanToken' {{}}	;type_arguments	: type_argument 'type'	| type_arguments "","" type_argument 'type'	;type_argument	: type	;# B.2.3 Variablesvariable_reference	: expression	;# B.2.4 Expressions_argument_list	:	| argument_list	;# B.2.4argument_list	: argument 'argument'	| argument_list "","" argument 'argument'	;argument	: _argument_name argument_value {{}}	;_argument_name	:	| argument_name	;argument_name	: <Identifier> 'identifier' "":""	;argument_value	: expression 'expression' 	| ""ref"" variable_reference 'expression' 	| ""out"" out_expression 'expression'	;out_expression	: variable_reference	| type 'type' <Identifier> 'name' {{OutVariableDeclarationExpression}}	;primary_expression	: primary_no_array_creation_expression	| array_creation_expression	;primary_no_array_creation_expression	: literal 	| interpolated_string_expression	| simple_name 	| parenthesized_expression 	| member_access 	| invocation_expression 	| element_access 	| this_access 	| base_access 	| post_increment_expression 	| post_decrement_expression 	| object_creation_expression 	| delegate_creation_expression 	| anonymous_object_creation_expression 	| typeof_expression 	| checked_expression 	| unchecked_expression 	| default_value_expression 	| nameof_expression	| anonymous_method_expression 	;interpolated_string_expression	: interpolated_regular_string {{}}	| interpolated_verbatim_string {{}}	;interpolated_regular_string	: <InterpolatedRegularStringWhole> 'stringPart'	| StartInterpolatedString <InterpolatedRegularStringStart> 'stringPart' interpolated_regular_string_body <InterpolatedRegularStringEnd> 'stringPart'	;StartInterpolatedString	: [#interpolatedString]	;interpolated_regular_string_body	: interpolation 'interpolation'	| interpolation 'interpolation' <InterpolatedRegularStringMid> 'stringPart' interpolation 'interpolation'	;interpolation	: expression 'expression' {{}}	| expression 'expression' "","" constant_expression 'constant' {{}}	;interpolated_verbatim_string	: <InterpolatedVerbatimStringLiteral> 'stringPart'	| StartInterpolatedVerbatimString <InterpolatedVerbatimStringStart> 'stringPart' interpolated_verbatim_string_body <InterpolatedVerbatimStringEnd> 'stringPart'	;StartInterpolatedVerbatimString	: [#interpolatedVerbatimString]	;interpolated_verbatim_string_body	: interpolation 'interpolation'	| interpolation 'interpolation' <InterpolatedVerbatimStringMid> 'stringPart' interpolation 'interpolation'	;simple_name	: <Identifier> _type_argument_list 'typeArguments' {{}}	;_type_argument_list	: 	| type_argument_list	;parenthesized_expression	: ""("" '_leftParen' expression "")"" '_rightParen' {{Expression}}	;member_access	: primary_expression 'expression' ""."" <Identifier> 'identifier' _type_argument_list 'typeArguments' {{}}	| predefined_type_expression 'expression' ""."" <Identifier> 'identifier' _type_argument_list 'typeArguments' {{}}	| qualified_alias_member_expression 'expression' ""."" <Identifier> 'identifier' {{}}	;qualified_alias_member_expression	: qualified_alias_member 'type' {{TypeExpression}}	;predefined_type_expression	: predefined_type 'type' {{TypeExpression}}	;predefined_type	: ""bool"" 'token' {{SimpleType}}	| ""byte"" 'token' {{SimpleType}}	| ""char"" 'token' {{SimpleType}}	| ""decimal"" 'token' {{SimpleType}}	| ""double"" 'token' {{SimpleType}}	| ""float"" 'token' {{SimpleType}}	| ""int"" 'token' {{SimpleType}}	| ""long"" 'token' {{SimpleType}}	| ""object"" 'token' {{SimpleType}}	| ""sbyte"" 'token' {{SimpleType}}	| ""short"" 'token' {{SimpleType}}	| ""string"" 'token' {{SimpleType}}	| ""uint"" 'token' {{SimpleType}}	| ""ulong"" 'token' {{SimpleType}}	| ""ushort"" 'token' {{SimpleType}}	;invocation_expression	: primary_expression 'expression' ""("" _argument_list "")"" {{}}	;element_access	: primary_no_array_creation_expression 'baseExpression' ""["" expression_list ""]"" {{}}	;expression_list	: expression 'expression'	| expression_list	"","" expression 'expression'	;this_access	: ""this"" {{}}	;base_access	: ""base"" ""."" <Identifier> 'identifier' {{}}	| ""base"" ""["" expression_list ""]"" {{}}	;post_increment_expression	: primary_expression 'expression' ""++"" 'operator' {{PostExpression}}	;post_decrement_expression	: primary_expression 'expression' ""--"" 'operator' {{PostExpression}}	;object_creation_expression	: ""new"" type 'type' ""("" _argument_list "")"" _object_or_collection_initializer 'initializer' {{}}	| ""new"" type 'type' object_or_collection_initializer 'initializer' {{}}	;_object_or_collection_initializer	:	| object_or_collection_initializer	;object_or_collection_initializer	: object_initializer	| collection_initializer	;object_initializer	: ""{"" _member_initializer_list <rightBrace> {{}}	| ""{"" member_initializer_list "","" <rightBrace> {{}}	;_member_initializer_list	: 	| member_initializer_list	;member_initializer_list	: member_initializer 'initializer'	| member_initializer_list "","" member_initializer 'initializer'	;member_initializer	: initializer_target ""="" initializer_value 'value' {{}}	;initializer_target	: <Identifier> 'identifier'	| ""["" argument_list ""]""	;initializer_value	: expression	| object_or_collection_initializer	;collection_initializer	: ""{"" element_initializer_list <rightBrace> {{}}	| ""{"" element_initializer_list "","" <rightBrace> {{}}	;element_initializer_list	: element_initializer 'initializer'	| element_initializer_list "","" element_initializer 'initializer'	;element_initializer	: non_assignment_expression 'expression' {{}}	| ""{"" expression_list <rightBrace> {{}}	;array_creation_expression	: ""new"" non_array_type 'type' ""["" expression_list ""]"" _rank_specifiers _array_initializer 'arrayInitializer' {{}}	| ""new"" array_type 'type' array_initializer 'arrayInitializer' {{}}	| ""new"" rank_specifier 'rankSpecifier' array_initializer 'arrayInitializer' {{}}	;delegate_creation_expression	: ""new"" delegate_type 'type' ""("" expression 'expression' "")"" {{}}	;anonymous_object_creation_expression	: ""new"" anonymous_object_initializer {{}}	;anonymous_object_initializer	: ""{"" _member_declarator_list <rightBrace>	| ""{"" member_declarator_list "","" <rightBrace>	;_member_declarator_list	: 	| member_declarator_list	;member_declarator_list	: member_declarator 'declarator'	| member_declarator_list "","" member_declarator 'declarator'	;member_declarator	: simple_name 'name' {{}}	| member_access 'access' {{}}	| base_access 'access' {{}}	| null_conditional_member_access 'access' {{}}	| <Identifier> ""="" expression 'value' {{}}	;typeof_expression	: ""typeof"" ""("" type 'type' "")"" {{}}	| ""typeof"" ""("" unbound_type_name 'type' "")"" {{}}	| ""typeof"" ""("" void_type 'type' "")"" {{}}	;unbound_type_name	: <Identifier> _generic_dimension_specifier {{}}	| <Identifier> ""::"" <Identifier> _generic_dimension_specifier {{}}	| unbound_type_name ""."" <Identifier> _generic_dimension_specifier {{}}	;_generic_dimension_specifier	: 	| generic_dimension_specifier	;generic_dimension_specifier	: ""<"" _commas <gt>	;_commas	: 	| commas	;commas	: "","" 'comma'	| commas "","" 'comma'	;checked_expression	: ""checked"" ""("" expression 'expression' "")"" {{}}	;unchecked_expression	: ""unchecked"" ""("" expression 'expression' "")"" {{}}	;default_value_expression	: ""default"" (""("" type 'type' "")"")? {{}}	;nameof_expression	: ""nameof"" ""("" named_entity 'name' "")"" {{}}	;named_entity	: simple_name	| named_entity_target 'target' ""."" <Identifier> _type_argument_list 'typeArguments' {{}}	;named_entity_target 	: ""this"" {{ThisAccess}}	| ""base"" {{BaseExpression}}	| named_entity	| predefined_type_expression	| qualified_alias_member_expression	;unary_expression	: primary_expression	| null_conditional_expression	| ""+"" 'operator' unary_expression 'expression' {{PrefixExpression}}	| ""-"" 'operator' unary_expression 'expression' {{PrefixExpression}}	| ""!!"" 'operator' unary_expression 'expression' {{PrefixExpression}}	| ""~"" 'operator' unary_expression 'expression' {{PrefixExpression}}	| pre_increment_expression	| pre_decrement_expression	| cast_expression	| await_expression	;null_conditional_expression	: primary_expression 'expression' null_conditional_operations 'nullConditionalOperation' {{}}	;_null_conditional_operations	:	| null_conditional_operations	;null_conditional_operations	: _null_conditional_operations 'baseOperations' ""?"" ""."" <Identifier> _type_argument_list 'typeArguments' {{NullConditionalMemberAccess}}	| _null_conditional_operations 'baseOperations' ""?"" ""["" argument_list ""]"" {{NullConditionalElementAccess}}	| null_conditional_operations 'baseOperations' ""."" <Identifier> _type_argument_list 'typeArguments' {{NullConditionalMemberAccess}}	| null_conditional_operations 'baseOperations' ""["" argument_list ""]"" {{NullConditionalElementAccess}}	| null_conditional_operations 'baseOperations' ""("" _argument_list "")"" {{NullConditionalInvocationExpression}}	;null_conditional_member_access	: primary_expression 'expression' _null_conditional_operations 'baseOperations' ""?"" ""."" <Identifier> _type_argument_list 'typeArguments' {{}}	| primary_expression 'expression' null_conditional_operations 'baseOperations' ""."" <Identifier> _type_argument_list 'typeArguments' {{}}	;null_conditional_invocation_expression	: primary_expression 'expression' null_conditional_operations 'baseOperations' ""("" _argument_list "")"" {{}}	;pre_increment_expression	: ""++"" 'operator' unary_expression 'expression' {{PrefixExpression}}	;pre_decrement_expression	: ""--"" 'operator' unary_expression 'expression' {{PrefixExpression}}	;cast_expression	: ""("" type 'type' "")"" unary_expression 'expression' {{}}	;await_expression	: ""await"" unary_expression 'expression' {{}}	;multiplicative_expression	: unary_expression	| multiplicative_expression 'left' ""*"" 'operator' unary_expression 'right' {{BinaryExpression}}	| multiplicative_expression 'left' ""/"" 'operator' unary_expression 'right' {{BinaryExpression}}	| multiplicative_expression 'left' ""%"" 'operator' unary_expression 'right' {{BinaryExpression}}	;additive_expression	: multiplicative_expression	| additive_expression 'left' ""+"" 'operator' multiplicative_expression 'right' {{BinaryExpression}}	| additive_expression 'left' ""-"" 'operator' multiplicative_expression 'right' {{BinaryExpression}}	;shift_expression	: additive_expression	| shift_expression 'left' ""<<"" 'operator' additive_expression 'right' {{BinaryExpression}}	| shift_expression 'left' <gtgt> 'operator' additive_expression 'right' {{BinaryExpression}}	;relational_expression	: shift_expression	| relational_expression 'left' ""<"" 'operator' shift_expression 'right' {{BinaryExpression}}	| relational_expression 'left' <gt> 'operator' shift_expression 'right' {{BinaryExpression}}	| relational_expression 'left' ""<="" 'operator' shift_expression 'right' {{BinaryExpression}}	| relational_expression 'left' "">="" 'operator' shift_expression 'right' {{BinaryExpression}}	| relational_expression 'left' ""is"" 'operator' type 'right' {{BinaryExpression}}	| relational_expression 'left' ""as"" 'operator' type 'right' {{BinaryExpression}}	;equality_expression	: relational_expression	| equality_expression 'left' ""=="" 'operator' relational_expression 'right' {{BinaryExpression}}	| equality_expression 'left' ""!!="" 'operator' relational_expression 'right' {{BinaryExpression}}	;and_expression	: equality_expression	| and_expression 'left' ""&"" 'operator' equality_expression 'right' {{BinaryExpression}}	;exclusive_or_expression	: and_expression	| exclusive_or_expression 'left' ""^"" 'operator' and_expression 'right' {{BinaryExpression}}	;inclusive_or_expression	: exclusive_or_expression	| inclusive_or_expression 'left' ""|"" 'operator' exclusive_or_expression 'right' {{BinaryExpression}}	;conditional_and_expression	: inclusive_or_expression	| conditional_and_expression 'left' ""&&"" 'operator' inclusive_or_expression 'right' {{BinaryExpression}}	;conditional_or_expression	: conditional_and_expression	| conditional_or_expression 'left' ""||"" 'operator' conditional_and_expression 'right' {{BinaryExpression}}	;null_coalescing_expression	: conditional_or_expression	| conditional_or_expression 'left' ""??"" 'operator' null_coalescing_expression 'right' {{BinaryExpression}}	;conditional_expression	: null_coalescing_expression	| null_coalescing_expression 'booleanExpression' ""?"" expression 'trueExpression' "":"" expression 'falseExpression' {{}}	;lambda_expression	: anonymous_function_signature 'signature' ""=>"" anonymous_function_body 'body' {{}}	;anonymous_method_expression	: ""delegate"" _explicit_anonymous_function_signature 'signature' block 'block' {{}}	;anonymous_function_signature	: explicit_anonymous_function_signature	| implicit_anonymous_function_signature	;_explicit_anonymous_function_signature	:	| explicit_anonymous_function_signature	;explicit_anonymous_function_signature	: ""("" _explicit_anonymous_function_paramenter_list "")"" {{}}	;_explicit_anonymous_function_paramenter_list	: 	| explicit_anonymous_function_paramenter_list	;explicit_anonymous_function_paramenter_list	: explicit_anonymous_function_paramenter 'parameter'	| explicit_anonymous_function_paramenter_list "","" explicit_anonymous_function_paramenter 'parameter'	;explicit_anonymous_function_paramenter	: _anonymous_function_parameter_modifier type 'type' <Identifier> 'name' {{AnonymousFunctionParameter}}	;_anonymous_function_parameter_modifier	: 	| anonymous_function_parameter_modifier 'modifier'	;anonymous_function_parameter_modifier	: ""ref""	| ""out""	;implicit_anonymous_function_signature	: ""("" _implicit_anonymous_function_parameter_list "")"" {{}}	| implicit_anonymous_function_parameter 'name' {{}}	;_implicit_anonymous_function_parameter_list	: 	| implicit_anonymous_function_parameter_list	;implicit_anonymous_function_parameter_list	: implicit_anonymous_function_parameter 'name'	| implicit_anonymous_function_parameter_list "","" implicit_anonymous_function_parameter 'name'	;implicit_anonymous_function_parameter	: <Identifier>	;anonymous_function_body	: expression	| block	;query_expression	: from_clause query_body {{}}	;from_clause	: ""from"" _type <Identifier> ""in"" expression 'expression'	;query_body	: _query_body_clauses select_or_group_clause _query_continuation	;_query_body_clauses	: 	| query_body_clauses	;query_body_clauses	: query_body_clause	| query_body_clauses query_body_clause	;query_body_clause	: from_clause	| let_clause	| where_clause	| join_clause	| join_into_clause	| orderby_clause	;let_clause	: ""let"" <Identifier> ""="" expression 'expression'	;where_clause	: ""where"" boolean_expression 'expression'	;join_clause	: ""join"" _type <Identifier> ""in"" expression 'joinInExpression'""on"" expression 'joinOnExpression' ""equals"" expression 'joinEqualsExpression'	;join_into_clause	: ""join"" _type <Identifier> ""in"" expression 'joinInExpression' ""on"" expression 'joinOnExpression' ""equals"" expression 'joinEqualsExpression' ""into"" <Identifier>	;orderby_clause	: ""orderby"" orderings	;orderings	: ordering	| orderings "","" ordering	;ordering	: expression 'expression' _ordering_direction	;_ordering_direction	: 	| ordering_direction	;ordering_direction	: ""ascending""	| ""descending""	;select_or_group_clause	: select_clause	| group_clause	;select_clause	: ""select"" expression 'expression'	;group_clause	: ""group"" expression 'groupExpression' ""by"" expression 'groupByExpression'	;_query_continuation	: 	| query_continuation	;query_continuation	: ""into"" <Identifier> query_body	;assignment	: unary_expression 'lhs' assignment_operator 'operator' expression 'rhs' {{}}	;assignment_operator	: ""=""	| ""+=""	| ""-=""	| ""*=""	| ""/=""	| ""%=""	| ""&=""	| ""|=""	| ""^=""	| ""<<=""	| "">>=""	;_expression	:	| expression 'expression'	;expression	: non_assignment_expression 	| assignment 	;non_assignment_expression	: conditional_expression 	| lambda_expression 	| query_expression 	;constant_expression	: expression	;boolean_expression	: expression	;# B.2.5 Statementsstatement	: labeled_statement	| declaration_statement	| embedded_statement	;embedded_statement	: block	| empty_statement	| expression_statement	| selection_statement	| iteration_statement	| jump_statement	| try_statement	| checked_statement	| unchecked_statement	| lock_statement	| using_statement	| yield_statement	;block	: ""{"" _statement_list <rightBrace> {{BlockStatement}}	;_statement_list	: 	| statement_list	;statement_list	: statement 'statement'	| statement_list statement 'statement'	;empty_statement	: "";"" {{}}	;labeled_statement	: <Identifier> "":"" statement 'statement' {{}}	;declaration_statement	: local_variable_declaration 'declaration' "";"" {{}}	| local_constant_declaration 'declaration' "";"" {{}}	;local_variable_declaration	: local_variable_type 'type' local_variable_declarators {{}}	;local_variable_type	: type	| ""var"" {{VarType}}	;local_variable_declarators	: local_variable_declarator 'declarator'	| local_variable_declarators "","" local_variable_declarator 'declarator'	;local_variable_declarator#	: <Identifier> 'name' {{}}#	| <Identifier> 'name' ""="" local_variable_initializer 'expression' {{}}	: _local_variable_declarator_name 'name' {{}}	| _local_variable_declarator_name 'name' ""="" local_variable_initializer 'expression' {{}}	;_local_variable_declarator_name	# Here to create a parse node	: <Identifier> {{SimpleName}}	;local_variable_initializer	: expression	| array_initializer	;local_constant_declaration	: ""const"" type 'type' const_declarators {{}}	;const_declarators	: const_declarator 'declarator' 	| const_declarators "","" const_declarator 'declarator'	;const_declarator	: <Identifier> 'name' ""="" constant_expression 'expression' {{}}	;expression_statement	: statement_expression 'expression' "";"" {{}}	;statement_expression	: invocation_expression	| null_conditional_invocation_expression	| object_creation_expression	| assignment	| post_increment_expression	| post_decrement_expression	| pre_increment_expression	| pre_decrement_expression	| await_expression	;selection_statement	: if_statement	| switch_statement	;if_statement	: ""if"" ""("" boolean_expression 'expression' "")"" embedded_statement 'thenStatement' {{}}	| ""if"" ""("" boolean_expression 'expression' "")"" embedded_statement 'thenStatement' ""else"" embedded_statement 'elseStatement' {{}}	;switch_statement	: ""switch"" ""("" expression 'expression' "")"" switch_block {{}}	;switch_block	: ""{"" _switch_sections <rightBrace>	;_switch_sections	:	| switch_sections	;switch_sections	: switch_section 'section'	| switch_sections switch_section 'section'	;switch_section	: switch_labels statement_list {{}}	;switch_labels	: switch_label 'label'	| switch_labels switch_label 'label'	;switch_label	: ""case"" constant_expression 'expression' "":"" {{}}	| ""default"" "":"" {{}}	;iteration_statement	: while_statement	| do_statement	| for_statement	| foreach_statement	;while_statement	: ""while"" ""("" boolean_expression 'expression' "")"" embedded_statement 'statement' {{}}	;do_statement	: ""do"" embedded_statement 'statement' ""while"" ""("" boolean_expression 'expression' "")"" "";"" {{}}	;for_statement	: ""for"" ""("" _for_initializer "";"" _for_condition "";"" _for_iterator "")"" embedded_statement 'statement' {{}}	;_for_initializer	: 	| for_initializer 'initializer'	;for_initializer	: local_variable_declaration	| statement_expression_list {{StatementList}}	;_for_condition	:	| for_condition 'condition'	;for_condition	: boolean_expression	;_for_iterator	: 	| for_iterator 'iterator'	;for_iterator	: statement_expression_list {{StatementList}}	;statement_expression_list	: statement_expression 'expression'	| statement_expression_list "","" statement_expression 'expression'	;foreach_statement	: ""foreach"" ""("" local_variable_type 'type' <Identifier> 'name' ""in"" expression 'expression' "")"" embedded_statement 'statement' {{}}	;jump_statement	: break_statement	| continue_statement	| goto_statement	| return_statement	| throw_statement	;break_statement	: ""break"" "";"" {{}}	;continue_statement	: ""continue"" "";"" {{}}	;goto_statement	: ""goto"" <Identifier> "";"" {{}}	| ""goto"" ""case"" constant_expression 'expression' "";"" {{}}	| ""goto"" ""default"" "";"" {{}}	;return_statement	: ""return"" _expression "";"" {{}}	;throw_statement	: ""throw"" _expression "";"" {{}}	;try_statement	: ""try"" block 'block' catch_clauses {{}}	| ""try"" block 'block' finally_clause 'finally' {{}}	| ""try"" block 'block' catch_clauses finally_clause 'finally' {{}}	;catch_clauses	: catch_clause 'clause'	| catch_clauses catch_clause 'clause'	;catch_clause	: ""catch"" _exception_specifier _exception_filter block 'block' {{}}	;_exception_specifier	:	| exception_specifier	;exception_specifier	: ""("" type 'type' _identifier "")""	;_exception_filter	:	| exception_filter 'filter'	;exception_filter	: ""when"" ""("" expression 'expression' "")"" {{}}	;finally_clause	: ""finally"" block 'block' {{}}	;checked_statement	: ""checked"" block 'block' {{}}	;unchecked_statement	: ""unchecked"" block 'block' {{}}	;lock_statement	: ""lock"" ""("" expression 'expression' "")"" embedded_statement 'statement' {{}}	;using_statement	: ""using"" ""("" resource_acquisition 'expression' "")"" embedded_statement 'statement' {{}}	;resource_acquisition	: local_variable_declaration	| expression	;yield_statement	: ""yield"" ""return"" expression 'expression' "";"" {{}}	| ""yield"" ""break"" "";"" {{}}	;# B.2.7 Classesclass_declaration	: _attributes _class_modifiers _partial ""class"" <Identifier> 'name' _type_parameter_list _class_base _type_parameter_constraints_clauses class_body _semicolon {{}}	;_class_modifiers	:	| class_modifiers	;class_modifiers	: class_modifier 'modifier'	| class_modifiers class_modifier 'modifier'	;class_modifier	: ""new"" 	| ""public""	| ""protected""	| ""internal""	| ""private""	| ""abstract""	| ""sealed""	| ""static""	;_type_parameter_list	: 	| type_parameter_list 'typeParameters'	;type_parameter_list	: ""<"" 'lessThan' type_parameters <gt> 'greaterThan' {{}}	;type_parameters	: _attributes type_parameter 'parameter'	| type_parameters "","" _attributes type_parameter 'parameter'	;type_parameter	: <Identifier> 'name'  {{TypeName}}	;_class_base	: 	| class_base	;class_base	: "":"" class_type 'supertype'	| "":"" interface_type_list	| "":"" class_type 'supertype' "","" interface_type_list	;interface_type_list	: interface_type 'supertype'	| interface_type_list "","" 'comma' interface_type 'supertype'	;_type_parameter_constraints_clauses	: 	| type_parameter_constraints_clauses	;type_parameter_constraints_clauses	: type_parameter_constraints_clause 'constraintClause'	| type_parameter_constraints_clauses type_parameter_constraints_clause 'constraintClause'	;type_parameter_constraints_clause	: ""where"" 'whereToken' type_parameter 'parameter' "":"" 'colon' type_parameter_constraints {{}}	;type_parameter_constraints	: primary_constraint  'constraint'	| secondary_constraints	| constructor_constraint 'constraint'	| primary_constraint 'constraint' "","" secondary_constraints	| primary_constraint 'constraint' "","" constructor_constraint 'constraint'	| secondary_constraints "","" constructor_constraint 'constraint'	| primary_constraint 'constraint' "","" secondary_constraints "","" constructor_constraint 'constraint'	;primary_constraint	: class_type 'type' {{TypeConstraint}}	| ""class"" {{}}	| ""struct"" {{}}	;secondary_constraints	: interface_type_constraint 'constraint'	| type_parameter 'constraint'	| secondary_constraints "","" interface_type_constraint 'constraint'	| secondary_constraints "","" type_parameter 'constraint'	;## added Interface_type_constraintinterface_type_constraint	: interface_type 'type' {{TypeConstraint}}	;constructor_constraint	: ""new"" ""("" "")"" {{}}	;class_body	: ""{"" _class_member_declarations <rightBrace>	;_class_member_declarations	: 	| class_member_declarations	;class_member_declarations	: class_member_declaration 'declaration'	| class_member_declarations class_member_declaration 'declaration'	;class_member_declaration	: constant_declaration	| field_declaration	| method_declaration	| property_declaration	| event_declaration	| indexer_declaration	| operator_declaration	| constructor_declaration	| destructor_declaration	| static_constructor_declaration	| type_declaration	;constant_declaration	: _attributes _constant_modifiers ""const"" type 'type' constant_declarators "";"" {{}}	;_constant_modifiers	: 	| constant_modifers	;constant_modifers	: constant_modifer 'modifier'	| constant_modifers constant_modifer 'modifier'	;constant_modifer	: ""new""	| ""public""	| ""protected""	| ""internal""	| ""private""	;constant_declarators	: constant_declarator 'declarator'	| constant_declarators "","" constant_declarator 'declarator'	;constant_declarator	: <Identifier> ""="" constant_expression 'expression' {{}}	;field_declaration	: _attributes _field_modifiers type 'type' variable_declarators "";"" {{}}	;_field_modifiers	: 	| field_modifiers	;field_modifiers	: field_modifier 'modifier'	| field_modifiers field_modifier 'modifier'	;field_modifier	: ""new""	| ""public""	| ""protected""	| ""internal""	| ""private""	| ""static""	| ""readonly""	| ""volatile""	;variable_declarators	: variable_declarator 'declarator'	| variable_declarators "","" variable_declarator 'declarator'	;variable_declarator	: <Identifier> {{}}	| <Identifier> ""="" variable_initializer 'initializer' {{}}	;variable_initializer	: expression	| array_initializer	;method_declaration	: method_header 'header' method_body 'body' {{}}	;method_header	: _attributes _method_modifiers _partial return_type 'returnType' member_name _type_parameter_list ""("" _formal_parameters_list "")"" _type_parameter_constraints_clauses {{}}	;_method_modifiers	: 	| method_modifiers	;method_modifiers	: method_modifier 'modifier'	| method_modifiers method_modifier 'modifier'	;method_modifier	: ""new""	| ""public""	| ""protected""	| ""internal""	| ""private""	| ""static""	| ""virtual""	| ""sealed""	| ""override""	| ""abstract""	| ""extern""	;return_type	: type	| void_type	;member_name	: <Identifier> 'name'	| interface_type 'interface' ""."" <Identifier> 'name'	;method_body	: block 'block' {{}}	| ""=>"" expression 'expression' "";"" {{}}	| "";"" {{}}	;_formal_parameters_list	: 	| formal_parameters_list	;formal_parameters_list	: fixed_parameters	| fixed_parameters "","" 'comma' parameter_array 'parameter'	| parameter_array 'parameter'	;fixed_parameters	: fixed_parameter 'parameter'	| fixed_parameters "","" 'comma' fixed_parameter 'parameter'	;fixed_parameter	: _attributes _parameter_modifier type 'type' <Identifier> 'name' _default_argument {{FixedParameter}}	;_default_argument	:	| default_argument	;default_argument	: ""="" expression 'expression'	;_parameter_modifier	:	| parameter_modifier 'modifier'	;parameter_modifier	: ""ref"" 	| ""out""	| ""this""	;parameter_array	: _attributes ""params"" 'paramsToken' array_type 'type' <Identifier> 'name' {{ArrayParameter}}	;property_declaration	: _attributes _property_modifiers type 'type' member_name property_body {{}}	;_property_modifiers	:	| property_modifiers	;property_modifiers	: property_modifier 'modifier'	| property_modifiers property_modifier 'modifier'	;property_modifier	: ""new""	| ""public""	| ""protected""	| ""internal""	| ""private""	| ""static""	| ""virtual""	| ""sealed""	| ""override""	| ""abstract""	| ""extern""	;property_body	: ""{"" accessor_declarations <rightBrace> _property_initializer	| ""=>"" expression 'expression' "";"" 'semicolon'	;_property_initializer	:	| property_initializer	;property_initializer	: ""="" variable_initializer 'initializer' "";"" 'semicolon'	;accessor_declarations	: get_accessor_declaration 'getAccessor' _set_accessor_declaration 'setAccessor'	| set_accessor_declaration 'setAccessor' _get_accessor_declaration 'getAccessor'	;_get_accessor_declaration	:	| get_accessor_declaration	;get_accessor_declaration	: _attributes _accessor_modifiers ""get"" accessor_body {{}}	;_set_accessor_declaration	:	| set_accessor_declaration	;set_accessor_declaration	: _attributes _accessor_modifiers ""set"" accessor_body {{}}	;_accessor_modifiers	:	| accessor_modifiers	;accessor_modifiers	: ""protected"" 'modifier'	| ""internal"" 'modifier'	| ""private"" 'modifier'	| ""protected"" 'modifier' ""internal"" 'modifier'	| ""internal"" 'modifier' ""protected"" 'modifier'	;accessor_body	: block 'body'	| "";""	;event_declaration	: _attributes _event_modifiers ""event"" type 'type' variable_declarators "";"" {{}}	| _attributes _event_modifiers ""event"" type 'type' member_name ""{"" event_accessor_declarations <rightBrace> {{}}	;_event_modifiers	:	| event_modifiers	;event_modifiers	: event_modifier 'modifier'	| event_modifiers event_modifier 'modifier'	;event_modifier	: ""new""	| ""public""	| ""protected""	| ""internal""	| ""private""	| ""static""	| ""virtual""	| ""sealed""	| ""override""	| ""abstract""	| ""extern""	;event_accessor_declarations	: add_accessor_declaration 'addDeclaration' remove_accessor_declaration 'removeDeclaration'	| remove_accessor_declaration 'removeDeclaration' add_accessor_declaration 'addDeclaration'	;add_accessor_declaration	: _attributes ""add"" block 'block' {{}}	;remove_accessor_declaration	: _attributes ""remove"" block 'block' {{}}	;indexer_declaration	: _attributes _indexer_modifiers indexer_declarator indexer_body {{}}	;_indexer_modifiers	:	| indexer_modifiers	;indexer_modifiers	: indexer_modifier 'modifier'	| indexer_modifiers indexer_modifier 'modifier'	;indexer_modifier	: ""new""	| ""public""	| ""protected""	| ""internal""	| ""private""	| ""virtual""	| ""sealed""	| ""override""	| ""abstract""	| ""extern""	;indexer_declarator	: type 'returnType' ""this"" ""["" formal_parameters_list ""]""	| type 'returnType' interface_type 'type' ""."" ""this"" ""["" formal_parameters_list ""]""	;indexer_body	: ""{"" accessor_declarations <rightBrace>	| ""=>"" expression 'expression' "";""	;operator_declaration	: _attributes operator_modifiers operator_declarator operator_body 'body' {{}}	;operator_modifiers	: operator_modifier 'modifier'	| operator_modifiers operator_modifier 'modifier'	;operator_modifier	: ""public""	| ""static""	| ""extern""	;operator_declarator	: unary_operator_declarator	| binary_operator_declarator	| conversion_operator_declarator	;unary_operator_declarator	: type 'returnType' ""operator"" overloadable_unary_operator 'operator' ""("" type 'type' <Identifier> 'argument' "")""	;overloadable_unary_operator	: ""+""	| ""-""	| ""!!""	| ""~""	| ""++""	| ""--""	| ""true""	| ""false""	;binary_operator_declarator	: type 'returnType' ""operator"" overloadable_binary_operator 'operator' ""("" type 'type' <Identifier> 'argument' "","" type 'type' <Identifier> 'argument' "")""	;overloadable_binary_operator	: ""+""	| ""-""	| ""*""	| ""/""	| ""%""	| ""&""	| ""|""	| ""^""	| ""<<""	| <gtgt>	| ""==""	| ""!!=""	| <gt>	| ""<""	| "">=""	| ""<=""	;conversion_operator_declarator	: ""implicit"" ""operator"" type 'returnType' ""("" type 'type' <Identifier> 'argument' "")""	| ""explicit"" ""operator"" type 'returnType' ""("" type 'type' <Identifier> 'argument' "")""	;operator_body	: block 'block' {{MethodBody}}	| ""=>"" expression 'expression' "";"" {{MethodBody}}	| "";"" {{MethodBody}}	;constructor_declaration	: _attributes _constructor_modifiers constructor_declarator constructor_body {{}}	;_constructor_modifiers	: 	| constructor_modifiers	;constructor_modifiers	: constructor_modifier 'modifier'	| constructor_modifiers constructor_modifier 'modifier'	;constructor_modifier	: ""public""	| ""protected""	| ""internal""	| ""private""	| ""extern""	;constructor_declarator	: <Identifier> ""("" _formal_parameters_list "")"" _constructor_initializer	;_constructor_initializer	: 	| constructor_initializer 'initializer'	;constructor_initializer	: "":"" ""base"" ""("" _argument_list "")"" {{}}	| "":"" ""this"" ""("" _argument_list "")"" {{}}	;constructor_body	: block 'block'	| "";""	;static_constructor_declaration	: _attributes static_constructor_modifiers <Identifier> ""("" "")"" static_constructor_body {{}}	;# redefined in the unsafe sectionstatic_constructor_modifiers	: _extern ""static""	| ""static"" _extern	;static_constructor_body	: block 'block'	| "";""	;# redefined in the unsafe section#destructor_declaration#	: _attributes _extern ""~"" <Identifier> ""("" "")"" destructor_body#	;#destructor_body#	: block#	| "";""#	;# B.2.8 Structsstruct_declaration	: _attributes _struct_modifiers _partial ""struct"" <Identifier> _type_parameter_list _struct_interfaces _type_parameter_constraints_clauses struct_body _semicolon {{}}	;_struct_modifiers	: 	| struct_modifiers	;struct_modifiers	: struct_modifier 'modifier'	| struct_modifiers struct_modifier 'modifier'	;struct_modifier	: ""new""	| ""public""	| ""protected""	| ""internal""	| ""private""	;_struct_interfaces	:	| struct_interfaces	;struct_interfaces	: "":"" interface_type_list	;struct_body	: ""{"" _struct_member_declarations <rightBrace>	;_struct_member_declarations	: 	| struct_member_declarations	;struct_member_declarations	: struct_member_declaration 'declaration'	| struct_member_declarations struct_member_declaration 'declaration'	;struct_member_declaration	: constant_declaration	| field_declaration	| method_declaration	| property_declaration	| event_declaration	| indexer_declaration	| operator_declaration	| constructor_declaration	| static_constructor_declaration	| type_declaration	;# B.2.9 Arrays_array_initializer	:	| array_initializer	;array_initializer	: ""{"" _variable_initializer_list <rightBrace> {{}}	| ""{"" variable_initializer_list "","" <rightBrace> {{}}	;_variable_initializer_list	:	| variable_initializer_list	;variable_initializer_list	: variable_initializer 'initializer'	| variable_initializer_list "","" variable_initializer 'initializer'	;variable_initializer	: expression	| array_initializer	;# B.2.10 Interfacesinterface_declaration	: _attributes _interface_modifiers _partial ""interface"" 'interfaceToken' <Identifier> 'name' _variant_type_parameter_list _interface_base _type_parameter_constraints_clauses interface_body _semicolon {{}}	;_interface_modifiers	:	| interface_modifiers	;interface_modifiers	: interface_modifier 'modifier'	| interface_modifiers interface_modifier 'modifier'	;interface_modifier	: ""new""	| ""public""	| ""protected""	| ""internal""	| ""private""	;_variant_type_parameter_list	:	| variant_type_parameter_list 'typeParameters'	;variant_type_parameter_list	: ""<"" 'lessThan' variant_type_parameters <gt> 'greaterThan' {{}}	;variant_type_parameters	: _attributes _variance_annotation type_parameter 'parameter'	| variant_type_parameters "","" _attributes _variance_annotation type_parameter 'parameter'	;_variance_annotation	:	| variance_annotation 'annotation'	;variance_annotation	: ""in""	| ""out""	;_interface_base	: 	| interface_base	;interface_base	: "":"" 'colon' interface_type_list	;interface_body	: ""{"" 'leftBrace' _interface_member_declarations <rightBrace> 'rightBrace'	;_interface_member_declarations	:	| interface_member_declarations	;interface_member_declarations	: interface_member_declaration 'declaration'	| interface_member_declarations interface_member_declaration 'declaration'	;interface_member_declaration	: interface_method_declaration	| property_declaration	| interface_event_declaration	| indexer_declaration	;interface_method_declaration	: _attributes _new 'modifier' return_type 'type' <Identifier> 'name' _type_parameter_list ""("" 'leftParen' _formal_parameters_list "")"" 'rightParen' _type_parameter_constraints_clauses method_body 'body' {{}}	;interface_property_declaration	: _attributes _new 'modifier' type 'type' <Identifier> 'name' ""{"" 'leftBrace' interface_accessors <rightBrace> 'rightBrace' {{}}	;interface_accessors	#This was changed to use the interface_(g/s)et_accessor	: interface_get_accessor 'getAccessor'	| interface_set_accessor 'setAccessor'	| interface_get_accessor 'getAccessor' interface_set_accessor 'setAccessor'	| interface_set_accessor 'setAccessor' interface_get_accessor 'getAccessor'	;interface_get_accessor	: _attributes ""get"" 'accessorType' "";"" 'semicolon' {{InterfacePropertyAccessor}}	;interface_set_accessor	: _attributes ""set"" 'accessorType' "";"" 'semicolon' {{InterfacePropertyAccessor}}	;interface_event_declaration	: _attributes _new 'modifier' ""event"" 'eventToken' type 'type' <Identifier> 'name' "";"" 'semicolon' {{}}	;interface_indexer_declaration	: _attributes _new 'modifier' type 'type' ""this"" 'thisToken' ""["" 'leftBracket' formal_parameters_list ""]"" 'rightBracket' ""{"" 'leftBrace' interface_accessors <rightBrace> 'rightBrace' {{}}	;# B.2.11 Enumsenum_declaration	: _attributes _enum_modifers ""enum"" 'enumToken' <Identifier> 'name' _enum_base enum_body _semicolon {{}}	;_enum_base	:	| enum_base	;enum_base	: "":"" integral_type 'typeToken'	;enum_body	: ""{"" 'leftBrace' _enum_member_declarations <rightBrace> 'rightBrace'	| ""{"" 'leftBrace' enum_member_declarations "","" 'comma' <rightBrace> 'rightBrace'	;_enum_modifers	:	| enum_modifers	;enum_modifers	: enum_modifer 'modifier'	| enum_modifers enum_modifer 'modifier'	;enum_modifer	: ""new""	| ""public""	| ""protected""	| ""internal""	| ""private""	;_enum_member_declarations	:	| enum_member_declarations	;enum_member_declarations	: enum_member_declaration 'declaration'	| enum_member_declarations "","" 'comma' enum_member_declaration 'declaration'	;enum_member_declaration	: _attributes <Identifier> 'name' {{EnumDeclaration}}	| _attributes <Identifier> 'name' ""="" 'equal' constant_expression 'value' {{EnumDeclaration}}	;# B.2.12 Delegatesdelegate_declaration	: _attributes _delegate_modifiers ""delegate"" 'delegateToken' return_type 'type' <Identifier> 'name' _variant_type_parameter_list ""("" 'leftParen' _formal_parameters_list "")"" 'rightParen' _type_parameter_constraints_clauses "";"" 'semicolon' {{}}	;_delegate_modifiers	:	| delegate_modifiers	;delegate_modifiers	: delegate_modifier 'modifier'	| delegate_modifiers delegate_modifier 'modifier'	;delegate_modifier	: ""new""	| ""public""	| ""protected""	| ""internal""	| ""private""	;# B.2.13 Attributes_global_attributes	:	| global_attributes	;global_attributes	: global_attribute_sections	;global_attribute_sections	: global_attribute_section 'attribute'	| global_attribute_sections global_attribute_section 'attribute'	;global_attribute_section	: ""["" 'leftBracket' global_attribute_target_specifier attribute_list ""]"" 'rightBracket' {{Attribute}}	| ""["" 'leftBracket' global_attribute_target_specifier attribute_list "","" 'comma' ""]"" 'rightBracket' {{Attribute}}	;global_attribute_target_specifier	: global_attribute_target 'target' "":"" 'colon'	;global_attribute_target	: ""assembly""	| ""module""	;_attributes	:	| attributes	;attributes	: attribute_sections	;attribute_sections	: attribute_section 'attribute'	| attribute_sections attribute_section 'attribute'	;attribute_section	: ""["" 'leftBracket' _attribute_target_specifier attribute_list ""]"" 'rightBracket' {{Attribute}}	| ""["" 'leftBracket' _attribute_target_specifier attribute_list "","" 'comma' ""]"" 'rightBracket' {{Attribute}}	;_attribute_target_specifier	: 	| attribute_target_specifier	;attribute_target_specifier	: attribute_target 'target' "":"" 'colon'	;attribute_target	: ""field""	| ""event""	| ""method""	| ""param""	| ""property""	| ""return""	| ""type""	;attribute_list	: attribute 'attributeValue'	| attribute_list "","" 'comma' attribute 'attributeValue'	;attribute	: attribute_name 'name' _attribute_arguments {{AttributeValue}}	;attribute_name	: type_name	;_attribute_arguments	: 	| attribute_arguments	;attribute_arguments	: ""("" 'leftParen' _positional_argument_list "")"" 'rightParen'	| ""("" 'leftParen' positional_argument_list "","" 'comma' named_argument_list "")"" 'rightParen'	| ""("" 'leftParen' named_argument_list "")"" 'rightParen'	;_positional_argument_list	:	| positional_argument_list	;positional_argument_list	: positional_argument 'argument'	| positional_argument_list "","" 'comma' positional_argument 'argument'	;positional_argument	: attribute_argument_expression	;named_argument_list	: named_argument 'argument'	| named_argument_list "","" 'comma' named_argument 'argument'	;named_argument	: <Identifier> 'name' ""="" 'equal' attribute_argument_expression 'value' {{NamedArgument}}	;attribute_argument_expression	: expression	;# B.1.8 Literalsliteral	: boolean_literal 'token' {{BooleanLiteralExpression}}	| <IntegerLiteral> 'token' {{IntegerLiteralExpression}}	| <RealLiteral> 'token' {{RealLiteralExpression}}	| <CharacterLiteral> 'token' {{CharacterLiteralExpression}}	| <StringLiteral> 'token' {{StringLiteralExpression}}	| <NullLiteral> 'token' {{NullLiteralExpression}}	;boolean_literal	: ""true""	| ""false""	;# Misc_semicolon	:	| "";"" 'semicolon'	;_new	:	| ""new""	;_partial	:	| ""partial"" 'partialToken'	;_extern	:	| ""extern"" 'modifier'	;_identifier	:	| <Identifier> 'name'	;# B.3 Unsafe codeclass_modifier	: ""unsafe""	;struct_modifier	: ""unsafe""	;interface_modifier	: ""unsafe""	;delegate_modifier	: ""unsafe""	;field_modifier	: ""unsafe""	;method_modifier	: ""unsafe""	;property_modifier	: ""unsafe""	;event_modifier	: ""unsafe""	;indexer_modifier	: ""unsafe""	;operator_modifier	: ""unsafe""	;constructor_modifier	: ""unsafe""	;destructor_declaration	# Changed from destructor_body to method_body since they are the same	: _attributes _extern _unsafe ""~"" <Identifier> ""("" "")"" method_body 'body' {{}}	| _attributes _unsafe _extern ""~"" <Identifier> ""("" "")"" method_body 'body' {{}}	;_unsafe	:	| ""unsafe"" 'modifier'	;static_constructor_modifiers	: _extern _unsafe ""static""	| _unsafe _extern ""static""	| _extern ""static"" ""unsafe""	| _unsafe ""static"" _extern	| ""static"" _extern _unsafe	| ""static"" _unsafe _extern	;embedded_statement	: unsafe_statement	;unsafe_statement	: ""unsafe"" block 'block' {{UnsafeStatement}}	;type	: pointer_type	;pointer_type	: unmanaged_type 'type' ""*"" {{}}	| void_type 'type' ""*"" {{}}	;unmanaged_type	: type	;primary_no_array_creation_expression	: pointer_member_access	| pointer_element_access	| sizeof_expression	;unary_expression	: pointer_indirection_expression	| addressof_expression	;pointer_indirection_expression	: ""*"" 'operator' unary_expression 'expression' {{PrefixExpression}}	;pointer_member_access	: primary_expression 'expression' ""->"" 'arrowToken' <Identifier> 'name' {{}}	;pointer_element_access	: primary_no_array_creation_expression 'expression' ""["" expression 'indexExpression' ""]"" {{}}	;addressof_expression	: ""&"" 'operator' unary_expression 'expression' {{PrefixExpression}}	;sizeof_expression	: ""sizeof"" ""("" unmanaged_type 'type' "")"" {{}}	;embedded_statement	: fixed_statement	;fixed_statement	: ""fixed"" ""("" pointer_type 'type' fixed_pointer_declarators "")"" embedded_statement 'statement' {{}}	;fixed_pointer_declarators	: fixed_pointer_declarator 'declarator'	| fixed_pointer_declarators "","" fixed_pointer_declarator 'declarator'	;fixed_pointer_declarator	: <Identifier> ""="" fixed_pointer_initializer {{}}	;fixed_pointer_initializer	: ""&"" variable_reference 'expression'	| expression 'expression'	;struct_member_declaration	: fixed_size_buffer_declaration	;fixed_size_buffer_declaration	: _attributes _fixed_size_buffer_modifiers ""fixed"" buffer_element_type 'type' fixed_size_buffer_declarators "";"" {{}}	;_fixed_size_buffer_modifiers	: 	| fixed_size_buffer_modifiers	;fixed_size_buffer_modifiers	: fixed_size_buffer_modifier 'modifier'	| fixed_size_buffer_modifiers fixed_size_buffer_modifier 'modifier'	;fixed_size_buffer_modifier	: ""new""	| ""public""	| ""protected""	| ""internal""	| ""private""	| ""unsafe""	;buffer_element_type	: type	;fixed_size_buffer_declarators	: fixed_size_buffer_declarator 'declarator'	| fixed_size_buffer_declarators fixed_size_buffer_declarator 'declarator'	;fixed_size_buffer_declarator	: <Identifier> 'name' ""["" constant_expression 'expression' ""]"" {{}}	;local_variable_initializer	: stackalloc_initializer	;stackalloc_initializer	: ""stackalloc"" unmanaged_type 'type' ""["" expression 'expression' ""]"" {{}}	;# Additionsvoid_type	: ""void"" {{}}	;"! !!CSharpParser class methodsFor: 'generated'!startingStateForblock	^ 5! !!CSharpParser class methodsFor: 'generated'!ambiguousTransitions^#(#[ 0 66 0 78 0 82] #[ 0 134 5 89] #[ 1 2 1 6] #[ 1 38 1 42] #[ 1 46 1 50 1 54 1 58 1 62] #[ 1 66 6 13] #[ 2 190 2 194] #[ 0 149 2 198] #[ 0 157 2 198] #[ 0 161 2 198] #[ 0 177 2 198] #[ 0 193 2 198] #[ 0 205 2 198] #[ 0 225 2 198] #[ 0 233 2 198] #[ 0 245 2 198] #[ 0 253 2 198] #[ 1 1 2 198] #[ 1 9 2 198] #[ 1 37 2 198] #[ 1 41 2 198] #[ 1 53 2 198] #[ 1 65 2 198] #[ 2 198 4 213] #[ 2 202 5 73] #[ 1 2 6 1] #[ 1 138 1 142] #[ 3 78 3 82 3 86 3 90] #[ 3 102 7 129] #[ 0 66 0 78 0 82 3 90] #[ 3 102 3 106 7 165] #[ 3 106 7 169] #[ 3 102 3 106] #[ 3 78 3 82 3 86 3 90 3 110] #[ 3 118 8 49] #[ 3 186 3 190 3 194 3 198 3 202] #[ 3 186 3 198 3 202] #[ 3 186 3 190 3 198 3 202] #[ 3 206 3 210 3 214 3 218 3 222] #[ 3 206 3 218 3 222] #[ 3 206 3 210 3 218 3 222] #[ 3 226 3 230 3 234 3 238 3 242] #[ 3 226 3 238 3 242] #[ 3 226 3 230 3 238 3 242] #[ 3 246 3 250 3 254 4 2 4 6] #[ 3 246 4 2 4 6] #[ 3 246 3 250 4 2 4 6] #[ 4 10 4 14 4 18 4 22 4 26] #[ 4 10 4 22 4 26] #[ 4 10 4 14 4 22 4 26] #[ 4 38 4 42 4 46 4 50] #[ 4 38 4 46 4 50] #[ 1 2 1 6 2 206] #[ 1 2 2 206] #[ 1 2 1 6 6 1] #[ 1 130 9 229] #[ 1 134 9 245] #[ 4 194 4 198] #[ 4 206 5 145] #[ 4 214 10 109] #[ 4 230 4 234] #[ 3 182 5 142 5 146 5 150 5 154] #[ 5 146 5 150 5 154] #[ 5 142 5 146 5 150 5 154] #[ 3 182 5 150] #[ 3 182 5 142 5 146 5 150] #[ 5 158 5 162 5 166 5 170] #[ 5 158 5 166 5 170 5 174] #[ 5 158 5 162 5 166 5 170 5 174 5 178] #[ 5 158 5 162 5 166 5 170 5 178] #[ 5 158 5 162 5 170 5 174 5 182] #[ 5 158 5 162 5 166 5 170 5 174 5 178 5 182] #[ 5 158 5 166 5 170 5 174 5 178] #[ 3 186 5 186 5 190 5 194 5 198] #[ 5 186 5 194 5 198 5 202] #[ 5 186 5 190 5 194 5 198 5 210] #[ 3 186 3 190 3 194 3 198 3 202 5 186 5 190 5 194 5 198 5 202 5 206 5 210] #[ 3 186 3 190 3 194 3 198 3 202 5 186 5 190 5 194 5 198 5 202 5 206] #[ 5 186 5 190 5 194 5 198] #[ 3 186 3 198 3 202 5 186] #[ 3 186 5 186 5 190 5 198 5 202] #[ 3 186 3 190 3 198 3 202 5 186 5 190 5 194 5 198 5 202 5 210] #[ 5 186 5 194 5 198 5 202 5 210] #[ 3 206 5 214 5 218 5 222 5 226] #[ 5 218 5 222 5 226 5 230] #[ 5 214 5 218 5 222 5 226] #[ 3 206 3 210 3 214 3 218 3 222 5 214 5 218 5 222 5 226 5 230 5 234] #[ 3 206 3 218 3 222 5 222] #[ 3 206 5 214 5 222 5 226 5 230] #[ 3 206 3 210 3 218 3 222 5 214 5 218 5 222 5 226 5 230] #[ 5 238 5 242 5 246 5 250] #[ 5 238 5 242 5 246] #[ 5 242 5 246 5 250] #[ 3 226 5 254 6 2 6 6 6 10] #[ 5 254 6 2 6 6 6 14] #[ 5 254 6 2 6 6 6 10 6 22] #[ 3 226 3 230 3 234 3 238 3 242 5 254 6 2 6 6 6 10 6 14 6 18 6 22] #[ 3 226 3 230 3 234 3 238 3 242 5 254 6 2 6 6 6 10 6 14 6 18] #[ 5 254 6 2 6 6 6 10] #[ 3 226 3 238 3 242 6 6] #[ 3 226 5 254 6 6 6 10 6 14] #[ 3 226 3 230 3 238 3 242 5 254 6 2 6 6 6 10 6 14 6 22] #[ 5 254 6 2 6 6 6 14 6 22] #[ 3 246 6 26 6 30 6 34 6 38] #[ 6 26 6 30 6 38 6 42] #[ 6 26 6 30 6 34 6 38 6 50] #[ 3 246 3 250 3 254 4 2 4 6 6 26 6 30 6 34 6 38 6 42 6 46 6 50] #[ 3 246 3 250 3 254 4 2 4 6 6 26 6 30 6 34 6 38 6 42 6 46] #[ 6 26 6 30 6 34 6 38] #[ 3 246 4 2 4 6 6 26] #[ 3 246 6 26 6 34 6 38 6 42] #[ 3 246 3 250 4 2 4 6 6 26 6 30 6 34 6 38 6 42 6 50] #[ 6 26 6 30 6 38 6 42 6 50] #[ 4 10 6 54 6 58 6 62 6 66] #[ 6 54 6 58 6 62 6 70 6 74] #[ 6 54 6 58 6 62 6 66 6 70 6 82] #[ 4 10 4 14 4 18 4 22 4 26 6 54 6 58 6 62 6 66 6 74 6 78 6 82] #[ 4 10 4 14 4 18 4 22 4 26 6 54 6 58 6 62 6 66 6 74 6 78] #[ 6 54 6 58 6 62 6 66] #[ 4 10 4 22 4 26 6 58] #[ 4 10 4 14 4 18 4 22 4 26 6 54 6 58 6 62 6 66 6 70 6 74 6 78 6 82] #[ 4 10 6 54 6 58 6 66 6 70 6 74] #[ 4 10 4 14 4 22 4 26 6 54 6 58 6 62 6 66 6 70 6 74 6 82] #[ 6 54 6 58 6 62 6 70 6 74 6 82] #[ 4 30 6 90 6 94 6 98 6 102] #[ 6 90 6 94 6 98] #[ 6 90 6 94 6 98 6 102] #[ 4 30 6 90] #[ 4 30 6 90 6 98 6 102] #[ 4 34 6 106 6 110 6 114] #[ 6 110 6 114 6 118 6 122] #[ 3 102 6 106 6 110 6 114 6 122 11 133] #[ 4 34 6 106 6 110 6 114 6 118] #[ 6 106 6 110 6 114] #[ 4 34 6 114] #[ 4 34 6 106 6 110 6 114 6 118 6 122] #[ 3 106 4 34 6 106 6 110 6 114 6 118 6 122 11 137] #[ 3 102 3 106 6 110 6 114 6 118 6 122] #[ 4 38 6 126 6 130 6 134 6 138] #[ 6 126 6 134 6 138 6 142 6 146] #[ 6 126 6 130 6 134 6 138 6 142 6 150 6 154] #[ 4 38 4 42 4 46 4 50 6 126 6 130 6 134 6 138 6 146 6 154] #[ 4 38 4 42 4 46 4 50 6 126 6 130 6 134 6 138 6 146] #[ 6 126 6 130 6 134 6 138] #[ 4 38 4 46 4 50 6 138] #[ 4 38 4 42 4 46 4 50 6 126 6 130 6 134 6 138 6 142 6 146 6 154] #[ 4 38 6 126 6 130 6 138 6 142 6 146 6 150] #[ 6 126 6 134 6 138 6 142 6 146 6 154] #[ 6 158 6 162 6 166 6 170] #[ 6 158 6 166 6 170] #[ 6 158 6 162 6 170] #[ 3 102 13 13] #[ 3 106 13 21] #[ 6 250 8 49] #[ 1 70 1 78] #[ 1 2 1 6 7 214] #[ 1 2 7 214] #[ 7 58 14 213] #[ 1 74 8 82] #[ 1 74 8 86] #[ 8 154 15 73] #[ 3 102 8 170] #[ 6 1 10 50] #[ 1 2 18 69] #[ 10 178 18 169] #[ 11 110 11 114] #[ 11 122 11 126] #[ 2 210 4 106] #[ 4 106 6 77] #[ 4 106 6 81] #[ 4 106 6 85] #[ 4 106 6 89] #[ 4 106 6 93] #[ 4 106 6 97] #[ 4 106 6 101] #[ 4 106 6 105] #[ 4 106 6 109] #[ 4 106 6 113] #[ 4 106 6 117] #[ 0 181 13 70] #[ 1 46 1 58] #[ 3 106 23 177] #[ 3 78 3 86 14 178] #[ 3 186 3 190 3 194 3 198 3 202 5 186 5 190 5 194 5 198 5 202 5 206 5 210 15 6] #[ 3 186 3 190 3 194 3 198 3 202 5 186 5 190 5 194 5 198 5 202 5 206 15 6] #[ 3 186 3 190 3 198 3 202 5 186 5 190 5 194 5 198 5 202 5 210 15 6] #[ 3 206 3 210 3 214 3 218 3 222 5 214 5 218 5 222 5 226 5 230 5 234 15 10] #[ 3 206 3 210 3 218 3 222 5 214 5 218 5 222 5 226 5 230 15 10] #[ 3 226 3 230 3 234 3 238 3 242 5 254 6 2 6 6 6 10 6 14 6 18 6 22 15 14] #[ 3 226 3 230 3 234 3 238 3 242 5 254 6 2 6 6 6 10 6 14 6 18 15 14] #[ 3 226 3 230 3 238 3 242 5 254 6 2 6 6 6 10 6 14 6 22 15 14] #[ 3 246 3 250 3 254 4 2 4 6 6 26 6 30 6 34 6 38 6 42 6 46 6 50 15 18] #[ 3 246 3 250 3 254 4 2 4 6 6 26 6 30 6 34 6 38 6 42 6 46 15 18] #[ 3 246 3 250 4 2 4 6 6 26 6 30 6 34 6 38 6 42 6 50 15 18] #[ 4 10 4 14 4 18 4 22 4 26 6 54 6 58 6 62 6 66 6 74 6 78 6 82 15 22] #[ 4 10 4 14 4 18 4 22 4 26 6 54 6 58 6 62 6 66 6 74 6 78 15 22] #[ 4 10 4 14 4 18 4 22 4 26 6 54 6 58 6 62 6 66 6 70 6 74 6 78 6 82 15 22] #[ 4 10 4 14 4 22 4 26 6 54 6 58 6 62 6 66 6 70 6 74 6 82 15 22] #[ 4 38 4 42 4 46 4 50 6 126 6 130 6 134 6 138 6 146 6 154 15 26] #[ 4 38 4 42 4 46 4 50 6 126 6 130 6 134 6 138 6 146 15 26] #[ 4 38 4 42 4 46 4 50 6 126 6 130 6 134 6 138 6 142 6 146 6 154 15 26] #[ 5 146 5 154] #[ 5 166 5 170] #[ 5 194 5 198] #[ 5 218 5 226] #[ 5 218 5 226 15 50] #[ 5 238 5 242] #[ 5 254 6 2] #[ 6 30 6 38] #[ 6 54 6 62] #[ 6 94 6 98] #[ 6 126 6 134] #[ 6 158 6 166]	).! !!CSharpParser class methodsFor: 'generated'!symbolTypes	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #CSCompilationUnitNode #CSCompilationUnitNode #CSNamespaceDeclarationNode #CSQualifiedIdentifierNode #OrderedCollection #OrderedCollection #OrderedCollection #CSExternAliasDirectiveNode #OrderedCollection #OrderedCollection #CSUsingDirectiveNode #CSUsingAliasDirectiveNode #CSUsingNamespaceDirectiveNode #CSUsingStaticDirectiveNode #OrderedCollection #OrderedCollection #CSDeclarationNode #CSDeclarationNode #CSQualifiedAliasMemberNode #CSTypeNode #CSTypeNode #CSTypeNode #CSTypeNode #CSTypeNode #CSTypeNode #CSTypeNode #CSSimpleTypeNode #SmaCCToken #SmaCCToken #SmaCCToken #CSNullableTypeNode #CSTypeNode #CSTypeNode #CSTypeNode #CSTypeNode #CSTypeNode #CSArrayTypeNode #CSTypeNode #OrderedCollection #OrderedCollection #CSRankSpecifierNode #OrderedCollection #OrderedCollection #CSTypeNode #CSTypeArgumentListNode #OrderedCollection #CSTypeNode #CSExpressionNode #OrderedCollection #OrderedCollection #CSArgumentNode #OrderedCollection #OrderedCollection #OrderedCollection #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSInterpolatedStringExpressionNode #OrderedCollection #ByteSymbol #OrderedCollection #CSInterpolationNode #OrderedCollection #ByteSymbol #OrderedCollection #CSSimpleNameNode #CSTypeArgumentListNode #CSExpressionNode #CSMemberAccessNode #CSTypeExpressionNode #CSTypeExpressionNode #CSSimpleTypeNode #CSInvocationExpressionNode #CSElementAccessNode #OrderedCollection #CSThisAccessNode #CSBaseAccessNode #CSPostExpressionNode #CSPostExpressionNode #CSObjectCreationExpressionNode #CSProgramNode #CSProgramNode #CSObjectInitializerNode #OrderedCollection #OrderedCollection #CSMemberInitializerNode #OrderedCollection #CSProgramNode #CSCollectionInitializerNode #OrderedCollection #CSElementInitializerNode #CSArrayCreationExpressionNode #CSDelegateCreationExpressionNode #CSAnonymousObjectCreationExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #CSMemberDeclaratorNode #CSTypeofExpressionNode #CSUnboundTypeNameNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #CSCheckedExpressionNode #CSUncheckedExpressionNode #CSDefaultValueExpressionNode #CSNameofExpressionNode #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSNullConditionalExpressionNode #CSExpressionNode #CSExpressionNode #CSNullConditionalMemberAccessNode #CSNullConditionalInvocationExpressionNode #CSPrefixExpressionNode #CSPrefixExpressionNode #CSCastExpressionNode #CSAwaitExpressionNode #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSLambdaExpressionNode #CSAnonymousMethodExpressionNode #CSProgramNode #CSExplicitAnonymousFunctionSignatureNode #CSExplicitAnonymousFunctionSignatureNode #OrderedCollection #OrderedCollection #CSAnonymousFunctionParameterNode #SmaCCToken #SmaCCToken #CSImplicitAnonymousFunctionSignatureNode #OrderedCollection #OrderedCollection #SmaCCToken #CSProgramNode #CSQueryExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #CSAssignmentNode #SmaCCToken #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSExpressionNode #CSStatementNode #CSStatementNode #CSBlockStatementNode #OrderedCollection #OrderedCollection #CSEmptyStatementNode #CSLabeledStatementNode #CSDeclarationStatementNode #CSLocalVariableDeclarationNode #CSTypeNode #OrderedCollection #CSLocalVariableDeclaratorNode #CSSimpleNameNode #CSProgramNode #CSLocalConstantDeclarationNode #OrderedCollection #CSConstDeclaratorNode #CSExpressionStatementNode #CSExpressionNode #CSStatementNode #CSIfStatementNode #CSSwitchStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #CSSwitchSectionNode #OrderedCollection #CSSwitchLabelNode #CSStatementNode #CSWhileStatementNode #CSDoStatementNode #CSForStatementNode #CSProgramNode #CSProgramNode #CSExpressionNode #CSExpressionNode #CSStatementListNode #CSStatementListNode #OrderedCollection #CSForeachStatementNode #CSStatementNode #CSBreakStatementNode #CSContinueStatementNode #CSGotoStatementNode #CSReturnStatementNode #CSThrowStatementNode #CSTryStatementNode #OrderedCollection #CSCatchClauseNode #OrderedCollection #OrderedCollection #CSExceptionFilterNode #CSExceptionFilterNode #CSFinallyClauseNode #CSCheckedStatementNode #CSUncheckedStatementNode #CSLockStatementNode #CSUsingStatementNode #CSProgramNode #CSYieldStatementNode #CSClassDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #CSTypeParameterListNode #CSTypeParameterListNode #OrderedCollection #CSTypeNameNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #CSTypeParameterConstraintsClauseNode #OrderedCollection #CSProgramNode #OrderedCollection #CSTypeConstraintNode #CSConstructorConstraintNode #OrderedCollection #OrderedCollection #OrderedCollection #CSDeclarationNode #CSConstantDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #CSConstantDeclaratorNode #CSFieldDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #CSVariableDeclaratorNode #CSProgramNode #CSMethodDeclarationNode #CSMethodHeaderNode #OrderedCollection #OrderedCollection #SmaCCToken #CSTypeNode #OrderedCollection #CSMethodBodyNode #OrderedCollection #OrderedCollection #OrderedCollection #CSFixedParameterNode #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #CSArrayParameterNode #CSPropertyDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #CSGetAccessorDeclarationNode #CSGetAccessorDeclarationNode #CSSetAccessorDeclarationNode #CSSetAccessorDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #CSEventDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #CSAddAccessorDeclarationNode #CSRemoveAccessorDeclarationNode #CSIndexerDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #CSOperatorDeclarationNode #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #SmaCCToken #OrderedCollection #CSMethodBodyNode #CSConstructorDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #CSConstructorInitializerNode #CSConstructorInitializerNode #OrderedCollection #CSStaticConstructorDeclarationNode #OrderedCollection #OrderedCollection #CSStructDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #CSDeclarationNode #CSArrayInitializerNode #CSArrayInitializerNode #OrderedCollection #OrderedCollection #CSInterfaceDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #CSVariantTypeParameterListNode #CSVariantTypeParameterListNode #OrderedCollection #SmaCCToken #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #CSDeclarationNode #CSInterfaceMethodDeclarationNode #CSInterfacePropertyDeclarationNode #OrderedCollection #CSInterfacePropertyAccessorNode #CSInterfacePropertyAccessorNode #CSInterfaceEventDeclarationNode #CSInterfaceIndexerDeclarationNode #CSEnumDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #CSEnumDeclarationNode #CSDelegateDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #CSAttributeNode #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #CSAttributeNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #CSAttributeValueNode #CSTypeNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #CSExpressionNode #OrderedCollection #CSNamedArgumentNode #CSExpressionNode #CSLiteralExpressionNode #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #CSDestructorDeclarationNode #SmaCCToken #CSUnsafeStatementNode #CSPointerTypeNode #CSTypeNode #CSPrefixExpressionNode #CSPointerMemberAccessNode #CSPointerElementAccessNode #CSPrefixExpressionNode #CSSizeofExpressionNode #CSFixedStatementNode #OrderedCollection #CSFixedPointerDeclaratorNode #OrderedCollection #CSFixedSizeBufferDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #CSTypeNode #OrderedCollection #CSFixedSizeBufferDeclaratorNode #CSStackallocInitializerNode #CSVoidTypeNode #SmaCCToken #SmaCCErrorNode)! !!CSharpParser class methodsFor: 'generated'!symbolNames	^ #('"!!"' '"!!="' '"%"' '"%="' '"&"' '"&&"' '"&="' '"("' '")"' '"*"' '"*="' '"+"' '"++"' '"+="' '","' '"-"' '"--"' '"-="' '"->"' '"."' '"/"' '"/="' '":"' '"::"' '";"' '"<"' '"<<"' '"<<="' '"<="' '"="' '"=="' '"=>"' '">="' '">>="' '"?"' '"??"' '"["' '"]"' '"^"' '"^="' '"abstract"' '"add"' '"alias"' '"as"' '"ascending"' '"assembly"' '"await"' '"base"' '"bool"' '"break"' '"by"' '"byte"' '"case"' '"catch"' '"char"' '"checked"' '"class"' '"const"' '"continue"' '"decimal"' '"default"' '"delegate"' '"descending"' '"do"' '"double"' '"else"' '"enum"' '"equals"' '"event"' '"explicit"' '"extern"' '"false"' '"field"' '"finally"' '"fixed"' '"float"' '"for"' '"foreach"' '"from"' '"get"' '"goto"' '"group"' '"if"' '"implicit"' '"in"' '"int"' '"interface"' '"internal"' '"into"' '"is"' '"join"' '"let"' '"lock"' '"long"' '"method"' '"module"' '"nameof"' '"namespace"' '"new"' '"object"' '"on"' '"operator"' '"orderby"' '"out"' '"override"' '"param"' '"params"' '"partial"' '"private"' '"property"' '"protected"' '"public"' '"readonly"' '"ref"' '"remove"' '"return"' '"sbyte"' '"sealed"' '"select"' '"set"' '"short"' '"sizeof"' '"stackalloc"' '"static"' '"string"' '"struct"' '"switch"' '"this"' '"throw"' '"true"' '"try"' '"type"' '"typeof"' '"uint"' '"ulong"' '"unchecked"' '"unsafe"' '"ushort"' '"using"' '"var"' '"virtual"' '"void"' '"volatile"' '"when"' '"where"' '"while"' '"yield"' '"{"' '"|"' '"|="' '"||"' '"~"' '<gt>' '<gtgt>' '<rightBrace>' '<comment>' '<Identifier>' '<IntegerLiteral>' '<RealLiteral>' '<CharacterLiteral>' '<InterpolatedRegularStringWhole>' '<InterpolatedRegularStringStart>' '<InterpolatedRegularStringEnd>' '<InterpolatedRegularStringMid>' '<InterpolatedVerbatimStringLiteral>' '<InterpolatedVerbatimStringStart>' '<InterpolatedVerbatimStringEnd>' '<InterpolatedVerbatimStringMid>' '<StringLiteral>' '<NullLiteral>' '<whitespace>' '<preprocessorDirective>' '<patternToken>' 'B e g i n' 'compilation_unit' 'namespace_declaration' 'qualified_identifier' 'namespace_body' '_extern_alias_directives' 'extern_alias_directives' 'extern_alias_directive' '_using_directives' 'using_directives' 'using_directive' 'using_alias_directive' 'using_namespace_directive' 'using_static_directive' '_namespace_member_declarations' 'namespace_member_declarations' 'namespace_member_declaration' 'type_declaration' 'qualified_alias_member' 'namespace_name' 'type_name' 'namespace_or_type_name' '_type' 'type' 'value_type' 'struct_type' 'simple_type' 'numeric_type' 'integral_type' 'floating_point_type' 'nullable_type' 'non_nullable_value_type' 'enum_type' 'reference_type' 'class_type' 'interface_type' 'array_type' 'non_array_type' '_rank_specifiers' 'rank_specifiers' 'rank_specifier' '_dim_separators' 'dim_separators' 'delegate_type' 'type_argument_list' 'type_arguments' 'type_argument' 'variable_reference' '_argument_list' 'argument_list' 'argument' '_argument_name' 'argument_name' 'argument_value' 'out_expression' 'primary_expression' 'primary_no_array_creation_expression' 'interpolated_string_expression' 'interpolated_regular_string' 'StartInterpolatedString' 'interpolated_regular_string_body' 'interpolation' 'interpolated_verbatim_string' 'StartInterpolatedVerbatimString' 'interpolated_verbatim_string_body' 'simple_name' '_type_argument_list' 'parenthesized_expression' 'member_access' 'qualified_alias_member_expression' 'predefined_type_expression' 'predefined_type' 'invocation_expression' 'element_access' 'expression_list' 'this_access' 'base_access' 'post_increment_expression' 'post_decrement_expression' 'object_creation_expression' '_object_or_collection_initializer' 'object_or_collection_initializer' 'object_initializer' '_member_initializer_list' 'member_initializer_list' 'member_initializer' 'initializer_target' 'initializer_value' 'collection_initializer' 'element_initializer_list' 'element_initializer' 'array_creation_expression' 'delegate_creation_expression' 'anonymous_object_creation_expression' 'anonymous_object_initializer' '_member_declarator_list' 'member_declarator_list' 'member_declarator' 'typeof_expression' 'unbound_type_name' '_generic_dimension_specifier' 'generic_dimension_specifier' '_commas' 'commas' 'checked_expression' 'unchecked_expression' 'default_value_expression' 'nameof_expression' 'named_entity' 'named_entity_target' 'unary_expression' 'null_conditional_expression' '_null_conditional_operations' 'null_conditional_operations' 'null_conditional_member_access' 'null_conditional_invocation_expression' 'pre_increment_expression' 'pre_decrement_expression' 'cast_expression' 'await_expression' 'multiplicative_expression' 'additive_expression' 'shift_expression' 'relational_expression' 'equality_expression' 'and_expression' 'exclusive_or_expression' 'inclusive_or_expression' 'conditional_and_expression' 'conditional_or_expression' 'null_coalescing_expression' 'conditional_expression' 'lambda_expression' 'anonymous_method_expression' 'anonymous_function_signature' '_explicit_anonymous_function_signature' 'explicit_anonymous_function_signature' '_explicit_anonymous_function_paramenter_list' 'explicit_anonymous_function_paramenter_list' 'explicit_anonymous_function_paramenter' '_anonymous_function_parameter_modifier' 'anonymous_function_parameter_modifier' 'implicit_anonymous_function_signature' '_implicit_anonymous_function_parameter_list' 'implicit_anonymous_function_parameter_list' 'implicit_anonymous_function_parameter' 'anonymous_function_body' 'query_expression' 'from_clause' 'query_body' '_query_body_clauses' 'query_body_clauses' 'query_body_clause' 'let_clause' 'where_clause' 'join_clause' 'join_into_clause' 'orderby_clause' 'orderings' 'ordering' '_ordering_direction' 'ordering_direction' 'select_or_group_clause' 'select_clause' 'group_clause' '_query_continuation' 'query_continuation' 'assignment' 'assignment_operator' '_expression' 'expression' 'non_assignment_expression' 'constant_expression' 'boolean_expression' 'statement' 'embedded_statement' 'block' '_statement_list' 'statement_list' 'empty_statement' 'labeled_statement' 'declaration_statement' 'local_variable_declaration' 'local_variable_type' 'local_variable_declarators' 'local_variable_declarator' '_local_variable_declarator_name' 'local_variable_initializer' 'local_constant_declaration' 'const_declarators' 'const_declarator' 'expression_statement' 'statement_expression' 'selection_statement' 'if_statement' 'switch_statement' 'switch_block' '_switch_sections' 'switch_sections' 'switch_section' 'switch_labels' 'switch_label' 'iteration_statement' 'while_statement' 'do_statement' 'for_statement' '_for_initializer' 'for_initializer' '_for_condition' 'for_condition' '_for_iterator' 'for_iterator' 'statement_expression_list' 'foreach_statement' 'jump_statement' 'break_statement' 'continue_statement' 'goto_statement' 'return_statement' 'throw_statement' 'try_statement' 'catch_clauses' 'catch_clause' '_exception_specifier' 'exception_specifier' '_exception_filter' 'exception_filter' 'finally_clause' 'checked_statement' 'unchecked_statement' 'lock_statement' 'using_statement' 'resource_acquisition' 'yield_statement' 'class_declaration' '_class_modifiers' 'class_modifiers' 'class_modifier' '_type_parameter_list' 'type_parameter_list' 'type_parameters' 'type_parameter' '_class_base' 'class_base' 'interface_type_list' '_type_parameter_constraints_clauses' 'type_parameter_constraints_clauses' 'type_parameter_constraints_clause' 'type_parameter_constraints' 'primary_constraint' 'secondary_constraints' 'interface_type_constraint' 'constructor_constraint' 'class_body' '_class_member_declarations' 'class_member_declarations' 'class_member_declaration' 'constant_declaration' '_constant_modifiers' 'constant_modifers' 'constant_modifer' 'constant_declarators' 'constant_declarator' 'field_declaration' '_field_modifiers' 'field_modifiers' 'field_modifier' 'variable_declarators' 'variable_declarator' 'variable_initializer' 'method_declaration' 'method_header' '_method_modifiers' 'method_modifiers' 'method_modifier' 'return_type' 'member_name' 'method_body' '_formal_parameters_list' 'formal_parameters_list' 'fixed_parameters' 'fixed_parameter' '_default_argument' 'default_argument' '_parameter_modifier' 'parameter_modifier' 'parameter_array' 'property_declaration' '_property_modifiers' 'property_modifiers' 'property_modifier' 'property_body' '_property_initializer' 'property_initializer' 'accessor_declarations' '_get_accessor_declaration' 'get_accessor_declaration' '_set_accessor_declaration' 'set_accessor_declaration' '_accessor_modifiers' 'accessor_modifiers' 'accessor_body' 'event_declaration' '_event_modifiers' 'event_modifiers' 'event_modifier' 'event_accessor_declarations' 'add_accessor_declaration' 'remove_accessor_declaration' 'indexer_declaration' '_indexer_modifiers' 'indexer_modifiers' 'indexer_modifier' 'indexer_declarator' 'indexer_body' 'operator_declaration' 'operator_modifiers' 'operator_modifier' 'operator_declarator' 'unary_operator_declarator' 'overloadable_unary_operator' 'binary_operator_declarator' 'overloadable_binary_operator' 'conversion_operator_declarator' 'operator_body' 'constructor_declaration' '_constructor_modifiers' 'constructor_modifiers' 'constructor_modifier' 'constructor_declarator' '_constructor_initializer' 'constructor_initializer' 'constructor_body' 'static_constructor_declaration' 'static_constructor_modifiers' 'static_constructor_body' 'struct_declaration' '_struct_modifiers' 'struct_modifiers' 'struct_modifier' '_struct_interfaces' 'struct_interfaces' 'struct_body' '_struct_member_declarations' 'struct_member_declarations' 'struct_member_declaration' '_array_initializer' 'array_initializer' '_variable_initializer_list' 'variable_initializer_list' 'interface_declaration' '_interface_modifiers' 'interface_modifiers' 'interface_modifier' '_variant_type_parameter_list' 'variant_type_parameter_list' 'variant_type_parameters' '_variance_annotation' 'variance_annotation' '_interface_base' 'interface_base' 'interface_body' '_interface_member_declarations' 'interface_member_declarations' 'interface_member_declaration' 'interface_method_declaration' 'interface_property_declaration' 'interface_accessors' 'interface_get_accessor' 'interface_set_accessor' 'interface_event_declaration' 'interface_indexer_declaration' 'enum_declaration' '_enum_base' 'enum_base' 'enum_body' '_enum_modifers' 'enum_modifers' 'enum_modifer' '_enum_member_declarations' 'enum_member_declarations' 'enum_member_declaration' 'delegate_declaration' '_delegate_modifiers' 'delegate_modifiers' 'delegate_modifier' '_global_attributes' 'global_attributes' 'global_attribute_sections' 'global_attribute_section' 'global_attribute_target_specifier' 'global_attribute_target' '_attributes' 'attributes' 'attribute_sections' 'attribute_section' '_attribute_target_specifier' 'attribute_target_specifier' 'attribute_target' 'attribute_list' 'attribute' 'attribute_name' '_attribute_arguments' 'attribute_arguments' '_positional_argument_list' 'positional_argument_list' 'positional_argument' 'named_argument_list' 'named_argument' 'attribute_argument_expression' 'literal' 'boolean_literal' '_semicolon' '_new' '_partial' '_extern' '_identifier' 'destructor_declaration' '_unsafe' 'unsafe_statement' 'pointer_type' 'unmanaged_type' 'pointer_indirection_expression' 'pointer_member_access' 'pointer_element_access' 'addressof_expression' 'sizeof_expression' 'fixed_statement' 'fixed_pointer_declarators' 'fixed_pointer_declarator' 'fixed_pointer_initializer' 'fixed_size_buffer_declaration' '_fixed_size_buffer_modifiers' 'fixed_size_buffer_modifiers' 'fixed_size_buffer_modifier' 'buffer_element_type' 'fixed_size_buffer_declarators' 'fixed_size_buffer_declarator' 'stackalloc_initializer' 'void_type' 'E O F' 'error')! !!CSharpParser class methodsFor: 'generated'!startingStateForexpression	^ 4! !!CSharpParser class methodsFor: 'generated'!startingStateForclass_member_declaration	^ 6! !!CSharpParser class methodsFor: 'generated'!reduceTable^#(	#(179 0 #reduceActionFor_extern_alias_directives1: 6307841 false ) 	#(566 0 #reduceActionFor_extern_alias_directives1: 49373185 false ) 	#(233 0 #reduceActionForStartInterpolatedString1: 11001857 true ) 	#(237 0 #reduceActionForStartInterpolatedVerbatimString1: 11604993 true ) 	#(182 0 #reduceActionFor_extern_alias_directives1: 6566913 false ) 	#(179 1 #reduceActionFor_extern_alias_directives2: 6307842 false ) 	#(180 1 #reduceActionForextern_alias_directives1: 6367233 false ) 	#(570 0 #reduceActionFor_attribute_target_specifier1: 49784833 false ) 	#(190 1 #liftFirstValue: 7309313 false ) 	#(190 1 #liftFirstValue: 7309314 false ) 	#(191 1 #liftFirstValue: 7388161 false ) 	#(191 1 #liftFirstValue: 7388162 false ) 	#(191 1 #liftFirstValue: 7388163 false ) 	#(191 1 #liftFirstValue: 7388164 false ) 	#(191 1 #liftFirstValue: 7388165 false ) 	#(409 0 #reduceActionFor_extern_alias_directives1: 31683585 false ) 	#(557 0 #reduceActionFor_extern_alias_directives1: 48479233 false ) 	#(550 0 #reduceActionFor_extern_alias_directives1: 47584257 false ) 	#(525 0 #reduceActionFor_extern_alias_directives1: 44575745 false ) 	#(511 0 #reduceActionFor_extern_alias_directives1: 42982401 false ) 	#(566 1 #reduceActionFor_extern_alias_directives2: 49373186 false ) 	#(567 1 #reduceActionFor_extern_alias_directives2: 49405953 false ) 	#(568 1 #reduceActionForextern_alias_directives1: 49442817 false ) 	#(353 1 #reduceActionForempty_statement1: 26386433 false ) 	#(200 1 #reduceActionForsimple_type2: 8179714 false ) 	#(245 1 #reduceActionForsimple_type2: 12572673 false ) 	#(202 1 #liftFirstValue: 8318978 false ) 	#(245 1 #reduceActionForsimple_type2: 12572674 false ) 	#(202 1 #liftFirstValue: 8318985 false ) 	#(245 1 #reduceActionForsimple_type2: 12572675 false ) 	#(201 1 #liftFirstValue: 8248323 false ) 	#(245 1 #reduceActionForsimple_type2: 12572676 false ) 	#(280 1 #reduceActionFordefault_value_expression1: 16756737 false ) 	#(309 0 #nil 22450177 false ) 	#(203 1 #liftFirstValue: 8432642 false ) 	#(245 1 #reduceActionForsimple_type2: 12572677 false ) 	#(585 1 #liftFirstValue: 51437570 false ) 	#(203 1 #liftFirstValue: 8432641 false ) 	#(245 1 #reduceActionForsimple_type2: 12572678 false ) 	#(202 1 #liftFirstValue: 8318981 false ) 	#(245 1 #reduceActionForsimple_type2: 12572679 false ) 	#(202 1 #liftFirstValue: 8318983 false ) 	#(245 1 #reduceActionForsimple_type2: 12572680 false ) 	#(208 1 #reduceActionForsimple_type2: 8686594 false ) 	#(245 1 #reduceActionForsimple_type2: 12572681 false ) 	#(343 0 #nil 25546753 false ) 	#(202 1 #liftFirstValue: 8318977 false ) 	#(245 1 #reduceActionForsimple_type2: 12572682 false ) 	#(202 1 #liftFirstValue: 8318979 false ) 	#(245 1 #reduceActionForsimple_type2: 12572683 false ) 	#(208 1 #reduceActionForsimple_type2: 8686595 false ) 	#(245 1 #reduceActionForsimple_type2: 12572684 false ) 	#(249 1 #reduceActionForthis_access1: 13405185 false ) 	#(585 1 #liftFirstValue: 51437569 false ) 	#(202 1 #liftFirstValue: 8318982 false ) 	#(245 1 #reduceActionForsimple_type2: 12572685 false ) 	#(202 1 #liftFirstValue: 8318984 false ) 	#(245 1 #reduceActionForsimple_type2: 12572686 false ) 	#(202 1 #liftFirstValue: 8318980 false ) 	#(245 1 #reduceActionForsimple_type2: 12572687 false ) 	#(357 1 #reduceActionForlocal_variable_type2: 26716162 false ) 	#(613 1 #reduceActionForvoid_type1: 54982657 false ) 	#(351 0 #reduceActionFor_extern_alias_directives1: 26259457 false ) 	#(240 0 #nil 11930625 false ) 	#(415 1 #reduceActionFortype_parameter1: 32223233 false ) 	#(584 1 #reduceActionForliteral2: 51087362 false ) 	#(584 1 #reduceActionForliteral3: 51087363 false ) 	#(584 1 #reduceActionForliteral4: 51087364 false ) 	#(232 1 #reduceActionForinterpolated_regular_string1: 10766337 false ) 	#(236 1 #reduceActionForinterpolated_regular_string1: 11354113 false ) 	#(584 1 #reduceActionForliteral5: 51087365 false ) 	#(584 1 #reduceActionForliteral6: 51087366 false ) 	#(195 1 #liftFirstValue: 7737347 false ) 	#(243 1 #reduceActionForqualified_alias_member_expression1: 12404737 false ) 	#(209 1 #liftFirstValue: 8785921 false ) 	#(217 1 #liftFirstValue: 9196545 false ) 	#(206 1 #liftFirstValue: 8577025 false ) 	#(208 1 #liftFirstValue: 8686593 false ) 	#(199 1 #liftFirstValue: 8118273 false ) 	#(194 1 #liftFirstValue: 7697409 false ) 	#(595 1 #liftFirstValue: 52770817 false ) 	#(205 1 #liftFirstValue: 8541185 false ) 	#(211 1 #liftFirstValue: 8879105 false ) 	#(357 1 #liftFirstValue: 26716161 false ) 	#(197 1 #liftFirstValue: 8015873 false ) 	#(198 1 #liftFirstValue: 8075265 false ) 	#(199 1 #liftFirstValue: 8118274 false ) 	#(200 1 #reduceActionForsimple_type2: 8179713 false ) 	#(201 1 #liftFirstValue: 8248321 false ) 	#(201 1 #liftFirstValue: 8248322 false ) 	#(199 1 #liftFirstValue: 8118275 false ) 	#(198 1 #liftFirstValue: 8075266 false ) 	#(197 1 #liftFirstValue: 8015874 false ) 	#(207 1 #liftFirstValue: 8603649 false ) 	#(207 1 #liftFirstValue: 8603650 false ) 	#(207 1 #liftFirstValue: 8603651 false ) 	#(207 1 #liftFirstValue: 8603652 false ) 	#(284 1 #liftFirstValue: 17183745 false ) 	#(286 0 #nil 17767425 false ) 	#(229 1 #liftFirstValue: 10007553 false ) 	#(230 1 #liftFirstValue: 10100738 false ) 	#(231 1 #reduceActionForinterpolated_string_expression1: 10656769 false ) 	#(231 1 #reduceActionForinterpolated_string_expression1: 10656770 false ) 	#(230 1 #liftFirstValue: 10100739 false ) 	#(230 1 #liftFirstValue: 10100740 false ) 	#(230 1 #liftFirstValue: 10100741 false ) 	#(244 1 #reduceActionForqualified_alias_member_expression1: 12495873 false ) 	#(230 1 #liftFirstValue: 10100742 false ) 	#(366 1 #liftFirstValue: 27707393 false ) 	#(230 1 #liftFirstValue: 10100743 false ) 	#(230 1 #liftFirstValue: 10100744 false ) 	#(230 1 #liftFirstValue: 10100745 false ) 	#(230 1 #liftFirstValue: 10100746 false ) 	#(366 1 #liftFirstValue: 27707397 false ) 	#(230 1 #liftFirstValue: 10100747 false ) 	#(366 1 #liftFirstValue: 27707398 false ) 	#(230 1 #liftFirstValue: 10100748 false ) 	#(366 1 #liftFirstValue: 27707395 false ) 	#(229 1 #liftFirstValue: 10007554 false ) 	#(230 1 #liftFirstValue: 10100749 false ) 	#(230 1 #liftFirstValue: 10100750 false ) 	#(230 1 #liftFirstValue: 10100751 false ) 	#(230 1 #liftFirstValue: 10100752 false ) 	#(230 1 #liftFirstValue: 10100753 false ) 	#(230 1 #liftFirstValue: 10100754 false ) 	#(230 1 #liftFirstValue: 10100755 false ) 	#(284 1 #liftFirstValue: 17183746 false ) 	#(366 1 #liftFirstValue: 27707394 false ) 	#(284 1 #liftFirstValue: 17183751 false ) 	#(366 1 #liftFirstValue: 27707399 false ) 	#(284 1 #liftFirstValue: 17183752 false ) 	#(366 1 #liftFirstValue: 27707400 false ) 	#(284 1 #liftFirstValue: 17183753 false ) 	#(284 1 #liftFirstValue: 17183754 false ) 	#(366 1 #liftFirstValue: 27707401 false ) 	#(230 1 #liftFirstValue: 10100756 false ) 	#(366 1 #liftFirstValue: 27707396 false ) 	#(348 1 #liftFirstValue: 25849859 false ) 	#(349 1 #liftFirstValue: 25932801 false ) 	#(349 1 #liftFirstValue: 25932802 false ) 	#(348 1 #liftFirstValue: 25849857 false ) 	#(348 1 #liftFirstValue: 25849858 false ) 	#(349 1 #liftFirstValue: 25932803 false ) 	#(349 1 #liftFirstValue: 25932804 false ) 	#(367 1 #liftFirstValue: 27982849 false ) 	#(367 1 #liftFirstValue: 27982850 false ) 	#(349 1 #liftFirstValue: 25932805 false ) 	#(376 1 #liftFirstValue: 28786689 false ) 	#(376 1 #liftFirstValue: 28786690 false ) 	#(376 1 #liftFirstValue: 28786691 false ) 	#(376 1 #liftFirstValue: 28786692 false ) 	#(349 1 #liftFirstValue: 25932806 false ) 	#(388 1 #liftFirstValue: 29890561 false ) 	#(388 1 #liftFirstValue: 29890562 false ) 	#(388 1 #liftFirstValue: 29890563 false ) 	#(388 1 #liftFirstValue: 29890564 false ) 	#(388 1 #liftFirstValue: 29890565 false ) 	#(349 1 #liftFirstValue: 25932807 false ) 	#(349 1 #liftFirstValue: 25932808 false ) 	#(349 1 #liftFirstValue: 25932809 false ) 	#(349 1 #liftFirstValue: 25932810 false ) 	#(349 1 #liftFirstValue: 25932811 false ) 	#(349 1 #liftFirstValue: 25932812 false ) 	#(197 1 #liftFirstValue: 8015875 false ) 	#(230 1 #liftFirstValue: 10100737 false ) 	#(584 1 #reduceActionForliteral1: 51087361 false ) 	#(349 1 #liftFirstValue: 25932813 false ) 	#(197 1 #liftFirstValue: 8015876 false ) 	#(284 1 #liftFirstValue: 17183755 false ) 	#(230 1 #liftFirstValue: 10100757 false ) 	#(230 1 #liftFirstValue: 10100758 false ) 	#(284 1 #liftFirstValue: 17183756 false ) 	#(230 1 #liftFirstValue: 10100759 false ) 	#(349 1 #liftFirstValue: 25932814 false ) 	#(311 0 #reduceActionFor_explicit_anonymous_function_paramenter_list1: 22642689 false ) 	#(317 0 #reduceActionFor_explicit_anonymous_function_paramenter_list1: 23420929 false ) 	#(314 0 #nil 23102465 false ) 	#(196 0 #nil 7988225 false ) 	#(319 1 #liftFirstValue: 23713793 false ) 	#(294 1 #liftFirstValue: 19297281 false ) 	#(295 1 #liftFirstValue: 19645441 false ) 	#(296 1 #liftFirstValue: 19903489 false ) 	#(297 1 #liftFirstValue: 20137985 false ) 	#(298 1 #liftFirstValue: 20736001 false ) 	#(299 1 #liftFirstValue: 20983809 false ) 	#(300 1 #liftFirstValue: 21116929 false ) 	#(301 1 #liftFirstValue: 21258241 false ) 	#(302 1 #liftFirstValue: 21417985 false ) 	#(303 1 #liftFirstValue: 21584897 false ) 	#(304 1 #liftFirstValue: 21755905 false ) 	#(305 1 #liftFirstValue: 21926913 false ) 	#(345 1 #liftFirstValue: 25653249 false ) 	#(345 1 #liftFirstValue: 25653250 false ) 	#(308 1 #liftFirstValue: 22333441 false ) 	#(308 1 #liftFirstValue: 22333442 false ) 	#(316 1 #reduceActionForimplicit_anonymous_function_signature2: 23263234 false ) 	#(345 1 #liftFirstValue: 25653251 false ) 	#(324 0 #reduceActionFor_query_body_clauses1: 24032257 false ) 	#(344 1 #liftFirstValue: 25592834 false ) 	#(344 1 #liftFirstValue: 25592833 false ) 	#(430 1 #liftFirstValue: 34163723 false ) 	#(430 1 #liftFirstValue: 34163713 false ) 	#(430 1 #liftFirstValue: 34163714 false ) 	#(430 1 #liftFirstValue: 34163715 false ) 	#(430 1 #liftFirstValue: 34163716 false ) 	#(430 1 #liftFirstValue: 34163717 false ) 	#(430 1 #liftFirstValue: 34163718 false ) 	#(430 1 #liftFirstValue: 34163719 false ) 	#(430 1 #liftFirstValue: 34163720 false ) 	#(430 1 #liftFirstValue: 34163722 false ) 	#(484 0 #reduceActionFor_extern_alias_directives1: 39702529 false ) 	#(438 0 #reduceActionFor_extern_alias_directives1: 35118081 false ) 	#(462 0 #reduceActionFor_extern_alias_directives1: 37341185 false ) 	#(446 0 #reduceActionFor_extern_alias_directives1: 35940353 false ) 	#(432 0 #reduceActionFor_extern_alias_directives1: 34576385 false ) 	#(477 0 #reduceActionFor_extern_alias_directives1: 38938625 false ) 	#(592 0 #nil 52311041 false ) 	#(589 0 #nil 51588097 false ) 	#(500 0 #reduceActionFor_extern_alias_directives1: 41705473 false ) 	#(430 1 #liftFirstValue: 34163721 false ) 	#(560 0 #reduceActionFor_extern_alias_directives1: 48743425 false ) 	#(182 1 #reduceActionFor_extern_alias_directives2: 6566914 false ) 	#(183 1 #reduceActionForextern_alias_directives1: 6611969 false ) 	#(184 1 #liftFirstValue: 6713345 false ) 	#(184 1 #liftFirstValue: 6713346 false ) 	#(184 1 #liftFirstValue: 6713347 false ) 	#(180 2 #reduceActionForextern_alias_directives2: 6367234 false ) 	#(572 1 #liftFirstValue: 49924098 false ) 	#(572 1 #liftFirstValue: 49924097 false ) 	#(572 1 #liftFirstValue: 49924099 false ) 	#(572 1 #liftFirstValue: 49924100 false ) 	#(572 1 #liftFirstValue: 49924101 false ) 	#(572 1 #liftFirstValue: 49924102 false ) 	#(572 1 #liftFirstValue: 49924103 false ) 	#(570 1 #reduceActionFor_extern_alias_directives2: 49784834 false ) 	#(177 1 #reduceActionForqualified_identifier1: 6085633 false ) 	#(411 1 #liftFirstValue: 31821830 false ) 	#(411 1 #liftFirstValue: 31821828 false ) 	#(559 1 #liftFirstValue: 48635908 false ) 	#(552 1 #liftFirstValue: 47710212 false ) 	#(527 1 #liftFirstValue: 44738564 false ) 	#(513 1 #liftFirstValue: 43127812 false ) 	#(411 1 #liftFirstValue: 31821825 false ) 	#(559 1 #liftFirstValue: 48635905 false ) 	#(552 1 #liftFirstValue: 47710209 false ) 	#(527 1 #liftFirstValue: 44738561 false ) 	#(513 1 #liftFirstValue: 43127809 false ) 	#(411 1 #liftFirstValue: 31821829 false ) 	#(559 1 #liftFirstValue: 48635909 false ) 	#(552 1 #liftFirstValue: 47710213 false ) 	#(527 1 #liftFirstValue: 44738565 false ) 	#(513 1 #liftFirstValue: 43127813 false ) 	#(411 1 #liftFirstValue: 31821827 false ) 	#(559 1 #liftFirstValue: 48635907 false ) 	#(552 1 #liftFirstValue: 47710211 false ) 	#(527 1 #liftFirstValue: 44738563 false ) 	#(513 1 #liftFirstValue: 43127811 false ) 	#(411 1 #liftFirstValue: 31821826 false ) 	#(559 1 #liftFirstValue: 48635906 false ) 	#(552 1 #liftFirstValue: 47710210 false ) 	#(527 1 #liftFirstValue: 44738562 false ) 	#(513 1 #liftFirstValue: 43127810 false ) 	#(411 1 #liftFirstValue: 31821831 false ) 	#(411 1 #liftFirstValue: 31821832 false ) 	#(411 1 #liftFirstValue: 31821833 false ) 	#(559 1 #liftFirstValue: 48635910 false ) 	#(527 1 #liftFirstValue: 44738566 false ) 	#(513 1 #liftFirstValue: 43127814 false ) 	#(588 0 #nil 51544065 false ) 	#(409 1 #reduceActionFor_extern_alias_directives2: 31683586 false ) 	#(410 1 #reduceActionForextern_alias_directives1: 31726593 false ) 	#(511 1 #reduceActionFor_extern_alias_directives2: 42982402 false ) 	#(512 1 #reduceActionForextern_alias_directives1: 43028481 false ) 	#(525 1 #reduceActionFor_extern_alias_directives2: 44575746 false ) 	#(526 1 #reduceActionForextern_alias_directives1: 44626945 false ) 	#(550 1 #reduceActionFor_extern_alias_directives2: 47584258 false ) 	#(551 1 #reduceActionForextern_alias_directives1: 47623169 false ) 	#(557 1 #reduceActionFor_extern_alias_directives2: 48479234 false ) 	#(558 1 #reduceActionForextern_alias_directives1: 48528385 false ) 	#(568 2 #reduceActionForextern_alias_directives2: 49442818 false ) 	#(284 2 #reduceActionForunary_expression5: 17183749 false ) 	#(599 2 #reduceActionForunary_expression5: 53326849 false ) 	#(596 2 #reduceActionForunary_expression5: 52992001 false ) 	#(284 2 #reduceActionForunary_expression5: 17183747 false ) 	#(290 2 #reduceActionForunary_expression5: 18950145 false ) 	#(284 2 #reduceActionForunary_expression5: 17183748 false ) 	#(291 2 #reduceActionForunary_expression5: 19050497 false ) 	#(293 2 #reduceActionForawait_expression1: 19229697 false ) 	#(389 2 #reduceActionForbreak_statement1: 30009345 false ) 	#(402 2 #reduceActionForchecked_statement1: 30981121 false ) 	#(390 2 #reduceActionForcontinue_statement1: 30049281 false ) 	#(309 1 #liftFirstValue: 22450178 false ) 	#(380 0 #nil 29235201 false ) 	#(215 0 #reduceActionFor_extern_alias_directives1: 9106433 false ) 	#(269 0 #reduceActionFor_explicit_anonymous_function_paramenter_list1: 15653889 false ) 	#(267 2 #reduceActionForanonymous_object_creation_expression1: 15442945 false ) 	#(343 1 #liftFirstValue: 25546754 false ) 	#(403 2 #reduceActionForunchecked_statement1: 31035393 false ) 	#(593 2 #reduceActionForunsafe_statement1: 52597761 false ) 	#(352 1 #reduceActionForextern_alias_directives1: 26301441 false ) 	#(351 1 #reduceActionFor_extern_alias_directives2: 26259458 false ) 	#(284 2 #reduceActionForunary_expression5: 17183750 false ) 	#(240 1 #liftFirstValue: 11930626 false ) 	#(239 2 #reduceActionForsimple_name1: 11856897 false ) 	#(195 2 #reduceActionFornamespace_or_type_name1: 7737345 false ) 	#(204 2 #reduceActionFornullable_type1: 8479745 false ) 	#(210 2 #reduceActionForarray_type1: 8817665 false ) 	#(213 1 #reduceActionForextern_alias_directives1: 8949761 false ) 	#(225 0 #reduceActionFor_attribute_target_specifier1: 9674753 false ) 	#(222 0 #reduceActionFor_explicit_anonymous_function_paramenter_list1: 9492481 false ) 	#(251 2 #reduceActionForpost_increment_expression1: 13537281 false ) 	#(252 2 #reduceActionForpost_increment_expression1: 13638657 false ) 	#(285 2 #reduceActionFornull_conditional_expression1: 17638401 false ) 	#(286 1 #liftFirstValue: 17767426 false ) 	#(342 1 #liftFirstValue: 25432070 false ) 	#(342 1 #liftFirstValue: 25432071 false ) 	#(342 1 #liftFirstValue: 25432068 false ) 	#(342 1 #liftFirstValue: 25432066 false ) 	#(342 1 #liftFirstValue: 25432067 false ) 	#(342 1 #liftFirstValue: 25432069 false ) 	#(342 1 #liftFirstValue: 25432074 false ) 	#(342 1 #liftFirstValue: 25432065 false ) 	#(342 1 #liftFirstValue: 25432075 false ) 	#(342 1 #liftFirstValue: 25432073 false ) 	#(342 1 #liftFirstValue: 25432072 false ) 	#(355 2 #reduceActionFordeclaration_statement1: 26487809 false ) 	#(360 1 #reduceActionFor_local_variable_declarator_name1: 27193345 false ) 	#(356 2 #reduceActionForlocal_variable_declaration1: 26621953 false ) 	#(358 1 #reduceActionForinterpolated_regular_string1: 26769409 false ) 	#(359 1 #reduceActionForlocal_variable_declarator1: 26917889 false ) 	#(355 2 #reduceActionFordeclaration_statement1: 26487810 false ) 	#(365 2 #reduceActionForexpression_statement1: 27635713 false ) 	#(594 2 #reduceActionForpointer_type1: 52689921 false ) 	#(594 2 #reduceActionForpointer_type1: 52689922 false ) 	#(315 1 #liftFirstValue: 23202818 false ) 	#(315 1 #liftFirstValue: 23202817 false ) 	#(311 1 #reduceActionFor_extern_alias_directives2: 22642690 false ) 	#(312 1 #reduceActionForinterpolated_regular_string1: 22744065 false ) 	#(314 1 #liftFirstValue: 23102466 false ) 	#(317 1 #reduceActionFor_extern_alias_directives2: 23420930 false ) 	#(318 1 #reduceActionForinterpolated_regular_string1: 23520257 false ) 	#(196 1 #liftFirstValue: 7988226 false ) 	#(326 1 #reduceActionForquery_body_clause1: 24167425 false ) 	#(321 2 #reduceActionForquery_expression1: 23823361 false ) 	#(324 1 #reduceActionFor_extern_alias_directives2: 24032258 false ) 	#(325 1 #reduceActionForquery_body_clauses1: 24082433 false ) 	#(326 1 #reduceActionForquery_body_clause2: 24167426 false ) 	#(326 1 #reduceActionForquery_body_clause3: 24167427 false ) 	#(326 1 #reduceActionForquery_body_clause4: 24167428 false ) 	#(326 1 #reduceActionForquery_body_clause5: 24167429 false ) 	#(326 1 #reduceActionForquery_body_clause6: 24167430 false ) 	#(451 1 #reduceActionFormethod_body3: 36379651 false ) 	#(451 1 #reduceActionFormethod_body1: 36379649 false ) 	#(444 2 #reduceActionFormethod_declaration1: 35672065 false ) 	#(479 1 #liftFirstValue: 39076874 false ) 	#(464 1 #liftFirstValue: 37497866 false ) 	#(448 1 #liftFirstValue: 36085770 false ) 	#(486 1 #liftFirstValue: 39853065 false ) 	#(448 1 #liftFirstValue: 36085771 false ) 	#(479 1 #liftFirstValue: 39076875 false ) 	#(486 1 #liftFirstValue: 39853066 false ) 	#(464 1 #liftFirstValue: 37497867 false ) 	#(491 1 #liftFirstValue: 40484867 false ) 	#(502 1 #liftFirstValue: 41881605 false ) 	#(589 1 #liftFirstValue: 51588098 false ) 	#(448 1 #liftFirstValue: 36085764 false ) 	#(479 1 #liftFirstValue: 39076868 false ) 	#(486 1 #liftFirstValue: 39853060 false ) 	#(464 1 #liftFirstValue: 37497860 false ) 	#(440 1 #liftFirstValue: 35257348 false ) 	#(434 1 #liftFirstValue: 34728964 false ) 	#(502 1 #liftFirstValue: 41881603 false ) 	#(479 1 #liftFirstValue: 39076865 false ) 	#(486 1 #liftFirstValue: 39853057 false ) 	#(448 1 #liftFirstValue: 36085761 false ) 	#(464 1 #liftFirstValue: 37497857 false ) 	#(440 1 #liftFirstValue: 35257345 false ) 	#(434 1 #liftFirstValue: 34728961 false ) 	#(486 1 #liftFirstValue: 39853064 false ) 	#(464 1 #liftFirstValue: 37497865 false ) 	#(448 1 #liftFirstValue: 36085769 false ) 	#(479 1 #liftFirstValue: 39076873 false ) 	#(464 1 #liftFirstValue: 37497861 false ) 	#(486 1 #liftFirstValue: 39853061 false ) 	#(448 1 #liftFirstValue: 36085765 false ) 	#(479 1 #liftFirstValue: 39076869 false ) 	#(440 1 #liftFirstValue: 35257349 false ) 	#(434 1 #liftFirstValue: 34728965 false ) 	#(502 1 #liftFirstValue: 41881604 false ) 	#(448 1 #liftFirstValue: 36085763 false ) 	#(486 1 #liftFirstValue: 39853059 false ) 	#(479 1 #liftFirstValue: 39076867 false ) 	#(464 1 #liftFirstValue: 37497859 false ) 	#(440 1 #liftFirstValue: 35257347 false ) 	#(434 1 #liftFirstValue: 34728963 false ) 	#(502 1 #liftFirstValue: 41881602 false ) 	#(464 1 #liftFirstValue: 37497858 false ) 	#(448 1 #liftFirstValue: 36085762 false ) 	#(486 1 #liftFirstValue: 39853058 false ) 	#(479 1 #liftFirstValue: 39076866 false ) 	#(491 1 #liftFirstValue: 40484865 false ) 	#(440 1 #liftFirstValue: 35257346 false ) 	#(434 1 #liftFirstValue: 34728962 false ) 	#(502 1 #liftFirstValue: 41881601 false ) 	#(440 1 #liftFirstValue: 35257351 false ) 	#(448 1 #liftFirstValue: 36085768 false ) 	#(486 1 #liftFirstValue: 39853063 false ) 	#(464 1 #liftFirstValue: 37497864 false ) 	#(479 1 #liftFirstValue: 39076872 false ) 	#(479 1 #liftFirstValue: 39076870 false ) 	#(464 1 #liftFirstValue: 37497862 false ) 	#(448 1 #liftFirstValue: 36085766 false ) 	#(440 1 #liftFirstValue: 35257350 false ) 	#(491 1 #liftFirstValue: 40484866 false ) 	#(464 1 #liftFirstValue: 37497868 false ) 	#(479 1 #liftFirstValue: 39076876 false ) 	#(486 1 #liftFirstValue: 39853067 false ) 	#(448 1 #liftFirstValue: 36085772 false ) 	#(491 1 #liftFirstValue: 40484868 false ) 	#(440 1 #liftFirstValue: 35257353 false ) 	#(592 1 #liftFirstValue: 52311042 false ) 	#(502 1 #liftFirstValue: 41881606 false ) 	#(464 1 #liftFirstValue: 37497863 false ) 	#(479 1 #liftFirstValue: 39076871 false ) 	#(486 1 #liftFirstValue: 39853062 false ) 	#(448 1 #liftFirstValue: 36085767 false ) 	#(440 1 #liftFirstValue: 35257352 false ) 	#(432 1 #reduceActionFor_extern_alias_directives2: 34576386 false ) 	#(433 1 #reduceActionForextern_alias_directives1: 34625537 false ) 	#(438 1 #reduceActionFor_extern_alias_directives2: 35118082 false ) 	#(439 1 #reduceActionForextern_alias_directives1: 35162113 false ) 	#(446 1 #reduceActionFor_extern_alias_directives2: 35940354 false ) 	#(447 1 #reduceActionForextern_alias_directives1: 35986433 false ) 	#(462 1 #reduceActionFor_extern_alias_directives2: 37341186 false ) 	#(463 1 #reduceActionForextern_alias_directives1: 37390337 false ) 	#(477 1 #reduceActionFor_extern_alias_directives2: 38938626 false ) 	#(478 1 #reduceActionForextern_alias_directives1: 38981633 false ) 	#(484 1 #reduceActionFor_extern_alias_directives2: 39702530 false ) 	#(485 1 #reduceActionForextern_alias_directives1: 39749633 false ) 	#(490 1 #reduceActionForextern_alias_directives1: 40377345 false ) 	#(500 1 #reduceActionFor_extern_alias_directives2: 41705474 false ) 	#(501 1 #reduceActionForextern_alias_directives1: 41761793 false ) 	#(193 1 #liftFirstValue: 7652353 false ) 	#(188 0 #reduceActionFor_extern_alias_directives1: 7077889 false ) 	#(560 1 #reduceActionFor_extern_alias_directives2: 48743426 false ) 	#(561 1 #reduceActionFor_extern_alias_directives2: 48790529 false ) 	#(562 1 #reduceActionForextern_alias_directives1: 48841729 false ) 	#(183 2 #reduceActionForextern_alias_directives2: 6611970 false ) 	#(575 1 #liftFirstValue: 50214913 false ) 	#(573 1 #reduceActionForinterpolated_regular_string1: 50027521 false ) 	#(576 0 #reduceActionFor_attribute_arguments1: 50246657 false ) 	#(571 2 #reduceActionForattribute_target_specifier1: 49851393 false ) 	#(586 0 #nil 51486721 false ) 	#(588 1 #liftFirstValue: 51544066 false ) 	#(410 2 #reduceActionForextern_alias_directives2: 31726594 false ) 	#(512 2 #reduceActionForextern_alias_directives2: 43028482 false ) 	#(526 2 #reduceActionForextern_alias_directives2: 44626946 false ) 	#(551 2 #reduceActionForextern_alias_directives2: 47623170 false ) 	#(558 2 #reduceActionForextern_alias_directives2: 48528386 false ) 	#(241 3 #reduceActionForparenthesized_expression1: 11980801 false ) 	#(250 3 #reduceActionForbase_access1: 13435905 false ) 	#(248 1 #reduceActionForinterpolated_regular_string1: 13309953 false ) 	#(362 3 #reduceActionForlocal_constant_declaration1: 27358209 false ) 	#(363 1 #reduceActionForinterpolated_regular_string1: 27436033 false ) 	#(307 3 #reduceActionForanonymous_method_expression1: 22215681 false ) 	#(381 1 #liftFirstValue: 29293569 false ) 	#(386 1 #reduceActionForinterpolated_regular_string1: 29596673 false ) 	#(380 1 #liftFirstValue: 29235202 false ) 	#(381 1 #reduceActionForfor_initializer2: 29293570 false ) 	#(346 1 #liftFirstValue: 25754625 false ) 	#(391 3 #reduceActionForgoto_statement3: 30095363 false ) 	#(391 3 #reduceActionForgoto_statement1: 30095361 false ) 	#(347 1 #liftFirstValue: 25792513 false ) 	#(283 1 #reduceActionFornamed_entity_target2: 17018882 false ) 	#(283 1 #reduceActionForthis_access1: 17018881 false ) 	#(282 1 #liftFirstValue: 16894977 false ) 	#(283 1 #liftFirstValue: 17018885 false ) 	#(283 1 #liftFirstValue: 17018884 false ) 	#(283 1 #liftFirstValue: 17018883 false ) 	#(216 1 #reduceActionForextern_alias_directives1: 9148417 false ) 	#(215 1 #reduceActionFor_extern_alias_directives2: 9106434 false ) 	#(271 1 #reduceActionFormember_declarator1: 15836161 false ) 	#(271 1 #reduceActionFormember_declarator2: 15836162 false ) 	#(271 1 #reduceActionFormember_declarator2: 15836163 false ) 	#(269 1 #reduceActionFor_extern_alias_directives2: 15653890 false ) 	#(270 1 #reduceActionForinterpolated_regular_string1: 15712257 false ) 	#(271 1 #reduceActionFormember_declarator2: 15836164 false ) 	#(257 0 #reduceActionFor_explicit_anonymous_function_paramenter_list1: 14236673 false ) 	#(253 3 #reduceActionForobject_creation_expression2: 13740034 false ) 	#(255 1 #liftFirstValue: 14022657 false ) 	#(255 1 #liftFirstValue: 14022658 false ) 	#(522 0 #reduceActionFor_explicit_anonymous_function_paramenter_list1: 44055553 false ) 	#(265 3 #reduceActionForarray_creation_expression2: 15039490 false ) 	#(265 3 #reduceActionForarray_creation_expression3: 15039491 false ) 	#(392 3 #reduceActionForreturn_statement1: 30236673 false ) 	#(393 3 #reduceActionForthrow_statement1: 30290945 false ) 	#(397 0 #reduceActionFor_exception_specifier1: 30696449 false ) 	#(394 3 #reduceActionFortry_statement1: 30343169 false ) 	#(395 1 #reduceActionForextern_alias_directives1: 30526465 false ) 	#(394 3 #reduceActionFortry_statement2: 30343170 false ) 	#(274 0 #reduceActionFor_generic_dimension_specifier1: 16410625 false ) 	#(406 1 #liftFirstValue: 31302658 false ) 	#(406 1 #liftFirstValue: 31302657 false ) 	#(407 3 #reduceActionForyield_statement2: 31372290 false ) 	#(350 3 #reduceActionForblock1: 26193921 false ) 	#(352 2 #reduceActionForextern_alias_directives2: 26301442 false ) 	#(354 3 #reduceActionForlabeled_statement1: 26418177 false ) 	#(220 1 #liftFirstValue: 9389057 false ) 	#(219 1 #reduceActionForinterpolated_regular_string1: 9302017 false ) 	#(213 2 #reduceActionForextern_alias_directives2: 8949762 false ) 	#(222 1 #reduceActionFor_extern_alias_directives2: 9492482 false ) 	#(223 1 #reduceActionForinterpolated_regular_string1: 9540609 false ) 	#(225 1 #reduceActionFor_extern_alias_directives2: 9674754 false ) 	#(597 3 #reduceActionForpointer_member_access1: 53097473 false ) 	#(234 1 #reduceActionForinterpolated_regular_string_body1: 11055105 false ) 	#(235 1 #reduceActionForinterpolation1: 11235329 false ) 	#(238 1 #reduceActionForinterpolated_regular_string_body1: 11674625 false ) 	#(242 3 #reduceActionFormember_access3: 12075011 false ) 	#(341 3 #reduceActionForassignment1: 25336833 false ) 	#(310 3 #reduceActionForexplicit_anonymous_function_signature1: 22538241 false ) 	#(316 3 #reduceActionForimplicit_anonymous_function_signature1: 23263233 false ) 	#(294 3 #reduceActionFormultiplicative_expression4: 19297284 false ) 	#(294 3 #reduceActionFormultiplicative_expression4: 19297282 false ) 	#(294 3 #reduceActionFormultiplicative_expression4: 19297283 false ) 	#(295 3 #reduceActionFormultiplicative_expression4: 19645442 false ) 	#(295 3 #reduceActionFormultiplicative_expression4: 19645443 false ) 	#(296 3 #reduceActionFormultiplicative_expression4: 19903490 false ) 	#(296 3 #reduceActionFormultiplicative_expression4: 19903491 false ) 	#(297 3 #reduceActionFormultiplicative_expression4: 20137986 false ) 	#(297 3 #reduceActionFormultiplicative_expression4: 20137988 false ) 	#(297 3 #reduceActionFormultiplicative_expression4: 20137989 false ) 	#(297 3 #reduceActionFormultiplicative_expression4: 20137991 false ) 	#(297 3 #reduceActionFormultiplicative_expression4: 20137990 false ) 	#(297 3 #reduceActionFormultiplicative_expression4: 20137987 false ) 	#(298 3 #reduceActionFormultiplicative_expression4: 20736003 false ) 	#(298 3 #reduceActionFormultiplicative_expression4: 20736002 false ) 	#(299 3 #reduceActionFormultiplicative_expression4: 20983810 false ) 	#(300 3 #reduceActionFormultiplicative_expression4: 21116930 false ) 	#(301 3 #reduceActionFormultiplicative_expression4: 21258242 false ) 	#(302 3 #reduceActionFormultiplicative_expression4: 21417986 false ) 	#(304 3 #reduceActionFormultiplicative_expression4: 21755906 false ) 	#(303 3 #reduceActionFormultiplicative_expression4: 21584898 false ) 	#(306 3 #reduceActionForlambda_expression1: 22107137 false ) 	#(320 1 #liftFirstValue: 23772161 false ) 	#(320 1 #liftFirstValue: 23772162 false ) 	#(331 2 #reduceActionFororderby_clause1: 24761345 false ) 	#(332 1 #reduceActionFororderings1: 24803329 false ) 	#(334 0 #reduceActionFor_attribute_target_specifier1: 24915969 false ) 	#(328 2 #reduceActionForattribute_target_specifier1: 24354817 false ) 	#(339 0 #reduceActionFor_query_continuation1: 25229313 false ) 	#(336 1 #reduceActionForselect_or_group_clause1: 25020417 false ) 	#(336 1 #reduceActionForselect_or_group_clause2: 25020418 false ) 	#(325 2 #reduceActionForquery_body_clauses2: 24082434 false ) 	#(508 2 #reduceActionForstatic_constructor_modifiers2: 42474498 false ) 	#(433 2 #reduceActionForextern_alias_directives2: 34625538 false ) 	#(439 2 #reduceActionForextern_alias_directives2: 35162114 false ) 	#(447 2 #reduceActionForextern_alias_directives2: 35986434 false ) 	#(463 2 #reduceActionForextern_alias_directives2: 37390338 false ) 	#(478 2 #reduceActionForextern_alias_directives2: 38981634 false ) 	#(485 2 #reduceActionForextern_alias_directives2: 39749634 false ) 	#(490 2 #reduceActionForextern_alias_directives2: 40377346 false ) 	#(492 1 #reduceActionForoperator_declarator1: 40543233 false ) 	#(492 1 #reduceActionForoperator_declarator2: 40543234 false ) 	#(492 1 #reduceActionForoperator_declarator3: 40543235 false ) 	#(501 2 #reduceActionForextern_alias_directives2: 41761794 false ) 	#(508 2 #reduceActionForstatic_constructor_modifiers1: 42474497 false ) 	#(181 4 #reduceActionForextern_alias_directive1: 6497281 false ) 	#(186 3 #reduceActionForusing_namespace_directive1: 6921217 false ) 	#(565 1 #liftFirstValue: 49318913 false ) 	#(565 1 #liftFirstValue: 49318914 false ) 	#(175 4 #reduceActionForcompilation_unit1: 5854209 false ) 	#(188 1 #reduceActionFor_extern_alias_directives2: 7077890 false ) 	#(189 1 #reduceActionForextern_alias_directives1: 7150593 false ) 	#(562 2 #reduceActionForextern_alias_directives2: 48841730 false ) 	#(569 4 #reduceActionForattribute_section1: 49552385 false ) 	#(578 0 #reduceActionFor_explicit_anonymous_function_paramenter_list1: 50538497 false ) 	#(574 2 #reduceActionForattribute1: 50135041 false ) 	#(576 1 #reduceActionFor_attribute_arguments2: 50246658 false ) 	#(177 3 #reduceActionForqualified_identifier2: 6085634 false ) 	#(586 1 #liftFirstValue: 51486722 false ) 	#(176 4 #reduceActionFornamespace_declaration1: 5978113 false ) 	#(547 0 #reduceActionFor_attribute_target_specifier1: 47336449 false ) 	#(449 1 #liftFirstValue: 36248577 false ) 	#(449 1 #liftFirstValue: 36248578 false ) 	#(292 4 #reduceActionForcast_expression1: 19150849 false ) 	#(250 4 #reduceActionForbase_access2: 13435906 false ) 	#(278 4 #reduceActionForchecked_expression1: 16605185 false ) 	#(280 4 #reduceActionFordefault_value_expression2: 16756738 false ) 	#(602 1 #reduceActionForinterpolated_regular_string1: 53656577 false ) 	#(382 0 #nil 29391873 false ) 	#(391 4 #reduceActionForgoto_statement2: 30095362 false ) 	#(281 4 #reduceActionFornameof_expression1: 16827393 false ) 	#(214 3 #reduceActionForrank_specifier1: 9055233 false ) 	#(216 2 #reduceActionForextern_alias_directives2: 9148418 false ) 	#(268 3 #reduceActionForanonymous_object_initializer1: 15527937 false ) 	#(260 1 #reduceActionForinitializer_target1: 14508033 false ) 	#(257 1 #reduceActionFor_extern_alias_directives2: 14236674 false ) 	#(258 1 #reduceActionForinterpolated_regular_string1: 14297089 false ) 	#(263 1 #reduceActionForinterpolated_regular_string1: 14791681 false ) 	#(264 1 #reduceActionForelement_initializer1: 14925825 false ) 	#(443 1 #liftFirstValue: 35611649 false ) 	#(523 1 #reduceActionForinterpolated_regular_string1: 44119041 false ) 	#(443 1 #liftFirstValue: 35611650 false ) 	#(522 1 #reduceActionFor_extern_alias_directives2: 44055554 false ) 	#(600 4 #reduceActionForsizeof_expression1: 53422081 false ) 	#(399 0 #nil 30807041 false ) 	#(397 1 #reduceActionFor_extern_alias_directives2: 30696450 false ) 	#(401 2 #reduceActionForfinally_clause1: 30929921 false ) 	#(395 2 #reduceActionForextern_alias_directives2: 30526466 false ) 	#(394 4 #reduceActionFortry_statement3: 30343171 false ) 	#(276 0 #reduceActionFor_extern_alias_directives1: 16531457 false ) 	#(273 2 #reduceActionForunbound_type_name1: 16194561 false ) 	#(274 1 #reduceActionFor_extern_alias_directives2: 16410626 false ) 	#(272 4 #reduceActionFortypeof_expression1: 16040961 false ) 	#(272 4 #reduceActionFortypeof_expression1: 16040962 false ) 	#(272 4 #reduceActionFortypeof_expression1: 16040963 false ) 	#(279 4 #reduceActionForunchecked_expression1: 16678913 false ) 	#(407 4 #reduceActionForyield_statement1: 31372289 false ) 	#(192 4 #reduceActionForqualified_alias_member1: 7523329 false ) 	#(218 3 #reduceActionFortype_argument_list1: 9227265 false ) 	#(195 4 #reduceActionFornamespace_or_type_name2: 7737346 false ) 	#(226 2 #reduceActionForattribute_target_specifier1: 9713665 false ) 	#(246 4 #reduceActionForinvocation_expression1: 13113345 false ) 	#(224 2 #reduceActionForargument1: 9623553 false ) 	#(227 1 #reduceActionForargument_value1: 9764865 false ) 	#(242 4 #reduceActionFormember_access1: 12075009 false ) 	#(247 4 #reduceActionForelement_access1: 13203457 false ) 	#(598 4 #reduceActionForpointer_element_access1: 53202945 false ) 	#(232 4 #reduceActionForinterpolated_regular_string2: 10766338 false ) 	#(236 4 #reduceActionForinterpolated_regular_string2: 11354114 false ) 	#(242 4 #reduceActionFormember_access1: 12075010 false ) 	#(358 3 #reduceActionForlocal_variable_declarators2: 26769410 false ) 	#(361 1 #liftFirstValue: 27291649 false ) 	#(359 3 #reduceActionForlocal_variable_declarator2: 26917890 false ) 	#(361 1 #liftFirstValue: 27291650 false ) 	#(361 1 #liftFirstValue: 27291651 false ) 	#(312 3 #reduceActionForlocal_variable_declarators2: 22744066 false ) 	#(313 3 #reduceActionForexplicit_anonymous_function_paramenter1: 22951937 false ) 	#(318 3 #reduceActionForlocal_variable_declarators2: 23520258 false ) 	#(335 1 #reduceActionForordering_direction1: 24966145 false ) 	#(335 1 #reduceActionForordering_direction2: 24966146 false ) 	#(333 2 #reduceActionForordering1: 24855553 false ) 	#(334 1 #reduceActionFor_extern_alias_directives2: 24915970 false ) 	#(337 2 #reduceActionForattribute_target_specifier1: 25080833 false ) 	#(323 3 #reduceActionForquery_body1: 23950337 false ) 	#(339 1 #reduceActionFor_extern_alias_directives2: 25229314 false ) 	#(451 3 #reduceActionFormethod_body2: 36379650 false ) 	#(508 3 #reduceActionForstatic_constructor_modifiers7: 42474503 false ) 	#(508 3 #reduceActionForstatic_constructor_modifiers7: 42474504 false ) 	#(442 1 #reduceActionForvariable_declarator1: 35505153 false ) 	#(441 1 #reduceActionForinterpolated_regular_string1: 35381249 false ) 	#(450 1 #reduceActionForargument_value1: 36285441 false ) 	#(483 4 #reduceActionForindexer_declaration1: 39606273 false ) 	#(498 1 #reduceActionFormethod_body3: 41467907 false ) 	#(498 1 #reduceActionFormethod_body1: 41467905 false ) 	#(489 4 #reduceActionForoperator_declaration1: 40270849 false ) 	#(452 0 #reduceActionFor_explicit_anonymous_function_paramenter_list1: 36471809 false ) 	#(506 1 #reduceActionForordering_direction2: 42263554 false ) 	#(506 1 #reduceActionForordering_direction1: 42263553 false ) 	#(499 4 #reduceActionForconstructor_declaration1: 41592833 false ) 	#(508 3 #reduceActionForstatic_constructor_modifiers5: 42474501 false ) 	#(508 3 #reduceActionForstatic_constructor_modifiers3: 42474499 false ) 	#(508 3 #reduceActionForstatic_constructor_modifiers6: 42474502 false ) 	#(508 3 #reduceActionForstatic_constructor_modifiers3: 42474500 false ) 	#(187 4 #reduceActionForusing_static_directive1: 6999041 false ) 	#(564 2 #reduceActionForattribute_target_specifier1: 49231873 false ) 	#(189 2 #reduceActionForextern_alias_directives2: 7150594 false ) 	#(569 5 #reduceActionForattribute_section2: 49552386 false ) 	#(573 3 #reduceActionForlocal_variable_declarators2: 50027522 false ) 	#(583 1 #liftFirstValue: 51020801 false ) 	#(578 1 #reduceActionFor_extern_alias_directives2: 50538498 false ) 	#(579 1 #reduceActionForinterpolated_regular_string1: 50599937 false ) 	#(581 1 #reduceActionForinterpolated_regular_string1: 50793473 false ) 	#(580 1 #liftFirstValue: 50736129 false ) 	#(412 0 #nil 31944705 false ) 	#(528 0 #nil 44825601 false ) 	#(547 1 #reduceActionFor_extern_alias_directives2: 47336450 false ) 	#(248 3 #reduceActionForlocal_variable_declarators2: 13309954 false ) 	#(364 3 #reduceActionForconst_declarator1: 27548673 false ) 	#(363 3 #reduceActionForlocal_variable_declarators2: 27436034 false ) 	#(383 1 #liftFirstValue: 29443073 false ) 	#(382 1 #liftFirstValue: 29391874 false ) 	#(386 3 #reduceActionForlocal_variable_declarators2: 29596674 false ) 	#(368 5 #reduceActionForif_statement1: 28043265 false ) 	#(404 5 #reduceActionForlock_statement1: 31093761 false ) 	#(271 3 #reduceActionFormember_declarator5: 15836165 false ) 	#(268 4 #reduceActionForanonymous_object_initializer2: 15527938 false ) 	#(270 3 #reduceActionForlocal_variable_declarators2: 15712258 false ) 	#(254 0 #nil 13944833 false ) 	#(256 3 #reduceActionForobject_initializer1: 14108673 false ) 	#(262 3 #reduceActionForcollection_initializer1: 14658561 false ) 	#(521 3 #reduceActionForarray_initializer1: 43924481 false ) 	#(212 0 #reduceActionFor_extern_alias_directives1: 8905729 false ) 	#(266 5 #reduceActionFordelegate_creation_expression1: 15341569 false ) 	#(371 0 #reduceActionFor_extern_alias_directives1: 28421121 false ) 	#(369 5 #reduceActionForswitch_statement1: 28282881 false ) 	#(590 0 #nil 51625985 false ) 	#(399 1 #liftFirstValue: 30807042 false ) 	#(277 1 #reduceActionForextern_alias_directives1: 16557057 false ) 	#(276 1 #reduceActionFor_extern_alias_directives2: 16531458 false ) 	#(405 5 #reduceActionForusing_statement1: 31192065 false ) 	#(377 5 #reduceActionForwhile_statement1: 28884993 false ) 	#(219 3 #reduceActionForlocal_variable_declarators2: 9302018 false ) 	#(223 3 #reduceActionForlocal_variable_declarators2: 9540610 false ) 	#(228 1 #liftFirstValue: 9892865 false ) 	#(227 2 #reduceActionForargument_value3: 9764867 false ) 	#(221 1 #liftFirstValue: 9434113 false ) 	#(227 2 #reduceActionForargument_value2: 9764866 false ) 	#(287 4 #reduceActionFornull_conditional_operations5: 17835013 false ) 	#(289 5 #reduceActionFornull_conditional_invocation_expression1: 18796545 false ) 	#(287 4 #reduceActionFornull_conditional_operations3: 17835011 false ) 	#(287 4 #reduceActionFornull_conditional_operations4: 17835012 false ) 	#(234 3 #reduceActionForinterpolated_regular_string_body2: 11055106 false ) 	#(235 3 #reduceActionForinterpolation2: 11235330 false ) 	#(238 3 #reduceActionForinterpolated_regular_string_body2: 11674626 false ) 	#(322 5 #reduceActionForfrom_clause1: 23875585 false ) 	#(305 5 #reduceActionForconditional_expression2: 21926914 false ) 	#(327 4 #reduceActionForlet_clause1: 24289281 false ) 	#(332 3 #reduceActionFororderings2: 24803330 false ) 	#(435 1 #reduceActionForinterpolated_regular_string1: 34813953 false ) 	#(437 5 #reduceActionForfield_declaration1: 35020801 false ) 	#(461 5 #reduceActionForproperty_declaration1: 37236737 false ) 	#(471 0 #nil 38277121 false ) 	#(469 0 #nil 38125569 false ) 	#(473 0 #reduceActionFor_extern_alias_directives1: 38428673 false ) 	#(494 1 #liftFirstValue: 40809475 false ) 	#(496 1 #liftFirstValue: 41098252 false ) 	#(496 1 #liftFirstValue: 41098245 false ) 	#(496 1 #liftFirstValue: 41098246 false ) 	#(496 1 #liftFirstValue: 41098243 false ) 	#(494 1 #liftFirstValue: 40809473 false ) 	#(496 1 #liftFirstValue: 41098241 false ) 	#(494 1 #liftFirstValue: 40809477 false ) 	#(496 1 #liftFirstValue: 41098242 false ) 	#(494 1 #liftFirstValue: 40809474 false ) 	#(494 1 #liftFirstValue: 40809478 false ) 	#(496 1 #liftFirstValue: 41098244 false ) 	#(496 1 #liftFirstValue: 41098254 false ) 	#(496 1 #liftFirstValue: 41098249 false ) 	#(496 1 #liftFirstValue: 41098256 false ) 	#(496 1 #liftFirstValue: 41098251 false ) 	#(496 1 #liftFirstValue: 41098255 false ) 	#(496 1 #liftFirstValue: 41098248 false ) 	#(494 1 #liftFirstValue: 40809480 false ) 	#(494 1 #liftFirstValue: 40809479 false ) 	#(496 1 #liftFirstValue: 41098247 false ) 	#(494 1 #liftFirstValue: 40809476 false ) 	#(496 1 #liftFirstValue: 41098253 false ) 	#(496 1 #liftFirstValue: 41098250 false ) 	#(452 1 #reduceActionFor_extern_alias_directives2: 36471810 false ) 	#(453 1 #reduceActionFor_extern_alias_directives2: 36530177 false ) 	#(454 1 #reduceActionForinterpolated_regular_string1: 36670465 false ) 	#(453 1 #reduceActionForinterpolated_regular_string1: 36530179 false ) 	#(458 0 #nil 37007361 false ) 	#(185 5 #reduceActionForusing_alias_directive1: 6814721 false ) 	#(563 4 #reduceActionForattribute_section1: 48979969 false ) 	#(577 3 #reduceActionForanonymous_object_initializer1: 50298881 false ) 	#(577 3 #reduceActionForanonymous_object_initializer1: 50298883 false ) 	#(416 0 #reduceActionFor_class_base1: 32279553 false ) 	#(412 1 #liftFirstValue: 31944706 false ) 	#(514 0 #reduceActionFor_struct_interfaces1: 43211777 false ) 	#(533 0 #reduceActionFor_struct_interfaces1: 45300737 false ) 	#(528 1 #liftFirstValue: 44825602 false ) 	#(548 2 #reduceActionForattribute_target_specifier1: 47367169 false ) 	#(553 0 #reduceActionFor_explicit_anonymous_function_paramenter_list1: 47791105 false ) 	#(604 1 #reduceActionForordering_direction2: 53881858 false ) 	#(603 3 #reduceActionForfixed_pointer_declarator1: 53800961 false ) 	#(601 6 #reduceActionForfixed_statement1: 53533697 false ) 	#(602 3 #reduceActionForlocal_variable_declarators2: 53656578 false ) 	#(384 0 #nil 29483009 false ) 	#(282 4 #reduceActionFornamed_entity2: 16894978 false ) 	#(253 6 #reduceActionForobject_creation_expression1: 13740033 false ) 	#(254 1 #liftFirstValue: 13944834 false ) 	#(260 3 #reduceActionForinitializer_target2: 14508034 false ) 	#(264 3 #reduceActionForelement_initializer2: 14925826 false ) 	#(256 4 #reduceActionForobject_initializer2: 14108674 false ) 	#(258 3 #reduceActionForlocal_variable_declarators2: 14297090 false ) 	#(261 1 #liftFirstValue: 14585858 false ) 	#(259 3 #reduceActionFormember_initializer1: 14427137 false ) 	#(261 1 #liftFirstValue: 14585857 false ) 	#(262 4 #reduceActionForcollection_initializer2: 14658562 false ) 	#(263 3 #reduceActionForlocal_variable_declarators2: 14791682 false ) 	#(521 4 #reduceActionForarray_initializer2: 43924482 false ) 	#(523 3 #reduceActionForlocal_variable_declarators2: 44119042 false ) 	#(520 0 #nil 43877377 false ) 	#(212 1 #reduceActionFor_extern_alias_directives2: 8905730 false ) 	#(371 1 #reduceActionFor_extern_alias_directives2: 28421122 false ) 	#(372 1 #reduceActionForextern_alias_directives1: 28464129 false ) 	#(374 1 #reduceActionForextern_alias_directives1: 28613633 false ) 	#(590 1 #liftFirstValue: 51625986 false ) 	#(396 4 #reduceActionForcatch_clause1: 30609409 false ) 	#(273 4 #reduceActionForunbound_type_name2: 16194562 false ) 	#(275 3 #reduceActionForgeneric_dimension_specifier1: 16479233 false ) 	#(277 2 #reduceActionForextern_alias_directives2: 16557058 false ) 	#(273 4 #reduceActionForunbound_type_name3: 16194563 false ) 	#(228 2 #reduceActionForout_expression2: 9892866 false ) 	#(287 5 #reduceActionFornull_conditional_operations1: 17835009 false ) 	#(287 5 #reduceActionFornull_conditional_operations2: 17835010 false ) 	#(338 4 #reduceActionForlet_clause1: 25135105 false ) 	#(340 3 #reduceActionForquery_continuation1: 25279489 false ) 	#(431 6 #reduceActionForconstant_declaration1: 34464769 false ) 	#(442 3 #reduceActionForvariable_declarator2: 35505154 false ) 	#(441 3 #reduceActionForlocal_variable_declarators2: 35381250 false ) 	#(450 3 #reduceActionFormember_name2: 36285442 false ) 	#(476 6 #reduceActionForevent_declaration1: 38716417 false ) 	#(488 3 #reduceActionForindexer_body2: 40174594 false ) 	#(488 3 #reduceActionForindexer_body1: 40174593 false ) 	#(468 2 #reduceActionForattribute_target_specifier1: 37932033 false ) 	#(471 1 #liftFirstValue: 38277122 false ) 	#(468 2 #reduceActionForaccessor_declarations2: 37932034 false ) 	#(469 1 #liftFirstValue: 38125570 false ) 	#(474 1 #reduceActionForextern_alias_directives1: 38477826 false ) 	#(474 1 #reduceActionForextern_alias_directives1: 38477827 false ) 	#(474 1 #reduceActionForextern_alias_directives1: 38477825 false ) 	#(473 1 #reduceActionFor_extern_alias_directives2: 38428674 false ) 	#(498 3 #reduceActionFormethod_body2: 41467906 false ) 	#(504 0 #nil 42075137 false ) 	#(459 1 #liftFirstValue: 37067778 false ) 	#(459 1 #liftFirstValue: 37067777 false ) 	#(459 1 #liftFirstValue: 37067779 false ) 	#(458 1 #liftFirstValue: 37007362 false ) 	#(509 1 #reduceActionForordering_direction2: 42548226 false ) 	#(509 1 #reduceActionForordering_direction1: 42548225 false ) 	#(507 6 #reduceActionForstatic_constructor_declaration1: 42308609 false ) 	#(563 5 #reduceActionForattribute_section2: 48979970 false ) 	#(582 3 #reduceActionFornamed_argument1: 50909185 false ) 	#(579 3 #reduceActionForlocal_variable_declarators2: 50599938 false ) 	#(581 3 #reduceActionForlocal_variable_declarators2: 50793474 false ) 	#(178 5 #reduceActionFornamespace_body1: 6193153 false ) 	#(419 0 #reduceActionFor_extern_alias_directives1: 32559105 false ) 	#(416 1 #reduceActionFor_extern_alias_directives2: 32279554 false ) 	#(514 1 #reduceActionFor_extern_alias_directives2: 43211778 false ) 	#(531 0 #nil 45195265 false ) 	#(533 1 #reduceActionFor_extern_alias_directives2: 45300738 false ) 	#(553 1 #reduceActionFor_extern_alias_directives2: 47791106 false ) 	#(554 1 #reduceActionForinterpolated_regular_string1: 47852545 false ) 	#(546 7 #reduceActionForenum_declaration1: 47207425 false ) 	#(378 7 #reduceActionFordo_statement1: 28993537 false ) 	#(604 2 #reduceActionForattribute_target_specifier1: 53881857 false ) 	#(384 1 #liftFirstValue: 29483010 false ) 	#(385 1 #reduceActionForfor_initializer2: 29532161 false ) 	#(368 7 #reduceActionForif_statement2: 28043266 false ) 	#(288 5 #reduceActionFornull_conditional_member_access2: 18473986 false ) 	#(265 7 #reduceActionForarray_creation_expression1: 15039489 false ) 	#(520 1 #liftFirstValue: 43877378 false ) 	#(375 2 #reduceActionForswitch_label2: 28694530 false ) 	#(370 3 #reduceActionForgeneric_dimension_specifier1: 28366849 false ) 	#(372 2 #reduceActionForextern_alias_directives2: 28464130 false ) 	#(373 2 #reduceActionForswitch_section1: 28557313 false ) 	#(374 2 #reduceActionForextern_alias_directives2: 28613634 false ) 	#(398 4 #reduceActionForlet_clause1: 30747649 false ) 	#(436 3 #reduceActionForconstant_declarator1: 34937857 false ) 	#(435 3 #reduceActionForlocal_variable_declarators2: 34813954 false ) 	#(465 3 #reduceActionForproperty_body2: 37662722 false ) 	#(466 0 #reduceActionFor_property_initializer1: 37794817 false ) 	#(487 5 #reduceActionForindexer_declarator1: 40004609 false ) 	#(474 2 #reduceActionForaccessor_modifiers5: 38477829 false ) 	#(474 2 #reduceActionForaccessor_modifiers5: 38477828 false ) 	#(503 5 #reduceActionForconstructor_declarator1: 41973761 false ) 	#(504 1 #liftFirstValue: 42075138 false ) 	#(454 3 #reduceActionForlocal_variable_declarators2: 36670466 false ) 	#(453 3 #reduceActionForlocal_variable_declarators2: 36530178 false ) 	#(577 5 #reduceActionForattribute_arguments2: 50298882 false ) 	#(413 3 #reduceActionFortype_parameter_list1: 32014337 false ) 	#(414 2 #reduceActionFortype_parameters1: 32097281 false ) 	#(417 2 #reduceActionForclass_base1: 32313345 false ) 	#(418 1 #reduceActionForinterpolated_regular_string1: 32441345 false ) 	#(417 2 #reduceActionForclass_base2: 32313346 false ) 	#(419 1 #reduceActionFor_extern_alias_directives2: 32559106 false ) 	#(420 1 #reduceActionForextern_alias_directives1: 32642049 false ) 	#(515 2 #reduceActionForstruct_interfaces1: 43258881 false ) 	#(529 3 #reduceActionForvariant_type_parameter_list1: 44910593 false ) 	#(532 1 #liftFirstValue: 45259777 false ) 	#(532 1 #liftFirstValue: 45259778 false ) 	#(531 1 #liftFirstValue: 45195266 false ) 	#(534 2 #reduceActionForstruct_interfaces1: 45342721 false ) 	#(549 3 #reduceActionForanonymous_object_initializer1: 47414273 false ) 	#(555 2 #reduceActionForenum_member_declaration1: 48003073 false ) 	#(387 8 #reduceActionForforeach_statement1: 29732865 false ) 	#(288 6 #reduceActionFornull_conditional_member_access1: 18473985 false ) 	#(375 3 #reduceActionForswitch_label1: 28694529 false ) 	#(400 4 #reduceActionForexception_filter1: 30861313 false ) 	#(612 5 #reduceActionForstackalloc_initializer1: 54866945 false ) 	#(465 4 #reduceActionForproperty_body1: 37662721 false ) 	#(466 1 #reduceActionFor_extern_alias_directives2: 37794818 false ) 	#(476 8 #reduceActionForevent_declaration2: 38716418 false ) 	#(480 2 #reduceActionForattribute_target_specifier1: 39238657 false ) 	#(480 2 #reduceActionForaccessor_declarations2: 39238658 false ) 	#(475 1 #reduceActionForordering_direction2: 38675458 false ) 	#(475 1 #reduceActionForordering_direction1: 38675457 false ) 	#(470 4 #reduceActionForget_accessor_declaration1: 38187009 false ) 	#(472 4 #reduceActionForset_accessor_declaration1: 38338561 false ) 	#(460 4 #reduceActionForparameter_array1: 37120001 false ) 	#(456 0 #reduceActionFor_attribute_target_specifier1: 36910081 false ) 	#(591 8 #reduceActionFordestructor_declaration1: 52048897 false ) 	#(591 8 #reduceActionFordestructor_declaration1: 52048898 false ) 	#(428 0 #reduceActionFor_extern_alias_directives1: 33956865 false ) 	#(420 2 #reduceActionForextern_alias_directives2: 32642050 false ) 	#(517 0 #reduceActionFor_extern_alias_directives1: 43372545 false ) 	#(530 3 #reduceActionForvariant_type_parameters1: 45009921 false ) 	#(536 0 #reduceActionFor_extern_alias_directives1: 45493249 false ) 	#(549 4 #reduceActionForanonymous_object_initializer2: 47414274 false ) 	#(554 3 #reduceActionForlocal_variable_declarators2: 47852546 false ) 	#(379 9 #reduceActionForfor_statement1: 29108225 false ) 	#(481 3 #reduceActionForadd_accessor_declaration1: 39460865 false ) 	#(482 3 #reduceActionForremove_accessor_declaration1: 39530497 false ) 	#(487 7 #reduceActionForindexer_declarator2: 40004610 false ) 	#(497 7 #reduceActionForconversion_operator_declarator2: 41254914 false ) 	#(497 7 #reduceActionForconversion_operator_declarator1: 41254913 false ) 	#(493 7 #reduceActionForunary_operator_declarator1: 40662017 false ) 	#(455 5 #reduceActionForfixed_parameter1: 36784129 false ) 	#(456 1 #reduceActionFor_extern_alias_directives2: 36910082 false ) 	#(414 4 #reduceActionFortype_parameters2: 32097282 false ) 	#(417 4 #reduceActionForclass_base3: 32313347 false ) 	#(418 3 #reduceActionForlocal_variable_declarators2: 32441346 false ) 	#(428 1 #reduceActionFor_extern_alias_directives2: 33956866 false ) 	#(429 1 #reduceActionForextern_alias_directives1: 34021377 false ) 	#(408 10 #reduceActionForclass_declaration1: 31493121 false ) 	#(519 1 #liftFirstValue: 43585546 false ) 	#(519 1 #liftFirstValue: 43585537 false ) 	#(519 1 #liftFirstValue: 43585538 false ) 	#(519 1 #liftFirstValue: 43585539 false ) 	#(519 1 #liftFirstValue: 43585540 false ) 	#(519 1 #liftFirstValue: 43585541 false ) 	#(519 1 #liftFirstValue: 43585542 false ) 	#(519 1 #liftFirstValue: 43585543 false ) 	#(519 1 #liftFirstValue: 43585544 false ) 	#(519 1 #liftFirstValue: 43585545 false ) 	#(517 1 #reduceActionFor_extern_alias_directives2: 43372546 false ) 	#(518 1 #reduceActionForextern_alias_directives1: 43439105 false ) 	#(606 0 #reduceActionFor_extern_alias_directives1: 54197249 false ) 	#(519 1 #liftFirstValue: 43585547 false ) 	#(510 10 #reduceActionForstruct_declaration1: 42787841 false ) 	#(538 1 #liftFirstValue: 45723650 false ) 	#(538 1 #liftFirstValue: 45723652 false ) 	#(536 1 #reduceActionFor_extern_alias_directives2: 45493250 false ) 	#(537 1 #reduceActionForextern_alias_directives1: 45564929 false ) 	#(538 1 #liftFirstValue: 45723649 false ) 	#(538 1 #liftFirstValue: 45723651 false ) 	#(587 0 #nil 51523585 false ) 	#(524 10 #reduceActionForinterface_declaration1: 44339201 false ) 	#(555 4 #reduceActionForenum_member_declaration2: 48003074 false ) 	#(329 9 #reduceActionForjoin_clause1: 24415233 false ) 	#(445 10 #reduceActionFormethod_header1: 35745793 false ) 	#(467 3 #reduceActionForproperty_initializer1: 37848065 false ) 	#(457 2 #reduceActionForattribute_target_specifier1: 36955137 false ) 	#(423 1 #reduceActionForprimary_constraint2: 33409026 false ) 	#(423 1 #reduceActionForprimary_constraint3: 33409027 false ) 	#(423 1 #reduceActionForprimary_constraint1: 33409025 false ) 	#(425 1 #reduceActionForprimary_constraint1: 33770497 false ) 	#(424 1 #reduceActionForinterpolated_regular_string1: 33506306 false ) 	#(421 4 #reduceActionFortype_parameter_constraints_clause1: 32831489 false ) 	#(422 1 #reduceActionForinterpolated_regular_string1: 32966657 false ) 	#(422 1 #reduceActionFor_extern_alias_directives2: 32966658 false ) 	#(424 1 #reduceActionForinterpolated_regular_string1: 33506305 false ) 	#(422 1 #reduceActionForinterpolated_regular_string1: 32966659 false ) 	#(427 3 #reduceActionForgeneric_dimension_specifier1: 33894401 false ) 	#(429 2 #reduceActionForextern_alias_directives2: 34021378 false ) 	#(516 3 #reduceActionForgeneric_dimension_specifier1: 43308033 false ) 	#(518 2 #reduceActionForextern_alias_directives2: 43439106 false ) 	#(608 1 #liftFirstValue: 54410244 false ) 	#(608 1 #liftFirstValue: 54410241 false ) 	#(608 1 #liftFirstValue: 54410245 false ) 	#(608 1 #liftFirstValue: 54410243 false ) 	#(608 1 #liftFirstValue: 54410242 false ) 	#(608 1 #liftFirstValue: 54410246 false ) 	#(606 1 #reduceActionFor_extern_alias_directives2: 54197250 false ) 	#(607 1 #reduceActionForextern_alias_directives1: 54265857 false ) 	#(530 5 #reduceActionForvariant_type_parameters2: 45009922 false ) 	#(535 3 #reduceActionForgeneric_dimension_specifier1: 45396993 false ) 	#(537 2 #reduceActionForextern_alias_directives2: 45564930 false ) 	#(587 1 #liftFirstValue: 51523586 false ) 	#(556 11 #reduceActionFordelegate_declaration1: 48204801 false ) 	#(505 5 #reduceActionForconstructor_initializer1: 42149889 false ) 	#(505 5 #reduceActionForconstructor_initializer2: 42149890 false ) 	#(607 2 #reduceActionForextern_alias_directives2: 54265858 false ) 	#(330 11 #reduceActionForjoin_into_clause1: 24574977 false ) 	#(495 10 #reduceActionForbinary_operator_declarator1: 40907777 false ) 	#(426 3 #reduceActionForconstructor_constraint1: 33845249 false ) 	#(422 3 #reduceActionFortype_parameter_constraints4: 32966660 false ) 	#(422 3 #reduceActionFortype_parameter_constraints5: 32966661 false ) 	#(424 3 #reduceActionForlocal_variable_declarators2: 33506308 false ) 	#(424 3 #reduceActionForlocal_variable_declarators2: 33506307 false ) 	#(422 3 #reduceActionForlocal_variable_declarators2: 32966662 false ) 	#(609 1 #liftFirstValue: 54517761 false ) 	#(610 1 #reduceActionForextern_alias_directives1: 54549505 false ) 	#(422 5 #reduceActionFortype_parameter_constraints7: 32966663 false ) 	#(605 6 #reduceActionForfixed_size_buffer_declaration1: 54042625 false ) 	#(610 2 #reduceActionForextern_alias_directives2: 54549506 false ) 	#(544 6 #reduceActionForinterface_event_declaration1: 46824449 false ) 	#(611 4 #reduceActionForfixed_size_buffer_declarator1: 54706177 false ) 	#(539 10 #reduceActionForinterface_method_declaration1: 45869057 false )	).! !!CSharpParser class methodsFor: 'generated'!startingStateFornamespace_member_declaration	^ 2! !!CSharpParser class methodsFor: 'generated'!startingStateForcompilation_unit	^ 1! !!CSharpParser class methodsFor: 'generated'!transitionTable^#(#[1 0 6 0 37 0 6 0 41 0 6 0 57 0 6 0 62 0 6 0 67 0 29 0 71 0 6 0 87 0 6 0 88 0 6 0 98 0 6 0 99 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 112 0 6 0 118 0 6 0 124 0 6 0 126 0 6 0 137 0 6 0 139 0 33 0 175 0 37 0 179 0 41 0 180 0 45 0 181 0 6 2 102] #[1 0 49 0 37 0 10 0 41 0 10 0 57 0 10 0 62 0 10 0 67 0 10 0 87 0 10 0 88 0 53 0 98 0 10 0 99 0 10 0 108 0 10 0 109 0 10 0 111 0 10 0 112 0 10 0 118 0 10 0 124 0 10 0 126 0 10 0 137 0 61 0 176 0 61 0 190 0 61 0 191 0 61 1 152 0 61 1 254 0 61 2 12 0 61 2 34 0 61 2 44 0 89 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 0 149 0 49 0 153 0 50 0 157 0 52 0 161 0 55 0 165 0 56 0 169 0 58 0 173 0 59 0 177 0 60 0 181 0 61 0 185 0 62 0 189 0 64 0 193 0 65 2 217 0 72 0 201 0 75 0 205 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 0 225 0 86 0 229 0 93 0 233 0 94 0 237 0 97 0 241 0 99 0 245 0 100 0 249 0 116 0 253 0 117 1 1 0 121 1 5 0 122 1 9 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 1 37 0 134 1 41 0 135 1 45 0 136 1 49 0 137 1 53 0 138 1 57 0 139 1 61 0 140 1 65 0 142 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 1 85 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 1 117 0 192 1 121 0 194 1 125 0 195 1 129 0 197 1 129 0 198 1 129 0 199 1 129 0 200 1 145 0 201 1 145 0 202 1 145 0 203 1 129 0 204 1 161 0 205 1 129 0 206 1 129 0 207 1 129 0 208 1 129 0 209 1 129 0 210 1 185 0 211 1 129 0 217 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 2 85 1 92 2 85 1 93 2 85 1 94 2 85 1 97 2 85 1 98 2 85 1 99 2 109 1 100 2 113 1 101 2 117 1 106 2 85 1 109 2 125 1 110 2 85 1 111 2 85 1 112 2 85 1 113 2 85 1 120 2 85 1 121 2 85 1 122 2 85 1 123 2 85 1 131 2 85 1 132 2 85 1 133 2 85 1 134 2 85 1 135 2 85 1 136 2 85 1 137 2 85 1 138 2 85 1 146 2 85 1 147 2 85 1 148 2 85 1 149 2 85 1 151 1 129 1 159 1 197 2 72 2 217 2 73 2 85 2 81 1 129 2 82 2 229 2 83 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 2 85 2 89 3 1 2 101] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 3 205 1 49 3 205 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 3 205 1 65 3 197 1 66 3 205 1 85 3 205 1 88 3 205 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 1 77 0 148 3 213 1 94] #[1 0 49 0 37 0 10 0 41 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 57 0 10 0 58 0 10 0 60 0 10 0 62 0 10 0 65 0 10 0 67 0 10 0 69 0 10 0 71 0 10 0 76 0 10 0 86 0 10 0 87 0 10 0 88 0 10 0 94 0 10 0 99 0 10 0 100 0 10 0 105 0 10 0 108 0 10 0 109 0 10 0 111 0 10 0 112 0 10 0 113 0 10 0 117 0 10 0 118 0 10 0 121 0 10 0 124 0 10 0 125 0 10 0 126 0 10 0 134 0 10 0 135 0 10 0 137 0 10 0 138 0 10 0 141 0 10 0 142 0 10 0 143 0 10 0 152 0 10 0 157 3 221 0 191 3 221 1 152 3 221 1 174 3 221 1 175 3 221 1 181 3 221 1 188 3 237 1 189 3 221 1 205 3 221 1 220 3 221 1 227 3 221 1 233 3 221 1 243 3 221 1 251 3 221 1 254 3 221 2 12 3 221 2 34 3 221 2 44 4 9 2 54 0 93 2 55 0 97 2 56 0 101 2 57 3 221 2 79] #[0 4 17 0 43] #[0 0 0 2 102] #[1 0 22 0 37 0 22 0 41 0 22 0 57 0 22 0 62 0 22 0 67 0 22 0 87 0 22 0 88 0 22 0 98 0 22 0 99 0 22 0 108 0 22 0 109 0 22 0 111 0 22 0 112 0 22 0 118 0 22 0 124 0 22 0 126 0 22 0 137 4 21 0 139 4 25 0 182 4 29 0 183 4 33 0 184 4 33 0 185 4 33 0 186 4 33 0 187 0 22 2 102] #[1 0 26 0 37 0 26 0 41 0 26 0 57 0 26 0 62 0 26 0 67 0 29 0 71 0 26 0 87 0 26 0 88 0 26 0 98 0 26 0 99 0 26 0 108 0 26 0 109 0 26 0 111 0 26 0 112 0 26 0 118 0 26 0 124 0 26 0 126 0 26 0 137 0 26 0 139 0 26 0 155 4 49 0 181 0 26 2 102] #[0 0 30 0 37 0 41 0 57 0 62 0 67 0 71 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 139 0 155 2 102] #[1 4 89 0 69 4 89 0 73 4 89 0 95 4 89 0 106 4 89 0 110 4 89 0 116 4 89 0 132 0 34 0 157 4 81 2 58 4 85 2 59 4 89 2 60] #[1 4 93 0 157 4 97 0 177] #[0 0 38 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 155 2 102] #[0 0 0 2 102] #[0 0 42 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 155 2 102] #[0 0 46 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 0 50 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 0 54 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 0 58 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 0 62 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 4 145 0 41 0 66 0 57 0 70 0 62 0 74 0 67 0 78 0 87 4 105 0 88 4 109 0 99 0 7 0 108 4 113 0 109 4 117 0 111 4 121 0 112 4 145 0 118 4 145 0 124 0 82 0 126 4 133 0 137 4 137 1 153 4 141 1 154 4 145 1 155 4 149 1 255 4 153 2 0 4 157 2 1 4 161 2 13 4 165 2 14 4 169 2 15 4 173 2 38 4 177 2 39 4 181 2 40 4 185 2 45 4 189 2 46 4 193 2 47] #[0 0 86 0 41 0 42 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 80 0 85 0 86 0 87 0 88 0 94 0 99 0 100 0 104 0 105 0 107 0 108 0 109 0 111 0 112 0 113 0 114 0 115 0 117 0 118 0 120 0 121 0 124 0 125 0 126 0 128 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 157] #[1 0 49 0 37 0 90 0 41 0 90 0 42 0 90 0 49 0 90 0 52 0 90 0 55 0 90 0 57 0 90 0 58 0 90 0 60 0 90 0 62 0 90 0 65 0 90 0 67 0 90 0 69 0 90 0 71 0 90 0 75 0 90 0 76 0 90 0 80 0 90 0 85 0 90 0 86 0 90 0 87 0 90 0 88 0 90 0 94 0 90 0 99 0 90 0 100 0 90 0 104 0 90 0 105 0 90 0 107 0 90 0 108 0 90 0 109 0 90 0 111 0 90 0 112 0 90 0 113 0 90 0 114 0 90 0 115 0 90 0 117 0 90 0 118 0 90 0 120 0 90 0 121 0 90 0 124 0 90 0 125 0 90 0 126 0 90 0 128 0 90 0 134 0 90 0 135 0 90 0 137 0 90 0 138 0 90 0 141 0 90 0 142 0 90 0 143 0 90 0 152 0 90 0 157 4 197 2 57] #[0 0 94 0 37 0 41 0 42 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 80 0 85 0 86 0 87 0 88 0 94 0 99 0 100 0 104 0 105 0 107 0 108 0 109 0 111 0 112 0 113 0 114 0 115 0 117 0 118 0 120 0 121 0 124 0 125 0 126 0 128 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 157] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 4 205 1 28 4 205 1 29 4 205 1 34 4 205 1 35 4 205 1 36 4 205 1 37 1 197 1 51 1 197 2 72 2 217 2 73 4 205 2 84 1 197 2 85 1 197 2 86 4 205 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 4 209 1 28 4 209 1 29 4 209 1 34 4 209 1 35 4 209 1 36 4 209 1 37 1 197 1 51 1 197 2 72 2 217 2 73 4 209 2 84 1 197 2 85 1 197 2 86 4 209 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 0 149 0 49 0 157 0 52 0 161 0 55 3 21 0 56 0 177 0 60 0 181 0 61 0 185 0 62 0 193 0 65 2 217 0 72 0 205 0 76 3 37 0 79 0 225 0 86 0 233 0 94 0 237 0 97 0 241 0 99 0 245 0 100 0 253 0 117 1 1 0 121 1 5 0 122 1 9 0 125 1 17 0 128 2 217 0 130 1 33 0 133 1 37 0 134 1 41 0 135 3 73 0 136 1 53 0 138 1 65 0 142 1 81 0 152 4 213 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 1 117 0 192 1 121 0 194 1 125 0 195 4 217 0 197 4 217 0 198 4 217 0 199 4 217 0 200 1 145 0 201 1 145 0 202 1 145 0 203 4 217 0 204 1 161 0 205 4 217 0 206 4 217 0 207 4 217 0 208 4 217 0 209 4 217 0 210 1 185 0 211 4 217 0 217 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 4 221 1 49 4 221 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 4 221 1 65 3 197 1 66 4 221 1 85 4 221 1 88 4 221 1 89 4 217 1 159 1 197 2 72 2 217 2 73 4 217 2 82 2 229 2 83 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88 3 1 2 101] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 4 225 1 28 4 225 1 29 4 225 1 34 4 225 1 35 4 225 1 36 4 225 1 37 1 197 1 51 1 197 2 72 2 217 2 73 4 225 2 84 1 197 2 85 1 197 2 86 4 225 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 4 229 1 28 4 229 1 29 4 229 1 34 4 229 1 35 4 229 1 36 4 229 1 37 1 197 1 51 1 197 2 72 2 217 2 73 4 229 2 84 1 197 2 85 1 197 2 86 4 229 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 4 233 1 28 4 233 1 29 4 233 1 34 4 233 1 35 4 233 1 36 4 233 1 37 1 197 1 51 1 197 2 72 2 217 2 73 4 233 2 84 1 197 2 85 1 197 2 86 4 233 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 4 237 1 28 4 237 1 29 4 237 1 34 4 237 1 35 4 237 1 36 4 237 1 37 1 197 1 51 1 197 2 72 2 217 2 73 4 237 2 84 1 197 2 85 1 197 2 86 4 237 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 4 241 1 28 4 241 1 29 4 241 1 34 4 241 1 35 4 241 1 36 4 241 1 37 1 197 1 51 1 197 2 72 2 217 2 73 4 241 2 84 1 197 2 85 1 197 2 86 4 241 2 87 1 197 2 88] #[0 0 98 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 4 245 1 28 4 245 1 29 4 245 1 34 4 245 1 35 4 245 1 36 4 245 1 37 1 197 1 51 1 197 2 72 2 217 2 73 4 245 2 84 1 197 2 85 1 197 2 86 4 245 2 87 1 197 2 88] #[1 4 249 0 20 4 253 0 37] #[1 0 102 0 9 0 102 0 10 0 106 0 20 0 102 0 35 0 102 0 37 0 102 0 157] #[0 5 1 0 25] #[1 0 110 0 9 0 110 0 10 0 114 0 20 0 110 0 35 0 110 0 37 0 110 0 157] #[1 0 118 0 9 0 118 0 10 0 122 0 20 0 118 0 35 0 118 0 37 0 118 0 157] #[1 5 5 0 8 1 77 0 148 5 9 1 94] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 5 81 0 197 5 81 0 198 5 81 0 199 5 81 0 200 1 145 0 201 1 145 0 202 1 145 0 203 5 81 0 204 1 161 0 205 5 81 0 206 5 81 0 207 5 81 0 208 5 81 0 209 5 81 0 210 1 185 0 211 5 81 0 217 5 81 1 159 5 81 2 82 2 229 2 83 3 1 2 101] #[0 5 85 0 25] #[1 0 126 0 9 0 126 0 10 0 130 0 20 0 126 0 35 0 126 0 37 0 126 0 157] #[1 0 134 0 2 0 134 0 3 0 134 0 4 0 134 0 5 0 134 0 6 0 134 0 7 0 11 0 8 0 134 0 9 0 134 0 10 0 134 0 11 0 134 0 12 0 134 0 13 0 134 0 14 0 134 0 15 0 134 0 16 0 134 0 17 0 134 0 18 0 134 0 19 0 134 0 20 0 134 0 21 0 134 0 22 0 134 0 23 0 134 0 25 0 134 0 26 0 134 0 27 0 134 0 28 0 134 0 29 0 134 0 30 0 134 0 31 0 134 0 33 0 134 0 34 0 134 0 35 0 134 0 36 0 134 0 37 0 134 0 38 0 134 0 39 0 134 0 40 0 134 0 44 0 134 0 45 0 134 0 51 0 134 0 63 0 134 0 68 0 134 0 79 0 134 0 82 0 134 0 89 0 134 0 90 0 134 0 91 0 134 0 92 0 134 0 101 0 134 0 103 0 134 0 119 0 134 0 145 0 134 0 149 0 134 0 150 0 134 0 151 0 134 0 153 0 134 0 154 0 134 0 155 0 134 0 163 0 134 0 164 0 134 0 167 0 134 0 168 0 134 2 102] #[1 5 93 0 8 0 138 0 148 5 97 1 53 5 97 1 54] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 3 9 0 49 0 153 0 50 3 13 0 52 3 17 0 55 0 165 0 56 0 173 0 59 3 25 0 60 0 181 0 61 0 185 0 62 0 189 0 64 3 29 0 65 2 217 0 72 0 201 0 75 3 33 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 3 41 0 86 0 229 0 93 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 0 249 0 116 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 3 65 0 134 3 69 0 135 1 45 0 136 1 49 0 137 3 77 0 138 1 57 0 139 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 5 105 1 93 5 105 1 94 5 105 1 97 5 105 1 109 2 125 1 110 5 105 1 111 5 105 1 112 5 105 1 113 5 105 1 120 5 105 1 121 5 105 1 122 5 105 1 123 5 105 1 131 5 105 1 132 5 105 1 133 5 105 1 134 5 105 1 135 5 105 1 136 5 105 1 137 5 105 1 138 5 105 1 146 5 105 1 147 5 105 1 148 5 105 1 149 5 105 1 151 1 197 2 72 2 217 2 73 5 105 2 81 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 5 105 2 89] #[1 0 142 0 9 0 142 0 10 0 146 0 20 0 142 0 35 0 142 0 37 0 142 0 157] #[0 0 150 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 5 109 0 8] #[1 0 154 0 9 0 154 0 10 0 158 0 20 0 154 0 35 0 154 0 37 0 154 0 157] #[0 5 113 0 8] #[0 5 117 0 8] #[1 5 121 0 53 5 125 0 61 5 129 0 157] #[0 5 133 0 8] #[1 0 162 0 9 0 162 0 10 0 166 0 20 0 162 0 35 0 162 0 37 0 162 0 157] #[0 5 137 0 8] #[1 0 170 0 9 0 170 0 10 0 174 0 20 0 170 0 35 0 170 0 37 0 170 0 157] #[0 5 141 0 8] #[1 5 145 0 37 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 149 0 148 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 5 153 0 197 5 153 0 198 5 153 0 199 5 153 0 200 1 145 0 201 1 145 0 202 1 145 0 203 5 153 0 204 1 161 0 205 5 153 0 206 5 153 0 207 5 153 0 208 5 153 0 209 5 157 0 210 5 161 0 211 5 165 0 214 5 169 0 217 5 173 1 12 5 153 1 159 5 153 2 82 2 229 2 83 3 1 2 101] #[1 0 178 0 9 0 178 0 10 0 182 0 20 0 178 0 35 0 178 0 37 0 178 0 157] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 186 0 25 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 5 177 1 49 5 177 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 5 177 1 65 3 197 1 66 5 177 1 85 5 177 1 87 5 177 1 88 5 177 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 190 0 9 0 190 0 10 0 194 0 20 0 190 0 35 0 190 0 37 0 190 0 157] #[1 0 198 0 9 0 198 0 10 0 202 0 20 0 198 0 35 0 198 0 37 0 198 0 157] #[0 5 185 0 8] #[1 0 206 0 9 0 206 0 10 0 210 0 20 0 206 0 35 0 206 0 37 0 206 0 157] #[0 5 189 0 8] #[0 0 214 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 186 0 25 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 5 193 1 49 5 193 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 5 193 1 65 3 197 1 66 5 193 1 85 5 193 1 87 5 193 1 88 5 193 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 0 218 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 1 77 0 148 5 197 1 94] #[0 5 201 0 8] #[1 0 222 0 9 0 222 0 10 0 226 0 20 0 222 0 35 0 222 0 37 0 222 0 157] #[1 0 230 0 9 0 230 0 10 0 234 0 20 0 230 0 35 0 230 0 37 0 230 0 157] #[1 5 205 0 8 1 77 0 148 5 209 1 94] #[1 1 77 0 148 5 213 1 94] #[1 0 238 0 9 0 238 0 10 0 242 0 20 0 238 0 35 0 238 0 37 0 238 0 157] #[0 5 217 0 8] #[0 0 246 0 157] #[0 0 250 0 9 0 10 0 157] #[0 5 221 0 8] #[1 5 225 0 50 5 229 0 116] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 0 149 0 49 0 153 0 50 0 157 0 52 0 161 0 55 0 165 0 56 0 169 0 58 0 173 0 59 0 177 0 60 0 181 0 61 0 185 0 62 0 189 0 64 0 193 0 65 2 217 0 72 0 201 0 75 0 205 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 0 225 0 86 0 229 0 93 0 233 0 94 0 237 0 97 0 241 0 99 0 245 0 100 0 249 0 116 0 253 0 117 1 1 0 121 1 5 0 122 1 9 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 1 37 0 134 1 41 0 135 1 45 0 136 1 49 0 137 1 53 0 138 1 57 0 139 1 61 0 140 1 65 0 142 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 0 254 0 155 1 85 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 1 117 0 192 1 121 0 194 1 125 0 195 1 129 0 197 1 129 0 198 1 129 0 199 1 129 0 200 1 145 0 201 1 145 0 202 1 145 0 203 1 129 0 204 1 161 0 205 1 129 0 206 1 129 0 207 1 129 0 208 1 129 0 209 1 129 0 210 1 185 0 211 1 129 0 217 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 5 233 1 92 5 233 1 93 5 233 1 94 5 237 1 95 5 241 1 96 5 233 1 97 5 233 1 98 5 233 1 99 2 109 1 100 2 113 1 101 2 117 1 106 5 233 1 109 2 125 1 110 5 233 1 111 5 233 1 112 5 233 1 113 5 233 1 120 5 233 1 121 5 233 1 122 5 233 1 123 5 233 1 131 5 233 1 132 5 233 1 133 5 233 1 134 5 233 1 135 5 233 1 136 5 233 1 137 5 233 1 138 5 233 1 146 5 233 1 147 5 233 1 148 5 233 1 149 5 233 1 151 1 129 1 159 1 197 2 72 2 217 2 73 5 233 2 81 1 129 2 82 2 229 2 83 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 5 233 2 89 3 1 2 101] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 5 245 1 28 5 245 1 29 5 245 1 34 5 245 1 35 5 245 1 36 5 245 1 37 1 197 1 51 1 197 2 72 2 217 2 73 5 245 2 84 1 197 2 85 1 197 2 86 5 245 2 87 1 197 2 88] #[1 1 2 0 4 1 2 0 7 1 2 0 8 0 15 0 10 1 2 0 11 1 2 0 13 1 2 0 14 1 2 0 17 1 2 0 18 1 2 0 19 1 2 0 20 1 2 0 22 5 249 0 23 5 253 0 24 6 1 0 26 1 2 0 28 1 2 0 30 1 2 0 34 0 15 0 35 0 15 0 37 1 2 0 40 1 2 0 150 0 15 0 157 6 9 0 218 6 9 0 240] #[0 1 10 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 14 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 18 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 22 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 26 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 30 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 34 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 1 38 0 9 1 38 0 10 0 19 0 20 1 38 0 35 1 38 0 37 1 38 0 157] #[0 0 23 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[1 1 66 0 2 1 66 0 5 1 66 0 6 1 66 0 8 1 66 0 9 1 66 0 10 1 66 0 15 0 27 0 20 1 66 0 23 1 66 0 25 1 66 0 26 1 66 0 29 1 66 0 31 1 66 0 32 1 66 0 33 1 66 0 35 1 66 0 36 1 66 0 37 1 66 0 38 1 66 0 39 1 66 0 44 1 66 0 45 1 66 0 51 1 66 0 63 1 66 0 68 1 66 0 79 1 66 0 82 1 66 0 89 1 66 0 90 1 66 0 91 1 66 0 92 1 66 0 101 1 66 0 102 1 66 0 103 1 66 0 119 1 66 0 128 1 66 0 145 1 66 0 148 1 66 0 149 1 66 0 151 1 66 0 153 1 66 0 155 1 66 0 157 1 66 0 163 1 66 0 164 1 66 0 167 1 66 0 168 1 66 2 102] #[1 1 70 0 10 1 74 0 35 1 78 0 37 1 82 0 157] #[0 1 86 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 1 90 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 1 94 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 1 98 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 1 102 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 1 106 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 1 110 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 6 17 0 35] #[0 1 114 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 1 118 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 1 122 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 1 126 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 1 130 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[1 5 145 0 37 6 21 0 213 6 25 0 214] #[0 1 134 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[1 1 138 0 4 1 138 0 7 6 29 0 8 1 138 0 11 6 33 0 13 1 138 0 14 6 37 0 17 1 138 0 18 6 41 0 19 6 45 0 20 1 138 0 22 1 138 0 28 1 138 0 30 1 138 0 34 1 142 0 35 1 138 0 40 1 138 0 150 6 49 1 30 6 53 1 31] #[1 1 146 0 2 1 146 0 3 1 146 0 4 1 146 0 5 1 146 0 6 1 146 0 7 1 146 0 8 1 146 0 9 1 146 0 10 1 146 0 11 1 146 0 12 1 146 0 13 1 146 0 14 1 146 0 15 1 146 0 16 1 146 0 17 1 146 0 18 1 146 0 19 1 146 0 20 1 146 0 21 1 146 0 22 1 146 0 23 1 146 0 25 1 146 0 26 1 146 0 27 1 146 0 28 1 146 0 29 1 146 0 30 1 146 0 31 1 146 0 33 1 146 0 34 1 146 0 35 1 146 0 36 6 57 0 37 1 146 0 38 1 146 0 39 1 146 0 40 1 146 0 44 1 146 0 45 1 146 0 51 1 146 0 63 1 146 0 68 1 146 0 79 1 146 0 82 1 146 0 89 1 146 0 90 1 146 0 91 1 146 0 92 1 146 0 101 1 146 0 103 1 146 0 119 1 146 0 145 1 146 0 149 1 146 0 150 1 146 0 151 1 146 0 153 1 146 0 154 1 146 0 155 1 146 0 163 1 146 0 164 1 146 0 167 1 146 0 168 1 146 2 102] #[0 1 150 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 154 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 6 61 0 162] #[0 1 158 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 6 65 0 166] #[0 1 162 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 166 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 170 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 6 69 0 20] #[0 6 73 0 20] #[0 1 174 0 20] #[1 1 178 0 4 1 178 0 7 1 178 0 8 1 182 0 9 1 178 0 11 1 178 0 13 1 178 0 14 1 182 0 15 1 178 0 17 1 178 0 18 1 178 0 19 1 178 0 20 1 178 0 22 1 182 0 25 1 178 0 28 1 178 0 30 1 178 0 34 1 178 0 35 1 178 0 37 1 178 0 40 1 178 0 150] #[0 1 186 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 190 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 194 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 1 198 0 4 1 198 0 7 1 198 0 8 1 202 0 9 1 198 0 11 1 198 0 13 1 198 0 14 1 202 0 15 1 198 0 17 1 198 0 18 1 198 0 19 1 198 0 20 1 198 0 22 1 202 0 25 1 198 0 28 1 198 0 30 1 198 0 34 1 198 0 35 1 198 0 37 1 198 0 40 1 198 0 150] #[1 1 206 0 4 1 206 0 7 1 206 0 8 1 210 0 9 1 206 0 11 1 206 0 13 1 206 0 14 1 210 0 15 1 206 0 17 1 206 0 18 1 206 0 19 1 206 0 20 1 206 0 22 1 210 0 25 1 206 0 28 1 206 0 30 1 206 0 34 1 206 0 35 1 206 0 37 1 206 0 40 1 206 0 150] #[1 1 214 0 4 1 214 0 7 1 214 0 8 1 218 0 9 1 214 0 11 1 214 0 13 1 214 0 14 1 218 0 15 1 214 0 17 1 214 0 18 1 214 0 19 1 214 0 20 1 214 0 22 1 218 0 25 1 214 0 28 1 214 0 30 1 214 0 34 1 214 0 35 1 214 0 37 1 214 0 40 1 214 0 150] #[0 1 222 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 226 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 230 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 234 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 238 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 242 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 246 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 250 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 6 121 0 4 0 7 0 11 0 14 0 18 0 22 0 28 0 30 0 34 0 40 0 150 1 86] #[0 1 254 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 2 2 0 9 0 15 0 25] #[1 2 6 0 4 2 6 0 7 2 10 0 9 2 6 0 11 2 6 0 14 2 10 0 15 2 6 0 18 2 6 0 22 2 10 0 25 2 6 0 28 2 6 0 30 2 6 0 34 2 6 0 40 2 6 0 150] #[1 2 14 0 4 2 14 0 7 2 18 0 9 2 14 0 11 2 14 0 14 2 18 0 15 2 14 0 18 2 14 0 22 2 18 0 25 2 14 0 28 2 14 0 30 2 14 0 34 2 14 0 40 2 14 0 150] #[0 2 22 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 2 26 0 4 2 26 0 7 2 30 0 9 2 26 0 11 2 26 0 14 2 30 0 15 2 26 0 18 2 26 0 22 2 30 0 25 2 26 0 28 2 26 0 30 2 26 0 34 2 26 0 40 2 26 0 150] #[0 2 34 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 2 38 0 9 0 15 0 25] #[0 0 0 2 102] #[0 2 42 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 46 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 50 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 54 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 58 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 6 125 0 25] #[1 6 129 0 157 6 133 1 102 6 137 1 103 6 141 1 104] #[0 6 145 0 25] #[0 2 62 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 6 149 0 25] #[0 2 66 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 70 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 74 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 78 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 82 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 86 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 90 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 94 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 98 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 102 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 106 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 110 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 114 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 118 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 122 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 126 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 130 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 134 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 138 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 142 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 146 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 2 150 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 2 154 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 2 158 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 2 162 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 6 153 0 10] #[0 2 166 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 2 170 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 2 174 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 2 178 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 2 182 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 2 186 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 6 157 0 10] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 31 0 9 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 0 35 0 49 0 39 0 52 0 43 0 55 3 21 0 56 0 47 0 60 0 181 0 61 0 185 0 62 0 51 0 65 2 217 0 72 0 55 0 76 3 37 0 79 0 59 0 86 0 63 0 94 0 237 0 97 0 241 0 99 0 67 0 100 6 181 0 104 6 181 0 114 0 71 0 117 0 75 0 121 1 5 0 122 0 79 0 125 1 17 0 128 2 217 0 130 1 33 0 133 0 83 0 134 0 87 0 135 3 73 0 136 0 91 0 138 0 95 0 142 1 81 0 152 0 99 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 1 117 0 192 1 121 0 194 1 125 0 195 4 217 0 197 4 217 0 198 4 217 0 199 4 217 0 200 1 145 0 201 1 145 0 202 1 145 0 203 4 217 0 204 1 161 0 205 4 217 0 206 4 217 0 207 4 217 0 208 4 217 0 209 4 217 0 210 1 185 0 211 4 217 0 217 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 4 221 1 49 4 221 1 50 1 197 1 51 3 177 1 52 3 177 1 54 6 169 1 55 6 173 1 56 6 177 1 57 6 181 1 58 6 181 1 59 3 177 1 60 6 189 1 61 6 193 1 62 6 197 1 63 4 221 1 65 3 197 1 66 4 221 1 85 4 221 1 88 4 221 1 89 4 217 1 159 1 197 2 72 2 217 2 73 4 217 2 82 2 229 2 83 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88 3 1 2 101] #[0 0 106 0 20] #[0 0 114 0 20] #[0 0 122 0 20] #[0 5 5 0 8] #[0 0 130 0 20] #[0 0 146 0 20] #[0 0 158 0 20] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 0 103 0 157 1 125 0 192 1 121 0 194 1 125 0 195 6 201 0 196 6 205 0 197 6 205 0 198 6 205 0 199 6 205 0 200 1 145 0 201 1 145 0 202 1 145 0 203 6 205 0 204 1 161 0 205 6 205 0 206 6 205 0 207 6 205 0 208 6 205 0 209 6 205 0 210 1 185 0 211 6 205 0 217 6 205 1 159 6 205 2 82 2 229 2 83 3 1 2 101] #[0 0 166 0 20] #[0 0 174 0 20] #[0 0 182 0 20] #[0 0 194 0 20] #[0 0 202 0 20] #[0 0 210 0 20] #[0 0 226 0 20] #[0 0 234 0 20] #[0 5 205 0 8] #[0 0 242 0 20] #[1 1 2 0 2 1 2 0 3 1 2 0 4 1 2 0 5 1 2 0 6 1 2 0 7 1 2 0 8 1 2 0 9 1 2 0 10 1 2 0 11 1 2 0 12 1 2 0 13 1 2 0 14 1 2 0 15 1 2 0 16 1 2 0 17 1 2 0 18 1 2 0 19 1 2 0 20 1 2 0 21 1 2 0 22 1 2 0 23 5 253 0 24 1 2 0 25 0 107 0 26 1 2 0 27 1 2 0 28 1 2 0 29 1 2 0 30 1 2 0 31 2 206 0 32 1 2 0 33 1 2 0 34 1 2 0 35 1 2 0 36 1 2 0 37 1 2 0 38 1 2 0 39 1 2 0 40 1 2 0 44 1 2 0 45 1 2 0 51 1 2 0 63 1 2 0 68 1 2 0 79 1 2 0 82 1 2 0 89 1 2 0 90 1 2 0 91 1 2 0 92 1 2 0 101 1 2 0 103 1 2 0 119 1 2 0 145 1 2 0 149 1 2 0 150 1 2 0 151 1 2 0 153 1 2 0 154 1 2 0 155 1 2 0 163 1 2 0 164 1 2 0 167 1 2 0 168 6 209 0 218 6 209 0 240 1 2 2 102] #[0 1 42 0 20] #[1 1 138 0 2 1 138 0 3 1 138 0 4 1 138 0 5 1 138 0 6 1 138 0 7 6 29 0 8 1 138 0 9 1 138 0 10 1 138 0 11 1 138 0 12 6 33 0 13 1 138 0 14 1 138 0 15 1 138 0 16 6 37 0 17 1 138 0 18 6 41 0 19 6 45 0 20 1 138 0 21 1 138 0 22 1 138 0 23 1 138 0 25 1 138 0 26 1 138 0 27 1 138 0 28 1 138 0 29 1 138 0 30 1 138 0 31 1 138 0 33 1 138 0 34 0 111 0 35 1 138 0 36 1 138 0 38 1 138 0 39 1 138 0 40 1 138 0 44 1 138 0 45 1 138 0 51 1 138 0 63 1 138 0 68 1 138 0 79 1 138 0 82 1 138 0 89 1 138 0 90 1 138 0 91 1 138 0 92 1 138 0 101 1 138 0 103 1 138 0 119 1 138 0 145 1 138 0 149 1 138 0 150 1 138 0 151 1 138 0 153 1 138 0 154 1 138 0 155 1 138 0 163 1 138 0 164 1 138 0 167 1 138 0 168 6 49 1 30 6 213 1 31 1 138 2 102] #[0 1 178 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 198 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 206 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 1 214 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 2 210 0 2 2 210 0 3 6 121 0 4 2 210 0 5 2 210 0 6 6 121 0 7 2 210 0 9 2 210 0 10 6 121 0 11 2 210 0 12 6 121 0 14 2 210 0 15 2 210 0 16 6 121 0 18 2 210 0 21 6 121 0 22 2 210 0 23 2 210 0 25 2 210 0 26 2 210 0 27 6 121 0 28 2 210 0 29 6 121 0 30 2 210 0 31 2 210 0 33 6 121 0 34 2 210 0 35 2 210 0 36 2 210 0 38 2 210 0 39 6 121 0 40 2 210 0 44 2 210 0 45 2 210 0 51 2 210 0 63 2 210 0 68 2 210 0 79 2 210 0 82 2 210 0 89 2 210 0 90 2 210 0 91 2 210 0 92 2 210 0 101 2 210 0 103 2 210 0 119 2 210 0 145 2 210 0 149 6 121 0 150 2 210 0 151 2 210 0 153 2 210 0 154 2 210 0 155 2 210 0 163 2 210 0 164 2 210 0 167 2 210 0 168 6 121 1 86 2 210 2 102] #[0 2 6 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 2 14 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 2 26 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 2 214 0 2 6 217 0 3 2 214 0 5 2 214 0 6 2 214 0 9 6 221 0 10 2 214 0 12 2 214 0 15 2 214 0 16 6 225 0 21 2 214 0 23 2 214 0 25 2 214 0 26 2 214 0 27 2 214 0 29 2 214 0 31 2 214 0 33 2 214 0 35 2 214 0 36 2 214 0 38 2 214 0 39 2 214 0 44 2 214 0 45 2 214 0 51 2 214 0 63 2 214 0 68 2 214 0 79 2 214 0 82 2 214 0 89 2 214 0 90 2 214 0 91 2 214 0 92 2 214 0 101 2 214 0 103 2 214 0 119 2 214 0 145 2 214 0 149 2 214 0 151 2 214 0 153 2 214 0 154 2 214 0 155 2 214 0 163 2 214 0 164 2 214 0 167 2 214 0 168 2 214 2 102] #[1 2 218 0 2 2 218 0 5 2 218 0 6 2 218 0 9 6 229 0 12 2 218 0 15 6 233 0 16 2 218 0 23 2 218 0 25 2 218 0 26 2 218 0 27 2 218 0 29 2 218 0 31 2 218 0 33 2 218 0 35 2 218 0 36 2 218 0 38 2 218 0 39 2 218 0 44 2 218 0 45 2 218 0 51 2 218 0 63 2 218 0 68 2 218 0 79 2 218 0 82 2 218 0 89 2 218 0 90 2 218 0 91 2 218 0 92 2 218 0 101 2 218 0 103 2 218 0 119 2 218 0 145 2 218 0 149 2 218 0 151 2 218 0 153 2 218 0 154 2 218 0 155 2 218 0 163 2 218 0 164 2 218 0 167 2 218 0 168 2 218 2 102] #[1 2 222 0 2 2 222 0 5 2 222 0 6 2 222 0 9 2 222 0 15 2 222 0 23 2 222 0 25 2 222 0 26 6 237 0 27 2 222 0 29 2 222 0 31 2 222 0 33 2 222 0 35 2 222 0 36 2 222 0 38 2 222 0 39 2 222 0 44 2 222 0 45 2 222 0 51 2 222 0 63 2 222 0 68 2 222 0 79 2 222 0 82 2 222 0 89 2 222 0 90 2 222 0 91 2 222 0 92 2 222 0 101 2 222 0 103 2 222 0 119 2 222 0 145 2 222 0 149 2 222 0 151 2 222 0 153 6 241 0 154 2 222 0 155 2 222 0 163 2 222 0 164 2 222 0 167 2 222 0 168 2 222 2 102] #[1 2 226 0 2 2 226 0 5 2 226 0 6 2 226 0 9 2 226 0 15 2 226 0 23 2 226 0 25 6 245 0 26 6 249 0 29 2 226 0 31 6 253 0 33 2 226 0 35 2 226 0 36 2 226 0 38 2 226 0 39 7 1 0 44 2 226 0 45 2 226 0 51 2 226 0 63 2 226 0 68 2 226 0 79 2 226 0 82 2 226 0 89 7 5 0 90 2 226 0 91 2 226 0 92 2 226 0 101 2 226 0 103 2 226 0 119 2 226 0 145 2 226 0 149 2 226 0 151 7 9 0 153 2 226 0 155 2 226 0 163 2 226 0 164 2 226 0 167 2 226 0 168 2 226 2 102] #[1 7 13 0 2 2 230 0 5 2 230 0 6 2 230 0 9 2 230 0 15 2 230 0 23 2 230 0 25 7 17 0 31 2 230 0 35 2 230 0 36 2 230 0 38 2 230 0 39 2 230 0 45 2 230 0 51 2 230 0 63 2 230 0 68 2 230 0 79 2 230 0 82 2 230 0 89 2 230 0 91 2 230 0 92 2 230 0 101 2 230 0 103 2 230 0 119 2 230 0 145 2 230 0 149 2 230 0 151 2 230 0 155 2 230 0 163 2 230 0 164 2 230 0 167 2 230 0 168 2 230 2 102] #[1 7 21 0 5 2 234 0 6 2 234 0 9 2 234 0 15 2 234 0 23 2 234 0 25 2 234 0 35 2 234 0 36 2 234 0 38 2 234 0 39 2 234 0 45 2 234 0 51 2 234 0 63 2 234 0 68 2 234 0 79 2 234 0 82 2 234 0 89 2 234 0 91 2 234 0 92 2 234 0 101 2 234 0 103 2 234 0 119 2 234 0 145 2 234 0 149 2 234 0 151 2 234 0 155 2 234 0 163 2 234 0 164 2 234 0 167 2 234 0 168 2 234 2 102] #[1 2 238 0 6 2 238 0 9 2 238 0 15 2 238 0 23 2 238 0 25 2 238 0 35 2 238 0 36 2 238 0 38 7 25 0 39 2 238 0 45 2 238 0 51 2 238 0 63 2 238 0 68 2 238 0 79 2 238 0 82 2 238 0 89 2 238 0 91 2 238 0 92 2 238 0 101 2 238 0 103 2 238 0 119 2 238 0 145 2 238 0 149 2 238 0 151 2 238 0 155 2 238 0 163 2 238 0 164 2 238 0 167 2 238 0 168 2 238 2 102] #[1 2 242 0 6 2 242 0 9 2 242 0 15 2 242 0 23 2 242 0 25 2 242 0 35 2 242 0 36 2 242 0 38 2 242 0 45 2 242 0 51 2 242 0 63 2 242 0 68 2 242 0 79 2 242 0 82 2 242 0 89 2 242 0 91 2 242 0 92 2 242 0 101 2 242 0 103 2 242 0 119 2 242 0 145 7 29 0 149 2 242 0 151 2 242 0 155 2 242 0 163 2 242 0 164 2 242 0 167 2 242 0 168 2 242 2 102] #[1 7 33 0 6 2 246 0 9 2 246 0 15 2 246 0 23 2 246 0 25 2 246 0 35 2 246 0 36 2 246 0 38 2 246 0 45 2 246 0 51 2 246 0 63 2 246 0 68 2 246 0 79 2 246 0 82 2 246 0 89 2 246 0 91 2 246 0 92 2 246 0 101 2 246 0 103 2 246 0 119 2 246 0 145 2 246 0 151 2 246 0 155 2 246 0 163 2 246 0 164 2 246 0 167 2 246 0 168 2 246 2 102] #[1 2 250 0 9 2 250 0 15 2 250 0 23 2 250 0 25 2 250 0 35 7 37 0 36 2 250 0 38 2 250 0 45 2 250 0 51 2 250 0 63 2 250 0 68 2 250 0 79 2 250 0 82 2 250 0 89 2 250 0 91 2 250 0 92 2 250 0 101 2 250 0 103 2 250 0 119 2 250 0 145 7 41 0 151 2 250 0 155 2 250 0 163 2 250 0 164 2 250 0 167 2 250 0 168 2 250 2 102] #[1 2 254 0 9 2 254 0 15 2 254 0 23 2 254 0 25 7 45 0 35 2 254 0 38 2 254 0 45 2 254 0 51 2 254 0 63 2 254 0 68 2 254 0 79 2 254 0 82 2 254 0 89 2 254 0 91 2 254 0 92 2 254 0 101 2 254 0 103 2 254 0 119 2 254 0 145 2 254 0 155 2 254 0 163 2 254 0 164 2 254 0 167 2 254 0 168 2 254 2 102] #[0 3 2 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[0 3 6 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[0 7 49 0 32] #[0 3 10 0 32] #[0 3 14 0 32] #[0 3 18 0 32] #[0 3 22 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[1 3 37 0 79 3 26 0 82 7 53 0 91 7 57 0 92 7 61 0 103 3 26 0 119 7 65 0 145 7 69 1 66 7 73 1 67 7 77 1 68 7 81 1 69 7 85 1 70 7 89 1 71 7 93 1 72 7 97 1 73 7 101 1 74 7 105 1 75] #[0 3 30 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[0 0 0 2 102] #[0 3 34 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[0 0 0 2 102] #[0 3 38 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 0 0 2 102] #[0 3 42 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 3 46 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 3 50 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 7 109 0 25 7 113 0 32 1 77 0 148 7 117 1 94 7 121 1 195] #[0 3 54 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 3 58 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 3 62 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 3 66 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 3 70 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 3 74 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 7 125 0 41 0 115 0 49 0 115 0 52 0 115 0 55 0 66 0 57 3 94 0 58 0 115 0 60 0 70 0 62 0 115 0 65 0 74 0 67 3 98 0 69 0 119 0 71 0 115 0 76 0 115 0 86 0 78 0 87 7 133 0 88 0 115 0 94 7 137 0 99 0 115 0 100 7 141 0 105 0 123 0 108 7 145 0 109 7 149 0 111 7 153 0 112 7 201 0 113 0 115 0 117 7 161 0 118 0 115 0 121 0 127 0 124 0 115 0 125 0 82 0 126 0 115 0 134 0 115 0 135 0 131 0 137 0 115 0 138 7 173 0 141 0 115 0 142 7 201 0 143 0 135 0 152 0 139 0 157 4 137 1 153 4 141 1 154 4 145 1 155 7 181 1 176 7 185 1 177 7 189 1 178 7 193 1 182 7 197 1 183 7 201 1 184 7 205 1 190 7 209 1 191 7 213 1 192 7 217 1 206 7 221 1 207 7 225 1 208 7 229 1 221 7 233 1 222 7 237 1 223 7 241 1 228 7 245 1 229 7 249 1 230 7 253 1 234 8 1 1 235 8 5 1 244 8 9 1 245 8 13 1 246 8 17 1 252 4 149 1 255 4 153 2 0 4 157 2 1 4 161 2 13 4 165 2 14 4 169 2 15 4 173 2 38 4 177 2 39 4 181 2 40 4 185 2 45 4 189 2 46 4 193 2 47 8 21 2 77 8 25 2 80] #[0 3 114 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 8 29 0 157] #[1 8 33 0 124 8 37 0 157 8 45 0 192 8 41 0 193 8 45 0 195] #[1 0 143 0 37 3 118 0 41 3 118 0 57 3 118 0 62 3 118 0 67 3 118 0 87 3 118 0 88 3 118 0 98 3 118 0 99 3 118 0 108 3 118 0 109 3 118 0 111 3 118 0 112 3 118 0 118 3 118 0 124 3 118 0 126 3 118 0 137 8 53 2 48 8 57 2 49 8 61 2 50 8 65 2 51 3 118 2 102] #[1 3 122 0 37 3 122 0 41 3 122 0 57 3 122 0 62 3 122 0 67 3 122 0 87 3 122 0 88 3 122 0 98 3 122 0 99 3 122 0 108 3 122 0 109 3 122 0 111 3 122 0 112 3 122 0 118 3 122 0 124 3 122 0 126 3 122 0 137 4 21 0 139 3 122 0 155 8 69 0 184 8 69 0 185 8 69 0 186 8 69 0 187 3 122 2 102] #[0 3 126 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 139 0 155 2 102] #[0 3 130 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 139 0 155 2 102] #[0 3 134 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 139 0 155 2 102] #[0 3 138 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 139 0 155 2 102] #[0 3 142 0 37 0 41 0 57 0 62 0 67 0 71 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 139 0 155 2 102] #[0 3 146 0 23] #[0 3 150 0 23] #[0 3 154 0 23] #[0 3 158 0 23] #[0 3 162 0 23] #[0 3 166 0 23] #[0 3 170 0 23] #[1 8 73 0 157 1 125 0 192 8 89 0 194 1 125 0 195 8 81 2 61 8 85 2 62 8 89 2 63] #[0 3 174 0 157] #[0 8 93 0 23] #[0 3 178 0 20 0 148] #[1 8 97 0 20 8 101 0 148 8 105 0 178] #[0 3 182 0 41 0 57 0 88 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 137] #[1 3 186 0 41 3 186 0 57 3 190 0 62 3 194 0 67 3 198 0 87 0 147 0 88 0 147 0 99 0 151 0 108 0 147 0 109 0 147 0 111 0 147 0 112 3 186 0 118 3 186 0 124 3 202 0 126 0 155 0 137] #[1 3 206 0 41 3 206 0 57 3 210 0 62 3 214 0 67 3 218 0 87 0 159 0 88 0 159 0 99 0 163 0 108 0 159 0 109 0 159 0 111 0 159 0 112 3 206 0 118 3 206 0 124 3 222 0 126 0 167 0 137] #[1 3 226 0 41 3 226 0 57 3 230 0 62 3 234 0 67 3 238 0 87 0 171 0 88 0 171 0 99 0 175 0 108 0 171 0 109 0 171 0 111 0 171 0 112 3 226 0 118 3 226 0 124 3 242 0 126 0 179 0 137] #[1 3 246 0 41 3 246 0 57 3 250 0 62 3 254 0 67 4 2 0 87 0 183 0 88 0 183 0 99 0 187 0 108 0 183 0 109 0 183 0 111 0 183 0 112 3 246 0 118 3 246 0 124 4 6 0 126 0 191 0 137] #[1 4 10 0 41 4 10 0 57 4 14 0 62 4 18 0 67 4 22 0 87 0 195 0 88 0 195 0 99 0 199 0 108 0 195 0 109 0 195 0 111 0 195 0 112 4 10 0 118 4 10 0 124 4 26 0 126 0 203 0 137] #[0 4 30 0 41 0 57 0 88 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 137] #[0 4 34 0 41 0 57 0 88 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 137] #[1 4 38 0 41 4 38 0 57 4 42 0 62 4 46 0 87 0 207 0 88 0 207 0 99 0 211 0 108 0 207 0 109 0 207 0 111 0 207 0 112 4 38 0 118 4 38 0 124 4 50 0 126 0 207 0 137] #[1 4 54 0 57 8 113 0 108 8 113 2 76] #[1 8 141 0 41 4 58 0 57 8 141 0 88 8 141 0 99 4 58 0 108 8 141 0 109 8 141 0 111 8 141 0 112 8 141 0 118 8 141 0 124 8 141 0 137 8 141 1 155] #[0 4 62 0 41 0 57 0 88 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 137] #[1 8 145 0 108 4 54 0 126 8 145 2 76] #[1 8 173 0 88 8 173 0 99 4 66 0 108 8 173 0 109 8 173 0 111 8 173 0 112 4 66 0 126 8 173 0 137 8 173 2 1] #[0 4 70 0 88 0 99 0 108 0 109 0 111 0 112 0 126 0 137] #[1 4 54 0 87 8 177 0 108 8 177 2 76] #[1 4 74 0 87 8 205 0 88 8 205 0 99 4 74 0 108 8 205 0 109 8 205 0 111 8 205 0 112 8 205 0 137 8 205 2 15] #[0 4 78 0 87 0 88 0 99 0 108 0 109 0 111 0 112 0 137] #[0 8 209 0 67] #[1 4 82 0 67 8 233 0 88 8 233 0 99 8 233 0 109 8 233 0 111 8 233 0 112 8 233 2 40] #[0 4 86 0 67 0 88 0 99 0 109 0 111 0 112] #[0 8 237 0 62] #[1 4 90 0 62 9 9 0 88 9 9 0 99 9 9 0 109 9 9 0 111 9 9 0 112 9 9 0 137 9 9 2 47] #[0 4 94 0 62 0 88 0 99 0 109 0 111 0 112 0 137] #[0 4 98 0 37 0 41 0 42 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 80 0 85 0 86 0 87 0 88 0 94 0 99 0 100 0 104 0 105 0 107 0 108 0 109 0 111 0 112 0 113 0 114 0 115 0 117 0 118 0 120 0 121 0 124 0 125 0 126 0 128 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 157] #[1 1 2 0 2 1 2 0 3 1 2 0 4 1 2 0 5 1 2 0 6 1 2 0 7 1 2 0 8 1 2 0 9 1 2 0 10 1 2 0 11 1 2 0 12 1 2 0 13 1 2 0 14 1 2 0 15 1 2 0 16 1 2 0 17 1 2 0 18 1 2 0 19 1 2 0 20 1 2 0 21 1 2 0 22 1 2 0 23 5 253 0 24 1 2 0 25 0 107 0 26 1 2 0 27 1 2 0 28 1 2 0 29 1 2 0 30 1 2 0 31 1 2 0 33 1 2 0 34 1 2 0 35 1 2 0 36 1 2 0 37 1 2 0 38 1 2 0 39 1 2 0 40 1 2 0 44 1 2 0 45 1 2 0 51 1 2 0 63 1 2 0 68 1 2 0 79 1 2 0 82 1 2 0 89 1 2 0 90 1 2 0 91 1 2 0 92 1 2 0 101 1 2 0 103 1 2 0 119 1 2 0 145 1 2 0 149 1 2 0 150 1 2 0 151 1 2 0 153 1 2 0 154 1 2 0 155 1 2 0 163 1 2 0 164 1 2 0 167 1 2 0 168 6 209 0 218 6 209 0 240 1 2 2 102] #[0 4 102 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 4 106 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 1 2 0 2 1 2 0 3 1 2 0 4 1 2 0 5 1 2 0 6 1 2 0 7 1 2 0 8 0 215 0 9 0 15 0 10 1 2 0 11 1 2 0 12 1 2 0 13 1 2 0 14 0 219 0 15 1 2 0 16 1 2 0 17 1 2 0 18 1 2 0 19 1 2 0 20 1 2 0 21 1 2 0 22 5 253 0 24 0 107 0 26 1 2 0 27 1 2 0 28 1 2 0 29 1 2 0 30 1 2 0 31 2 206 0 32 1 2 0 33 1 2 0 34 0 15 0 35 1 2 0 36 0 15 0 37 1 2 0 38 1 2 0 39 1 2 0 40 1 2 0 44 1 2 0 90 1 2 0 149 1 2 0 150 1 2 0 151 1 2 0 153 1 2 0 154 0 15 0 157 6 9 0 218 6 9 0 240] #[1 9 13 0 9 1 70 0 10 1 74 0 35 1 78 0 37] #[0 9 17 0 9] #[0 4 110 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 4 114 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 4 118 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 4 122 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 4 126 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 4 130 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 9 21 0 157] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 9 25 0 248 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 9 29 1 49 9 29 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 9 29 1 65 3 197 1 66 9 29 1 85 9 29 1 88 9 29 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 4 134 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 9 33 1 49 9 33 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 9 33 1 65 3 197 1 66 9 33 1 85 9 33 1 88 9 33 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 4 138 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 0 102 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 110 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 118 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 126 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 142 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 154 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 162 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 170 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 178 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 190 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 198 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 206 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 222 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 230 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 0 238 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[1 0 15 0 2 0 15 0 5 0 15 0 6 0 15 0 8 0 15 0 9 0 15 0 10 0 15 0 15 1 2 0 20 0 15 0 23 5 253 0 24 0 15 0 25 0 223 0 26 0 15 0 29 0 15 0 31 0 15 0 32 0 15 0 33 0 15 0 35 0 15 0 36 0 15 0 37 0 15 0 38 0 15 0 39 0 15 0 44 0 15 0 45 0 15 0 51 0 15 0 63 0 15 0 68 0 15 0 79 0 15 0 82 0 15 0 89 0 15 0 90 0 15 0 91 0 15 0 92 0 15 0 101 0 15 0 102 0 15 0 103 0 15 0 119 0 15 0 128 0 15 0 145 0 15 0 148 0 15 0 149 0 15 0 151 0 15 0 153 0 15 0 155 0 15 0 157 0 15 0 163 0 15 0 164 0 15 0 167 0 15 0 168 9 37 0 218 9 37 0 240 0 15 2 102] #[0 1 38 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 20 0 23 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[1 1 70 0 10 1 74 0 35 1 78 0 37 9 41 0 157 9 45 1 107 9 49 1 108] #[0 4 142 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 9 53 0 197 9 53 0 198 9 53 0 199 9 53 0 200 1 145 0 201 1 145 0 202 1 145 0 203 9 53 0 204 1 161 0 205 9 53 0 206 9 53 0 207 9 53 0 208 9 53 0 209 9 53 0 210 1 185 0 211 9 53 0 217 9 53 1 159 9 53 2 82 2 229 2 83 3 1 2 101] #[1 2 190 0 9 2 198 0 49 2 198 0 52 2 198 0 55 2 198 0 60 2 198 0 65 2 198 0 76 2 198 0 86 2 198 0 94 2 198 0 100 6 181 0 104 6 181 0 114 2 198 0 117 2 198 0 121 2 198 0 125 2 198 0 134 2 198 0 135 2 198 0 138 2 198 0 142 2 198 0 157 6 169 1 55 6 173 1 56 6 177 1 57 6 181 1 58 6 181 1 59] #[1 1 77 0 148 9 57 1 94] #[0 4 146 0 148] #[0 9 61 0 146] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 9 65 0 197 9 65 0 198 9 65 0 199 9 65 0 200 1 145 0 201 1 145 0 202 1 145 0 203 9 65 0 204 1 161 0 205 9 65 0 206 9 65 0 207 9 65 0 208 9 65 0 209 9 65 0 210 1 185 0 211 9 65 0 217 9 65 1 159 9 69 2 82 2 229 2 83 3 1 2 101] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 4 150 0 25 0 141 0 47 0 145 0 48 0 149 0 49 0 157 0 52 0 161 0 55 3 21 0 56 0 177 0 60 0 181 0 61 0 185 0 62 0 193 0 65 2 217 0 72 0 205 0 76 0 225 0 86 0 233 0 94 0 237 0 97 0 241 0 99 0 245 0 100 0 253 0 117 1 1 0 121 1 5 0 122 1 9 0 125 1 17 0 128 2 217 0 130 1 33 0 133 1 37 0 134 1 41 0 135 3 73 0 136 1 53 0 138 1 61 0 140 1 65 0 142 1 81 0 152 9 73 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 1 117 0 192 1 121 0 194 1 125 0 195 1 129 0 197 1 129 0 198 1 129 0 199 1 129 0 200 1 145 0 201 1 145 0 202 1 145 0 203 1 129 0 204 1 161 0 205 1 129 0 206 1 129 0 207 1 129 0 208 1 129 0 209 1 129 0 210 1 185 0 211 1 129 0 217 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 9 81 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 9 81 1 85 9 85 1 100 2 113 1 101 9 81 1 110 9 85 1 124 9 85 1 125 9 93 1 130 1 129 1 159 1 197 2 72 2 217 2 73 1 129 2 82 2 229 2 83 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 3 1 2 101] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 61 0 140 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 1 129 0 197 1 129 0 198 1 129 0 199 1 129 0 200 1 145 0 201 1 145 0 202 1 145 0 203 1 129 0 204 1 161 0 205 1 129 0 206 1 129 0 207 1 129 0 208 1 129 0 209 1 129 0 210 1 185 0 211 1 129 0 217 9 97 1 101 1 129 1 159 1 129 2 82 2 229 2 83 3 1 2 101] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 9 105 1 49 9 105 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 9 105 1 65 3 197 1 66 9 105 1 85 9 105 1 88 9 105 1 89 9 105 1 90 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 9 109 0 25] #[0 9 113 0 25] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 9 121 1 49 9 121 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 9 121 1 65 3 197 1 66 9 121 1 85 9 121 1 88 9 121 1 89 9 121 1 91 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 9 125 1 49 9 125 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 9 125 1 65 3 197 1 66 9 125 1 85 9 125 1 88 9 125 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 9 129 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 25 0 60 3 29 0 65 3 33 0 76 3 41 0 86 3 45 0 94 3 49 0 100 3 53 0 117 3 57 0 121 3 61 0 125 9 133 0 128 3 65 0 134 3 69 0 135 3 77 0 138 4 201 0 157 3 85 0 192 9 149 0 239 9 153 0 243 9 153 0 244 1 241 0 245 9 149 1 26 9 153 1 27] #[1 9 157 0 15 4 154 0 38 9 161 0 215 9 165 0 216] #[1 9 169 0 8 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 4 158 0 155 9 173 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 9 177 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 9 181 0 239 1 197 0 241 9 185 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 9 189 0 250 1 197 0 251 1 197 0 252 1 197 0 253 9 177 1 9 1 197 1 10 1 197 1 11 9 193 1 13 9 197 1 14 9 201 1 15 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 9 205 1 32 1 197 1 51 1 197 2 72 2 217 2 73 1 197 2 85 1 197 2 86 1 197 2 88] #[1 9 209 0 8 1 70 0 10 1 74 0 35 1 78 0 37 9 213 0 148 9 217 0 255 9 217 1 0 9 217 1 6] #[1 1 130 0 8 1 130 0 10 1 130 0 35 1 130 0 37 0 227 0 148 9 233 2 9] #[1 9 237 0 37 6 21 0 213 6 25 0 214] #[1 9 229 0 148 9 241 2 9] #[1 0 231 0 8 1 134 0 10 1 134 0 35 1 134 0 37 1 134 0 148] #[0 4 162 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 9 249 0 25] #[0 4 166 0 25] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 9 65 0 197 9 65 0 198 9 65 0 199 9 65 0 200 1 145 0 201 1 145 0 202 1 145 0 203 9 65 0 204 1 161 0 205 9 65 0 206 9 65 0 207 9 65 0 208 9 65 0 209 9 65 0 210 1 185 0 211 9 65 0 217 9 65 1 159 9 65 2 82 9 253 2 83 3 1 2 101] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 10 1 1 49 10 1 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 10 1 1 65 3 197 1 66 10 1 1 85 10 1 1 88 10 1 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 10 5 0 25] #[1 10 9 0 54 10 13 0 74 10 17 1 139 10 21 1 140 10 25 1 145] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 10 29 0 157 1 125 0 192 1 121 0 194 1 125 0 195 10 33 0 197 10 33 0 198 10 33 0 199 10 33 0 200 1 145 0 201 1 145 0 202 1 145 0 203 10 33 0 204 1 161 0 205 10 33 0 206 10 33 0 207 10 33 0 208 10 33 0 209 10 33 0 210 1 185 0 211 10 33 0 217 10 37 1 17 10 33 1 159 10 33 2 82 2 229 2 83 10 41 2 101] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 10 45 1 49 10 45 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 10 45 1 65 3 197 1 66 10 45 1 85 10 45 1 88 10 45 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 4 170 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 4 174 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 0 149 0 49 0 157 0 52 0 161 0 55 3 21 0 56 0 177 0 60 0 181 0 61 0 185 0 62 0 193 0 65 2 217 0 72 0 205 0 76 3 37 0 79 0 225 0 86 0 233 0 94 0 237 0 97 0 241 0 99 0 245 0 100 0 253 0 117 1 1 0 121 1 5 0 122 1 9 0 125 1 17 0 128 2 217 0 130 1 33 0 133 1 37 0 134 1 41 0 135 3 73 0 136 1 53 0 138 1 61 0 140 1 65 0 142 1 81 0 152 4 213 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 1 117 0 192 1 121 0 194 1 125 0 195 1 129 0 197 1 129 0 198 1 129 0 199 1 129 0 200 1 145 0 201 1 145 0 202 1 145 0 203 1 129 0 204 1 161 0 205 1 129 0 206 1 129 0 207 1 129 0 208 1 129 0 209 1 129 0 210 1 185 0 211 1 129 0 217 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 10 57 1 49 10 57 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 10 57 1 65 3 197 1 66 10 57 1 85 10 57 1 88 10 57 1 89 10 57 1 100 2 113 1 101 10 57 1 150 1 129 1 159 1 197 2 72 2 217 2 73 1 129 2 82 2 229 2 83 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88 3 1 2 101] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 10 61 1 49 10 61 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 10 61 1 65 3 197 1 66 10 61 1 85 10 61 1 88 10 61 1 89 10 61 1 91 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 10 65 0 25] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 10 69 1 49 10 69 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 10 69 1 65 3 197 1 66 10 69 1 85 10 69 1 88 10 69 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 4 178 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 10 73 0 155] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 0 149 0 49 0 153 0 50 0 157 0 52 0 161 0 55 0 165 0 56 0 169 0 58 0 173 0 59 0 177 0 60 0 181 0 61 0 185 0 62 0 189 0 64 0 193 0 65 2 217 0 72 0 201 0 75 0 205 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 0 225 0 86 0 229 0 93 0 233 0 94 0 237 0 97 0 241 0 99 0 245 0 100 0 249 0 116 0 253 0 117 1 1 0 121 1 5 0 122 1 9 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 1 37 0 134 1 41 0 135 1 45 0 136 1 49 0 137 1 53 0 138 1 57 0 139 1 61 0 140 1 65 0 142 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 4 182 0 155 1 85 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 1 117 0 192 1 121 0 194 1 125 0 195 1 129 0 197 1 129 0 198 1 129 0 199 1 129 0 200 1 145 0 201 1 145 0 202 1 145 0 203 1 129 0 204 1 161 0 205 1 129 0 206 1 129 0 207 1 129 0 208 1 129 0 209 1 129 0 210 1 185 0 211 1 129 0 217 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 10 77 1 92 10 77 1 93 10 77 1 94 10 77 1 97 10 77 1 98 10 77 1 99 2 109 1 100 2 113 1 101 2 117 1 106 10 77 1 109 2 125 1 110 10 77 1 111 10 77 1 112 10 77 1 113 10 77 1 120 10 77 1 121 10 77 1 122 10 77 1 123 10 77 1 131 10 77 1 132 10 77 1 133 10 77 1 134 10 77 1 135 10 77 1 136 10 77 1 137 10 77 1 138 10 77 1 146 10 77 1 147 10 77 1 148 10 77 1 149 10 77 1 151 1 129 1 159 1 197 2 72 2 217 2 73 10 77 2 81 1 129 2 82 2 229 2 83 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 10 77 2 89 3 1 2 101] #[0 4 186 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 0 149 0 49 0 153 0 50 0 157 0 52 0 161 0 55 0 165 0 56 0 169 0 58 0 173 0 59 0 177 0 60 0 181 0 61 0 185 0 62 0 189 0 64 0 193 0 65 2 217 0 72 0 201 0 75 0 205 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 0 225 0 86 0 229 0 93 0 233 0 94 0 237 0 97 0 241 0 99 0 245 0 100 0 249 0 116 0 253 0 117 1 1 0 121 1 5 0 122 1 9 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 1 37 0 134 1 41 0 135 1 45 0 136 1 49 0 137 1 53 0 138 1 57 0 139 1 61 0 140 1 65 0 142 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 1 85 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 1 117 0 192 1 121 0 194 1 125 0 195 1 129 0 197 1 129 0 198 1 129 0 199 1 129 0 200 1 145 0 201 1 145 0 202 1 145 0 203 1 129 0 204 1 161 0 205 1 129 0 206 1 129 0 207 1 129 0 208 1 129 0 209 1 129 0 210 1 185 0 211 1 129 0 217 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 10 81 1 92 10 81 1 93 10 81 1 94 10 81 1 97 10 81 1 98 10 81 1 99 2 109 1 100 2 113 1 101 2 117 1 106 10 81 1 109 2 125 1 110 10 81 1 111 10 81 1 112 10 81 1 113 10 81 1 120 10 81 1 121 10 81 1 122 10 81 1 123 10 81 1 131 10 81 1 132 10 81 1 133 10 81 1 134 10 81 1 135 10 81 1 136 10 81 1 137 10 81 1 138 10 81 1 146 10 81 1 147 10 81 1 148 10 81 1 149 10 81 1 151 1 129 1 159 1 197 2 72 2 217 2 73 10 81 2 81 1 129 2 82 2 229 2 83 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 10 81 2 89 3 1 2 101] #[0 10 85 0 157] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 10 89 0 197 10 89 0 198 10 89 0 199 10 89 0 200 1 145 0 201 1 145 0 202 1 145 0 203 10 89 0 204 1 161 0 205 10 89 0 206 10 89 0 207 10 89 0 208 10 89 0 209 10 89 0 210 1 185 0 211 10 89 0 217 10 93 0 219 10 97 0 220 10 89 1 159 10 89 2 82 2 229 2 83 3 1 2 101] #[0 4 190 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 150 0 151 0 153 0 154 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[1 4 194 0 2 4 194 0 3 4 194 0 4 4 194 0 5 4 194 0 6 4 194 0 7 4 194 0 8 0 235 0 9 0 235 0 10 4 194 0 11 4 194 0 12 4 194 0 13 4 194 0 14 4 194 0 15 4 194 0 16 4 194 0 17 4 194 0 18 4 194 0 19 0 235 0 20 4 194 0 21 4 194 0 22 4 194 0 26 4 194 0 27 4 194 0 28 4 194 0 29 4 194 0 30 4 194 0 31 4 194 0 33 4 194 0 34 0 235 0 35 4 194 0 36 0 235 0 37 4 194 0 38 4 194 0 39 4 194 0 40 4 194 0 44 4 194 0 90 4 194 0 149 4 194 0 150 4 194 0 151 4 194 0 153 4 194 0 154 4 198 0 157] #[0 10 101 0 157] #[0 4 202 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[1 4 206 0 2 4 206 0 5 4 206 0 6 4 206 0 8 4 206 0 9 4 206 0 10 4 206 0 15 4 206 0 23 4 206 0 25 4 206 0 26 4 206 0 29 4 206 0 31 4 206 0 33 4 206 0 35 4 206 0 36 0 239 0 37 4 206 0 38 4 206 0 39 4 206 0 44 4 206 0 45 4 206 0 51 4 206 0 63 4 206 0 68 4 206 0 79 4 206 0 82 4 206 0 89 4 206 0 90 4 206 0 91 4 206 0 92 4 206 0 101 4 206 0 102 4 206 0 103 4 206 0 119 4 206 0 128 4 206 0 145 4 206 0 148 4 206 0 149 4 206 0 151 4 206 0 153 4 206 0 155 4 206 0 157 4 206 0 163 4 206 0 164 4 206 0 167 4 206 0 168 10 105 0 214 4 206 2 102] #[0 4 210 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 150 0 151 0 153 0 154 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[1 4 214 0 1 4 214 0 5 4 214 0 8 4 218 0 9 4 214 0 10 4 214 0 12 4 214 0 13 4 214 0 16 4 214 0 17 4 214 0 47 4 214 0 48 4 214 0 49 4 214 0 52 4 214 0 55 4 214 0 56 4 214 0 60 4 214 0 61 4 214 0 62 4 214 0 65 4 214 0 72 4 214 0 76 4 214 0 79 4 214 0 86 4 214 0 94 4 214 0 97 4 214 0 99 4 214 0 100 4 214 0 104 4 214 0 114 4 214 0 117 4 214 0 121 4 214 0 122 4 214 0 125 4 214 0 128 4 214 0 130 4 214 0 133 4 214 0 134 4 214 0 135 4 214 0 136 4 214 0 138 4 214 0 152 0 243 0 157 4 214 0 158 4 214 0 159 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 165 4 214 0 166 4 214 0 169 4 214 0 170 10 113 0 222 10 117 0 223 10 121 0 224 10 125 0 225 10 129 0 226] #[0 4 222 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 4 226 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 10 133 0 157] #[0 10 137 0 157] #[0 10 141 0 35] #[1 4 230 0 4 4 230 0 7 10 145 0 8 4 230 0 11 4 230 0 14 4 230 0 18 10 149 0 20 4 230 0 22 4 230 0 28 4 230 0 30 4 230 0 34 4 234 0 35 10 153 0 37 4 230 0 40 4 230 0 150] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 10 157 0 248 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 10 161 1 49 10 161 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 10 161 1 65 3 197 1 66 10 161 1 85 10 161 1 88 10 161 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 10 165 0 234 10 169 0 235 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 10 173 1 49 10 173 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 10 173 1 65 3 197 1 66 10 173 1 85 10 173 1 88 10 173 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 10 177 0 235 1 213 0 236 1 217 0 237 10 181 0 238 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 10 173 1 49 10 173 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 10 173 1 65 3 197 1 66 10 173 1 85 10 173 1 88 10 173 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 10 185 0 157] #[0 10 189 0 157] #[0 4 238 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 47 0 48 0 49 0 52 0 55 0 56 0 60 0 61 0 62 0 65 0 72 0 76 0 79 0 86 0 94 0 97 0 99 0 100 0 117 0 121 0 122 0 125 0 128 0 130 0 133 0 134 0 135 0 136 0 138 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 4 242 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 47 0 48 0 49 0 52 0 55 0 56 0 60 0 61 0 62 0 65 0 72 0 76 0 79 0 86 0 94 0 97 0 99 0 100 0 117 0 121 0 122 0 125 0 128 0 130 0 133 0 134 0 135 0 136 0 138 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 4 246 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 47 0 48 0 49 0 52 0 55 0 56 0 60 0 61 0 62 0 65 0 72 0 76 0 79 0 86 0 94 0 97 0 99 0 100 0 117 0 121 0 122 0 125 0 128 0 130 0 133 0 134 0 135 0 136 0 138 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 4 250 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 47 0 48 0 49 0 52 0 55 0 56 0 60 0 61 0 62 0 65 0 72 0 76 0 79 0 86 0 94 0 97 0 99 0 100 0 117 0 121 0 122 0 125 0 128 0 130 0 133 0 134 0 135 0 136 0 138 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 4 254 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 47 0 48 0 49 0 52 0 55 0 56 0 60 0 61 0 62 0 65 0 72 0 76 0 79 0 86 0 94 0 97 0 99 0 100 0 117 0 121 0 122 0 125 0 128 0 130 0 133 0 134 0 135 0 136 0 138 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 5 2 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 47 0 48 0 49 0 52 0 55 0 56 0 60 0 61 0 62 0 65 0 72 0 76 0 79 0 86 0 94 0 97 0 99 0 100 0 117 0 121 0 122 0 125 0 128 0 130 0 133 0 134 0 135 0 136 0 138 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 5 6 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 47 0 48 0 49 0 52 0 55 0 56 0 60 0 61 0 62 0 65 0 72 0 76 0 79 0 86 0 94 0 97 0 99 0 100 0 117 0 121 0 122 0 125 0 128 0 130 0 133 0 134 0 135 0 136 0 138 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 5 10 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 47 0 48 0 49 0 52 0 55 0 56 0 60 0 61 0 62 0 65 0 72 0 76 0 79 0 86 0 94 0 97 0 99 0 100 0 117 0 121 0 122 0 125 0 128 0 130 0 133 0 134 0 135 0 136 0 138 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 5 14 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 47 0 48 0 49 0 52 0 55 0 56 0 60 0 61 0 62 0 65 0 72 0 76 0 79 0 86 0 94 0 97 0 99 0 100 0 117 0 121 0 122 0 125 0 128 0 130 0 133 0 134 0 135 0 136 0 138 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 5 18 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 47 0 48 0 49 0 52 0 55 0 56 0 60 0 61 0 62 0 65 0 72 0 76 0 79 0 86 0 94 0 97 0 99 0 100 0 117 0 121 0 122 0 125 0 128 0 130 0 133 0 134 0 135 0 136 0 138 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 5 22 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 47 0 48 0 49 0 52 0 55 0 56 0 60 0 61 0 62 0 65 0 72 0 76 0 79 0 86 0 94 0 97 0 99 0 100 0 117 0 121 0 122 0 125 0 128 0 130 0 133 0 134 0 135 0 136 0 138 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 10 193 1 49 10 193 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 10 193 1 65 3 197 1 66 10 193 1 85 10 193 1 88 10 193 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 5 26 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 5 30 0 9 0 15 0 25 0 30] #[1 5 34 0 9 10 197 0 15 5 34 0 25] #[0 5 38 0 9 0 15 0 25] #[1 5 42 0 9 5 42 0 15 5 42 0 25 10 201 0 30] #[0 5 46 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 5 50 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 5 54 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 5 58 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 23 0 25 0 26 0 29 0 31 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 5 62 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 94 0 100 0 117 0 121 0 125 0 134 0 135 0 138 0 142 0 157] #[0 5 66 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 94 0 100 0 117 0 121 0 125 0 134 0 135 0 138 0 142 0 157] #[0 10 205 0 9] #[1 5 70 0 9 10 209 0 15] #[0 5 74 0 9 0 15] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 10 213 0 197 10 213 0 198 10 213 0 199 10 213 0 200 1 145 0 201 1 145 0 202 1 145 0 203 10 213 0 204 1 161 0 205 10 213 0 206 10 213 0 207 10 213 0 208 10 213 0 209 10 213 0 210 1 185 0 211 10 213 0 217 10 213 1 159 10 213 2 82 2 229 2 83 3 1 2 101] #[0 5 78 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 94 0 100 0 117 0 121 0 125 0 134 0 135 0 138 0 142 0 157] #[0 10 217 0 9] #[1 5 82 0 9 10 221 0 15] #[1 5 86 0 9 5 86 0 15 3 18 0 32] #[0 10 225 0 157] #[1 1 70 0 10 1 74 0 35 1 78 0 37 5 90 0 157] #[0 4 194 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 4 230 0 2 4 230 0 3 4 230 0 4 4 230 0 5 4 230 0 6 4 230 0 7 10 229 0 8 4 230 0 9 4 230 0 10 4 230 0 11 4 230 0 12 4 230 0 14 4 230 0 15 4 230 0 16 4 230 0 18 10 149 0 20 4 230 0 21 4 230 0 22 4 230 0 23 4 230 0 25 4 230 0 26 4 230 0 27 4 230 0 28 4 230 0 29 4 230 0 30 4 230 0 31 4 230 0 33 4 230 0 34 0 247 0 35 4 230 0 36 10 153 0 37 4 230 0 38 4 230 0 39 4 230 0 40 4 230 0 44 4 230 0 45 4 230 0 51 4 230 0 63 4 230 0 68 4 230 0 79 4 230 0 82 4 230 0 89 4 230 0 90 4 230 0 91 4 230 0 92 4 230 0 101 4 230 0 103 4 230 0 119 4 230 0 145 4 230 0 149 4 230 0 150 4 230 0 151 4 230 0 153 4 230 0 154 4 230 0 155 4 230 0 163 4 230 0 164 4 230 0 167 4 230 0 168 4 230 2 102] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 10 233 1 28 10 233 1 29 10 233 1 34 10 233 1 35 10 233 1 36 10 233 1 37 1 197 1 51 1 197 2 72 2 217 2 73 10 233 2 84 1 197 2 85 1 197 2 86 10 233 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 10 237 1 28 10 237 1 29 10 237 1 34 10 237 1 35 10 237 1 36 10 237 1 37 1 197 1 51 1 197 2 72 2 217 2 73 10 237 2 84 1 197 2 85 1 197 2 86 10 237 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 10 241 1 28 10 241 1 29 10 241 1 34 10 241 1 35 10 241 1 36 10 241 1 37 1 197 1 51 1 197 2 72 2 217 2 73 10 241 2 84 1 197 2 85 1 197 2 86 10 241 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 10 249 1 28 10 249 1 29 10 249 1 34 10 249 1 35 10 249 1 36 10 249 1 37 10 249 1 38 1 197 1 51 1 197 2 72 2 217 2 73 10 249 2 84 1 197 2 85 1 197 2 86 10 249 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 10 253 1 28 10 253 1 29 10 253 1 34 10 253 1 35 10 253 1 36 10 253 1 37 10 253 1 38 1 197 1 51 1 197 2 72 2 217 2 73 10 253 2 84 1 197 2 85 1 197 2 86 10 253 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 11 1 1 39 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 11 5 1 39 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 11 9 1 40 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 11 13 1 40 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 11 17 1 40 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 11 21 0 197 11 21 0 198 11 21 0 199 11 21 0 200 1 145 0 201 1 145 0 202 1 145 0 203 11 21 0 204 1 161 0 205 11 21 0 206 11 21 0 207 11 21 0 208 11 21 0 209 11 21 0 210 1 185 0 211 11 21 0 217 11 21 1 159 11 21 2 82 2 229 2 83 3 1 2 101] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 11 25 0 197 11 25 0 198 11 25 0 199 11 25 0 200 1 145 0 201 1 145 0 202 1 145 0 203 11 25 0 204 1 161 0 205 11 25 0 206 11 25 0 207 11 25 0 208 11 25 0 209 11 25 0 210 1 185 0 211 11 25 0 217 11 25 1 159 11 25 2 82 2 229 2 83 3 1 2 101] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 11 29 1 40 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 3 133 1 40 11 33 1 41 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 3 133 1 40 11 37 1 41 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 11 41 1 42 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 11 45 1 43 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 11 49 1 44 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 11 53 1 45 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 11 57 1 48 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 11 61 1 46 1 197 1 51 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 11 65 1 49 11 65 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 11 65 1 65 3 197 1 66 11 65 1 85 11 65 1 88 11 65 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 77 0 148 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 11 69 1 49 11 69 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 11 69 1 64 11 69 1 65 3 197 1 66 11 69 1 85 11 69 1 88 11 69 1 89 11 69 1 94 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 0 103 0 157 1 125 0 192 1 121 0 194 1 125 0 195 11 81 0 196 6 205 0 197 6 205 0 198 6 205 0 199 6 205 0 200 1 145 0 201 1 145 0 202 1 145 0 203 6 205 0 204 1 161 0 205 6 205 0 206 6 205 0 207 6 205 0 208 6 205 0 209 6 205 0 210 1 185 0 211 6 205 0 217 6 205 1 159 6 205 2 82 2 229 2 83 3 1 2 101] #[0 11 85 0 157] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 11 97 1 49 11 97 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 11 97 1 65 3 197 1 66 11 89 1 76 11 93 1 77 11 97 1 85 11 97 1 88 11 97 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 11 101 1 49 11 101 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 11 101 1 65 3 197 1 66 11 101 1 85 11 101 1 88 11 101 1 89 11 101 1 91 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 5 94 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 5 98 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[1 11 105 0 82 11 109 0 119 11 113 1 80 11 117 1 81 11 121 1 82] #[1 3 37 0 79 5 102 0 82 7 53 0 91 7 57 0 92 7 61 0 103 5 102 0 119 7 65 0 145 7 69 1 66 11 125 1 70 7 89 1 71 7 93 1 72 7 97 1 73 7 101 1 74 7 105 1 75] #[0 5 106 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 5 110 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 5 114 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 5 118 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 5 122 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 5 126 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 5 130 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 11 129 1 49 11 129 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 11 129 1 65 3 197 1 66 11 129 1 85 11 129 1 88 11 129 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 5 134 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 5 138 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 0 251 0 41 0 255 0 49 0 255 0 52 0 255 0 55 3 182 0 57 0 255 0 60 0 255 0 65 5 142 0 69 1 3 0 71 0 255 0 76 0 255 0 86 0 251 0 88 0 255 0 94 0 251 0 99 0 255 0 100 1 3 0 105 1 7 0 108 0 251 0 109 0 251 0 111 0 251 0 112 0 255 0 117 0 251 0 118 0 255 0 121 1 11 0 124 0 255 0 125 0 255 0 134 0 255 0 135 0 251 0 137 0 255 0 138 1 3 0 141 0 255 0 142 0 255 0 157] #[1 1 15 0 41 1 19 0 49 1 19 0 52 1 19 0 55 1 19 0 60 1 19 0 65 5 162 0 69 5 174 0 70 1 23 0 71 1 19 0 76 5 174 0 84 1 19 0 86 1 27 0 88 1 19 0 94 1 15 0 99 1 19 0 100 1 15 0 105 5 158 0 108 1 27 0 109 1 27 0 111 1 23 0 112 1 19 0 117 1 15 0 118 1 19 0 121 1 31 0 124 1 19 0 125 1 19 0 134 1 19 0 135 1 35 0 137 1 19 0 138 1 15 0 141 1 19 0 142 5 182 0 152 1 39 0 157] #[1 1 43 0 41 1 47 0 49 1 47 0 52 1 47 0 55 3 186 0 57 5 206 0 58 1 47 0 60 3 190 0 62 1 47 0 65 3 194 0 67 5 190 0 69 1 51 0 71 1 47 0 76 1 47 0 86 3 198 0 87 1 55 0 88 1 47 0 94 1 59 0 99 1 47 0 100 1 63 0 105 1 67 0 108 1 55 0 109 1 55 0 111 1 55 0 112 5 202 0 113 1 47 0 117 1 43 0 118 1 47 0 121 1 71 0 124 1 47 0 125 3 202 0 126 1 47 0 134 1 47 0 135 1 75 0 137 1 47 0 138 1 63 0 141 1 47 0 142 5 202 0 143 1 79 0 157] #[1 1 83 0 41 1 87 0 49 1 87 0 52 1 87 0 55 3 206 0 57 5 234 0 58 1 87 0 60 3 210 0 62 1 87 0 65 3 214 0 67 5 214 0 69 1 91 0 71 1 87 0 76 1 87 0 86 3 218 0 87 1 95 0 88 1 87 0 94 1 95 0 99 1 87 0 100 1 91 0 105 1 99 0 108 1 95 0 109 1 95 0 111 1 95 0 112 5 230 0 113 1 87 0 117 1 83 0 118 1 87 0 121 1 103 0 124 1 87 0 125 3 222 0 126 1 87 0 134 1 87 0 135 1 107 0 137 1 87 0 138 1 91 0 141 1 87 0 142 5 230 0 143 1 87 0 157] #[1 1 111 0 41 1 115 0 49 1 115 0 52 1 115 0 55 1 115 0 60 1 115 0 65 5 250 0 69 1 111 0 71 1 115 0 76 1 115 0 86 1 111 0 88 1 115 0 94 1 111 0 99 1 115 0 100 1 111 0 105 5 246 0 108 1 111 0 109 1 111 0 111 1 111 0 112 1 115 0 117 1 111 0 118 1 115 0 121 1 119 0 124 1 115 0 125 1 115 0 134 1 115 0 135 1 111 0 137 1 115 0 138 1 111 0 141 1 115 0 142 1 115 0 157] #[1 1 123 0 41 1 127 0 49 1 127 0 52 1 127 0 55 3 226 0 57 6 18 0 58 1 127 0 60 3 230 0 62 1 127 0 65 3 234 0 67 6 10 0 69 1 131 0 71 1 127 0 76 1 127 0 86 3 238 0 87 1 135 0 88 1 127 0 94 1 139 0 99 1 127 0 100 1 143 0 105 1 147 0 108 1 135 0 109 1 135 0 111 1 135 0 112 6 14 0 113 1 127 0 117 1 123 0 118 1 127 0 121 1 151 0 124 1 127 0 125 3 242 0 126 1 127 0 134 1 127 0 135 1 155 0 137 1 127 0 138 1 143 0 141 1 127 0 142 6 14 0 143 1 159 0 157] #[1 1 163 0 41 1 167 0 49 1 167 0 52 1 167 0 55 3 246 0 57 6 46 0 58 1 167 0 60 3 250 0 62 1 167 0 65 3 254 0 67 6 34 0 69 1 171 0 71 1 167 0 76 1 167 0 86 4 2 0 87 1 175 0 88 1 167 0 94 1 179 0 99 1 167 0 100 1 183 0 105 1 187 0 108 1 175 0 109 1 175 0 111 1 175 0 112 6 42 0 113 1 167 0 117 1 163 0 118 1 167 0 121 1 191 0 124 1 167 0 125 4 6 0 126 1 167 0 134 1 167 0 135 1 195 0 137 1 167 0 138 1 183 0 141 1 167 0 142 6 42 0 143 1 199 0 157] #[1 1 203 0 41 1 207 0 49 1 207 0 52 1 207 0 55 4 10 0 57 6 78 0 58 1 207 0 60 4 14 0 62 1 207 0 65 4 18 0 67 6 66 0 69 6 70 0 70 1 211 0 71 1 207 0 76 6 70 0 84 1 207 0 86 4 22 0 87 1 215 0 88 1 207 0 94 1 219 0 99 1 207 0 100 1 223 0 105 1 227 0 108 1 215 0 109 1 215 0 111 1 231 0 112 6 74 0 113 1 207 0 117 1 203 0 118 1 207 0 121 1 235 0 124 1 207 0 125 4 26 0 126 1 207 0 134 1 207 0 135 1 239 0 137 1 207 0 138 1 223 0 141 1 207 0 142 6 74 0 143 1 243 0 157] #[0 6 86 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 88 0 94 0 99 0 100 0 109 0 111 0 112 0 113 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 143 0 157] #[1 1 247 0 41 1 251 0 49 1 251 0 52 1 251 0 55 4 30 0 57 1 251 0 60 1 251 0 65 6 102 0 69 1 255 0 71 1 251 0 76 1 251 0 86 1 247 0 88 1 251 0 94 1 247 0 99 1 251 0 100 1 255 0 105 2 3 0 108 1 247 0 109 1 247 0 111 1 247 0 112 1 251 0 117 1 247 0 118 1 251 0 121 2 7 0 124 1 251 0 125 1 251 0 134 1 251 0 135 1 247 0 137 1 251 0 138 1 255 0 141 1 251 0 142 1 251 0 157] #[1 2 11 0 41 2 15 0 49 2 15 0 52 2 15 0 55 4 34 0 57 2 15 0 60 2 15 0 65 6 106 0 69 6 122 0 70 2 19 0 71 2 15 0 76 6 122 0 84 2 15 0 86 2 23 0 88 2 15 0 94 2 23 0 99 2 15 0 100 2 27 0 105 2 31 0 108 2 23 0 109 2 23 0 111 2 35 0 112 6 118 0 113 2 15 0 117 2 11 0 118 2 15 0 121 2 35 0 124 2 15 0 125 2 15 0 134 2 15 0 135 2 39 0 137 2 15 0 138 2 27 0 141 2 15 0 142 6 118 0 143 2 43 0 157 11 141 2 77 11 145 2 80] #[1 2 47 0 41 2 51 0 49 2 51 0 52 2 51 0 55 4 38 0 57 2 51 0 60 4 42 0 62 2 51 0 65 6 130 0 69 6 142 0 70 2 55 0 71 2 51 0 76 6 142 0 84 2 51 0 86 4 46 0 87 2 59 0 88 2 51 0 94 2 63 0 99 2 51 0 100 2 67 0 105 2 71 0 108 2 59 0 109 2 59 0 111 2 75 0 112 6 146 0 113 2 51 0 117 2 47 0 118 2 51 0 121 2 79 0 124 2 51 0 125 4 50 0 126 2 51 0 134 2 51 0 135 2 75 0 137 2 51 0 138 2 67 0 141 2 51 0 142 6 146 0 143 6 150 0 152 2 83 0 157] #[1 2 87 0 41 2 91 0 49 2 91 0 52 2 91 0 55 2 91 0 60 2 91 0 65 6 162 0 69 2 87 0 71 2 91 0 76 2 91 0 86 2 87 0 88 2 91 0 94 2 87 0 99 2 91 0 100 2 87 0 105 6 170 0 108 2 87 0 109 2 87 0 111 2 87 0 112 2 91 0 117 2 87 0 118 2 91 0 121 2 95 0 124 2 91 0 125 2 91 0 134 2 91 0 135 2 87 0 137 2 91 0 138 2 87 0 141 2 91 0 142 2 91 0 157] #[0 6 174 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 88 0 94 0 99 0 100 0 109 0 111 0 112 0 113 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 143 0 157] #[0 11 149 0 58] #[1 6 178 0 58 11 173 0 88 11 173 0 99 11 173 0 109 11 173 0 111 11 173 0 112 11 173 1 178] #[0 6 182 0 58 0 88 0 99 0 109 0 111 0 112] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 11 177 0 197 11 177 0 198 11 177 0 199 11 177 0 200 1 145 0 201 1 145 0 202 1 145 0 203 11 177 0 204 1 161 0 205 11 177 0 206 11 177 0 207 11 177 0 208 11 177 0 209 11 177 0 210 1 185 0 211 11 177 0 217 11 177 1 159 11 177 2 82 2 229 2 83 3 1 2 101] #[1 6 186 0 49 6 186 0 52 6 186 0 55 6 186 0 60 6 186 0 65 6 186 0 76 6 186 0 86 11 209 0 88 6 186 0 94 11 209 0 99 6 186 0 100 11 209 0 109 11 209 0 111 11 209 0 112 11 209 0 113 6 186 0 117 6 186 0 121 11 209 0 124 6 186 0 125 6 186 0 134 6 186 0 135 11 209 0 137 6 186 0 138 6 186 0 142 11 209 0 143 6 186 0 157 11 209 1 184] #[0 6 190 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 88 0 94 0 99 0 100 0 109 0 111 0 112 0 113 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 143 0 157] #[1 4 54 0 49 4 54 0 52 4 54 0 55 4 54 0 60 4 54 0 65 4 54 0 76 4 54 0 86 4 54 0 94 4 54 0 100 11 213 0 108 4 54 0 117 4 54 0 121 4 54 0 125 4 54 0 134 4 54 0 135 4 54 0 138 4 54 0 142 4 54 0 157 11 213 2 76] #[1 12 9 0 41 6 194 0 49 6 194 0 52 6 194 0 55 6 194 0 60 6 194 0 65 12 9 0 71 6 194 0 76 6 194 0 86 12 9 0 88 6 194 0 94 12 9 0 99 6 194 0 100 12 9 0 105 6 194 0 108 12 9 0 109 12 9 0 111 12 9 0 112 6 194 0 117 12 9 0 118 6 194 0 121 12 9 0 124 6 194 0 125 6 194 0 134 6 194 0 135 12 9 0 137 6 194 0 138 12 9 0 141 6 194 0 142 6 194 0 157 12 9 1 192] #[0 6 198 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 12 13 0 197 12 13 0 198 12 13 0 199 12 13 0 200 1 145 0 201 1 145 0 202 1 145 0 203 12 13 0 204 1 161 0 205 12 13 0 206 12 13 0 207 12 13 0 208 12 13 0 209 12 13 0 210 1 185 0 211 12 13 0 217 12 13 1 159 12 13 2 82 2 229 2 83 3 1 2 101] #[1 12 65 0 41 6 202 0 49 6 202 0 52 6 202 0 55 6 202 0 60 6 202 0 65 12 65 0 71 6 202 0 76 6 202 0 86 12 65 0 88 6 202 0 94 12 65 0 99 6 202 0 100 12 65 0 105 12 65 0 109 12 65 0 111 12 65 0 112 6 202 0 117 12 65 0 118 6 202 0 121 12 65 0 124 6 202 0 125 6 202 0 134 6 202 0 135 12 65 0 137 6 202 0 138 12 65 0 141 6 202 0 142 6 202 0 157 12 65 1 208] #[0 6 206 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 12 69 0 69] #[1 12 121 0 41 6 210 0 69 12 121 0 71 12 121 0 88 12 121 0 99 12 121 0 105 12 121 0 109 12 121 0 111 12 121 0 112 12 121 0 118 12 121 0 124 12 121 0 137 12 121 0 141 12 121 1 223] #[0 6 214 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 12 125 0 197 12 125 0 198 12 125 0 199 12 125 0 200 1 145 0 201 1 145 0 202 1 145 0 203 12 125 0 204 1 161 0 205 12 125 0 206 12 125 0 207 12 125 0 208 12 125 0 209 12 125 0 210 1 185 0 211 12 125 0 217 12 125 1 159 12 129 1 231 12 125 2 82 2 229 2 83 3 1 2 101] #[1 12 177 0 41 6 218 0 49 6 218 0 52 6 218 0 55 6 218 0 60 6 218 0 65 12 177 0 71 6 218 0 76 6 218 0 86 12 177 0 88 6 218 0 94 12 177 0 99 6 218 0 100 12 177 0 105 12 177 0 109 12 177 0 111 12 177 0 112 6 218 0 117 12 177 0 118 6 218 0 121 6 218 0 125 6 218 0 134 6 218 0 135 12 177 0 137 6 218 0 138 12 177 0 141 6 218 0 142 6 218 0 157 12 177 1 230] #[0 6 222 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 12 181 0 70 12 209 0 71 1 145 0 76 12 189 0 84 1 145 0 86 1 145 0 94 5 45 0 100 12 209 0 112 1 145 0 117 1 145 0 121 12 209 0 124 5 57 0 125 1 145 0 134 1 145 0 135 12 209 0 137 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 12 205 0 197 12 205 0 198 12 205 0 199 12 205 0 200 1 145 0 201 1 145 0 202 1 145 0 203 12 205 0 204 1 161 0 205 12 205 0 206 12 205 0 207 12 205 0 208 12 205 0 209 12 205 0 210 1 185 0 211 12 205 0 217 12 205 1 159 12 209 1 235 12 213 1 236 12 217 1 237 12 221 1 239 12 225 1 241 12 205 2 82 2 229 2 83 3 1 2 101] #[0 6 226 0 49 0 52 0 55 0 60 0 65 0 70 0 71 0 76 0 84 0 86 0 94 0 100 0 112 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 157] #[1 12 229 0 157 12 233 1 247] #[1 13 5 0 71 13 5 0 88 13 5 0 109 13 5 0 111 13 5 0 112 13 5 0 137 6 230 0 157 13 5 1 246] #[0 6 234 0 71 0 88 0 109 0 111 0 112 0 137 0 157] #[0 13 9 0 157] #[1 2 99 0 124 13 17 0 137 3 102 0 152 13 17 2 80] #[1 13 25 0 71 2 103 0 124 3 106 0 152 13 25 2 77] #[0 13 29 0 25] #[1 8 73 0 157 1 125 0 192 13 33 0 194 1 125 0 195] #[1 1 2 0 20 5 253 0 24 1 2 0 25 6 1 0 26 13 37 0 30 9 37 0 218 9 37 0 240] #[0 13 41 0 25] #[1 6 13 0 20 6 238 0 25] #[1 13 57 0 46 13 57 0 96 13 53 2 52 13 57 2 53] #[1 0 49 0 37 0 10 0 41 0 10 0 57 0 10 0 62 0 10 0 67 0 10 0 87 0 10 0 88 0 53 0 98 0 10 0 99 0 10 0 108 0 10 0 109 0 10 0 111 0 10 0 112 0 10 0 118 0 10 0 124 0 10 0 126 0 10 0 137 13 69 0 176 13 61 0 188 13 65 0 189 13 69 0 190 13 69 0 191 13 69 1 152 13 69 1 254 13 69 2 12 13 69 2 34 13 69 2 44 0 89 2 54 0 93 2 55 0 97 2 56 0 101 2 57 6 242 2 102] #[0 6 246 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 2 102] #[1 2 107 0 37 6 250 0 41 6 250 0 57 6 250 0 62 6 250 0 67 6 250 0 87 6 250 0 88 6 250 0 98 6 250 0 99 6 250 0 108 6 250 0 109 6 250 0 111 6 250 0 112 6 250 0 118 6 250 0 124 6 250 0 126 6 250 0 137 13 73 2 51 6 250 2 102] #[0 6 254 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 2 102] #[0 7 2 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 139 0 155 2 102] #[1 1 2 0 8 1 2 0 15 1 2 0 20 5 253 0 24 1 2 0 25 6 1 0 26 1 2 0 38 1 2 0 145 1 2 0 148 9 37 0 218 9 37 0 240] #[0 7 6 0 8 0 15 0 38] #[1 13 77 0 15 13 81 0 38] #[0 7 10 0 15 0 38] #[1 13 85 0 8 7 14 0 15 7 14 0 38 13 89 2 64 13 93 2 65] #[0 7 18 0 157] #[0 13 97 0 157] #[1 0 6 0 37 0 6 0 41 0 6 0 57 0 6 0 62 0 6 0 67 0 29 0 71 0 6 0 87 0 6 0 88 0 6 0 98 0 6 0 99 0 6 0 108 0 6 0 109 0 6 0 111 0 6 0 112 0 6 0 118 0 6 0 124 0 6 0 126 0 6 0 137 0 6 0 139 0 6 0 155 13 101 0 179 0 41 0 180 0 45 0 181] #[1 13 109 0 25 7 22 0 37 7 22 0 41 7 22 0 57 7 22 0 62 7 22 0 67 7 22 0 87 7 22 0 88 7 22 0 98 7 22 0 99 7 22 0 108 7 22 0 109 7 22 0 111 7 22 0 112 7 22 0 118 7 22 0 124 7 22 0 126 7 22 0 137 7 22 0 155 13 109 2 74 7 22 2 102] #[0 7 26 0 49 0 52 0 55 0 57 0 60 0 65 0 76 0 86 0 87 0 94 0 100 0 117 0 121 0 125 0 126 0 134 0 135 0 138 0 142 0 157] #[0 13 113 0 57] #[0 3 186 0 41 0 57 0 88 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 137] #[0 3 206 0 41 0 57 0 88 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 137] #[0 3 226 0 41 0 57 0 88 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 137] #[0 3 246 0 41 0 57 0 88 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 137] #[0 4 10 0 41 0 57 0 88 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 137] #[0 4 38 0 41 0 57 0 88 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 137] #[0 7 30 0 41 0 57 0 88 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 137] #[0 13 117 0 126] #[0 3 202 0 88 0 99 0 108 0 109 0 111 0 112 0 126 0 137] #[0 3 222 0 88 0 99 0 108 0 109 0 111 0 112 0 126 0 137] #[0 3 242 0 88 0 99 0 108 0 109 0 111 0 112 0 126 0 137] #[0 4 6 0 88 0 99 0 108 0 109 0 111 0 112 0 126 0 137] #[0 4 26 0 88 0 99 0 108 0 109 0 111 0 112 0 126 0 137] #[0 4 50 0 88 0 99 0 108 0 109 0 111 0 112 0 126 0 137] #[0 7 34 0 88 0 99 0 108 0 109 0 111 0 112 0 126 0 137] #[0 13 121 0 87] #[0 3 198 0 87 0 88 0 99 0 108 0 109 0 111 0 112 0 137] #[0 3 218 0 87 0 88 0 99 0 108 0 109 0 111 0 112 0 137] #[0 3 238 0 87 0 88 0 99 0 108 0 109 0 111 0 112 0 137] #[0 4 2 0 87 0 88 0 99 0 108 0 109 0 111 0 112 0 137] #[0 4 22 0 87 0 88 0 99 0 108 0 109 0 111 0 112 0 137] #[0 4 46 0 87 0 88 0 99 0 108 0 109 0 111 0 112 0 137] #[0 7 38 0 87 0 88 0 99 0 108 0 109 0 111 0 112 0 137] #[0 13 125 0 157] #[0 3 194 0 67 0 88 0 99 0 109 0 111 0 112] #[0 3 214 0 67 0 88 0 99 0 109 0 111 0 112] #[0 3 234 0 67 0 88 0 99 0 109 0 111 0 112] #[0 3 254 0 67 0 88 0 99 0 109 0 111 0 112] #[0 4 18 0 67 0 88 0 99 0 109 0 111 0 112] #[0 7 42 0 67 0 88 0 99 0 109 0 111 0 112] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 13 129 0 197 13 129 0 198 13 129 0 199 13 129 0 200 1 145 0 201 1 145 0 202 1 145 0 203 13 129 0 204 1 161 0 205 13 129 0 206 13 129 0 207 13 129 0 208 13 129 0 209 13 129 0 210 1 185 0 211 13 129 0 217 13 129 1 159 13 133 1 193 13 129 2 82 2 229 2 83 13 137 2 101] #[0 3 190 0 62 0 88 0 99 0 109 0 111 0 112 0 137] #[0 3 210 0 62 0 88 0 99 0 109 0 111 0 112 0 137] #[0 3 230 0 62 0 88 0 99 0 109 0 111 0 112 0 137] #[0 3 250 0 62 0 88 0 99 0 109 0 111 0 112 0 137] #[0 4 14 0 62 0 88 0 99 0 109 0 111 0 112 0 137] #[0 4 42 0 62 0 88 0 99 0 109 0 111 0 112 0 137] #[0 7 46 0 62 0 88 0 99 0 109 0 111 0 112 0 137] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 13 141 1 28 13 141 1 29 13 141 1 34 13 141 1 35 13 141 1 36 13 141 1 37 1 197 1 51 1 197 2 72 2 217 2 73 13 141 2 84 1 197 2 85 1 197 2 86 13 141 2 87 1 197 2 88] #[0 7 50 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 7 54 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 13 145 0 15 13 149 0 38] #[0 7 58 0 15 0 38 0 155] #[0 13 153 0 9] #[0 4 198 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 20 0 23 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 13 157 0 30] #[1 13 161 0 15 7 62 0 25] #[0 7 66 0 15 0 25] #[1 13 165 0 9 1 70 0 10 1 74 0 35 1 78 0 37] #[0 7 70 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 13 169 0 8] #[1 1 70 0 9 1 70 0 10 1 74 0 35 2 111 0 37] #[1 2 162 0 10 2 162 0 35 2 162 0 37 13 173 0 157 13 177 2 90 13 181 2 91] #[1 1 2 0 4 1 2 0 7 1 2 0 8 0 15 0 10 1 2 0 11 1 2 0 13 1 2 0 14 1 2 0 17 1 2 0 18 1 2 0 19 1 2 0 20 1 2 0 22 5 253 0 24 6 1 0 26 1 2 0 28 1 2 0 30 1 2 0 34 0 15 0 35 0 15 0 37 1 2 0 40 1 2 0 150 0 15 0 157 6 9 0 218 6 9 0 240] #[0 7 74 0 25] #[0 7 78 0 9 0 15 0 25] #[0 13 185 0 25] #[0 7 82 0 25] #[1 13 189 0 15 7 86 0 25] #[0 13 193 0 157] #[0 7 90 0 15 0 23 0 25 0 38 0 155 0 163 0 164 0 167 0 168] #[0 13 197 0 25] #[0 7 94 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 7 98 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 7 102 0 9 0 25 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 13 201 0 9] #[0 13 205 0 9] #[0 7 106 0 20] #[0 7 110 0 20] #[0 7 114 0 9 0 20] #[0 7 118 0 20] #[0 7 122 0 20] #[1 13 209 0 9 7 126 0 20] #[0 13 213 0 20] #[0 7 130 0 15 0 38] #[0 13 217 0 38] #[1 13 221 0 15 7 134 0 38] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 4 221 1 49 4 221 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 4 221 1 65 3 197 1 66 4 221 1 85 4 221 1 88 4 221 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 1 2 0 8 1 2 0 13 1 2 0 15 1 2 0 17 1 2 0 19 1 2 0 20 5 253 0 24 6 1 0 26 13 225 0 30 1 2 0 35 1 2 0 37 1 2 0 155 6 209 0 218 6 209 0 240] #[1 6 29 0 8 6 33 0 13 6 37 0 17 6 41 0 19 6 45 0 20 1 142 0 35 13 229 1 30 13 233 1 31] #[1 1 162 0 8 1 162 0 13 7 138 0 15 1 162 0 17 1 162 0 19 1 162 0 20 1 162 0 35 1 162 0 37 7 138 0 155] #[1 1 170 0 8 1 170 0 13 7 142 0 15 1 170 0 17 1 170 0 19 1 170 0 20 1 170 0 35 1 170 0 37 7 142 0 155] #[1 1 194 0 8 1 194 0 13 7 146 0 15 1 194 0 17 1 194 0 19 1 194 0 20 1 194 0 35 1 194 0 37 7 146 0 155] #[0 13 237 0 155] #[1 13 241 0 15 7 150 0 155] #[0 7 154 0 15 0 155] #[0 7 158 0 15 0 155] #[1 4 214 0 1 4 214 0 5 4 214 0 8 4 218 0 9 4 214 0 10 4 214 0 12 4 214 0 13 4 214 0 16 4 214 0 17 4 214 0 47 4 214 0 48 4 214 0 49 4 214 0 52 4 214 0 55 4 214 0 56 4 214 0 60 4 214 0 61 4 214 0 62 4 214 0 65 4 214 0 72 4 214 0 76 4 214 0 79 4 214 0 86 4 214 0 94 4 214 0 97 4 214 0 99 4 214 0 100 4 214 0 104 4 214 0 114 4 214 0 117 4 214 0 121 4 214 0 122 4 214 0 125 4 214 0 128 4 214 0 130 4 214 0 133 4 214 0 134 4 214 0 135 4 214 0 136 4 214 0 138 4 214 0 152 0 243 0 157 4 214 0 158 4 214 0 159 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 165 4 214 0 166 4 214 0 169 4 214 0 170 13 245 0 222 10 117 0 223 10 121 0 224 10 125 0 225 10 129 0 226] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 13 249 0 37 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 13 253 0 148 1 81 0 152 7 162 0 155 14 1 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 14 5 1 1 14 9 1 2 14 13 1 3 14 17 1 4 14 21 1 7 14 25 1 8 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 14 29 1 49 14 29 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 14 29 1 65 3 197 1 66 14 29 1 89 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[0 7 166 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 7 170 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 7 174 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 9 229 0 148 1 81 0 152 7 178 0 155 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 14 37 1 49 14 37 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 14 37 1 65 3 197 1 66 14 37 1 85 14 37 1 88 14 37 1 89 14 37 1 187 14 37 2 9 14 45 2 10 14 49 2 11 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 7 182 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 9 157 0 15 0 129 0 16 0 133 0 17 4 154 0 38 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 9 161 0 215 9 165 0 216 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 14 53 0 248 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 9 29 1 49 9 29 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 9 29 1 65 3 197 1 66 9 29 1 85 9 29 1 88 9 29 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 7 186 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 14 57 1 49 14 57 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 14 57 1 65 3 197 1 66 14 57 1 85 14 57 1 88 14 57 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 7 190 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 14 61 0 9 6 153 0 10] #[0 14 65 0 9] #[0 7 194 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 14 69 0 8 7 198 0 144 7 198 0 148 14 73 1 141 14 77 1 142] #[1 1 77 0 148 14 81 1 94] #[1 7 202 0 1 7 202 0 5 7 202 0 8 7 202 0 10 7 202 0 12 7 202 0 13 7 202 0 16 7 202 0 17 7 202 0 25 7 202 0 47 7 202 0 48 7 202 0 49 7 202 0 50 7 202 0 52 7 202 0 53 10 9 0 54 7 202 0 55 7 202 0 56 7 202 0 58 7 202 0 59 7 202 0 60 7 202 0 61 7 202 0 62 7 202 0 64 7 202 0 65 7 202 0 66 7 202 0 72 10 13 0 74 7 202 0 75 7 202 0 76 7 202 0 77 7 202 0 78 7 202 0 81 7 202 0 83 7 202 0 86 7 202 0 93 7 202 0 94 7 202 0 97 7 202 0 99 7 202 0 100 7 202 0 116 7 202 0 117 7 202 0 121 7 202 0 122 7 202 0 125 7 202 0 127 7 202 0 128 7 202 0 129 7 202 0 130 7 202 0 131 7 202 0 133 7 202 0 134 7 202 0 135 7 202 0 136 7 202 0 137 7 202 0 138 7 202 0 139 7 202 0 140 7 202 0 142 7 202 0 146 7 202 0 147 7 202 0 148 7 202 0 152 7 202 0 155 7 202 0 157 7 202 0 158 7 202 0 159 7 202 0 160 7 202 0 161 7 202 0 162 7 202 0 165 7 202 0 166 7 202 0 169 7 202 0 170 14 85 1 140 14 89 1 145 7 202 2 102] #[0 7 206 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 74 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 7 210 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 2 115 0 9 0 15 0 10 2 119 0 20 14 93 0 24 14 97 0 26 0 15 0 35 0 15 0 37 9 37 0 218 9 37 0 240 14 101 1 18 14 105 1 19] #[1 14 109 0 9 1 70 0 10 1 74 0 35 1 78 0 37] #[1 14 113 0 9 14 117 0 20] #[1 14 121 0 9 6 157 0 10] #[0 14 125 0 9] #[0 7 218 0 9] #[0 7 222 0 9] #[0 14 129 0 9] #[0 14 133 0 9] #[0 7 226 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 14 137 0 25] #[0 7 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 71 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 97 0 99 0 100 0 101 0 103 0 105 0 108 0 109 0 111 0 112 0 113 0 115 0 116 0 117 0 118 0 119 0 120 0 121 0 122 0 124 0 125 0 126 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 141 0 142 0 143 0 145 0 146 0 147 0 148 0 149 0 150 0 151 0 152 0 153 0 154 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 169 0 170 2 102] #[0 7 234 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 7 238 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 1 2 0 2 1 2 0 5 1 2 0 6 1 2 0 8 1 2 0 9 1 2 0 10 1 2 0 15 1 2 0 20 1 2 0 23 1 2 0 25 0 107 0 26 1 2 0 29 1 2 0 31 1 2 0 32 1 2 0 33 1 2 0 35 1 2 0 36 1 2 0 37 1 2 0 38 1 2 0 39 1 2 0 44 1 2 0 45 1 2 0 51 1 2 0 63 1 2 0 68 1 2 0 79 1 2 0 82 1 2 0 89 1 2 0 90 1 2 0 91 1 2 0 92 1 2 0 101 1 2 0 102 1 2 0 103 1 2 0 119 1 2 0 128 1 2 0 145 1 2 0 148 1 2 0 149 1 2 0 151 1 2 0 153 1 2 0 155 1 2 0 157 1 2 0 163 1 2 0 164 1 2 0 167 1 2 0 168 14 141 0 218 14 141 0 240 1 2 2 102] #[1 1 70 0 10 7 242 0 15 1 74 0 35 1 78 0 37 7 242 0 153] #[1 14 145 0 15 14 149 0 153] #[0 7 246 0 15 0 153] #[1 1 2 0 2 1 2 0 5 1 2 0 6 1 2 0 8 1 2 0 9 1 2 0 10 1 2 0 15 1 2 0 20 1 2 0 23 1 2 0 25 0 107 0 26 1 2 0 29 1 2 0 31 1 2 0 32 1 2 0 33 1 2 0 35 1 2 0 36 1 2 0 37 1 2 0 38 1 2 0 39 1 2 0 44 1 2 0 45 1 2 0 51 1 2 0 63 1 2 0 68 1 2 0 79 1 2 0 82 1 2 0 89 1 2 0 90 1 2 0 91 1 2 0 92 1 2 0 101 1 2 0 102 1 2 0 103 1 2 0 119 1 2 0 128 1 2 0 145 1 2 0 148 1 2 0 149 1 2 0 151 1 2 0 153 1 2 0 155 1 2 0 157 1 2 0 163 1 2 0 164 1 2 0 167 1 2 0 168 14 153 0 218 14 153 0 240 1 2 2 102] #[0 7 250 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 150 0 151 0 153 0 154 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 14 157 0 23] #[0 14 161 0 9] #[1 7 254 0 9 14 165 0 15] #[0 8 2 0 9 0 15 0 38] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 14 169 0 104 14 173 0 114 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 14 177 0 227 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 14 181 1 49 14 181 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 14 181 1 65 3 197 1 66 14 181 1 85 14 181 1 88 14 181 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 8 6 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 47 0 48 0 49 0 52 0 55 0 56 0 60 0 61 0 62 0 65 0 72 0 76 0 79 0 86 0 94 0 97 0 99 0 100 0 104 0 114 0 117 0 121 0 122 0 125 0 128 0 130 0 133 0 134 0 135 0 136 0 138 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 8 10 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 1 2 0 2 1 2 0 3 1 2 0 4 1 2 0 5 1 2 0 6 1 2 0 7 1 2 0 8 1 2 0 9 1 2 0 10 1 2 0 11 1 2 0 12 1 2 0 13 1 2 0 14 1 2 0 15 1 2 0 16 1 2 0 17 1 2 0 18 1 2 0 19 1 2 0 20 1 2 0 21 1 2 0 22 1 2 0 23 1 2 0 25 0 107 0 26 1 2 0 27 1 2 0 28 1 2 0 29 1 2 0 30 1 2 0 31 1 2 0 33 1 2 0 34 1 2 0 35 1 2 0 36 1 2 0 37 1 2 0 38 1 2 0 39 1 2 0 40 1 2 0 44 1 2 0 45 1 2 0 51 1 2 0 63 1 2 0 68 1 2 0 79 1 2 0 82 1 2 0 89 1 2 0 90 1 2 0 91 1 2 0 92 1 2 0 101 1 2 0 103 1 2 0 119 1 2 0 145 1 2 0 149 1 2 0 150 1 2 0 151 1 2 0 153 1 2 0 154 1 2 0 155 1 2 0 163 1 2 0 164 1 2 0 167 1 2 0 168 14 185 0 218 14 185 0 240 1 2 2 102] #[1 14 189 0 20 14 193 0 37] #[1 4 214 0 1 4 214 0 5 4 214 0 8 4 218 0 9 4 214 0 10 4 214 0 12 4 214 0 13 4 214 0 16 4 214 0 17 4 214 0 47 4 214 0 48 4 214 0 49 4 214 0 52 4 214 0 55 4 214 0 56 4 214 0 60 4 214 0 61 4 214 0 62 4 214 0 65 4 214 0 72 4 214 0 76 4 214 0 79 4 214 0 86 4 214 0 94 4 214 0 97 4 214 0 99 4 214 0 100 4 214 0 104 4 214 0 114 4 214 0 117 4 214 0 121 4 214 0 122 4 214 0 125 4 214 0 128 4 214 0 130 4 214 0 133 4 214 0 134 4 214 0 135 4 214 0 136 4 214 0 138 4 214 0 152 0 243 0 157 4 214 0 158 4 214 0 159 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 165 4 214 0 166 4 214 0 169 4 214 0 170 14 197 0 222 10 117 0 223 10 121 0 224 10 125 0 225 10 129 0 226] #[0 14 201 0 157] #[1 4 214 0 1 4 214 0 5 4 214 0 8 4 214 0 10 4 214 0 12 4 214 0 13 4 214 0 16 4 214 0 17 4 214 0 47 4 214 0 48 4 214 0 49 4 214 0 52 4 214 0 55 4 214 0 56 4 214 0 60 4 214 0 61 4 214 0 62 4 214 0 65 4 214 0 72 4 214 0 76 4 214 0 79 4 214 0 86 4 214 0 94 4 214 0 97 4 214 0 99 4 214 0 100 4 214 0 104 4 214 0 114 4 214 0 117 4 214 0 121 4 214 0 122 4 214 0 125 4 214 0 128 4 214 0 130 4 214 0 133 4 214 0 134 4 214 0 135 4 214 0 136 4 214 0 138 4 214 0 152 0 243 0 157 4 214 0 158 4 214 0 159 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 165 4 214 0 166 4 214 0 169 4 214 0 170 14 205 0 223 10 121 0 224 10 125 0 225 10 129 0 226] #[1 13 145 0 15 14 209 0 38] #[1 7 58 0 15 2 123 0 38] #[0 14 217 0 163] #[1 8 14 0 163 14 221 0 164] #[1 14 225 0 15 8 18 0 163 8 18 0 164 8 18 0 167 8 18 0 168] #[1 8 22 0 167 14 229 0 168] #[0 14 233 0 167] #[0 8 26 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 1 2 0 2 1 2 0 3 1 2 0 4 1 2 0 5 1 2 0 6 1 2 0 7 1 2 0 8 1 2 0 9 1 2 0 10 1 2 0 11 1 2 0 12 1 2 0 13 1 2 0 14 1 2 0 15 1 2 0 16 1 2 0 17 1 2 0 18 1 2 0 19 1 2 0 20 1 2 0 21 1 2 0 22 1 2 0 23 1 2 0 25 0 107 0 26 1 2 0 27 1 2 0 28 1 2 0 29 1 2 0 30 1 2 0 31 1 2 0 33 1 2 0 34 1 2 0 35 1 2 0 36 1 2 0 37 1 2 0 38 1 2 0 39 1 2 0 40 1 2 0 44 1 2 0 45 1 2 0 51 1 2 0 63 1 2 0 68 1 2 0 79 1 2 0 82 1 2 0 89 1 2 0 90 1 2 0 91 1 2 0 92 1 2 0 101 1 2 0 103 1 2 0 119 1 2 0 145 1 2 0 149 1 2 0 150 1 2 0 151 1 2 0 153 1 2 0 154 1 2 0 155 1 2 0 163 1 2 0 164 1 2 0 167 1 2 0 168 14 237 0 218 14 237 0 240 1 2 2 102] #[0 8 30 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[1 6 129 0 157 14 241 1 103 6 141 1 104] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 14 245 0 123 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 9 229 0 148 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 14 253 1 49 14 253 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 14 253 1 65 3 197 1 66 14 253 1 85 14 253 1 88 14 253 1 89 14 253 1 105 14 253 2 9 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88 14 253 2 100] #[0 8 34 0 32 0 148] #[1 2 198 0 49 2 198 0 52 2 198 0 55 2 198 0 60 2 198 0 65 2 198 0 76 2 198 0 86 2 198 0 94 2 198 0 100 6 181 0 104 6 181 0 114 2 198 0 117 2 198 0 121 2 198 0 125 2 198 0 134 2 198 0 135 2 198 0 138 2 198 0 142 2 198 0 157 15 9 1 57 6 181 1 58 6 181 1 59] #[1 1 70 0 10 1 74 0 35 1 78 0 37 15 13 0 157] #[0 8 38 0 32] #[0 15 21 0 157 1 63] #[0 15 25 0 85] #[1 4 214 0 1 4 214 0 5 4 214 0 8 4 218 0 9 4 214 0 10 4 214 0 12 4 214 0 13 4 214 0 16 4 214 0 17 4 214 0 47 4 214 0 48 4 214 0 49 4 214 0 52 4 214 0 55 4 214 0 56 4 214 0 60 4 214 0 61 4 214 0 62 4 214 0 65 4 214 0 72 4 214 0 76 4 214 0 79 4 214 0 86 4 214 0 94 4 214 0 97 4 214 0 99 4 214 0 100 4 214 0 104 4 214 0 114 4 214 0 117 4 214 0 121 4 214 0 122 4 214 0 125 4 214 0 128 4 214 0 130 4 214 0 133 4 214 0 134 4 214 0 135 4 214 0 136 4 214 0 138 4 214 0 152 0 243 0 157 4 214 0 158 4 214 0 159 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 165 4 214 0 166 4 214 0 169 4 214 0 170 15 29 0 222 10 117 0 223 10 121 0 224 10 125 0 225 10 129 0 226] #[0 8 42 0 2 0 3 0 5 0 6 0 9 0 10 0 12 0 15 0 16 0 21 0 23 0 25 0 26 0 27 0 29 0 31 0 33 0 35 0 36 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 8 46 0 2 0 3 0 5 0 6 0 9 0 10 0 12 0 15 0 16 0 21 0 23 0 25 0 26 0 27 0 29 0 31 0 33 0 35 0 36 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 8 50 0 2 0 3 0 5 0 6 0 9 0 10 0 12 0 15 0 16 0 21 0 23 0 25 0 26 0 27 0 29 0 31 0 33 0 35 0 36 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 2 210 0 2 0 3 0 5 0 6 0 9 0 10 0 12 0 15 0 16 0 21 0 23 0 25 0 26 0 27 0 29 0 31 0 33 0 35 0 36 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 8 54 0 2 6 217 0 3 8 54 0 5 8 54 0 6 8 54 0 9 6 221 0 10 8 54 0 12 8 54 0 15 8 54 0 16 6 225 0 21 8 54 0 23 8 54 0 25 8 54 0 26 8 54 0 27 8 54 0 29 8 54 0 31 8 54 0 33 8 54 0 35 8 54 0 36 8 54 0 38 8 54 0 39 8 54 0 44 8 54 0 45 8 54 0 51 8 54 0 63 8 54 0 68 8 54 0 79 8 54 0 82 8 54 0 89 8 54 0 90 8 54 0 91 8 54 0 92 8 54 0 101 8 54 0 103 8 54 0 119 8 54 0 145 8 54 0 149 8 54 0 151 8 54 0 153 8 54 0 154 8 54 0 155 8 54 0 163 8 54 0 164 8 54 0 167 8 54 0 168 8 54 2 102] #[1 8 58 0 2 6 217 0 3 8 58 0 5 8 58 0 6 8 58 0 9 6 221 0 10 8 58 0 12 8 58 0 15 8 58 0 16 6 225 0 21 8 58 0 23 8 58 0 25 8 58 0 26 8 58 0 27 8 58 0 29 8 58 0 31 8 58 0 33 8 58 0 35 8 58 0 36 8 58 0 38 8 58 0 39 8 58 0 44 8 58 0 45 8 58 0 51 8 58 0 63 8 58 0 68 8 58 0 79 8 58 0 82 8 58 0 89 8 58 0 90 8 58 0 91 8 58 0 92 8 58 0 101 8 58 0 103 8 58 0 119 8 58 0 145 8 58 0 149 8 58 0 151 8 58 0 153 8 58 0 154 8 58 0 155 8 58 0 163 8 58 0 164 8 58 0 167 8 58 0 168 8 58 2 102] #[1 8 62 0 2 8 62 0 5 8 62 0 6 8 62 0 9 6 229 0 12 8 62 0 15 6 233 0 16 8 62 0 23 8 62 0 25 8 62 0 26 8 62 0 27 8 62 0 29 8 62 0 31 8 62 0 33 8 62 0 35 8 62 0 36 8 62 0 38 8 62 0 39 8 62 0 44 8 62 0 45 8 62 0 51 8 62 0 63 8 62 0 68 8 62 0 79 8 62 0 82 8 62 0 89 8 62 0 90 8 62 0 91 8 62 0 92 8 62 0 101 8 62 0 103 8 62 0 119 8 62 0 145 8 62 0 149 8 62 0 151 8 62 0 153 8 62 0 154 8 62 0 155 8 62 0 163 8 62 0 164 8 62 0 167 8 62 0 168 8 62 2 102] #[1 8 66 0 2 8 66 0 5 8 66 0 6 8 66 0 9 6 229 0 12 8 66 0 15 6 233 0 16 8 66 0 23 8 66 0 25 8 66 0 26 8 66 0 27 8 66 0 29 8 66 0 31 8 66 0 33 8 66 0 35 8 66 0 36 8 66 0 38 8 66 0 39 8 66 0 44 8 66 0 45 8 66 0 51 8 66 0 63 8 66 0 68 8 66 0 79 8 66 0 82 8 66 0 89 8 66 0 90 8 66 0 91 8 66 0 92 8 66 0 101 8 66 0 103 8 66 0 119 8 66 0 145 8 66 0 149 8 66 0 151 8 66 0 153 8 66 0 154 8 66 0 155 8 66 0 163 8 66 0 164 8 66 0 167 8 66 0 168 8 66 2 102] #[1 8 70 0 2 8 70 0 5 8 70 0 6 8 70 0 9 8 70 0 15 8 70 0 23 8 70 0 25 8 70 0 26 6 237 0 27 8 70 0 29 8 70 0 31 8 70 0 33 8 70 0 35 8 70 0 36 8 70 0 38 8 70 0 39 8 70 0 44 8 70 0 45 8 70 0 51 8 70 0 63 8 70 0 68 8 70 0 79 8 70 0 82 8 70 0 89 8 70 0 90 8 70 0 91 8 70 0 92 8 70 0 101 8 70 0 103 8 70 0 119 8 70 0 145 8 70 0 149 8 70 0 151 8 70 0 153 6 241 0 154 8 70 0 155 8 70 0 163 8 70 0 164 8 70 0 167 8 70 0 168 8 70 2 102] #[1 8 74 0 2 8 74 0 5 8 74 0 6 8 74 0 9 8 74 0 15 8 74 0 23 8 74 0 25 8 74 0 26 6 237 0 27 8 74 0 29 8 74 0 31 8 74 0 33 8 74 0 35 8 74 0 36 8 74 0 38 8 74 0 39 8 74 0 44 8 74 0 45 8 74 0 51 8 74 0 63 8 74 0 68 8 74 0 79 8 74 0 82 8 74 0 89 8 74 0 90 8 74 0 91 8 74 0 92 8 74 0 101 8 74 0 103 8 74 0 119 8 74 0 145 8 74 0 149 8 74 0 151 8 74 0 153 6 241 0 154 8 74 0 155 8 74 0 163 8 74 0 164 8 74 0 167 8 74 0 168 8 74 2 102] #[1 8 78 0 2 8 78 0 5 8 78 0 6 8 78 0 9 8 78 0 15 8 78 0 23 8 78 0 25 8 78 0 26 6 237 0 27 8 78 0 29 8 78 0 31 8 78 0 33 8 78 0 35 8 78 0 36 8 78 0 38 8 78 0 39 8 78 0 44 8 78 0 45 8 78 0 51 8 78 0 63 8 78 0 68 8 78 0 79 8 78 0 82 8 78 0 89 8 78 0 90 8 78 0 91 8 78 0 92 8 78 0 101 8 78 0 103 8 78 0 119 8 78 0 145 8 78 0 149 8 78 0 151 8 78 0 153 6 241 0 154 8 78 0 155 8 78 0 163 8 78 0 164 8 78 0 167 8 78 0 168 8 78 2 102] #[1 8 82 0 2 8 82 0 5 8 82 0 6 8 82 0 9 1 70 0 10 8 82 0 15 8 82 0 23 8 82 0 25 8 82 0 26 8 82 0 29 8 82 0 31 8 82 0 33 2 127 0 35 8 82 0 36 1 78 0 37 8 82 0 38 8 82 0 39 8 82 0 44 8 82 0 45 8 82 0 51 8 82 0 63 8 82 0 68 8 82 0 79 8 82 0 82 8 82 0 89 8 82 0 90 8 82 0 91 8 82 0 92 8 82 0 101 8 82 0 103 8 82 0 119 8 82 0 145 8 82 0 149 8 82 0 151 8 82 0 153 8 82 0 155 8 82 0 163 8 82 0 164 8 82 0 167 8 82 0 168 8 82 2 102] #[1 8 86 0 2 8 86 0 5 8 86 0 6 8 86 0 9 1 70 0 10 8 86 0 15 8 86 0 23 8 86 0 25 8 86 0 26 8 86 0 29 8 86 0 31 8 86 0 33 2 131 0 35 8 86 0 36 1 78 0 37 8 86 0 38 8 86 0 39 8 86 0 44 8 86 0 45 8 86 0 51 8 86 0 63 8 86 0 68 8 86 0 79 8 86 0 82 8 86 0 89 8 86 0 90 8 86 0 91 8 86 0 92 8 86 0 101 8 86 0 103 8 86 0 119 8 86 0 145 8 86 0 149 8 86 0 151 8 86 0 153 8 86 0 155 8 86 0 163 8 86 0 164 8 86 0 167 8 86 0 168 8 86 2 102] #[1 8 90 0 2 8 90 0 5 8 90 0 6 8 90 0 9 8 90 0 15 8 90 0 23 8 90 0 25 8 90 0 26 6 237 0 27 8 90 0 29 8 90 0 31 8 90 0 33 8 90 0 35 8 90 0 36 8 90 0 38 8 90 0 39 8 90 0 44 8 90 0 45 8 90 0 51 8 90 0 63 8 90 0 68 8 90 0 79 8 90 0 82 8 90 0 89 8 90 0 90 8 90 0 91 8 90 0 92 8 90 0 101 8 90 0 103 8 90 0 119 8 90 0 145 8 90 0 149 8 90 0 151 8 90 0 153 6 241 0 154 8 90 0 155 8 90 0 163 8 90 0 164 8 90 0 167 8 90 0 168 8 90 2 102] #[1 8 94 0 2 8 94 0 5 8 94 0 6 8 94 0 9 8 94 0 15 8 94 0 23 8 94 0 25 6 245 0 26 6 249 0 29 8 94 0 31 6 253 0 33 8 94 0 35 8 94 0 36 8 94 0 38 8 94 0 39 7 1 0 44 8 94 0 45 8 94 0 51 8 94 0 63 8 94 0 68 8 94 0 79 8 94 0 82 8 94 0 89 7 5 0 90 8 94 0 91 8 94 0 92 8 94 0 101 8 94 0 103 8 94 0 119 8 94 0 145 8 94 0 149 8 94 0 151 7 9 0 153 8 94 0 155 8 94 0 163 8 94 0 164 8 94 0 167 8 94 0 168 8 94 2 102] #[1 8 98 0 2 8 98 0 5 8 98 0 6 8 98 0 9 8 98 0 15 8 98 0 23 8 98 0 25 6 245 0 26 6 249 0 29 8 98 0 31 6 253 0 33 8 98 0 35 8 98 0 36 8 98 0 38 8 98 0 39 7 1 0 44 8 98 0 45 8 98 0 51 8 98 0 63 8 98 0 68 8 98 0 79 8 98 0 82 8 98 0 89 7 5 0 90 8 98 0 91 8 98 0 92 8 98 0 101 8 98 0 103 8 98 0 119 8 98 0 145 8 98 0 149 8 98 0 151 7 9 0 153 8 98 0 155 8 98 0 163 8 98 0 164 8 98 0 167 8 98 0 168 8 98 2 102] #[1 7 13 0 2 8 102 0 5 8 102 0 6 8 102 0 9 8 102 0 15 8 102 0 23 8 102 0 25 7 17 0 31 8 102 0 35 8 102 0 36 8 102 0 38 8 102 0 39 8 102 0 45 8 102 0 51 8 102 0 63 8 102 0 68 8 102 0 79 8 102 0 82 8 102 0 89 8 102 0 91 8 102 0 92 8 102 0 101 8 102 0 103 8 102 0 119 8 102 0 145 8 102 0 149 8 102 0 151 8 102 0 155 8 102 0 163 8 102 0 164 8 102 0 167 8 102 0 168 8 102 2 102] #[1 7 21 0 5 8 106 0 6 8 106 0 9 8 106 0 15 8 106 0 23 8 106 0 25 8 106 0 35 8 106 0 36 8 106 0 38 8 106 0 39 8 106 0 45 8 106 0 51 8 106 0 63 8 106 0 68 8 106 0 79 8 106 0 82 8 106 0 89 8 106 0 91 8 106 0 92 8 106 0 101 8 106 0 103 8 106 0 119 8 106 0 145 8 106 0 149 8 106 0 151 8 106 0 155 8 106 0 163 8 106 0 164 8 106 0 167 8 106 0 168 8 106 2 102] #[1 8 110 0 6 8 110 0 9 8 110 0 15 8 110 0 23 8 110 0 25 8 110 0 35 8 110 0 36 8 110 0 38 7 25 0 39 8 110 0 45 8 110 0 51 8 110 0 63 8 110 0 68 8 110 0 79 8 110 0 82 8 110 0 89 8 110 0 91 8 110 0 92 8 110 0 101 8 110 0 103 8 110 0 119 8 110 0 145 8 110 0 149 8 110 0 151 8 110 0 155 8 110 0 163 8 110 0 164 8 110 0 167 8 110 0 168 8 110 2 102] #[1 8 114 0 6 8 114 0 9 8 114 0 15 8 114 0 23 8 114 0 25 8 114 0 35 8 114 0 36 8 114 0 38 8 114 0 45 8 114 0 51 8 114 0 63 8 114 0 68 8 114 0 79 8 114 0 82 8 114 0 89 8 114 0 91 8 114 0 92 8 114 0 101 8 114 0 103 8 114 0 119 8 114 0 145 7 29 0 149 8 114 0 151 8 114 0 155 8 114 0 163 8 114 0 164 8 114 0 167 8 114 0 168 8 114 2 102] #[0 8 118 0 9 0 15 0 23 0 25 0 35 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[1 7 33 0 6 8 122 0 9 8 122 0 15 8 122 0 23 8 122 0 25 8 122 0 35 8 122 0 36 8 122 0 38 8 122 0 45 8 122 0 51 8 122 0 63 8 122 0 68 8 122 0 79 8 122 0 82 8 122 0 89 8 122 0 91 8 122 0 92 8 122 0 101 8 122 0 103 8 122 0 119 8 122 0 145 8 122 0 151 8 122 0 155 8 122 0 163 8 122 0 164 8 122 0 167 8 122 0 168 8 122 2 102] #[0 15 33 0 23] #[0 8 126 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[0 8 130 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[0 8 134 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[0 15 37 0 157] #[0 15 41 0 30] #[1 15 45 0 15 8 138 0 79 8 138 0 82 8 138 0 91 8 138 0 92 8 138 0 103 8 138 0 119 8 138 0 145] #[0 8 142 0 15 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[1 8 146 0 15 15 49 0 45 15 53 0 63 8 146 0 79 8 146 0 82 8 146 0 91 8 146 0 92 8 146 0 103 8 146 0 119 8 146 0 145 15 57 1 78 15 61 1 79] #[0 8 150 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 15 65 1 49 15 65 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 15 65 1 65 3 197 1 66 15 65 1 85 15 65 1 88 15 65 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 15 69 1 49 15 69 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 15 69 1 65 3 197 1 66 15 69 1 85 15 69 1 88 15 69 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 8 154 0 9 8 154 0 15 8 154 0 23 8 154 0 25 8 154 0 38 8 154 0 45 8 154 0 51 8 154 0 63 8 154 0 68 8 154 0 79 8 154 0 82 2 135 0 89 8 154 0 91 8 154 0 92 8 154 0 101 8 154 0 103 8 154 0 119 8 154 0 145 8 154 0 155 8 154 0 163 8 154 0 164 8 154 0 167 8 154 0 168 15 77 1 83 15 81 1 84 8 154 2 102] #[0 8 158 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[0 8 162 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[0 8 166 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 15 85 0 25] #[0 5 182 0 124 0 137 0 152 0 157] #[0 6 150 0 71 0 124 0 152 0 157] #[1 15 89 0 137 2 139 0 157 15 89 2 80] #[1 15 93 0 71 3 106 0 157 15 93 2 77] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 15 97 0 197 15 97 0 198 15 97 0 199 15 97 0 200 1 145 0 201 1 145 0 202 1 145 0 203 15 97 0 204 1 161 0 205 15 97 0 206 15 97 0 207 15 97 0 208 15 97 0 209 15 97 0 210 1 185 0 211 15 97 0 217 15 97 1 159 15 97 2 82 2 229 2 83 3 1 2 101] #[0 5 206 0 58 0 88 0 99 0 109 0 111 0 112] #[0 5 234 0 58 0 88 0 99 0 109 0 111 0 112] #[0 6 18 0 58 0 88 0 99 0 109 0 111 0 112] #[0 6 46 0 58 0 88 0 99 0 109 0 111 0 112] #[0 6 78 0 58 0 88 0 99 0 109 0 111 0 112] #[0 8 174 0 58 0 88 0 99 0 109 0 111 0 112] #[1 1 70 0 10 1 74 0 35 1 78 0 37 15 101 0 157 15 105 1 185 15 109 1 186] #[0 5 202 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 88 0 94 0 99 0 100 0 109 0 111 0 112 0 113 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 143 0 157] #[0 5 230 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 88 0 94 0 99 0 100 0 109 0 111 0 112 0 113 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 143 0 157] #[0 6 14 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 88 0 94 0 99 0 100 0 109 0 111 0 112 0 113 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 143 0 157] #[0 6 42 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 88 0 94 0 99 0 100 0 109 0 111 0 112 0 113 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 143 0 157] #[0 6 74 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 88 0 94 0 99 0 100 0 109 0 111 0 112 0 113 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 143 0 157] #[0 6 118 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 88 0 94 0 99 0 100 0 109 0 111 0 112 0 113 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 143 0 157] #[0 6 146 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 88 0 94 0 99 0 100 0 109 0 111 0 112 0 113 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 143 0 157] #[0 8 178 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 88 0 94 0 99 0 100 0 109 0 111 0 112 0 113 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 143 0 157] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 13 129 0 197 13 129 0 198 13 129 0 199 13 129 0 200 1 145 0 201 1 145 0 202 1 145 0 203 13 129 0 204 1 161 0 205 13 129 0 206 13 129 0 207 13 129 0 208 13 129 0 209 13 129 0 210 1 185 0 211 13 129 0 217 13 129 1 159 15 113 1 193 13 129 2 82 2 229 2 83 13 137 2 101] #[0 5 150 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 5 158 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 5 186 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 5 222 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 5 246 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 6 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 26 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 58 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 90 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 114 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 138 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 170 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 8 182 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[1 1 70 0 10 1 74 0 35 1 78 0 37 15 117 0 157 1 125 0 192 15 125 0 194 1 125 0 195 15 125 0 209 15 129 1 194] #[0 5 146 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 5 170 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 5 198 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 5 226 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 5 242 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 5 254 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 38 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 54 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 98 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 110 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 126 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 158 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 8 186 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 15 133 0 197 15 133 0 198 15 133 0 199 15 133 0 200 1 145 0 201 1 145 0 202 1 145 0 203 15 133 0 204 1 161 0 205 15 133 0 206 15 133 0 207 15 133 0 208 15 133 0 209 15 133 0 210 1 185 0 211 15 133 0 217 15 133 1 159 15 133 2 82 2 229 2 83 3 1 2 101] #[0 5 142 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[0 5 162 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[0 5 190 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[0 5 214 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[0 5 250 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[0 6 10 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[0 6 34 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[0 6 66 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[0 6 102 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[0 6 106 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[0 6 130 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[0 6 162 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[0 8 190 0 41 0 69 0 71 0 88 0 99 0 105 0 109 0 111 0 112 0 118 0 124 0 137 0 141] #[1 1 70 0 10 1 74 0 35 1 78 0 37 15 137 0 128 8 73 0 157 1 125 0 192 15 141 0 194 1 125 0 195 15 141 0 209] #[1 15 145 0 32 15 149 0 148 15 153 1 232] #[0 5 154 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 5 166 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 5 194 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 5 218 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 5 238 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 2 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 30 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 62 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 94 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 134 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 6 166 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 8 194 0 41 0 49 0 52 0 55 0 60 0 65 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 157] #[0 15 157 0 102] #[0 5 174 0 49 0 52 0 55 0 60 0 65 0 70 0 71 0 76 0 84 0 86 0 94 0 100 0 112 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 157] #[0 15 161 0 102] #[0 6 70 0 49 0 52 0 55 0 60 0 65 0 70 0 71 0 76 0 84 0 86 0 94 0 100 0 112 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 157] #[0 6 122 0 49 0 52 0 55 0 60 0 65 0 70 0 71 0 76 0 84 0 86 0 94 0 100 0 112 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 157] #[0 6 142 0 49 0 52 0 55 0 60 0 65 0 70 0 71 0 76 0 84 0 86 0 94 0 100 0 112 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 157] #[1 1 70 0 10 1 74 0 35 1 78 0 37 15 165 0 102] #[0 8 198 0 49 0 52 0 55 0 60 0 65 0 70 0 71 0 76 0 84 0 86 0 94 0 100 0 112 0 117 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 142 0 157] #[1 15 169 0 25 15 173 0 32 1 77 0 148 15 177 1 94 15 181 1 242] #[0 8 202 0 25 0 32 0 148] #[0 8 206 0 25 0 32 0 148] #[0 8 210 0 25 0 32 0 148] #[0 15 185 0 8] #[1 15 189 0 25 1 77 0 148 15 193 1 94 15 197 1 250] #[0 5 178 0 71 0 88 0 109 0 111 0 112 0 137 0 157] #[0 5 210 0 71 0 88 0 109 0 111 0 112 0 137 0 157] #[0 6 22 0 71 0 88 0 109 0 111 0 112 0 137 0 157] #[0 6 50 0 71 0 88 0 109 0 111 0 112 0 137 0 157] #[0 6 82 0 71 0 88 0 109 0 111 0 112 0 137 0 157] #[0 6 154 0 71 0 88 0 109 0 111 0 112 0 137 0 157] #[0 8 214 0 71 0 88 0 109 0 111 0 112 0 137 0 157] #[0 15 201 0 8] #[1 15 205 0 137 8 218 0 157] #[1 15 209 0 124 15 213 0 152] #[1 15 217 0 71 3 106 0 157 15 217 2 77] #[1 15 221 0 124 15 225 0 152] #[0 8 222 0 37 0 41 0 57 0 62 0 67 0 71 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 139 0 155 2 102] #[0 15 229 0 25] #[1 8 73 0 157 15 233 0 192 15 233 0 195] #[0 8 226 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 139 0 155 2 102] #[0 8 230 0 23] #[0 8 234 0 23] #[1 8 73 0 157 1 125 0 192 8 89 0 194 1 125 0 195 15 237 2 61 8 85 2 62 8 89 2 63] #[0 15 241 0 23] #[0 8 238 2 102] #[1 0 49 0 37 0 10 0 41 0 10 0 57 0 10 0 62 0 10 0 67 0 10 0 87 0 10 0 88 0 53 0 98 0 10 0 99 0 10 0 108 0 10 0 109 0 10 0 111 0 10 0 112 0 10 0 118 0 10 0 124 0 10 0 126 0 10 0 137 8 242 0 155 15 245 0 176 15 245 0 190 15 245 0 191 15 245 1 152 15 245 1 254 15 245 2 12 15 245 2 34 15 245 2 44 0 89 2 54 0 93 2 55 0 97 2 56 0 101 2 57 8 242 2 102] #[0 8 246 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 155 2 102] #[0 8 250 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 2 102] #[1 15 249 0 38 8 73 0 157 1 125 0 192 8 89 0 194 1 125 0 195 15 253 2 62 8 89 2 63] #[0 8 254 0 37 0 41 0 42 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 80 0 85 0 86 0 87 0 88 0 94 0 99 0 100 0 104 0 105 0 107 0 108 0 109 0 111 0 112 0 113 0 114 0 115 0 117 0 118 0 120 0 121 0 124 0 125 0 126 0 128 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 157] #[1 0 105 0 1 0 109 0 5 3 5 0 8 9 2 0 9 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 16 1 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 16 17 1 49 16 17 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 16 17 1 65 3 197 1 66 16 17 1 85 16 17 1 88 16 17 1 89 16 9 2 66 16 13 2 67 16 17 2 68 16 21 2 69 16 25 2 70 16 17 2 71 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 9 6 0 15 0 38] #[0 9 10 0 15 0 38] #[0 9 14 0 20 0 148] #[1 0 22 0 37 0 22 0 41 0 22 0 57 0 22 0 62 0 22 0 67 0 22 0 87 0 22 0 88 0 22 0 98 0 22 0 99 0 22 0 108 0 22 0 109 0 22 0 111 0 22 0 112 0 22 0 118 0 22 0 124 0 22 0 126 0 22 0 137 4 21 0 139 0 22 0 155 16 33 0 182 4 29 0 183 4 33 0 184 4 33 0 185 4 33 0 186 4 33 0 187] #[0 9 18 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 9 22 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 155 2 102] #[0 16 37 0 157] #[0 16 41 0 157] #[0 16 45 0 157] #[1 16 49 0 23 9 26 0 148 16 53 2 35 16 57 2 36] #[1 1 70 0 10 1 74 0 35 1 78 0 37 9 30 0 157] #[0 16 61 0 157] #[1 6 157 0 10 9 34 0 157] #[0 9 38 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 16 65 1 49 16 65 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 16 65 1 65 3 197 1 66 16 65 1 85 16 65 1 88 16 65 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 9 42 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 9 46 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 16 69 1 49 16 69 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 16 69 1 65 3 197 1 66 16 69 1 85 16 69 1 88 16 69 1 89 16 69 1 90 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 9 41 0 157 16 73 1 108] #[0 9 50 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 16 77 1 49 16 77 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 16 77 1 65 3 197 1 66 16 77 1 85 16 77 1 88 16 77 1 89 16 77 1 91 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 16 81 0 30] #[1 16 85 0 9 16 89 0 15] #[0 9 54 0 9 0 15] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 9 58 0 25 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 16 97 1 49 16 97 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 16 97 1 65 3 197 1 66 16 97 1 85 16 97 1 88 16 97 1 89 16 97 1 91 16 97 1 126 16 97 1 127 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 16 105 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 16 105 1 85 16 105 1 110 1 197 2 72 2 217 2 73 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88] #[0 16 109 0 85] #[0 9 62 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 3 9 0 49 0 153 0 50 3 13 0 52 3 17 0 55 0 165 0 56 0 173 0 59 3 25 0 60 0 181 0 61 0 185 0 62 0 189 0 64 3 29 0 65 2 217 0 72 0 201 0 75 3 33 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 3 41 0 86 0 229 0 93 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 0 249 0 116 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 3 65 0 134 3 69 0 135 1 45 0 136 1 49 0 137 3 77 0 138 1 57 0 139 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 16 113 1 93 16 113 1 94 16 113 1 97 16 113 1 109 2 125 1 110 16 113 1 111 16 113 1 112 16 113 1 113 16 113 1 120 16 113 1 121 16 113 1 122 16 113 1 123 16 113 1 131 16 113 1 132 16 113 1 133 16 113 1 134 16 113 1 135 16 113 1 136 16 113 1 137 16 113 1 138 16 113 1 146 16 113 1 147 16 113 1 148 16 113 1 149 16 113 1 151 1 197 2 72 2 217 2 73 16 113 2 81 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 16 113 2 89] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 3 9 0 49 0 153 0 50 3 13 0 52 3 17 0 55 0 165 0 56 0 173 0 59 3 25 0 60 0 181 0 61 0 185 0 62 0 189 0 64 3 29 0 65 2 217 0 72 0 201 0 75 3 33 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 3 41 0 86 0 229 0 93 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 0 249 0 116 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 3 65 0 134 3 69 0 135 1 45 0 136 1 49 0 137 3 77 0 138 1 57 0 139 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 16 117 1 93 16 117 1 94 16 117 1 97 16 117 1 109 2 125 1 110 16 117 1 111 16 117 1 112 16 117 1 113 16 117 1 120 16 117 1 121 16 117 1 122 16 117 1 123 16 117 1 131 16 117 1 132 16 117 1 133 16 117 1 134 16 117 1 135 16 117 1 136 16 117 1 137 16 117 1 138 16 117 1 146 16 117 1 147 16 117 1 148 16 117 1 149 16 117 1 151 1 197 2 72 2 217 2 73 16 117 2 81 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 16 117 2 89] #[0 9 66 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 16 121 0 157] #[0 9 70 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 150 0 151 0 153 0 154 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 9 74 0 15 0 38] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 16 125 1 49 16 125 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 16 125 1 65 3 197 1 66 16 125 1 85 16 125 1 88 16 125 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 16 129 0 35] #[1 10 229 0 8 16 133 0 20 4 234 0 35 10 153 0 37] #[0 9 78 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 9 169 0 8 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 16 137 0 155 9 173 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 9 177 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 9 181 0 239 1 197 0 241 9 185 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 9 189 0 250 1 197 0 251 1 197 0 252 1 197 0 253 9 177 1 9 1 197 1 10 1 197 1 11 16 141 1 15 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 9 205 1 32 1 197 1 51 1 197 2 72 2 217 2 73 1 197 2 85 1 197 2 86 1 197 2 88] #[0 16 145 0 9] #[1 4 214 0 1 4 214 0 5 4 214 0 8 4 214 0 10 4 214 0 12 4 214 0 13 4 214 0 16 4 214 0 17 4 214 0 47 4 214 0 48 4 214 0 49 4 214 0 52 4 214 0 55 4 214 0 56 4 214 0 60 4 214 0 61 4 214 0 62 4 214 0 65 4 214 0 72 4 214 0 76 4 214 0 79 4 214 0 86 4 214 0 94 4 214 0 97 4 214 0 99 4 214 0 100 4 214 0 104 4 214 0 114 4 214 0 117 4 214 0 121 4 214 0 122 4 214 0 125 4 214 0 128 4 214 0 130 4 214 0 133 4 214 0 134 4 214 0 135 4 214 0 136 4 214 0 138 4 214 0 152 0 243 0 157 4 214 0 158 4 214 0 159 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 165 4 214 0 166 4 214 0 169 4 214 0 170 16 149 0 223 10 121 0 224 10 125 0 225 10 129 0 226] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 16 153 0 248 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 9 29 1 49 9 29 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 9 29 1 65 3 197 1 66 9 29 1 85 9 29 1 88 9 29 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 1 2 0 2 1 2 0 3 1 2 0 5 1 2 0 6 1 2 0 8 1 2 0 10 1 2 0 12 1 2 0 13 1 2 0 15 1 2 0 16 1 2 0 17 1 2 0 19 1 2 0 20 1 2 0 21 5 253 0 24 0 107 0 26 1 2 0 27 1 2 0 29 9 82 0 30 1 2 0 31 2 206 0 32 1 2 0 33 1 2 0 35 1 2 0 36 1 2 0 37 1 2 0 39 1 2 0 44 1 2 0 90 1 2 0 149 1 2 0 151 1 2 0 153 1 2 0 154 1 2 0 155 6 209 0 218 6 209 0 240] #[0 16 157 0 155] #[1 16 161 0 15 9 86 0 155] #[0 9 90 0 15 0 155] #[0 16 165 0 30] #[1 16 169 0 15 16 173 0 155] #[0 9 94 0 15 0 155] #[0 9 98 0 15 0 155] #[0 9 102 0 15 0 25 0 155] #[0 9 106 0 15 0 155] #[0 9 110 0 15 0 25 0 155] #[0 16 177 0 155] #[1 16 181 0 15 9 114 0 155] #[1 13 145 0 15 16 185 0 38] #[0 16 189 0 9] #[0 9 118 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 16 193 0 148 16 197 1 114] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 16 201 0 197 16 201 0 198 16 201 0 199 16 201 0 200 1 145 0 201 1 145 0 202 1 145 0 203 16 201 0 204 1 161 0 205 16 201 0 206 16 201 0 207 16 201 0 208 16 201 0 209 16 201 0 210 1 185 0 211 16 201 0 217 16 201 1 159 16 201 2 82 2 229 2 83 3 1 2 101] #[1 16 205 0 144 9 122 0 148 16 209 1 143 16 209 1 144] #[0 9 126 0 144 0 148] #[0 9 130 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 9 134 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 74 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 9 138 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 16 217 0 157] #[1 16 221 0 15 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 9 142 0 153 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 10 89 0 197 10 89 0 198 10 89 0 199 10 89 0 200 1 145 0 201 1 145 0 202 1 145 0 203 10 89 0 204 1 161 0 205 10 89 0 206 10 89 0 207 10 89 0 208 10 89 0 209 10 89 0 210 1 185 0 211 10 89 0 217 10 93 0 219 10 97 0 220 16 225 1 20 16 229 1 21 10 89 1 159 10 89 2 82 2 229 2 83 3 1 2 101] #[0 9 146 0 9 0 20] #[0 9 150 0 9 0 20] #[0 9 154 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 9 158 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 16 233 0 157] #[0 9 162 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 9 166 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 3 9 0 49 0 153 0 50 3 13 0 52 3 17 0 55 0 165 0 56 0 173 0 59 3 25 0 60 0 181 0 61 0 185 0 62 0 189 0 64 3 29 0 65 2 217 0 72 0 201 0 75 3 33 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 3 41 0 86 0 229 0 93 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 0 249 0 116 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 3 65 0 134 3 69 0 135 1 45 0 136 1 49 0 137 3 77 0 138 1 57 0 139 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 16 237 1 93 16 237 1 94 16 237 1 97 16 237 1 109 2 125 1 110 16 237 1 111 16 237 1 112 16 237 1 113 16 237 1 120 16 237 1 121 16 237 1 122 16 237 1 123 16 237 1 131 16 237 1 132 16 237 1 133 16 237 1 134 16 237 1 135 16 237 1 136 16 237 1 137 16 237 1 138 16 237 1 146 16 237 1 147 16 237 1 148 16 237 1 149 16 237 1 151 1 197 2 72 2 217 2 73 16 237 2 81 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 16 237 2 89] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 3 9 0 49 0 153 0 50 3 13 0 52 3 17 0 55 0 165 0 56 0 173 0 59 3 25 0 60 0 181 0 61 0 185 0 62 0 189 0 64 3 29 0 65 2 217 0 72 0 201 0 75 3 33 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 3 41 0 86 0 229 0 93 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 0 249 0 116 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 3 65 0 134 3 69 0 135 1 45 0 136 1 49 0 137 3 77 0 138 1 57 0 139 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 16 241 1 93 16 241 1 94 16 241 1 97 16 241 1 109 2 125 1 110 16 241 1 111 16 241 1 112 16 241 1 113 16 241 1 120 16 241 1 121 16 241 1 122 16 241 1 123 16 241 1 131 16 241 1 132 16 241 1 133 16 241 1 134 16 241 1 135 16 241 1 136 16 241 1 137 16 241 1 138 16 241 1 146 16 241 1 147 16 241 1 148 16 241 1 149 16 241 1 151 1 197 2 72 2 217 2 73 16 241 2 81 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 16 241 2 89] #[0 9 170 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 9 174 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 20 0 23 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 10 89 0 197 10 89 0 198 10 89 0 199 10 89 0 200 1 145 0 201 1 145 0 202 1 145 0 203 10 89 0 204 1 161 0 205 10 89 0 206 10 89 0 207 10 89 0 208 10 89 0 209 10 89 0 210 1 185 0 211 10 89 0 217 16 245 0 220 10 89 1 159 10 89 2 82 2 229 2 83 3 1 2 101] #[0 9 178 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 150 0 151 0 153 0 154 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 9 182 0 2 0 5 0 6 0 8 0 9 0 10 0 15 0 20 0 23 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 36 0 37 0 38 0 39 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 102 0 103 0 119 0 128 0 145 0 148 0 149 0 151 0 153 0 155 0 157 0 163 0 164 0 167 0 168 2 102] #[0 9 186 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 47 0 48 0 49 0 52 0 55 0 56 0 60 0 61 0 62 0 65 0 72 0 76 0 79 0 86 0 94 0 97 0 99 0 100 0 104 0 114 0 117 0 121 0 122 0 125 0 128 0 130 0 133 0 134 0 135 0 136 0 138 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 9 190 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 4 214 0 1 4 214 0 5 4 214 0 8 4 214 0 10 4 214 0 12 4 214 0 13 4 214 0 16 4 214 0 17 4 214 0 47 4 214 0 48 4 214 0 49 4 214 0 52 4 214 0 55 4 214 0 56 4 214 0 60 4 214 0 61 4 214 0 62 4 214 0 65 4 214 0 72 4 214 0 76 4 214 0 79 4 214 0 86 4 214 0 94 4 214 0 97 4 214 0 99 4 214 0 100 4 214 0 104 4 214 0 114 4 214 0 117 4 214 0 121 4 214 0 122 4 214 0 125 4 214 0 128 4 214 0 130 4 214 0 133 4 214 0 134 4 214 0 135 4 214 0 136 4 214 0 138 4 214 0 152 0 243 0 157 4 214 0 158 4 214 0 159 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 165 4 214 0 166 4 214 0 169 4 214 0 170 16 249 0 224 10 125 0 225 10 129 0 226] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 0 149 0 49 0 157 0 52 0 161 0 55 3 21 0 56 0 177 0 60 0 181 0 61 0 185 0 62 0 193 0 65 2 217 0 72 0 205 0 76 3 37 0 79 0 225 0 86 0 233 0 94 0 237 0 97 0 241 0 99 0 245 0 100 0 253 0 117 1 1 0 121 1 5 0 122 1 9 0 125 1 17 0 128 2 217 0 130 1 33 0 133 1 37 0 134 1 41 0 135 3 73 0 136 1 53 0 138 1 65 0 142 1 81 0 152 4 213 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 1 117 0 192 1 121 0 194 1 125 0 195 16 253 0 197 16 253 0 198 16 253 0 199 16 253 0 200 1 145 0 201 1 145 0 202 1 145 0 203 16 253 0 204 1 161 0 205 16 253 0 206 16 253 0 207 16 253 0 208 16 253 0 209 16 253 0 210 1 185 0 211 16 253 0 217 17 5 0 221 17 5 0 228 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 17 5 1 49 17 5 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 17 5 1 65 3 197 1 66 17 5 1 85 17 5 1 88 17 5 1 89 16 253 1 159 1 197 2 72 2 217 2 73 16 253 2 82 2 229 2 83 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88 3 1 2 101] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 17 13 0 221 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 17 13 1 49 17 13 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 17 13 1 65 3 197 1 66 17 13 1 85 17 13 1 88 17 13 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 9 194 0 9 0 15 0 38] #[0 9 198 0 9 0 15 0 38] #[0 9 202 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 17 17 0 157] #[1 4 214 0 1 4 214 0 5 4 214 0 8 4 214 0 10 4 214 0 12 4 214 0 13 4 214 0 16 4 214 0 17 4 214 0 47 4 214 0 48 4 214 0 49 4 214 0 52 4 214 0 55 4 214 0 56 4 214 0 60 4 214 0 61 4 214 0 62 4 214 0 65 4 214 0 72 4 214 0 76 4 214 0 79 4 214 0 86 4 214 0 94 4 214 0 97 4 214 0 99 4 214 0 100 4 214 0 104 4 214 0 114 4 214 0 117 4 214 0 121 4 214 0 122 4 214 0 125 4 214 0 128 4 214 0 130 4 214 0 133 4 214 0 134 4 214 0 135 4 214 0 136 4 214 0 138 4 214 0 152 0 243 0 157 4 214 0 158 4 214 0 159 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 165 4 214 0 166 4 214 0 169 4 214 0 170 17 21 0 223 10 121 0 224 10 125 0 225 10 129 0 226] #[0 17 25 0 9] #[1 1 2 0 2 1 2 0 3 1 2 0 4 1 2 0 5 1 2 0 6 1 2 0 7 1 2 0 8 1 2 0 9 1 2 0 10 1 2 0 11 1 2 0 12 1 2 0 14 1 2 0 15 1 2 0 16 1 2 0 18 1 2 0 20 1 2 0 21 1 2 0 22 1 2 0 23 1 2 0 25 0 107 0 26 1 2 0 27 1 2 0 28 1 2 0 29 1 2 0 30 1 2 0 31 1 2 0 33 1 2 0 34 1 2 0 35 1 2 0 36 1 2 0 37 1 2 0 38 1 2 0 39 1 2 0 40 1 2 0 44 1 2 0 45 1 2 0 51 1 2 0 63 1 2 0 68 1 2 0 79 1 2 0 82 1 2 0 89 1 2 0 90 1 2 0 91 1 2 0 92 1 2 0 101 1 2 0 103 1 2 0 119 1 2 0 145 1 2 0 149 1 2 0 150 1 2 0 151 1 2 0 153 1 2 0 154 1 2 0 155 1 2 0 163 1 2 0 164 1 2 0 167 1 2 0 168 17 29 0 218 17 29 0 240 1 2 2 102] #[1 14 165 0 15 17 33 0 38] #[0 9 206 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 9 210 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 9 214 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 17 37 0 235 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 10 173 1 49 10 173 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 10 173 1 65 3 197 1 66 10 173 1 85 10 173 1 88 10 173 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 17 41 1 49 17 41 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 17 41 1 65 3 197 1 66 17 41 1 85 17 41 1 88 17 41 1 89 17 41 1 90 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 17 45 0 235 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 10 173 1 49 10 173 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 10 173 1 65 3 197 1 66 10 173 1 85 10 173 1 88 10 173 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 9 218 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 9 222 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 9 226 0 9 0 15 0 25] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 9 65 0 197 9 65 0 198 9 65 0 199 9 65 0 200 1 145 0 201 1 145 0 202 1 145 0 203 9 65 0 204 1 161 0 205 9 65 0 206 9 65 0 207 9 65 0 208 9 65 0 209 9 65 0 210 1 185 0 211 9 65 0 217 9 65 1 159 9 65 2 82 17 49 2 83 3 1 2 101] #[0 9 230 0 9 0 15 0 25] #[0 9 234 0 9 0 15 0 25] #[0 9 238 0 9 0 15 0 25] #[0 9 242 0 9 0 15 0 25] #[0 9 246 0 9 0 15] #[0 9 250 0 9 0 15] #[0 2 206 0 9 0 15] #[0 9 254 0 9 0 15] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 17 53 1 49 17 53 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 17 53 1 65 3 197 1 66 17 53 1 85 17 53 1 88 17 53 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 17 57 0 9] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 17 61 1 49 17 61 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 17 61 1 65 3 197 1 66 17 61 1 85 17 61 1 88 17 61 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 17 65 0 85] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 17 69 1 49 17 69 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 17 69 1 65 3 197 1 66 17 69 1 85 17 69 1 88 17 69 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 11 97 1 49 11 97 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 11 97 1 65 3 197 1 66 17 73 1 77 11 97 1 85 11 97 1 88 11 97 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 10 2 0 15 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 10 6 0 15 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 10 10 0 15 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 10 14 0 15 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 17 77 0 51] #[0 10 18 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[0 17 81 0 157] #[0 10 22 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[0 10 26 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[0 10 30 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 10 34 0 157] #[0 10 38 0 157] #[1 1 70 0 10 1 74 0 35 1 78 0 37 17 85 0 157 17 89 1 179 17 93 1 180] #[1 10 42 0 15 10 42 0 25 17 97 0 30] #[1 17 101 0 15 17 105 0 25] #[0 10 46 0 15 0 25] #[1 15 117 0 157 1 125 0 192 15 125 0 194 1 125 0 195 15 125 0 209 17 109 1 194] #[1 10 50 0 8 1 2 0 20 5 253 0 24 2 143 0 26 10 50 0 32 10 50 0 148 9 37 0 218 9 37 0 240] #[0 1 46 0 15 0 20 0 25 0 32 0 145 0 148] #[0 17 113 0 20] #[1 17 117 0 32 17 121 0 148 17 125 1 209] #[1 1 70 0 10 1 74 0 35 1 78 0 37 17 129 0 157 1 125 0 192 15 125 0 194 1 125 0 195 15 125 0 209 17 133 1 185 15 109 1 186 17 137 1 194] #[0 17 141 0 37] #[0 17 145 0 20] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 17 149 1 49 17 149 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 17 149 1 65 3 197 1 66 17 149 1 85 17 149 1 88 17 149 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 49 0 37 0 10 0 80 0 10 0 88 0 10 0 109 0 10 0 111 0 10 0 120 17 153 1 212 17 157 1 214 17 161 1 216 17 165 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[0 10 54 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 17 169 0 197 17 169 0 198 17 169 0 199 17 169 0 200 1 145 0 201 1 145 0 202 1 145 0 203 17 169 0 204 1 161 0 205 17 169 0 206 17 169 0 207 17 169 0 208 17 169 0 209 17 169 0 210 1 185 0 211 17 169 0 217 17 169 1 159 17 169 2 82 2 229 2 83 3 1 2 101] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 17 173 0 197 17 173 0 198 17 173 0 199 17 173 0 200 1 145 0 201 1 145 0 202 1 145 0 203 17 173 0 204 1 161 0 205 17 173 0 206 17 173 0 207 17 173 0 208 17 173 0 209 17 173 0 210 1 185 0 211 17 173 0 217 17 173 1 159 17 173 2 82 2 229 2 83 3 1 2 101] #[1 18 9 0 1 18 13 0 2 18 13 0 3 18 13 0 5 18 13 0 10 17 197 0 12 18 9 0 13 17 205 0 16 18 9 0 17 18 13 0 21 18 13 0 26 18 13 0 27 18 13 0 29 18 13 0 31 18 13 0 33 18 13 0 39 18 9 0 72 18 9 0 130 18 13 0 149 18 9 0 152 18 13 0 153 18 13 0 154 18 9 1 238 18 13 1 240] #[0 10 58 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 18 17 1 49 18 17 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 18 17 1 65 3 197 1 66 18 17 1 85 18 17 1 88 18 17 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 10 62 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 10 66 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 10 70 0 9 0 49 0 37 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 60 0 10 0 65 0 10 0 76 0 10 0 86 0 10 0 94 0 10 0 100 0 10 0 104 0 10 0 107 0 10 0 114 0 10 0 117 0 10 0 121 0 10 0 125 0 10 0 128 0 10 0 134 0 10 0 135 0 10 0 138 0 10 0 142 0 10 0 157 18 21 1 196 18 25 1 197 18 29 1 198 18 33 1 199 18 37 1 204 18 41 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[0 10 74 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 10 78 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 10 82 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 18 45 0 9] #[0 10 86 0 157] #[0 10 90 0 157] #[0 18 49 0 157] #[0 10 94 0 157] #[0 10 98 0 157] #[0 18 53 0 157] #[0 10 102 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 139 0 155 2 102] #[1 6 13 0 20 18 57 0 25] #[1 18 61 0 15 18 65 0 38] #[0 10 106 0 157] #[0 10 110 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 155 2 102] #[0 10 114 0 37 0 41 0 42 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 80 0 85 0 86 0 87 0 88 0 94 0 99 0 100 0 104 0 105 0 107 0 108 0 109 0 111 0 112 0 113 0 114 0 115 0 117 0 118 0 120 0 121 0 124 0 125 0 126 0 128 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 157] #[0 10 118 0 15 0 38] #[1 1 2 0 2 1 2 0 3 1 2 0 4 1 2 0 5 1 2 0 6 1 2 0 7 1 2 0 8 1 2 0 9 1 2 0 10 1 2 0 11 1 2 0 12 1 2 0 13 1 2 0 14 1 2 0 15 1 2 0 16 1 2 0 17 1 2 0 18 1 2 0 19 1 2 0 20 1 2 0 21 1 2 0 22 5 253 0 24 0 107 0 26 1 2 0 27 1 2 0 28 1 2 0 29 2 147 0 30 1 2 0 31 2 206 0 32 1 2 0 33 1 2 0 34 1 2 0 35 1 2 0 36 1 2 0 37 1 2 0 39 1 2 0 40 1 2 0 44 1 2 0 90 1 2 0 149 1 2 0 150 1 2 0 151 1 2 0 153 1 2 0 154 6 209 0 218 6 209 0 240] #[0 10 122 0 9 0 15] #[0 18 73 0 9] #[1 10 126 0 9 18 77 0 15] #[0 10 130 0 9 0 15] #[1 18 81 0 9 18 85 0 15] #[0 10 134 0 9 0 15] #[0 10 138 0 9 0 15] #[1 0 49 0 37 0 10 0 41 0 10 0 57 0 10 0 62 0 10 0 67 0 10 0 87 0 10 0 88 0 53 0 98 0 10 0 99 0 10 0 108 0 10 0 109 0 10 0 111 0 10 0 112 0 10 0 118 0 10 0 124 0 10 0 126 0 10 0 137 6 242 0 155 13 69 0 176 18 89 0 188 13 65 0 189 13 69 0 190 13 69 0 191 13 69 1 152 13 69 1 254 13 69 2 12 13 69 2 34 13 69 2 44 0 89 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[1 10 142 0 23 18 93 0 26 10 142 0 145 10 142 0 148 18 97 1 156 18 97 1 157] #[1 10 142 0 23 18 93 0 26 10 142 0 145 10 142 0 148 18 105 1 156 18 105 1 157] #[1 10 146 0 23 18 109 0 26 10 146 0 145 10 146 0 148 18 113 2 16 18 113 2 17] #[0 18 121 0 52 0 55 0 86 0 94 0 117 0 121 0 134 0 135 0 138 0 202] #[1 18 125 0 148 18 129 2 37] #[0 10 150 0 148] #[1 10 146 0 8 18 109 0 26 18 133 2 16 18 133 2 17] #[0 10 154 0 15 0 38 0 155] #[0 10 158 0 15 0 25] #[0 10 162 0 15 0 25] #[0 18 137 0 9] #[1 0 105 0 1 18 141 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 18 145 1 49 18 145 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 18 145 1 65 3 197 1 66 18 145 1 85 18 145 1 88 18 145 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88 18 149 2 92] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 3 9 0 49 0 153 0 50 3 13 0 52 3 17 0 55 0 165 0 56 0 173 0 59 3 25 0 60 0 181 0 61 0 185 0 62 0 189 0 64 3 29 0 65 2 217 0 72 0 201 0 75 3 33 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 3 41 0 86 0 229 0 93 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 0 249 0 116 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 3 65 0 134 3 69 0 135 1 45 0 136 1 49 0 137 3 77 0 138 1 57 0 139 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 18 153 1 93 18 153 1 94 18 153 1 97 18 153 1 109 2 125 1 110 18 153 1 111 18 153 1 112 18 153 1 113 18 153 1 120 18 153 1 121 18 153 1 122 18 153 1 123 18 153 1 131 18 153 1 132 18 153 1 133 18 153 1 134 18 153 1 135 18 153 1 136 18 153 1 137 18 153 1 138 18 153 1 146 18 153 1 147 18 153 1 148 18 153 1 149 18 153 1 151 1 197 2 72 2 217 2 73 18 153 2 81 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 18 153 2 89] #[1 13 173 0 157 18 157 2 91] #[0 10 166 0 25] #[0 18 161 0 25] #[0 10 170 0 25] #[0 10 174 0 9 0 15 0 25] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 18 165 1 49 18 165 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 18 165 1 65 3 197 1 66 18 165 1 85 18 165 1 88 18 165 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 10 178 0 1 10 178 0 5 10 178 0 8 10 178 0 10 10 178 0 12 10 178 0 13 10 178 0 16 10 178 0 17 10 178 0 25 10 178 0 47 10 178 0 48 10 178 0 49 10 178 0 50 10 178 0 52 10 178 0 53 10 178 0 55 10 178 0 56 10 178 0 58 10 178 0 59 10 178 0 60 10 178 0 61 10 178 0 62 10 178 0 64 10 178 0 65 2 151 0 66 10 178 0 72 10 178 0 75 10 178 0 76 10 178 0 77 10 178 0 78 10 178 0 81 10 178 0 83 10 178 0 86 10 178 0 93 10 178 0 94 10 178 0 97 10 178 0 99 10 178 0 100 10 178 0 116 10 178 0 117 10 178 0 121 10 178 0 122 10 178 0 125 10 178 0 127 10 178 0 128 10 178 0 129 10 178 0 130 10 178 0 131 10 178 0 133 10 178 0 134 10 178 0 135 10 178 0 136 10 178 0 137 10 178 0 138 10 178 0 139 10 178 0 140 10 178 0 142 10 178 0 146 10 178 0 147 10 178 0 148 10 178 0 152 10 178 0 155 10 178 0 157 10 178 0 158 10 178 0 159 10 178 0 160 10 178 0 161 10 178 0 162 10 178 0 165 10 178 0 166 10 178 0 169 10 178 0 170 10 178 2 102] #[0 10 182 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 1 2 0 9 1 2 0 20 6 1 0 26 18 173 0 218 18 173 0 240] #[0 10 186 0 15 0 155] #[1 18 177 0 20 14 193 0 37] #[0 18 181 0 157] #[0 10 190 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 10 194 0 15 0 155] #[1 10 198 0 2 10 198 0 3 10 198 0 4 10 198 0 5 10 198 0 6 10 198 0 7 10 198 0 8 10 198 0 9 10 198 0 10 10 198 0 11 10 198 0 12 10 198 0 13 10 198 0 14 10 198 0 15 10 198 0 16 10 198 0 17 10 198 0 18 10 198 0 19 10 198 0 20 10 198 0 21 10 198 0 22 10 198 0 23 10 198 0 25 10 198 0 26 10 198 0 27 10 198 0 28 10 198 0 29 10 198 0 30 10 198 0 31 10 198 0 33 10 198 0 34 10 198 0 35 10 198 0 36 10 198 0 37 10 198 0 38 10 198 0 39 10 198 0 40 10 198 0 44 10 198 0 45 10 198 0 51 10 198 0 63 10 198 0 68 10 198 0 79 10 198 0 82 10 198 0 89 10 198 0 90 10 198 0 91 10 198 0 92 10 198 0 101 10 198 0 103 10 198 0 119 10 198 0 145 9 213 0 148 10 198 0 149 10 198 0 150 10 198 0 151 10 198 0 153 10 198 0 154 10 198 0 155 10 198 0 163 10 198 0 164 10 198 0 167 10 198 0 168 18 185 0 254 18 185 0 255 18 185 1 0 18 185 1 6 10 198 2 102] #[1 14 165 0 15 18 193 0 38] #[1 13 145 0 15 18 197 0 155] #[0 10 202 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 13 249 0 37 18 201 0 155 18 205 0 157 18 209 1 3 14 17 1 4] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 9 213 0 148 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 18 217 0 255 18 217 1 0 18 217 1 5 18 217 1 6 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 18 217 1 49 18 217 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 18 217 1 65 3 197 1 66 18 217 1 85 18 217 1 88 18 217 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 13 253 0 148 1 81 0 152 18 225 0 155 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 18 229 1 8 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 125 1 28 3 125 1 29 3 125 1 34 3 125 1 35 3 125 1 36 3 125 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 14 29 1 49 14 29 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 14 29 1 65 3 197 1 66 14 29 1 89 1 197 2 72 2 217 2 73 3 125 2 84 1 197 2 85 1 197 2 86 3 125 2 87 1 197 2 88] #[0 10 206 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 10 210 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 9 229 0 148 1 81 0 152 18 233 0 155 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 18 237 1 49 18 237 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 18 237 1 65 3 197 1 66 18 237 1 85 18 237 1 88 18 237 1 89 18 237 1 187 18 237 2 9 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 10 214 0 2 10 214 0 3 10 214 0 4 10 214 0 5 10 214 0 6 10 214 0 7 10 214 0 8 10 214 0 9 10 214 0 10 10 214 0 11 10 214 0 12 10 214 0 13 10 214 0 14 10 214 0 15 10 214 0 16 10 214 0 17 10 214 0 18 10 214 0 19 10 214 0 20 10 214 0 21 10 214 0 22 10 214 0 23 10 214 0 25 10 214 0 26 10 214 0 27 10 214 0 28 10 214 0 29 10 214 0 30 10 214 0 31 10 214 0 33 10 214 0 34 10 214 0 35 10 214 0 36 5 145 0 37 10 214 0 38 10 214 0 39 10 214 0 40 10 214 0 44 10 214 0 45 10 214 0 51 10 214 0 63 10 214 0 68 10 214 0 79 10 214 0 82 10 214 0 89 10 214 0 90 10 214 0 91 10 214 0 92 10 214 0 101 10 214 0 103 10 214 0 119 10 214 0 145 10 214 0 148 10 214 0 149 10 214 0 150 10 214 0 151 10 214 0 153 10 214 0 154 10 214 0 155 10 214 0 163 10 214 0 164 10 214 0 167 10 214 0 168 18 241 0 212 18 245 0 213 6 25 0 214 10 214 2 102] #[0 10 218 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 18 249 0 53 18 253 0 61 10 222 0 155 19 1 1 115 19 5 1 116 19 9 1 117 19 13 1 118 19 17 1 119] #[0 10 226 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 10 230 0 9 1 70 0 10 1 74 0 35 1 78 0 37 19 25 0 157 19 25 2 78] #[0 19 29 0 8] #[1 1 77 0 148 19 33 1 94] #[0 10 234 0 148] #[1 2 119 0 9 1 2 0 10 2 119 0 20 14 97 0 26 1 2 0 35 1 2 0 37 14 141 0 218 14 141 0 240 19 37 1 18 14 105 1 19] #[0 10 238 0 15 0 153] #[0 19 41 0 153] #[1 19 45 0 15 10 242 0 153] #[1 7 214 0 9 7 214 0 20 19 49 0 26 19 53 1 18 14 105 1 19] #[0 10 246 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 10 250 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 10 254 0 15 0 153] #[0 11 2 0 9 0 15 0 38] #[1 1 70 0 10 1 74 0 35 1 78 0 37 19 57 0 157] #[0 11 6 0 9 0 15 0 38] #[0 11 10 0 9 0 15 0 38] #[0 11 14 0 9 0 15 0 38] #[0 11 18 0 9 0 15 0 38] #[1 1 2 0 2 1 2 0 3 1 2 0 4 1 2 0 5 1 2 0 6 1 2 0 7 1 2 0 8 1 2 0 9 1 2 0 10 1 2 0 11 1 2 0 12 1 2 0 14 1 2 0 15 1 2 0 16 1 2 0 18 1 2 0 20 1 2 0 21 1 2 0 22 1 2 0 23 1 2 0 25 0 107 0 26 1 2 0 27 1 2 0 28 1 2 0 29 1 2 0 30 1 2 0 31 1 2 0 33 1 2 0 34 1 2 0 35 1 2 0 36 1 2 0 37 1 2 0 38 1 2 0 39 1 2 0 40 1 2 0 44 1 2 0 45 1 2 0 51 1 2 0 63 1 2 0 68 1 2 0 79 1 2 0 82 1 2 0 89 1 2 0 90 1 2 0 91 1 2 0 92 1 2 0 101 1 2 0 103 1 2 0 119 1 2 0 145 1 2 0 149 1 2 0 150 1 2 0 151 1 2 0 153 1 2 0 154 1 2 0 155 1 2 0 163 1 2 0 164 1 2 0 167 1 2 0 168 19 61 0 218 19 61 0 240 1 2 2 102] #[1 14 165 0 15 19 65 0 38] #[1 11 22 0 4 11 22 0 7 11 22 0 8 11 26 0 9 11 22 0 11 11 22 0 14 11 26 0 15 11 22 0 18 11 22 0 20 11 22 0 22 11 26 0 25 11 22 0 28 11 22 0 30 11 22 0 34 11 22 0 35 11 22 0 37 11 22 0 40 11 22 0 150] #[0 11 30 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 11 34 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 11 38 0 163] #[0 11 42 0 163 0 164 0 167 0 168] #[0 11 46 0 167] #[1 6 153 0 10 19 69 0 37] #[0 11 50 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 11 22 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 11 54 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 19 73 1 49 19 73 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 19 73 1 65 3 197 1 66 19 73 1 85 19 73 1 88 19 73 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 11 58 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 11 62 0 15 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 19 77 1 49 19 77 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 19 77 1 65 3 197 1 66 19 77 1 85 19 77 1 88 19 77 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 3 37 0 79 3 26 0 82 7 53 0 91 7 57 0 92 7 61 0 103 3 26 0 119 7 65 0 145 7 69 1 66 19 81 1 67 7 77 1 68 7 81 1 69 7 85 1 70 7 89 1 71 7 93 1 72 7 97 1 73 7 101 1 74 7 105 1 75] #[0 19 85 0 30] #[1 19 89 0 15 19 93 0 25] #[0 11 66 0 15 0 25] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 9 229 0 148 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 19 97 1 49 19 97 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 19 97 1 65 3 197 1 66 19 97 1 85 19 97 1 88 19 97 1 89 19 97 1 187 19 97 2 9 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 15 101 0 157 19 101 1 186] #[0 11 70 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 10 142 0 8 18 93 0 26 19 105 1 156 19 105 1 157] #[0 19 109 0 157] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 19 113 1 49 19 113 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 19 113 1 65 3 197 1 66 19 113 1 85 19 113 1 88 19 113 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 0 49 0 37 0 10 0 80 0 10 0 88 0 10 0 109 0 10 0 111 0 10 0 120 19 117 1 212 17 157 1 214 17 161 1 216 17 165 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[0 11 74 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 10 42 0 15 1 2 0 20 5 253 0 24 10 42 0 25 6 1 0 26 17 97 0 30 10 50 0 148 9 37 0 218 9 37 0 240] #[1 17 101 0 15 19 121 0 25] #[0 19 125 0 148] #[1 0 49 0 37 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 60 0 10 0 65 0 10 0 76 0 10 0 86 0 10 0 94 0 10 0 100 0 10 0 104 0 10 0 107 0 10 0 114 0 10 0 117 0 10 0 121 0 10 0 125 0 10 0 128 0 10 0 134 0 10 0 135 0 10 0 138 0 10 0 142 0 10 0 157 19 129 1 197 18 29 1 198 18 33 1 199 18 37 1 204 18 41 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[0 19 133 0 128] #[0 19 137 0 25] #[0 19 141 0 155] #[1 0 49 0 37 0 10 0 88 0 10 0 109 0 10 0 111 0 10 0 120 11 78 0 155 19 145 1 215 19 145 1 216 19 153 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[1 0 49 0 37 0 10 0 80 0 10 0 88 0 10 0 109 0 10 0 111 11 82 0 155 19 157 1 213 19 157 1 214 19 165 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[1 11 86 0 80 19 169 0 88 19 173 0 109 19 177 0 111 11 86 0 120 19 181 1 217 19 185 1 218] #[1 19 189 0 8 1 70 0 10 1 74 0 35 1 78 0 37] #[1 19 193 0 8 1 70 0 10 1 74 0 35 1 78 0 37] #[0 11 90 0 8] #[0 11 94 0 8] #[0 11 98 0 8] #[0 11 102 0 8] #[0 11 106 0 8] #[0 2 155 0 8] #[0 11 118 0 8] #[0 2 159 0 8] #[0 11 130 0 8] #[0 11 134 0 8] #[0 11 138 0 8] #[0 11 142 0 8] #[0 11 146 0 8] #[0 11 150 0 8] #[0 11 154 0 8] #[0 11 158 0 8] #[0 11 162 0 8] #[0 11 166 0 8] #[0 11 170 0 8] #[0 11 174 0 8] #[0 11 178 0 8] #[0 11 182 0 8] #[0 19 197 0 8] #[0 19 201 0 8] #[0 19 205 0 25] #[0 19 209 0 9] #[0 11 186 0 9] #[1 11 190 0 9 19 213 0 15 11 190 0 38] #[0 11 194 0 9 0 15 0 38] #[0 11 198 0 9 0 38] #[1 11 202 0 49 11 202 0 52 11 202 0 55 11 202 0 60 11 202 0 65 11 202 0 76 11 202 0 86 11 202 0 94 11 202 0 100 19 233 0 104 19 221 0 107 19 233 0 114 11 202 0 117 11 202 0 121 11 202 0 125 19 233 0 128 11 202 0 134 11 202 0 135 11 202 0 138 11 202 0 142 11 202 0 157 19 233 1 202 19 233 1 203] #[1 19 241 0 25 1 77 0 148 19 245 1 94 19 249 1 253] #[0 19 253 0 8] #[0 20 1 0 8] #[0 11 206 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 139 0 155 2 102] #[1 20 5 0 38 8 73 0 157 1 125 0 192 8 89 0 194 1 125 0 195 15 253 2 62 8 89 2 63] #[0 11 210 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 20 9 1 49 20 9 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 20 9 1 65 3 197 1 66 20 9 1 85 20 9 1 88 20 9 1 89 20 9 2 71 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 11 214 0 15 0 38] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 16 1 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 20 13 1 49 20 13 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 20 13 1 65 3 197 1 66 20 13 1 85 20 13 1 88 20 13 1 89 20 13 2 68 20 17 2 69 16 25 2 70 20 13 2 71 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 11 218 0 15 0 38] #[1 20 21 0 157 20 25 2 70] #[0 20 29 0 155] #[1 0 49 0 37 0 10 0 157 20 33 1 158 20 37 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[1 20 41 0 23 11 222 0 145 11 222 0 148 20 45 1 160 20 49 1 161] #[0 11 226 0 8 0 23 0 145 0 148] #[1 20 53 0 23 11 230 0 145 11 230 0 148 20 57 2 2 20 61 2 3] #[1 0 49 0 37 0 10 0 85 0 10 0 104 0 10 0 157 20 65 2 18 20 69 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[1 20 73 0 23 11 234 0 145 11 234 0 148 20 77 2 21 20 81 2 22] #[0 11 238 0 8 0 23 0 145 0 148] #[0 11 242 0 148] #[1 0 49 0 37 11 246 0 155 0 10 0 157 20 85 2 41 20 89 2 42 20 93 2 43 20 97 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[1 20 101 0 25 7 22 0 37 7 22 0 41 7 22 0 49 7 22 0 52 7 22 0 55 7 22 0 57 7 22 0 58 7 22 0 60 7 22 0 62 7 22 0 65 7 22 0 67 7 22 0 69 7 22 0 71 7 22 0 75 7 22 0 76 7 22 0 86 7 22 0 87 7 22 0 88 7 22 0 94 7 22 0 98 7 22 0 99 7 22 0 100 7 22 0 105 7 22 0 108 7 22 0 109 7 22 0 111 7 22 0 112 7 22 0 113 7 22 0 117 7 22 0 118 7 22 0 121 7 22 0 124 7 22 0 125 7 22 0 126 7 22 0 134 7 22 0 135 7 22 0 137 7 22 0 138 7 22 0 141 7 22 0 142 7 22 0 143 7 22 0 152 7 22 0 155 7 22 0 157 20 101 2 74 7 22 2 102] #[0 20 105 0 8] #[0 20 109 0 25] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 20 113 0 221 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 20 117 1 28 20 117 1 29 20 117 1 34 20 117 1 35 20 117 1 36 20 117 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 20 113 1 49 20 113 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 20 113 1 65 3 197 1 66 20 113 1 85 20 113 1 88 20 113 1 89 1 197 2 72 2 217 2 73 20 117 2 84 1 197 2 85 1 197 2 86 20 117 2 87 1 197 2 88] #[0 11 250 0 9 0 15] #[0 11 254 0 9 0 15] #[0 12 2 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 12 6 0 9 0 15] #[1 0 105 0 1 0 109 0 5 0 113 0 8 12 10 0 9 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 9 81 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 9 81 1 85 9 81 1 110 20 121 1 128 20 121 1 129 20 129 1 130 1 197 2 72 2 217 2 73 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88] #[0 20 133 0 9] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 3 9 0 49 0 153 0 50 3 13 0 52 3 17 0 55 0 165 0 56 0 173 0 59 3 25 0 60 0 181 0 61 0 185 0 62 0 189 0 64 3 29 0 65 2 217 0 72 0 201 0 75 3 33 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 3 41 0 86 0 229 0 93 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 0 249 0 116 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 3 65 0 134 3 69 0 135 1 45 0 136 1 49 0 137 3 77 0 138 1 57 0 139 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 20 137 1 93 20 137 1 94 20 137 1 97 20 137 1 109 2 125 1 110 20 137 1 111 20 137 1 112 20 137 1 113 20 137 1 120 20 137 1 121 20 137 1 122 20 137 1 123 20 137 1 131 20 137 1 132 20 137 1 133 20 137 1 134 20 137 1 135 20 137 1 136 20 137 1 137 20 137 1 138 20 137 1 146 20 137 1 147 20 137 1 148 20 137 1 149 20 137 1 151 1 197 2 72 2 217 2 73 20 137 2 81 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 20 137 2 89] #[0 12 14 0 9 0 20] #[0 20 141 0 157] #[1 1 2 0 8 1 2 0 15 1 2 0 20 6 1 0 26 1 2 0 35 1 2 0 37 1 2 0 155 20 145 0 218 20 145 0 240] #[0 12 18 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 12 22 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 12 26 0 30] #[0 12 30 0 15 0 155] #[0 12 34 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 9 82 0 30] #[0 12 38 0 15 0 155] #[0 12 42 0 15 0 155] #[0 12 46 0 15 0 155] #[0 12 50 0 15 0 155] #[0 12 54 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 12 58 0 15 0 155] #[0 12 62 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 12 66 0 15 0 155] #[1 12 70 0 2 12 70 0 3 12 70 0 4 12 70 0 5 12 70 0 6 12 70 0 7 12 70 0 8 12 70 0 9 12 70 0 10 12 70 0 11 12 70 0 12 12 70 0 13 12 70 0 14 12 70 0 15 12 70 0 16 12 70 0 17 12 70 0 18 12 70 0 19 12 70 0 20 12 70 0 21 12 70 0 22 12 70 0 23 12 70 0 25 12 70 0 26 12 70 0 27 12 70 0 28 12 70 0 29 12 70 0 30 12 70 0 31 12 70 0 33 12 70 0 34 12 70 0 35 12 70 0 36 12 70 0 38 12 70 0 39 12 70 0 40 12 70 0 44 12 70 0 45 12 70 0 51 12 70 0 63 12 70 0 68 12 70 0 79 12 70 0 82 12 70 0 89 12 70 0 90 12 70 0 91 12 70 0 92 12 70 0 101 12 70 0 103 12 70 0 119 12 70 0 145 9 229 0 148 12 70 0 149 12 70 0 150 12 70 0 151 12 70 0 153 12 70 0 154 12 70 0 155 12 70 0 163 12 70 0 164 12 70 0 167 12 70 0 168 20 149 2 8 20 149 2 9 12 70 2 102] #[1 12 74 0 2 12 74 0 3 12 74 0 4 12 74 0 5 12 74 0 6 12 74 0 7 12 74 0 8 12 74 0 9 12 74 0 10 12 74 0 11 12 74 0 12 12 74 0 13 12 74 0 14 12 74 0 15 12 74 0 16 12 74 0 17 12 74 0 18 12 74 0 19 12 74 0 20 12 74 0 21 12 74 0 22 12 74 0 23 12 74 0 25 12 74 0 26 12 74 0 27 12 74 0 28 12 74 0 29 12 74 0 30 12 74 0 31 12 74 0 33 12 74 0 34 12 74 0 35 12 74 0 36 5 145 0 37 12 74 0 38 12 74 0 39 12 74 0 40 12 74 0 44 12 74 0 45 12 74 0 51 12 74 0 63 12 74 0 68 12 74 0 79 12 74 0 82 12 74 0 89 12 74 0 90 12 74 0 91 12 74 0 92 12 74 0 101 12 74 0 103 12 74 0 119 12 74 0 145 12 74 0 148 12 74 0 149 12 74 0 150 12 74 0 151 12 74 0 153 12 74 0 154 12 74 0 155 12 74 0 163 12 74 0 164 12 74 0 167 12 74 0 168 10 105 0 214 12 74 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 20 157 1 49 20 157 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 20 157 1 65 3 197 1 66 20 157 1 85 20 157 1 88 20 157 1 89 20 157 1 90 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 20 161 0 23] #[0 20 165 0 155] #[1 18 249 0 53 18 253 0 61 12 78 0 155 20 169 1 117 19 13 1 118 19 17 1 119] #[0 12 82 0 53 0 61 0 155] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 0 149 0 49 0 153 0 50 0 157 0 52 18 249 0 53 0 161 0 55 0 165 0 56 0 169 0 58 0 173 0 59 0 177 0 60 20 173 0 61 0 185 0 62 0 189 0 64 0 193 0 65 2 217 0 72 0 201 0 75 0 205 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 0 225 0 86 0 229 0 93 0 233 0 94 0 237 0 97 0 241 0 99 0 245 0 100 0 249 0 116 0 253 0 117 1 1 0 121 1 5 0 122 1 9 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 1 37 0 134 1 41 0 135 1 45 0 136 1 49 0 137 1 53 0 138 1 57 0 139 1 61 0 140 1 65 0 142 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 1 85 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 1 117 0 192 1 121 0 194 1 125 0 195 1 129 0 197 1 129 0 198 1 129 0 199 1 129 0 200 1 145 0 201 1 145 0 202 1 145 0 203 1 129 0 204 1 161 0 205 1 129 0 206 1 129 0 207 1 129 0 208 1 129 0 209 1 129 0 210 1 185 0 211 1 129 0 217 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 5 233 1 92 5 233 1 93 5 233 1 94 20 177 1 96 5 233 1 97 5 233 1 98 5 233 1 99 2 109 1 100 2 113 1 101 2 117 1 106 5 233 1 109 2 125 1 110 5 233 1 111 5 233 1 112 5 233 1 113 20 181 1 119 5 233 1 120 5 233 1 121 5 233 1 122 5 233 1 123 5 233 1 131 5 233 1 132 5 233 1 133 5 233 1 134 5 233 1 135 5 233 1 136 5 233 1 137 5 233 1 138 5 233 1 146 5 233 1 147 5 233 1 148 5 233 1 149 5 233 1 151 1 129 1 159 1 197 2 72 2 217 2 73 5 233 2 81 1 129 2 82 2 229 2 83 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 5 233 2 89 3 1 2 101] #[0 12 86 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 12 90 0 9] #[0 20 185 0 9] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 20 189 1 49 20 189 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 20 189 1 65 3 197 1 66 20 189 1 85 20 189 1 88 20 189 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 12 94 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 74 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 12 98 0 9 0 20] #[0 12 102 0 9 0 20] #[0 12 106 0 15 0 153] #[1 16 221 0 15 9 142 0 153 16 225 1 20 16 229 1 21] #[0 12 110 0 9 0 20] #[0 12 114 0 9 0 15 0 38] #[0 12 118 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 12 122 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 14 0 15 0 16 0 18 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 20 193 1 49 20 193 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 20 193 1 65 3 197 1 66 20 193 1 85 20 193 1 88 20 193 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 20 197 0 101] #[0 12 126 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[0 12 130 0 9 0 15 0 23 0 25 0 38 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 91 0 92 0 101 0 103 0 119 0 145 0 155 0 163 0 164 0 167 0 168 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 20 201 1 49 20 201 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 20 201 1 65 3 197 1 66 20 201 1 85 20 201 1 88 20 201 1 89 20 201 1 90 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 17 85 0 157 20 205 1 180] #[0 12 134 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 12 138 0 15 0 25] #[0 12 142 0 15 0 25] #[0 20 209 0 8] #[0 12 146 0 8 0 26 0 32 0 148] #[0 20 213 0 25] #[0 20 217 0 155] #[0 12 150 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 0 49 0 37 0 10 0 42 0 10 0 115 20 221 1 224 20 225 1 225 20 229 1 226 20 233 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[0 20 237 0 38] #[0 20 241 0 37] #[0 12 154 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 12 158 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 12 162 0 155] #[0 12 166 0 155] #[1 19 169 0 88 19 173 0 109 19 177 0 111 11 86 0 120 20 245 1 217 19 185 1 218] #[0 12 170 0 155] #[0 12 174 0 155] #[1 11 86 0 80 19 169 0 88 19 173 0 109 19 177 0 111 20 249 1 217 19 185 1 218] #[1 12 178 0 80 20 253 0 111 12 178 0 120] #[0 12 182 0 80 0 120] #[1 12 186 0 80 21 1 0 88 12 186 0 120] #[1 21 5 0 80 21 9 0 120] #[0 12 190 0 80 0 120] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 21 13 0 197 21 13 0 198 21 13 0 199 21 13 0 200 1 145 0 201 1 145 0 202 1 145 0 203 21 13 0 204 1 161 0 205 21 13 0 206 21 13 0 207 21 13 0 208 21 13 0 209 21 13 0 210 1 185 0 211 21 13 0 217 21 13 1 159 21 13 2 82 2 229 2 83 3 1 2 101] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 21 17 0 197 21 17 0 198 21 17 0 199 21 17 0 200 1 145 0 201 1 145 0 202 1 145 0 203 21 17 0 204 1 161 0 205 21 17 0 206 21 17 0 207 21 17 0 208 21 17 0 209 21 17 0 210 1 185 0 211 21 17 0 217 21 17 1 159 21 17 2 82 2 229 2 83 3 1 2 101] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 21 21 0 197 21 21 0 198 21 21 0 199 21 21 0 200 1 145 0 201 1 145 0 202 1 145 0 203 21 21 0 204 1 161 0 205 21 21 0 206 21 21 0 207 21 21 0 208 21 21 0 209 21 21 0 210 1 185 0 211 21 21 0 217 21 21 1 159 21 21 2 82 2 229 2 83 3 1 2 101] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 21 25 0 197 21 25 0 198 21 25 0 199 21 25 0 200 1 145 0 201 1 145 0 202 1 145 0 203 21 25 0 204 1 161 0 205 21 25 0 206 21 25 0 207 21 25 0 208 21 25 0 209 21 25 0 210 1 185 0 211 21 25 0 217 21 25 1 159 21 25 2 82 2 229 2 83 3 1 2 101] #[0 12 194 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 21 29 0 23 12 198 0 25 12 198 0 148 21 33 1 248 21 33 1 249] #[1 0 49 0 37 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 60 0 10 0 65 0 10 0 76 0 10 0 86 0 10 0 94 0 10 0 100 0 10 0 104 0 10 0 107 0 10 0 114 0 10 0 117 0 10 0 121 0 10 0 125 0 10 0 128 0 10 0 134 0 10 0 135 0 10 0 138 0 10 0 142 0 10 0 157 21 41 1 199 21 45 1 204 18 41 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[0 12 202 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 94 0 100 0 117 0 121 0 125 0 134 0 135 0 138 0 142 0 157] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 9 65 0 197 9 65 0 198 9 65 0 199 9 65 0 200 1 145 0 201 1 145 0 202 1 145 0 203 9 65 0 204 1 161 0 205 9 65 0 206 9 65 0 207 9 65 0 208 9 65 0 209 21 49 0 210 1 185 0 211 9 65 0 217 9 65 1 159 9 65 2 82 2 229 2 83 3 1 2 101] #[0 12 206 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 94 0 100 0 117 0 121 0 125 0 134 0 135 0 138 0 142 0 157] #[0 12 210 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 94 0 100 0 117 0 121 0 125 0 134 0 135 0 138 0 142 0 157] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 21 53 0 197 21 53 0 198 21 53 0 199 21 53 0 200 1 145 0 201 1 145 0 202 1 145 0 203 21 53 0 204 1 161 0 205 21 53 0 206 21 53 0 207 21 53 0 208 21 53 0 209 21 53 0 210 1 185 0 211 21 53 0 217 21 53 1 159 21 53 2 82 2 229 2 83 3 1 2 101] #[0 12 214 0 49 0 52 0 55 0 60 0 65 0 76 0 86 0 94 0 100 0 117 0 121 0 125 0 134 0 135 0 138 0 142 0 157] #[0 12 218 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 12 222 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 12 226 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 21 57 0 9] #[0 21 61 0 9] #[0 12 230 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 2 102] #[0 12 234 0 9 0 15] #[0 12 238 0 9 0 15] #[1 21 65 0 9 18 85 0 15] #[0 18 69 0 30] #[0 12 242 0 9 0 15] #[0 12 246 0 25 0 37 0 41 0 57 0 62 0 67 0 87 0 88 0 98 0 99 0 108 0 109 0 111 0 112 0 118 0 124 0 126 0 137 0 155 2 102] #[1 21 69 0 15 21 73 0 153] #[1 21 77 0 157 21 81 1 159] #[1 5 45 0 100 5 57 0 125 8 73 0 157 1 125 0 192 21 85 0 194 1 125 0 195 21 89 0 208 21 93 0 209 21 97 1 162] #[1 21 101 0 145 12 250 0 148 21 105 1 163 21 109 1 164 21 113 1 165] #[0 12 254 0 145 0 148] #[1 8 73 0 157 1 125 0 192 21 93 0 194 1 125 0 195 21 93 0 209 21 117 1 162] #[1 21 101 0 145 12 250 0 148 21 121 1 163 21 109 1 164 21 113 1 165] #[0 13 2 0 145 0 148] #[1 21 125 0 15 21 129 0 153] #[1 21 141 0 85 21 141 0 104 13 6 0 157 21 141 2 19 21 141 2 20] #[1 8 73 0 157 1 125 0 192 21 93 0 194 1 125 0 195 21 93 0 209 21 149 1 162] #[1 21 101 0 145 12 250 0 148 21 153 1 163 21 109 1 164 21 113 1 165] #[0 13 10 0 145 0 148] #[0 21 157 0 155] #[1 21 161 0 15 13 14 0 155] #[0 13 18 0 15 0 155] #[0 21 165 0 157] #[0 13 22 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 10 70 0 9 0 49 0 37 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 60 0 10 0 65 0 10 0 76 0 10 0 86 0 10 0 94 0 10 0 100 0 10 0 104 0 10 0 107 0 10 0 114 0 10 0 117 0 10 0 121 0 10 0 125 0 10 0 128 0 10 0 134 0 10 0 135 0 10 0 138 0 10 0 142 0 10 0 157 21 169 1 196 18 25 1 197 18 29 1 198 18 33 1 199 18 37 1 204 18 41 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[0 13 26 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 13 30 0 9 0 15] #[1 2 163 0 2 2 163 0 3 2 167 0 4 2 163 0 5 2 163 0 6 2 171 0 7 2 163 0 9 2 163 0 10 2 175 0 11 2 163 0 12 2 179 0 14 2 163 0 15 2 163 0 16 2 183 0 18 2 163 0 21 2 187 0 22 2 163 0 26 2 163 0 27 2 191 0 28 2 163 0 29 2 195 0 30 2 163 0 31 2 163 0 33 2 199 0 34 2 163 0 35 2 163 0 36 2 163 0 39 2 203 0 40 2 163 0 44 2 163 0 90 2 163 0 149 2 207 0 150 2 163 0 151 2 163 0 153 2 163 0 154 6 121 1 86] #[0 21 173 0 9] #[0 13 34 0 9] #[1 13 38 0 9 13 189 0 15] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 3 9 0 49 0 153 0 50 3 13 0 52 3 17 0 55 0 165 0 56 0 173 0 59 3 25 0 60 0 181 0 61 0 185 0 62 0 189 0 64 3 29 0 65 2 217 0 72 0 201 0 75 3 33 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 3 41 0 86 0 229 0 93 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 0 249 0 116 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 3 65 0 134 3 69 0 135 1 45 0 136 1 49 0 137 3 77 0 138 1 57 0 139 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 21 177 1 93 21 177 1 94 21 177 1 97 21 177 1 109 2 125 1 110 21 177 1 111 21 177 1 112 21 177 1 113 21 177 1 120 21 177 1 121 21 177 1 122 21 177 1 123 21 177 1 131 21 177 1 132 21 177 1 133 21 177 1 134 21 177 1 135 21 177 1 136 21 177 1 137 21 177 1 138 21 177 1 146 21 177 1 147 21 177 1 148 21 177 1 149 21 177 1 151 1 197 2 72 2 217 2 73 21 177 2 81 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 21 177 2 89] #[0 13 42 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 1 2 0 8 1 2 0 15 1 2 0 20 6 1 0 26 1 2 0 35 1 2 0 37 1 2 0 155 21 181 0 218 21 181 0 240] #[1 11 30 0 8 13 46 0 15 11 30 0 20 11 30 0 35 11 30 0 37 13 46 0 155] #[0 13 50 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 13 54 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 33 0 34 0 35 0 36 0 38 0 39 0 40 0 44 0 45 0 51 0 63 0 68 0 79 0 82 0 89 0 90 0 91 0 92 0 101 0 103 0 119 0 145 0 149 0 150 0 151 0 153 0 154 0 155 0 163 0 164 0 167 0 168 2 102] #[0 21 185 0 23] #[0 13 58 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 13 62 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[0 13 66 0 53 0 61 0 155] #[1 0 134 0 4 0 134 0 7 0 11 0 8 0 134 0 11 0 134 0 13 0 134 0 14 0 134 0 17 0 134 0 18 0 134 0 19 0 134 0 20 0 134 0 22 20 161 0 23 0 134 0 28 0 134 0 30 0 134 0 34 0 134 0 35 0 134 0 37 0 134 0 40 0 134 0 150] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 0 149 0 49 0 153 0 50 0 157 0 52 13 70 0 53 0 161 0 55 0 165 0 56 0 169 0 58 0 173 0 59 0 177 0 60 2 211 0 61 0 185 0 62 0 189 0 64 0 193 0 65 2 217 0 72 0 201 0 75 0 205 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 0 225 0 86 0 229 0 93 0 233 0 94 0 237 0 97 0 241 0 99 0 245 0 100 0 249 0 116 0 253 0 117 1 1 0 121 1 5 0 122 1 9 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 1 37 0 134 1 41 0 135 1 45 0 136 1 49 0 137 1 53 0 138 1 57 0 139 1 61 0 140 1 65 0 142 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 13 70 0 155 1 85 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 1 117 0 192 1 121 0 194 1 125 0 195 1 129 0 197 1 129 0 198 1 129 0 199 1 129 0 200 1 145 0 201 1 145 0 202 1 145 0 203 1 129 0 204 1 161 0 205 1 129 0 206 1 129 0 207 1 129 0 208 1 129 0 209 1 129 0 210 1 185 0 211 1 129 0 217 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 10 77 1 92 10 77 1 93 10 77 1 94 10 77 1 97 10 77 1 98 10 77 1 99 2 109 1 100 2 113 1 101 2 117 1 106 10 77 1 109 2 125 1 110 10 77 1 111 10 77 1 112 10 77 1 113 10 77 1 120 10 77 1 121 10 77 1 122 10 77 1 123 10 77 1 131 10 77 1 132 10 77 1 133 10 77 1 134 10 77 1 135 10 77 1 136 10 77 1 137 10 77 1 138 10 77 1 146 10 77 1 147 10 77 1 148 10 77 1 149 10 77 1 151 1 129 1 159 1 197 2 72 2 217 2 73 10 77 2 81 1 129 2 82 2 229 2 83 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 10 77 2 89 3 1 2 101] #[0 13 74 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 13 78 0 144 0 148] #[0 21 189 0 9] #[0 21 193 0 38] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 21 197 1 49 21 197 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 21 197 1 65 3 197 1 66 21 197 1 85 21 197 1 88 21 197 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 13 82 0 15 0 25] #[0 13 86 0 15 0 25] #[1 10 70 0 9 0 49 0 37 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 60 0 10 0 65 0 10 0 76 0 10 0 86 0 10 0 94 0 10 0 100 0 10 0 104 0 10 0 107 0 10 0 114 0 10 0 117 0 10 0 121 0 10 0 125 0 10 0 128 0 10 0 134 0 10 0 135 0 10 0 138 0 10 0 142 0 10 0 157 21 201 1 196 18 25 1 197 18 29 1 198 18 33 1 199 18 37 1 204 18 41 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[0 13 90 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 21 205 0 30 13 94 0 37 13 94 0 41 13 94 0 49 13 94 0 52 13 94 0 55 13 94 0 57 13 94 0 58 13 94 0 60 13 94 0 62 13 94 0 65 13 94 0 67 13 94 0 69 13 94 0 71 13 94 0 75 13 94 0 76 13 94 0 86 13 94 0 87 13 94 0 88 13 94 0 94 13 94 0 99 13 94 0 100 13 94 0 105 13 94 0 108 13 94 0 109 13 94 0 111 13 94 0 112 13 94 0 113 13 94 0 117 13 94 0 118 13 94 0 121 13 94 0 124 13 94 0 125 13 94 0 126 13 94 0 134 13 94 0 135 13 94 0 137 13 94 0 138 13 94 0 141 13 94 0 142 13 94 0 143 13 94 0 152 13 94 0 155 13 94 0 157 21 209 1 210 21 213 1 211 13 94 2 102] #[0 21 217 0 155] #[1 0 49 0 37 0 10 0 115 21 221 1 226 21 225 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[1 0 49 0 37 0 10 0 42 21 229 1 225 21 233 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[1 21 237 0 42 21 241 0 115] #[0 13 98 0 32 0 148] #[1 0 49 0 37 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 60 0 10 0 65 0 10 0 76 0 10 0 86 0 10 0 94 0 10 0 100 0 10 0 104 0 10 0 107 0 10 0 114 0 10 0 117 0 10 0 121 0 10 0 125 0 10 0 128 0 10 0 134 0 10 0 135 0 10 0 138 0 10 0 142 0 10 0 157 21 245 1 197 18 29 1 198 18 33 1 199 18 37 1 204 18 41 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[0 21 9 0 120] #[0 21 5 0 80] #[0 13 102 0 80 0 120] #[0 13 106 0 80 0 120] #[1 21 249 0 25 1 77 0 148 21 253 1 94 22 1 1 219] #[1 21 249 0 25 1 77 0 148 21 253 1 94 22 5 1 219] #[1 1 70 0 10 1 74 0 35 1 78 0 37 22 9 0 157] #[1 1 70 0 10 1 74 0 35 1 78 0 37 22 13 0 157] #[1 1 70 0 10 1 74 0 35 1 78 0 37 22 17 0 157] #[1 1 70 0 10 1 74 0 35 1 78 0 37 22 21 0 157] #[1 22 25 0 48 22 29 0 128] #[0 13 110 0 25 0 148] #[0 13 114 0 25 0 148] #[0 13 118 0 9 0 15 0 38] #[0 13 122 0 9 0 38] #[1 1 130 0 10 1 130 0 35 1 130 0 37 22 33 0 157] #[1 1 70 0 10 1 74 0 35 1 78 0 37 22 37 0 157] #[1 7 109 0 25 7 113 0 32 1 77 0 148 7 117 1 94 22 41 1 195] #[1 7 109 0 25 7 113 0 32 1 77 0 148 7 117 1 94 22 45 1 195] #[0 13 126 0 15 0 38] #[1 0 49 0 37 0 10 0 157 22 49 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[0 13 130 0 8 0 23 0 145 0 148] #[0 1 6 0 15 0 23 0 153] #[0 13 134 0 15 0 153] #[0 2 215 0 15 0 25 0 32 0 145 0 148] #[1 22 53 0 15 13 138 0 145 13 138 0 148] #[0 13 142 0 15 0 145 0 148] #[1 22 57 0 15 13 146 0 145 13 146 0 148] #[1 21 77 0 157 22 61 1 159] #[1 22 65 0 148 22 69 1 171] #[1 13 150 0 25 13 150 0 32 21 101 0 145 13 150 0 148 22 73 1 165] #[0 13 154 0 25 0 32 0 145 0 148] #[1 22 57 0 15 13 158 0 145 13 158 0 148] #[1 22 77 0 148 22 81 2 4] #[1 0 49 0 37 0 10 0 85 0 10 0 104 0 10 0 157 22 85 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[0 13 162 0 8 0 23 0 145 0 148] #[0 13 166 0 157] #[0 13 170 0 157] #[1 21 77 0 157 22 89 1 159] #[0 13 174 0 157] #[1 22 57 0 15 13 178 0 145 13 178 0 148] #[1 22 93 0 148 22 97 2 23] #[0 13 182 0 25 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 0 49 0 37 22 101 0 155 0 10 0 157 22 105 2 43 20 97 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[1 13 186 0 15 22 109 0 30 13 186 0 155] #[0 22 113 0 9] #[1 0 105 0 1 0 109 0 5 0 113 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 137 0 25 0 141 0 47 0 145 0 48 3 9 0 49 0 153 0 50 3 13 0 52 3 17 0 55 0 165 0 56 0 173 0 59 3 25 0 60 0 181 0 61 0 185 0 62 0 189 0 64 3 29 0 65 2 217 0 72 0 201 0 75 3 33 0 76 0 209 0 77 0 213 0 78 0 217 0 81 0 221 0 83 3 41 0 86 0 229 0 93 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 0 249 0 116 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 13 0 127 1 17 0 128 1 21 0 129 2 217 0 130 1 29 0 131 1 33 0 133 3 65 0 134 3 69 0 135 1 45 0 136 1 49 0 137 3 77 0 138 1 57 0 139 1 69 0 146 1 73 0 147 1 77 0 148 1 81 0 152 4 201 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 1 193 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 245 0 246 1 197 0 247 1 197 0 249 1 197 0 250 2 5 0 251 2 9 0 252 2 13 0 253 1 193 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 2 49 1 28 2 49 1 29 2 125 1 33 2 61 1 34 2 65 1 35 2 49 1 36 2 73 1 37 1 197 1 51 2 125 1 85 22 117 1 93 22 117 1 94 22 117 1 97 22 117 1 109 2 125 1 110 22 117 1 111 22 117 1 112 22 117 1 113 22 117 1 120 22 117 1 121 22 117 1 122 22 117 1 123 22 117 1 131 22 117 1 132 22 117 1 133 22 117 1 134 22 117 1 135 22 117 1 136 22 117 1 137 22 117 1 138 22 117 1 146 22 117 1 147 22 117 1 148 22 117 1 149 22 117 1 151 1 197 2 72 2 217 2 73 22 117 2 81 2 49 2 84 1 197 2 85 1 197 2 86 2 49 2 87 1 197 2 88 22 117 2 89] #[0 13 190 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 12 118 0 8 13 194 0 15 12 118 0 20 12 118 0 35 12 118 0 37 13 194 0 155] #[0 13 198 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170] #[0 13 202 0 148] #[0 13 206 0 9 0 15 0 25] #[0 22 121 0 68] #[0 22 125 0 9] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 9 229 0 148 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 22 129 1 49 22 129 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 22 129 1 65 3 197 1 66 22 129 1 85 22 129 1 88 22 129 1 89 22 129 1 187 22 129 2 9 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 13 210 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 13 214 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 13 218 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 13 222 0 155] #[0 21 241 0 115] #[0 13 226 0 155] #[0 21 237 0 42] #[1 1 77 0 148 22 133 1 94] #[1 1 77 0 148 22 137 1 94] #[0 22 141 0 38] #[0 13 230 0 37 0 80 0 88 0 109 0 111 0 120 0 155] #[0 13 234 0 37 0 80 0 88 0 109 0 111 0 120 0 155] #[0 13 238 0 37 0 88 0 109 0 111 0 120 0 155] #[0 13 242 0 37 0 80 0 88 0 109 0 111 0 155] #[0 22 145 0 9] #[0 22 149 0 9] #[0 22 153 0 9] #[0 22 157 0 15] #[0 22 161 0 8] #[0 22 165 0 8] #[0 13 246 0 9 0 38] #[1 13 250 0 9 13 250 0 15 22 169 0 30 13 250 0 38 22 173 1 200 22 177 1 201] #[0 13 254 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 14 2 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 21 77 0 157 22 181 1 159] #[1 8 73 0 157 1 125 0 192 21 93 0 194 1 125 0 195 21 93 0 209 22 185 1 162] #[1 8 73 0 157 1 125 0 192 22 189 0 194 1 125 0 195 22 189 0 209] #[0 22 193 0 23] #[1 0 49 0 37 0 10 0 41 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 57 0 10 0 58 0 10 0 60 0 10 0 62 0 10 0 65 0 10 0 67 0 10 0 69 0 10 0 71 0 10 0 76 0 10 0 86 0 10 0 87 0 10 0 88 0 10 0 94 0 10 0 99 0 10 0 100 0 10 0 105 0 10 0 108 0 10 0 109 0 10 0 111 0 10 0 112 0 10 0 113 0 10 0 117 0 10 0 118 0 10 0 121 0 10 0 124 0 10 0 125 0 10 0 126 0 10 0 134 0 10 0 135 0 10 0 137 0 10 0 138 0 10 0 141 0 10 0 142 0 10 0 143 0 10 0 152 14 6 0 155 0 10 0 157 22 205 0 191 22 205 1 152 22 197 1 172 22 201 1 173 22 205 1 174 22 205 1 175 22 205 1 181 22 205 1 188 3 237 1 189 22 205 1 205 22 205 1 220 22 205 1 227 22 205 1 233 22 205 1 243 22 205 1 251 22 205 1 254 22 205 2 12 22 205 2 34 22 205 2 44 4 9 2 54 0 93 2 55 0 97 2 56 0 101 2 57 22 205 2 79] #[1 22 209 0 25 7 22 0 37 7 22 0 41 7 22 0 49 7 22 0 52 7 22 0 55 7 22 0 57 7 22 0 58 7 22 0 60 7 22 0 62 7 22 0 65 7 22 0 67 7 22 0 69 7 22 0 71 7 22 0 75 7 22 0 76 7 22 0 86 7 22 0 87 7 22 0 88 7 22 0 94 7 22 0 98 7 22 0 99 7 22 0 100 7 22 0 105 7 22 0 108 7 22 0 109 7 22 0 111 7 22 0 112 7 22 0 113 7 22 0 117 7 22 0 118 7 22 0 121 7 22 0 124 7 22 0 125 7 22 0 126 7 22 0 134 7 22 0 135 7 22 0 137 7 22 0 138 7 22 0 141 7 22 0 142 7 22 0 143 7 22 0 152 7 22 0 155 7 22 0 157 22 209 2 74 7 22 2 102] #[0 14 10 0 25 0 32 0 145 0 148] #[1 0 49 0 37 0 10 0 41 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 57 0 10 0 58 0 10 0 60 0 10 0 62 0 10 0 65 0 10 0 67 0 10 0 69 0 10 0 71 0 10 0 75 0 10 0 76 0 10 0 86 0 10 0 87 0 10 0 88 0 10 0 94 0 10 0 99 0 10 0 100 0 10 0 105 0 10 0 108 0 10 0 109 0 10 0 111 0 10 0 112 0 10 0 113 0 10 0 117 0 10 0 118 0 10 0 121 0 10 0 124 0 10 0 125 0 10 0 126 0 10 0 134 0 10 0 135 0 10 0 137 0 10 0 138 0 10 0 141 0 10 0 142 0 10 0 143 14 14 0 155 0 10 0 157 23 5 0 191 23 5 1 152 23 5 1 175 23 5 1 181 23 5 1 188 3 237 1 189 23 5 1 205 23 5 1 220 23 5 1 227 23 5 1 233 23 5 1 243 23 5 1 251 23 5 1 254 22 253 2 5 23 1 2 6 23 5 2 7 23 5 2 12 23 5 2 34 23 5 2 44 23 9 2 54 0 93 2 55 0 97 2 56 0 101 2 57 23 5 2 93] #[1 23 17 0 25 7 22 0 37 7 22 0 41 7 22 0 49 7 22 0 52 7 22 0 55 7 22 0 57 7 22 0 58 7 22 0 60 7 22 0 62 7 22 0 65 7 22 0 67 7 22 0 69 7 22 0 71 7 22 0 75 7 22 0 76 7 22 0 86 7 22 0 87 7 22 0 88 7 22 0 94 7 22 0 98 7 22 0 99 7 22 0 100 7 22 0 105 7 22 0 108 7 22 0 109 7 22 0 111 7 22 0 112 7 22 0 113 7 22 0 117 7 22 0 118 7 22 0 121 7 22 0 124 7 22 0 125 7 22 0 126 7 22 0 134 7 22 0 135 7 22 0 137 7 22 0 138 7 22 0 141 7 22 0 142 7 22 0 143 7 22 0 152 7 22 0 155 7 22 0 157 23 17 2 74 7 22 2 102] #[1 23 21 0 85 23 21 0 104 13 6 0 157 23 21 2 19 23 21 2 20] #[0 14 18 0 15 0 153] #[1 0 49 0 37 0 10 0 41 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 60 0 10 0 65 0 10 0 69 0 10 0 71 0 10 0 76 0 10 0 86 0 10 0 88 0 10 0 94 0 10 0 99 0 10 0 100 0 10 0 105 0 10 0 109 0 10 0 111 0 10 0 112 0 10 0 117 0 10 0 118 0 10 0 121 0 10 0 124 0 10 0 125 0 10 0 134 0 10 0 135 0 10 0 137 0 10 0 138 0 10 0 141 0 10 0 142 14 22 0 155 0 10 0 157 23 41 1 205 23 41 1 227 23 33 2 24 23 37 2 25 23 41 2 26 23 41 2 27 23 41 2 32 23 53 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[1 23 57 0 25 7 22 0 37 7 22 0 41 7 22 0 49 7 22 0 52 7 22 0 55 7 22 0 57 7 22 0 58 7 22 0 60 7 22 0 62 7 22 0 65 7 22 0 67 7 22 0 69 7 22 0 71 7 22 0 75 7 22 0 76 7 22 0 86 7 22 0 87 7 22 0 88 7 22 0 94 7 22 0 98 7 22 0 99 7 22 0 100 7 22 0 105 7 22 0 108 7 22 0 109 7 22 0 111 7 22 0 112 7 22 0 113 7 22 0 117 7 22 0 118 7 22 0 121 7 22 0 124 7 22 0 125 7 22 0 126 7 22 0 134 7 22 0 135 7 22 0 137 7 22 0 138 7 22 0 141 7 22 0 142 7 22 0 143 7 22 0 152 7 22 0 155 7 22 0 157 23 57 2 74 7 22 2 102] #[0 14 26 0 25 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 14 30 0 15 0 155] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 23 61 1 49 23 61 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 23 61 1 65 3 197 1 66 23 61 1 85 23 61 1 88 23 61 1 89 23 61 1 90 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 12 250 0 25 21 101 0 145 23 65 1 163 21 109 1 164 21 113 1 165] #[0 14 34 0 1 0 5 0 8 0 10 0 12 0 13 0 16 0 17 0 25 0 47 0 48 0 49 0 50 0 52 0 53 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 64 0 65 0 66 0 72 0 75 0 76 0 77 0 78 0 81 0 83 0 86 0 93 0 94 0 97 0 99 0 100 0 116 0 117 0 121 0 122 0 125 0 127 0 128 0 129 0 130 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 146 0 147 0 148 0 152 0 155 0 157 0 158 0 159 0 160 0 161 0 162 0 165 0 166 0 169 0 170 2 102] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 23 69 1 49 23 69 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 23 69 1 65 3 197 1 66 23 69 1 85 23 69 1 88 23 69 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[1 12 250 0 25 12 250 0 32 21 101 0 145 12 250 0 148 23 73 1 163 21 109 1 164 21 113 1 165] #[0 23 77 0 25] #[0 14 38 0 37 0 115 0 155] #[0 14 42 0 37 0 42 0 155] #[0 14 46 0 32 0 148] #[0 14 50 0 25 0 32 0 148] #[0 14 54 0 25 0 32 0 148] #[0 14 58 0 25 0 32 0 148] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 23 81 0 197 23 81 0 198 23 81 0 199 23 81 0 200 1 145 0 201 1 145 0 202 1 145 0 203 23 81 0 204 1 161 0 205 23 81 0 206 23 81 0 207 23 81 0 208 23 81 0 209 23 81 0 210 1 185 0 211 23 81 0 217 23 81 1 159 23 81 2 82 2 229 2 83 3 1 2 101] #[1 4 214 0 1 4 214 0 5 4 214 0 8 4 218 0 9 4 214 0 10 4 214 0 12 4 214 0 13 4 214 0 16 4 214 0 17 4 214 0 47 4 214 0 48 4 214 0 49 4 214 0 52 4 214 0 55 4 214 0 56 4 214 0 60 4 214 0 61 4 214 0 62 4 214 0 65 4 214 0 72 4 214 0 76 4 214 0 79 4 214 0 86 4 214 0 94 4 214 0 97 4 214 0 99 4 214 0 100 4 214 0 104 4 214 0 114 4 214 0 117 4 214 0 121 4 214 0 122 4 214 0 125 4 214 0 128 4 214 0 130 4 214 0 133 4 214 0 134 4 214 0 135 4 214 0 136 4 214 0 138 4 214 0 152 0 243 0 157 4 214 0 158 4 214 0 159 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 165 4 214 0 166 4 214 0 169 4 214 0 170 23 85 0 222 10 117 0 223 10 121 0 224 10 125 0 225 10 129 0 226] #[1 4 214 0 1 4 214 0 5 4 214 0 8 4 218 0 9 4 214 0 10 4 214 0 12 4 214 0 13 4 214 0 16 4 214 0 17 4 214 0 47 4 214 0 48 4 214 0 49 4 214 0 52 4 214 0 55 4 214 0 56 4 214 0 60 4 214 0 61 4 214 0 62 4 214 0 65 4 214 0 72 4 214 0 76 4 214 0 79 4 214 0 86 4 214 0 94 4 214 0 97 4 214 0 99 4 214 0 100 4 214 0 104 4 214 0 114 4 214 0 117 4 214 0 121 4 214 0 122 4 214 0 125 4 214 0 128 4 214 0 130 4 214 0 133 4 214 0 134 4 214 0 135 4 214 0 136 4 214 0 138 4 214 0 152 0 243 0 157 4 214 0 158 4 214 0 159 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 165 4 214 0 166 4 214 0 169 4 214 0 170 23 89 0 222 10 117 0 223 10 121 0 224 10 125 0 225 10 129 0 226] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 23 93 1 49 23 93 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 23 93 1 65 3 197 1 66 23 93 1 85 23 93 1 88 23 93 1 89 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 14 62 0 9 0 15 0 38] #[0 14 66 0 9 0 15 0 38] #[0 14 70 0 15 0 153] #[1 22 57 0 15 14 74 0 145 14 74 0 148] #[0 14 78 0 15 0 145 0 148] #[1 23 97 0 57 23 101 0 99 5 45 0 100 5 57 0 125 23 105 0 126 5 73 0 157 1 125 0 192 21 85 0 194 1 125 0 195 23 109 0 208 23 113 0 209 23 117 1 159 23 121 1 166 23 125 1 167 23 129 1 168 23 133 1 169 23 137 1 170] #[0 23 141 0 155] #[1 0 49 0 37 0 10 0 41 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 57 0 10 0 58 0 10 0 60 0 10 0 62 0 10 0 65 0 10 0 67 0 10 0 69 0 10 0 71 0 10 0 76 0 10 0 86 0 10 0 87 0 10 0 88 0 10 0 94 0 10 0 99 0 10 0 100 0 10 0 105 0 10 0 108 0 10 0 109 0 10 0 111 0 10 0 112 0 10 0 113 0 10 0 117 0 10 0 118 0 10 0 121 0 10 0 124 0 10 0 125 0 10 0 126 0 10 0 134 0 10 0 135 0 10 0 137 0 10 0 138 0 10 0 141 0 10 0 142 0 10 0 143 0 10 0 152 14 82 0 155 0 10 0 157 23 145 0 191 23 145 1 152 23 145 1 174 23 145 1 175 23 145 1 181 23 145 1 188 3 237 1 189 23 145 1 205 23 145 1 220 23 145 1 227 23 145 1 233 23 145 1 243 23 145 1 251 23 145 1 254 23 145 2 12 23 145 2 34 23 145 2 44 4 9 2 54 0 93 2 55 0 97 2 56 0 101 2 57 23 145 2 79] #[0 14 86 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157] #[0 14 90 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 14 94 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[0 14 98 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[0 14 102 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[0 14 106 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[0 14 110 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[0 14 114 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[0 14 118 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[0 14 122 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[0 14 126 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[0 14 130 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[0 23 149 0 155] #[1 0 49 0 37 0 10 0 41 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 57 0 10 0 58 0 10 0 60 0 10 0 62 0 10 0 65 0 10 0 67 0 10 0 69 0 10 0 71 0 10 0 75 0 10 0 76 0 10 0 86 0 10 0 87 0 10 0 88 0 10 0 94 0 10 0 99 0 10 0 100 0 10 0 105 0 10 0 108 0 10 0 109 0 10 0 111 0 10 0 112 0 10 0 113 0 10 0 117 0 10 0 118 0 10 0 121 0 10 0 124 0 10 0 125 0 10 0 126 0 10 0 134 0 10 0 135 0 10 0 137 0 10 0 138 0 10 0 141 0 10 0 142 0 10 0 143 14 134 0 155 0 10 0 157 23 153 0 191 23 153 1 152 23 153 1 175 23 153 1 181 23 153 1 188 3 237 1 189 23 153 1 205 23 153 1 220 23 153 1 227 23 153 1 233 23 153 1 243 23 153 1 251 23 153 1 254 23 153 2 7 23 153 2 12 23 153 2 34 23 153 2 44 23 9 2 54 0 93 2 55 0 97 2 56 0 101 2 57 23 153 2 93] #[0 14 138 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[1 7 125 0 41 0 115 0 49 0 115 0 52 0 115 0 55 0 66 0 57 3 94 0 58 0 115 0 60 0 70 0 62 0 115 0 65 0 74 0 67 3 98 0 69 0 119 0 71 14 142 0 75 0 115 0 76 0 115 0 86 0 78 0 87 23 157 0 88 0 115 0 94 23 161 0 99 0 115 0 100 7 141 0 105 0 123 0 108 23 165 0 109 23 169 0 111 23 173 0 112 7 201 0 113 0 115 0 117 7 161 0 118 0 115 0 121 0 127 0 124 0 115 0 125 0 82 0 126 0 115 0 134 0 115 0 135 2 219 0 137 0 115 0 138 7 173 0 141 0 115 0 142 7 201 0 143 0 139 0 157 4 137 1 153 4 141 1 154 4 145 1 155 7 181 1 176 7 185 1 177 7 189 1 178 7 193 1 182 7 197 1 183 7 201 1 184 7 205 1 190 7 209 1 191 7 213 1 192 7 217 1 206 7 221 1 207 7 225 1 208 7 229 1 221 7 233 1 222 7 237 1 223 7 241 1 228 7 245 1 229 7 249 1 230 7 253 1 234 8 1 1 235 8 5 1 244 8 9 1 245 8 13 1 246 8 17 1 252 4 149 1 255 4 153 2 0 4 157 2 1 4 161 2 13 4 165 2 14 4 169 2 15 4 173 2 38 4 177 2 39 4 181 2 40 4 185 2 45 4 189 2 46 4 193 2 47 23 181 2 77 23 185 2 80 23 189 2 94 23 193 2 95 23 197 2 96] #[0 14 146 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[0 14 150 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 21 77 0 157 23 201 1 159] #[0 14 154 0 37 0 41 0 49 0 52 0 55 0 60 0 65 0 69 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 155 0 157] #[0 14 158 0 37 0 41 0 49 0 52 0 55 0 60 0 65 0 69 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 155 0 157] #[0 23 205 0 155] #[1 0 49 0 37 0 10 0 41 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 60 0 10 0 65 0 10 0 69 0 10 0 71 0 10 0 76 0 10 0 86 0 10 0 88 0 10 0 94 0 10 0 99 0 10 0 100 0 10 0 105 0 10 0 109 0 10 0 111 0 10 0 112 0 10 0 117 0 10 0 118 0 10 0 121 0 10 0 124 0 10 0 125 0 10 0 134 0 10 0 135 0 10 0 137 0 10 0 138 0 10 0 141 0 10 0 142 14 162 0 155 0 10 0 157 23 209 1 205 23 209 1 227 23 209 2 26 23 209 2 27 23 209 2 32 23 53 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[0 14 166 0 37 0 41 0 49 0 52 0 55 0 60 0 65 0 69 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 155 0 157] #[0 14 170 0 37 0 41 0 49 0 52 0 55 0 60 0 65 0 69 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 155 0 157] #[0 14 174 0 37 0 41 0 49 0 52 0 55 0 60 0 65 0 69 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 155 0 157] #[1 23 213 0 41 2 223 0 49 2 223 0 52 2 223 0 55 2 223 0 60 2 223 0 65 14 178 0 69 23 217 0 71 2 223 0 76 2 223 0 86 23 221 0 88 2 223 0 94 23 225 0 99 2 223 0 100 23 229 0 105 23 233 0 109 23 237 0 111 23 241 0 112 2 223 0 117 23 245 0 118 2 223 0 121 7 225 0 124 2 223 0 125 2 223 0 134 2 223 0 135 23 249 0 137 2 223 0 138 23 253 0 141 2 223 0 142 2 223 0 157 7 217 1 206 7 221 1 207 7 225 1 208 7 241 1 228 7 245 1 229 7 249 1 230 24 1 2 75] #[0 14 182 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 14 186 0 15 0 155] #[0 24 5 0 25] #[1 14 190 0 79 14 190 0 82 24 9 0 89 14 190 0 91 14 190 0 92 14 190 0 103 14 190 0 119 14 190 0 145] #[0 14 194 0 25 0 32 0 148] #[0 14 198 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[1 1 70 0 10 1 74 0 35 1 78 0 37 24 13 0 157] #[0 24 17 0 9] #[0 24 21 0 9] #[0 14 202 0 9 0 15 0 38] #[0 14 206 0 15 0 25 0 32 0 145 0 148] #[0 24 25 0 8] #[0 14 210 0 15 0 25 0 32 0 145 0 148] #[0 14 214 0 15 0 25 0 32 0 145 0 148] #[0 14 218 0 15 0 25 0 32 0 145 0 148] #[0 14 222 0 15 0 25 0 32 0 145 0 148] #[0 14 226 0 25 0 32 0 145 0 148] #[1 24 29 0 15 14 230 0 25 14 230 0 32 14 230 0 145 14 230 0 148] #[1 24 33 0 15 14 234 0 25 14 234 0 32 14 234 0 145 14 234 0 148] #[0 14 238 0 15 0 25 0 32 0 145 0 148] #[0 14 242 0 25 0 32 0 145 0 148] #[0 14 246 0 25 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 14 250 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157] #[0 14 254 0 25 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 15 2 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[1 1 43 0 41 1 47 0 49 1 47 0 52 1 47 0 55 3 186 0 57 5 206 0 58 1 47 0 60 3 190 0 62 1 47 0 65 3 194 0 67 5 190 0 69 1 51 0 71 15 6 0 75 1 47 0 76 1 47 0 86 3 198 0 87 2 227 0 88 1 47 0 94 2 231 0 99 1 47 0 100 1 63 0 105 1 67 0 108 2 227 0 109 2 227 0 111 2 227 0 112 5 202 0 113 1 47 0 117 1 43 0 118 1 47 0 121 1 71 0 124 1 47 0 125 3 202 0 126 1 47 0 134 1 47 0 135 2 235 0 137 1 47 0 138 1 63 0 141 1 47 0 142 5 202 0 143 1 79 0 157] #[1 1 83 0 41 1 87 0 49 1 87 0 52 1 87 0 55 3 206 0 57 5 234 0 58 1 87 0 60 3 210 0 62 1 87 0 65 3 214 0 67 5 214 0 69 1 91 0 71 15 10 0 75 1 87 0 76 1 87 0 86 3 218 0 87 2 239 0 88 1 87 0 94 2 239 0 99 1 87 0 100 1 91 0 105 1 99 0 108 2 239 0 109 2 239 0 111 2 239 0 112 5 230 0 113 1 87 0 117 1 83 0 118 1 87 0 121 1 103 0 124 1 87 0 125 3 222 0 126 1 87 0 134 1 87 0 135 2 243 0 137 1 87 0 138 1 91 0 141 1 87 0 142 5 230 0 143 1 87 0 157] #[1 1 123 0 41 1 127 0 49 1 127 0 52 1 127 0 55 3 226 0 57 6 18 0 58 1 127 0 60 3 230 0 62 1 127 0 65 3 234 0 67 6 10 0 69 1 131 0 71 15 14 0 75 1 127 0 76 1 127 0 86 3 238 0 87 2 247 0 88 1 127 0 94 2 251 0 99 1 127 0 100 1 143 0 105 1 147 0 108 2 247 0 109 2 247 0 111 2 247 0 112 6 14 0 113 1 127 0 117 1 123 0 118 1 127 0 121 1 151 0 124 1 127 0 125 3 242 0 126 1 127 0 134 1 127 0 135 2 255 0 137 1 127 0 138 1 143 0 141 1 127 0 142 6 14 0 143 1 159 0 157] #[1 1 163 0 41 1 167 0 49 1 167 0 52 1 167 0 55 3 246 0 57 6 46 0 58 1 167 0 60 3 250 0 62 1 167 0 65 3 254 0 67 6 34 0 69 1 171 0 71 15 18 0 75 1 167 0 76 1 167 0 86 4 2 0 87 3 3 0 88 1 167 0 94 3 7 0 99 1 167 0 100 1 183 0 105 1 187 0 108 3 3 0 109 3 3 0 111 3 3 0 112 6 42 0 113 1 167 0 117 1 163 0 118 1 167 0 121 1 191 0 124 1 167 0 125 4 6 0 126 1 167 0 134 1 167 0 135 3 11 0 137 1 167 0 138 1 183 0 141 1 167 0 142 6 42 0 143 1 199 0 157] #[1 1 203 0 41 1 207 0 49 1 207 0 52 1 207 0 55 4 10 0 57 6 78 0 58 1 207 0 60 4 14 0 62 1 207 0 65 4 18 0 67 6 66 0 69 6 70 0 70 1 211 0 71 15 22 0 75 1 207 0 76 6 70 0 84 1 207 0 86 4 22 0 87 3 15 0 88 1 207 0 94 3 19 0 99 1 207 0 100 1 223 0 105 1 227 0 108 3 15 0 109 3 15 0 111 3 23 0 112 6 74 0 113 1 207 0 117 1 203 0 118 1 207 0 121 1 235 0 124 1 207 0 125 4 26 0 126 1 207 0 134 1 207 0 135 3 27 0 137 1 207 0 138 1 223 0 141 1 207 0 142 6 74 0 143 1 243 0 157] #[1 2 47 0 41 2 51 0 49 2 51 0 52 2 51 0 55 4 38 0 57 2 51 0 60 4 42 0 62 2 51 0 65 6 130 0 69 6 142 0 70 2 55 0 71 15 26 0 75 2 51 0 76 6 142 0 84 2 51 0 86 4 46 0 87 3 31 0 88 2 51 0 94 3 35 0 99 2 51 0 100 2 67 0 105 2 71 0 108 3 31 0 109 3 31 0 111 3 39 0 112 6 146 0 113 2 51 0 117 2 47 0 118 2 51 0 121 2 79 0 124 2 51 0 125 4 50 0 126 2 51 0 134 2 51 0 135 3 39 0 137 2 51 0 138 2 67 0 141 2 51 0 142 6 146 0 143 2 83 0 157] #[1 2 99 0 124 24 37 0 137 24 37 2 80] #[1 24 41 0 71 2 103 0 124 24 41 2 77] #[0 24 45 0 75] #[1 15 30 0 75 24 73 0 88 24 73 0 99 24 73 0 109 24 73 0 111 24 73 0 112 24 73 0 137 24 73 2 96] #[0 15 34 0 75 0 88 0 99 0 109 0 111 0 112 0 137] #[0 15 38 0 15 0 153] #[0 15 42 0 25 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 15 46 0 37 0 41 0 49 0 52 0 55 0 60 0 65 0 69 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 155 0 157] #[1 3 43 0 41 3 43 0 49 3 43 0 52 3 43 0 55 3 43 0 60 3 43 0 65 3 43 0 71 3 43 0 76 3 43 0 86 3 43 0 88 3 43 0 94 3 43 0 99 3 43 0 100 3 43 0 105 3 43 0 109 3 43 0 111 3 43 0 112 3 43 0 117 3 43 0 118 3 43 0 121 5 146 0 124 3 43 0 125 3 43 0 134 3 43 0 135 3 43 0 137 3 43 0 138 3 43 0 141 3 43 0 142 3 43 0 157] #[1 3 47 0 41 3 47 0 49 3 47 0 52 3 47 0 55 3 47 0 60 3 47 0 65 3 47 0 71 3 47 0 76 3 47 0 86 3 47 0 88 3 47 0 94 3 47 0 99 3 47 0 100 3 47 0 105 3 47 0 109 3 47 0 111 3 47 0 112 3 47 0 117 3 47 0 118 3 47 0 121 5 170 0 124 3 47 0 125 3 47 0 134 3 47 0 135 3 47 0 137 3 47 0 138 3 47 0 141 3 47 0 142 3 47 0 157] #[1 3 51 0 41 3 51 0 49 3 51 0 52 3 51 0 55 3 51 0 60 3 51 0 65 3 51 0 71 3 51 0 76 3 51 0 86 3 51 0 88 3 51 0 94 3 51 0 99 3 51 0 100 3 51 0 105 3 51 0 109 3 51 0 111 3 51 0 112 3 51 0 117 3 51 0 118 3 51 0 121 5 198 0 124 3 51 0 125 3 51 0 134 3 51 0 135 3 51 0 137 3 51 0 138 3 51 0 141 3 51 0 142 3 51 0 157] #[1 3 55 0 41 3 59 0 49 3 59 0 52 3 59 0 55 3 59 0 60 3 59 0 65 15 50 0 69 3 55 0 71 3 59 0 76 3 59 0 86 3 55 0 88 3 59 0 94 3 55 0 99 3 59 0 100 3 55 0 105 3 55 0 109 3 55 0 111 3 55 0 112 3 59 0 117 3 55 0 118 3 59 0 121 5 226 0 124 3 59 0 125 3 59 0 134 3 59 0 135 3 55 0 137 3 59 0 138 3 55 0 141 3 59 0 142 3 59 0 157] #[1 3 63 0 41 3 63 0 49 3 63 0 52 3 63 0 55 3 63 0 60 3 63 0 65 3 63 0 71 3 63 0 76 3 63 0 86 3 63 0 88 3 63 0 94 3 63 0 99 3 63 0 100 3 63 0 105 3 63 0 109 3 63 0 111 3 63 0 112 3 63 0 117 3 63 0 118 3 63 0 121 5 242 0 124 3 63 0 125 3 63 0 134 3 63 0 135 3 63 0 137 3 63 0 138 3 63 0 141 3 63 0 142 3 63 0 157] #[1 3 67 0 41 3 67 0 49 3 67 0 52 3 67 0 55 3 67 0 60 3 67 0 65 3 67 0 71 3 67 0 76 3 67 0 86 3 67 0 88 3 67 0 94 3 67 0 99 3 67 0 100 3 67 0 105 3 67 0 109 3 67 0 111 3 67 0 112 3 67 0 117 3 67 0 118 3 67 0 121 5 254 0 124 3 67 0 125 3 67 0 134 3 67 0 135 3 67 0 137 3 67 0 138 3 67 0 141 3 67 0 142 3 67 0 157] #[1 3 71 0 41 3 71 0 49 3 71 0 52 3 71 0 55 3 71 0 60 3 71 0 65 3 71 0 71 3 71 0 76 3 71 0 86 3 71 0 88 3 71 0 94 3 71 0 99 3 71 0 100 3 71 0 105 3 71 0 109 3 71 0 111 3 71 0 112 3 71 0 117 3 71 0 118 3 71 0 121 6 38 0 124 3 71 0 125 3 71 0 134 3 71 0 135 3 71 0 137 3 71 0 138 3 71 0 141 3 71 0 142 3 71 0 157] #[1 3 75 0 41 3 75 0 49 3 75 0 52 3 75 0 55 3 75 0 60 3 75 0 65 3 75 0 71 3 75 0 76 3 75 0 86 3 75 0 88 3 75 0 94 3 75 0 99 3 75 0 100 3 75 0 105 3 75 0 109 3 75 0 111 3 75 0 112 3 75 0 117 3 75 0 118 3 75 0 121 6 54 0 124 3 75 0 125 3 75 0 134 3 75 0 135 3 75 0 137 3 75 0 138 3 75 0 141 3 75 0 142 3 75 0 157] #[1 3 79 0 41 3 79 0 49 3 79 0 52 3 79 0 55 3 79 0 60 3 79 0 65 3 79 0 71 3 79 0 76 3 79 0 86 3 79 0 88 3 79 0 94 3 79 0 99 3 79 0 100 3 79 0 105 3 79 0 109 3 79 0 111 3 79 0 112 3 79 0 117 3 79 0 118 3 79 0 121 6 98 0 124 3 79 0 125 3 79 0 134 3 79 0 135 3 79 0 137 3 79 0 138 3 79 0 141 3 79 0 142 3 79 0 157] #[1 3 83 0 41 3 83 0 49 3 83 0 52 3 83 0 55 3 83 0 60 3 83 0 65 3 83 0 71 3 83 0 76 3 83 0 86 3 83 0 88 3 83 0 94 3 83 0 99 3 83 0 100 3 83 0 105 3 83 0 109 3 83 0 111 3 83 0 112 3 83 0 117 3 83 0 118 3 83 0 121 6 126 0 124 3 83 0 125 3 83 0 134 3 83 0 135 3 83 0 137 3 83 0 138 3 83 0 141 3 83 0 142 3 83 0 157] #[1 3 87 0 41 3 87 0 49 3 87 0 52 3 87 0 55 3 87 0 60 3 87 0 65 3 87 0 71 3 87 0 76 3 87 0 86 3 87 0 88 3 87 0 94 3 87 0 99 3 87 0 100 3 87 0 105 3 87 0 109 3 87 0 111 3 87 0 112 3 87 0 117 3 87 0 118 3 87 0 121 6 158 0 124 3 87 0 125 3 87 0 134 3 87 0 135 3 87 0 137 3 87 0 138 3 87 0 141 3 87 0 142 3 87 0 157] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 24 77 0 69 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 13 129 0 197 13 129 0 198 13 129 0 199 13 129 0 200 1 145 0 201 1 145 0 202 1 145 0 203 13 129 0 204 1 161 0 205 13 129 0 206 13 129 0 207 13 129 0 208 13 129 0 209 13 129 0 210 1 185 0 211 13 129 0 217 13 129 1 159 24 81 1 193 13 129 2 82 2 229 2 83 13 137 2 101] #[0 15 54 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 98 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 152 0 155 0 157 2 102] #[0 24 85 0 157] #[0 24 89 0 9] #[0 15 58 0 25 0 148] #[0 15 62 0 25 0 148] #[0 24 93 0 9] #[1 23 101 0 99 5 73 0 157 1 125 0 192 23 113 0 194 1 125 0 195 23 113 0 209 23 117 1 159 24 97 1 168 23 133 1 169 24 101 1 170] #[1 23 101 0 99 5 73 0 157 1 125 0 192 23 113 0 194 1 125 0 195 23 113 0 209 24 105 1 159 24 109 1 169 24 113 1 170] #[0 15 209 0 124] #[0 15 221 0 124] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 24 117 0 197 24 117 0 198 24 117 0 199 24 117 0 200 1 145 0 201 1 145 0 202 1 145 0 203 24 117 0 204 1 161 0 205 24 117 0 206 24 117 0 207 24 117 0 208 24 117 0 209 24 117 0 210 1 185 0 211 24 117 0 217 24 117 1 159 24 117 2 82 2 229 2 83 24 121 2 97 3 1 2 101] #[0 15 6 0 75 0 88 0 99 0 109 0 111 0 112 0 137] #[0 15 10 0 75 0 88 0 99 0 109 0 111 0 112 0 137] #[0 15 14 0 75 0 88 0 99 0 109 0 111 0 112 0 137] #[0 15 18 0 75 0 88 0 99 0 109 0 111 0 112 0 137] #[0 15 22 0 75 0 88 0 99 0 109 0 111 0 112 0 137] #[0 15 26 0 75 0 88 0 99 0 109 0 111 0 112 0 137] #[0 15 66 0 75 0 88 0 99 0 109 0 111 0 112 0 137] #[1 5 13 0 49 1 145 0 52 1 145 0 55 1 145 0 60 1 145 0 65 1 145 0 76 1 145 0 86 1 145 0 94 5 45 0 100 1 145 0 117 1 145 0 121 5 57 0 125 1 145 0 134 1 145 0 135 1 145 0 138 1 65 0 142 5 73 0 157 1 125 0 192 1 121 0 194 1 125 0 195 24 125 0 197 24 125 0 198 24 125 0 199 24 125 0 200 1 145 0 201 1 145 0 202 1 145 0 203 24 125 0 204 1 161 0 205 24 125 0 206 24 125 0 207 24 125 0 208 24 125 0 209 24 125 0 210 1 185 0 211 24 125 0 217 24 125 1 159 24 125 2 82 2 229 2 83 3 1 2 101] #[0 24 129 0 157] #[0 15 70 0 79 0 82 0 91 0 92 0 103 0 119 0 145] #[0 15 74 0 25 0 32 0 148] #[0 15 78 0 25 0 32 0 145 0 148] #[1 24 133 0 15 15 82 0 25 15 82 0 32 15 82 0 145 15 82 0 148] #[0 15 86 0 25 0 32 0 145 0 148] #[0 15 90 0 15 0 25 0 32 0 145 0 148] #[0 15 94 0 15 0 25 0 32 0 145 0 148] #[0 15 98 0 25 0 32 0 145 0 148] #[1 1 70 0 10 1 74 0 35 1 78 0 37 15 102 0 157] #[1 24 137 0 157 24 141 2 98 24 145 2 99] #[1 1 70 0 10 1 74 0 35 1 78 0 37 24 149 0 157] #[1 10 142 0 8 18 93 0 26 24 153 1 156 24 153 1 157] #[1 23 101 0 99 5 73 0 157 1 125 0 192 23 113 0 194 1 125 0 195 23 113 0 209 24 105 1 159 24 109 1 169 24 157 1 170] #[0 24 161 0 37] #[1 24 165 0 25 24 137 0 157 24 169 2 99] #[0 15 106 0 25 0 157] #[0 24 173 0 25] #[0 24 177 0 8] #[0 15 110 0 25 0 32 0 145 0 148] #[1 0 105 0 1 0 109 0 5 3 5 0 8 0 117 0 10 0 121 0 12 0 125 0 13 0 129 0 16 0 133 0 17 0 141 0 47 0 145 0 48 3 9 0 49 3 13 0 52 3 17 0 55 3 21 0 56 3 25 0 60 0 181 0 61 0 185 0 62 3 29 0 65 2 217 0 72 3 33 0 76 3 37 0 79 3 41 0 86 3 45 0 94 0 237 0 97 0 241 0 99 3 49 0 100 3 53 0 117 3 57 0 121 1 5 0 122 3 61 0 125 1 17 0 128 2 217 0 130 1 33 0 133 3 65 0 134 3 69 0 135 3 73 0 136 3 77 0 138 1 81 0 152 3 81 0 157 1 89 0 158 1 93 0 159 1 97 0 160 1 101 0 161 0 14 0 162 1 105 0 165 0 18 0 166 1 109 0 169 1 113 0 170 3 85 0 192 3 89 0 229 1 197 0 230 1 197 0 231 1 205 0 232 1 209 0 233 1 213 0 236 1 217 0 237 1 197 0 239 1 197 0 241 1 197 0 242 1 233 0 243 1 237 0 244 1 241 0 245 1 197 0 246 1 197 0 247 1 197 0 249 1 197 0 250 1 197 0 251 1 197 0 252 1 197 0 253 3 89 1 9 1 197 1 10 1 197 1 11 1 197 1 16 1 197 1 22 1 197 1 23 1 197 1 24 1 197 1 25 3 109 1 28 3 109 1 29 3 109 1 34 3 109 1 35 3 109 1 36 3 109 1 37 3 125 1 38 3 129 1 39 3 133 1 40 3 137 1 41 3 141 1 42 3 145 1 43 3 149 1 44 3 153 1 45 3 157 1 46 3 161 1 47 3 165 1 48 24 181 1 49 24 181 1 50 1 197 1 51 3 177 1 52 3 177 1 54 3 177 1 60 3 189 1 63 24 181 1 65 3 197 1 66 24 181 1 85 24 181 1 88 24 181 1 89 24 181 1 90 1 197 2 72 2 217 2 73 3 109 2 84 1 197 2 85 1 197 2 86 3 109 2 87 1 197 2 88] #[0 15 114 0 37 0 41 0 49 0 52 0 55 0 57 0 58 0 60 0 62 0 65 0 67 0 69 0 71 0 75 0 76 0 86 0 87 0 88 0 94 0 99 0 100 0 105 0 108 0 109 0 111 0 112 0 113 0 117 0 118 0 121 0 124 0 125 0 126 0 134 0 135 0 137 0 138 0 141 0 142 0 143 0 155 0 157] #[0 15 118 0 25 0 157] #[0 15 122 0 37 0 41 0 49 0 52 0 55 0 60 0 65 0 69 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 155 0 157] #[1 10 70 0 9 0 49 0 37 0 10 0 49 0 10 0 52 0 10 0 55 0 10 0 60 0 10 0 65 0 10 0 76 0 10 0 86 0 10 0 94 0 10 0 100 0 10 0 104 0 10 0 107 0 10 0 114 0 10 0 117 0 10 0 121 0 10 0 125 0 10 0 128 0 10 0 134 0 10 0 135 0 10 0 138 0 10 0 142 0 10 0 157 24 185 1 196 18 25 1 197 18 29 1 198 18 33 1 199 18 37 1 204 18 41 2 54 0 93 2 55 0 97 2 56 0 101 2 57] #[0 24 189 0 38] #[0 24 193 0 9] #[0 15 126 0 25 0 157] #[1 12 250 0 25 12 250 0 32 21 101 0 145 12 250 0 148 24 197 1 163 21 109 1 164 21 113 1 165] #[1 7 109 0 25 7 113 0 32 1 77 0 148 7 117 1 94 24 201 1 195] #[0 15 130 0 37 0 41 0 49 0 52 0 55 0 60 0 65 0 69 0 71 0 76 0 86 0 88 0 94 0 99 0 100 0 105 0 109 0 111 0 112 0 117 0 118 0 121 0 124 0 125 0 134 0 135 0 137 0 138 0 141 0 142 0 155 0 157]	).! !!CSharpParser class methodsFor: 'accessing'!parseBlock: aString onError: aBlock	^ self		parse: aString		startingAt: self startingStateForblock		onError: aBlock! !!CSharpParser class methodsFor: 'private'!keywords	^ keywords		ifNil:			[ keywords := #('abstract' 'as' 'base' 'bool' 'break' 'byte' 'case' 'catch' 'char' 'checked' 'class' 'const' 'continue' 'decimal' 'default' 'delegate' 'do' 'double' 'else' 'enum' 'event' 'explicit' 'extern' 'false' 'finally' 'fixed' 'float' 'for' 'foreach' 'goto' 'if' 'implicit' 'in' 'int' 'interface' 'internal' 'is' 'lock' 'long' 'namespace' 'new' 'null' 'object' 'operator' 'out' 'override' 'params' 'private' 'protected' 'public' 'readonly' 'ref' 'return' 'sbyte' 'sealed' 'short' 'sizeof' 'stackalloc' 'static' 'string' 'struct' 'switch' 'this' 'throw' 'true' 'try' 'typeof' 'uint' 'ulong' 'unchecked' 'unsafe' 'ushort' 'using' 'virtual' 'void' 'volatile' 'while')				asSet ]! !SmaCCScanner subclass: #CSharpScanner	instanceVariableNames: 'preprocessorDirectives'	classVariableNames: ''	package: 'SmaCC_CSharp'!!CSharpScanner methodsFor: 'generated'!scan35	[ self step.	currentCharacter == $"		ifTrue: [ self recordMatch: #(167).			self step.			currentCharacter == $"				ifTrue: [ ^ self scan35 ].			^ self reportLastMatch ].	currentCharacter == ${		ifTrue: [ self recordMatch: #(168).			self step.			currentCharacter == ${				ifTrue: [ ^ self scan35 ].			^ self reportLastMatch ].	true ] whileTrue! !!CSharpScanner methodsFor: 'generated'!scan26	[ self step.	currentCharacter == $"		ifTrue: [ self recordMatch: #(169).			self step.			currentCharacter == $"				ifTrue: [ ^ self scan26 ].			^ self reportLastMatch ].	true ] whileTrue! !!CSharpScanner methodsFor: 'generated'!scan5	[ self step.	currentCharacter == $"		ifTrue: [ ^ self recordAndReportMatch: #(161) ].	currentCharacter == $\		ifTrue:			[ ^ self scan5X1 ].	currentCharacter == ${		ifTrue: [ self recordMatch: #(162).			self step.			currentCharacter == ${				ifTrue: [ ^ self scan5 ].			^ self reportLastMatch ].	currentCharacter <= Character tab		or: [ (currentCharacter between: Character pageUp and: $!!)				or: [ (currentCharacter between: $# and: $[)						or: [ (currentCharacter between: $] and: $z)								or: [ currentCharacter >= $| ] ] ] ] ] whileTrue.	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!emptySymbolTokenId	^ 614! !!CSharpScanner methodsFor: 'generated'!scan34	self step.	(currentCharacter isDigit		or: [ (currentCharacter between: $A and: $F)				or: [ currentCharacter between: $a and: $f ] ])		ifTrue: [ ^ self scan33 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan28	[ self step.	currentCharacter == $`		ifTrue: [ self recordMatch: #(173).			self step.			currentCharacter == $`				ifTrue: [ ^ self scan28 ].			^ self reportLastMatch ].	true ] whileTrue! !!CSharpScanner methodsFor: 'generated'!scan1X10	self recordMatch: #(20).	self step.	currentCharacter isDigit		ifTrue: [ ^ self scan14 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan33	[ self step.	currentCharacter == $"		ifTrue: [ ^ self recordAndReportMatch: #(163) ].	currentCharacter == $\		ifTrue:			[ ^ self scan33X1 ].	currentCharacter == ${		ifTrue: [ self recordMatch: #(164).			self step.			currentCharacter == ${				ifTrue: [ ^ self scan33 ].			^ self reportLastMatch ].	currentCharacter <= Character tab		or: [ (currentCharacter between: Character pageUp and: $!!)				or: [ (currentCharacter between: $# and: $[)						or: [ (currentCharacter between: $] and: $z)								or: [ currentCharacter >= $| ] ] ] ] ] whileTrue.	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan6	self step.	(currentCharacter isDigit		or: [ (currentCharacter between: $A and: $F)				or: [ currentCharacter between: $a and: $f ] ])		ifTrue: [ ^ self scan5 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan1X1	self step.	currentCharacter == $\		ifTrue: [ self step.			currentCharacter == $x				ifTrue: [ self step.					(currentCharacter isDigit						or: [ (currentCharacter between: $A and: $F)								or: [ currentCharacter between: $a and: $f ] ])						ifTrue: [ self step.							currentCharacter == $'								ifTrue: [ ^ self recordAndReportMatch: #(160) ].							(currentCharacter isDigit								or: [ (currentCharacter between: $A and: $F)										or: [ currentCharacter between: $a and: $f ] ])								ifTrue: [ self step.									currentCharacter == $'										ifTrue: [ ^ self recordAndReportMatch: #(160) ].									(currentCharacter isDigit										or: [ (currentCharacter between: $A and: $F)												or: [ currentCharacter between: $a and: $f ] ])										ifTrue: [ self step.											currentCharacter == $'												ifTrue: [ ^ self recordAndReportMatch: #(160) ].											(currentCharacter isDigit												or: [ (currentCharacter between: $A and: $F)														or: [ currentCharacter between: $a and: $f ] ])												ifTrue: [ ^ self scan10 ] ] ] ].					^ self reportLastMatch ].			('Uu' includes: currentCharacter)				ifTrue: [ self step.					(currentCharacter isDigit						or: [ (currentCharacter between: $A and: $F)								or: [ currentCharacter between: $a and: $f ] ])						ifTrue: [ self step.							(currentCharacter isDigit								or: [ (currentCharacter between: $A and: $F)										or: [ currentCharacter between: $a and: $f ] ])								ifTrue: [ self step.									(currentCharacter isDigit										or: [ (currentCharacter between: $A and: $F)												or: [ currentCharacter between: $a and: $f ] ])										ifTrue: [ self step.											(currentCharacter isDigit												or: [ (currentCharacter between: $A and: $F)														or: [ currentCharacter between: $a and: $f ] ])												ifTrue: [ self step.													currentCharacter == $'														ifTrue: [ ^ self recordAndReportMatch: #(160) ].													(currentCharacter isDigit														or: [ (currentCharacter between: $A and: $F)																or: [ currentCharacter between: $a and: $f ] ])														ifTrue: [ self step.															(currentCharacter isDigit																or: [ (currentCharacter between: $A and: $F)																		or: [ currentCharacter between: $a and: $f ] ])																ifTrue: [ self step.																	(currentCharacter isDigit																		or: [ (currentCharacter between: $A and: $F)																				or: [ currentCharacter between: $a and: $f ] ])																		ifTrue: [ self step.																			(currentCharacter isDigit																				or: [ (currentCharacter between: $A and: $F)																						or: [ currentCharacter between: $a and: $f ] ])																				ifTrue: [ ^ self scan10 ] ] ] ] ] ] ] ].					^ self reportLastMatch ].			(('"''0\' includes: currentCharacter)				or: [ (currentCharacter between: $a and: $b)						or:							[ 'fnrtv' includes: currentCharacter ] ])				ifTrue: [ ^ self scan10 ].			^ self reportLastMatch ].	(currentCharacter <= Character tab		or: [ (currentCharacter between: Character pageUp and: $&)				or: [ (currentCharacter between: $( and: $[)						or: [ currentCharacter >= $] ] ] ])		ifTrue: [ ^ self scan10 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan8	self recordMatch: #(3).	self step.	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(4) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan23	self recordMatch: #(26).	self step.	currentCharacter == $<		ifTrue: [ self recordMatch: #(27).			self step.			currentCharacter == $=				ifTrue: [ ^ self recordAndReportMatch: #(28) ].			^ self reportLastMatch ].	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(29) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan27	self recordMatch: #(39).	self step.	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(40) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan14	[ self recordMatch: #(159).	self step.	currentCharacter isDigit ] whileTrue.	('Ee' includes: currentCharacter)		ifTrue: [ ^ self scan15 ].	('DFMdfm' includes: currentCharacter)		ifTrue: [ ^ self recordAndReportMatch: #(159) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan3X1	self step.	currentCharacter == $x		ifTrue: [ ^ self scan4 ].	('Uu' includes: currentCharacter)		ifTrue: [ self step.			(currentCharacter isDigit				or: [ (currentCharacter between: $A and: $F)						or: [ currentCharacter between: $a and: $f ] ])				ifTrue: [ self step.					(currentCharacter isDigit						or: [ (currentCharacter between: $A and: $F)								or: [ currentCharacter between: $a and: $f ] ])						ifTrue: [ self step.							(currentCharacter isDigit								or: [ (currentCharacter between: $A and: $F)										or: [ currentCharacter between: $a and: $f ] ])								ifTrue: [ ^ self scan4 ] ] ].			^ self reportLastMatch ].	(('"''0\' includes: currentCharacter)		or: [ (currentCharacter between: $a and: $b)				or:					[ 'fnrtv' includes: currentCharacter ] ])		ifTrue: [ ^ self scan3 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan1X7	[ self recordMatch: #(171).	self step.	currentCharacter isSeparator		or: [ currentCharacter == Character pageUp ] ] whileTrue.	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan3	[ self step.	currentCharacter == $"		ifTrue: [ ^ self recordAndReportMatch: #(169) ].	currentCharacter == $\		ifTrue:			[ ^ self scan3X1 ].	currentCharacter <= Character tab		or: [ (currentCharacter between: Character pageUp and: $!!)				or: [ (currentCharacter between: $# and: $[)						or: [ currentCharacter >= $] ] ] ] ] whileTrue.	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan30	self recordMatch: #(21).	self step.	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(22) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan1X9	self step.	currentCharacter == $"		ifTrue: [ ^ self scan5 ].	currentCharacter == $@		ifTrue: [ self step.			currentCharacter == $"				ifTrue: [ ^ self scan7 ] ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan15	self step.	('+-' includes: currentCharacter)		ifTrue: [ self step ].	currentCharacter isDigit		ifTrue: [ ^ self scan16 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scanForTokenX2X2	currentCharacter == $?		ifTrue: [ ^ self scan25 ].	currentCharacter == $@		ifTrue: [ ^ self scan32 ].	currentCharacter == $[		ifTrue: [ ^ self recordAndReportMatch: #(37) ].	currentCharacter == $]		ifTrue: [ ^ self recordAndReportMatch: #(38) ].	currentCharacter == $^		ifTrue: [ ^ self scan27 ].	currentCharacter == $`		ifTrue: [ ^ self scan28 ].	currentCharacter == ${		ifTrue: [ ^ self recordAndReportMatch: #(148) ].	currentCharacter == $|		ifTrue: [ ^ self scan29 ].	currentCharacter == $}		ifTrue: [ ^ self scan33 ].	currentCharacter == $~		ifTrue: [ ^ self recordAndReportMatch: #(152) ].	(currentCharacter isLetter or: [ currentCharacter == $_ ])		ifTrue:			[ self scanForTokenX2X1 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan7	[ self step.	currentCharacter == $"		ifTrue: [ self recordMatch: #(165).			self step.			currentCharacter == $"				ifTrue: [ ^ self scan7 ].			^ self reportLastMatch ].	currentCharacter == ${		ifTrue: [ self recordMatch: #(166).			self step.			currentCharacter == ${				ifTrue: [ ^ self scan7 ].			^ self reportLastMatch ].	true ] whileTrue! !!CSharpScanner methodsFor: 'generated'!scan1X8	[ self recordMatch: #(157).	self step.	currentCharacter isAlphaNumeric or: [ currentCharacter == $_ ] ]		whileTrue! !!CSharpScanner methodsFor: 'generated'!tokenActions	^ #(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil #comment nil nil nil nil nil nil nil nil nil nil nil nil nil nil #whitespace #preprocessorDirective #patternToken)! !!CSharpScanner methodsFor: 'generated'!scan19	[ self recordMatch: #(158 159).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan18 ].	currentCharacter isDigit ] whileTrue.	('Ee' includes: currentCharacter)		ifTrue: [ ^ self scan15 ].	('Ll' includes: currentCharacter)		ifTrue: [ ^ self scan20 ].	('Uu' includes: currentCharacter)		ifTrue: [ ^ self scan21 ].	('DFMdfm' includes: currentCharacter)		ifTrue: [ ^ self recordAndReportMatch: #(159) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scanForTokenX1	self step.	currentCharacter == $!!		ifTrue: [ ^ self scan2 ].	currentCharacter == $%		ifTrue: [ ^ self scan8 ].	currentCharacter == $&		ifTrue: [ ^ self scan9 ].	currentCharacter == $(		ifTrue: [ ^ self recordAndReportMatch: #(8) ].	^ self scanForTokenX1X3! !!CSharpScanner methodsFor: 'generated'!gtId	^ 153! !!CSharpScanner methodsFor: 'generated'!scan32	self step.	(currentCharacter isLetter or: [ currentCharacter == $_ ])		ifTrue: [ [ self recordMatch: #(157).			self step.			currentCharacter isAlphaNumeric or: [ currentCharacter == $_ ] ]				whileTrue ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan33X1	self step.	currentCharacter == $x		ifTrue: [ ^ self scan34 ].	('Uu' includes: currentCharacter)		ifTrue: [ self step.			(currentCharacter isDigit				or: [ (currentCharacter between: $A and: $F)						or: [ currentCharacter between: $a and: $f ] ])				ifTrue: [ self step.					(currentCharacter isDigit						or: [ (currentCharacter between: $A and: $F)								or: [ currentCharacter between: $a and: $f ] ])						ifTrue: [ self step.							(currentCharacter isDigit								or: [ (currentCharacter between: $A and: $F)										or: [ currentCharacter between: $a and: $f ] ])								ifTrue: [ ^ self scan34 ] ] ].			^ self reportLastMatch ].	(('"''0\' includes: currentCharacter)		or: [ (currentCharacter between: $a and: $b)				or:					[ 'fnrtv' includes: currentCharacter ] ])		ifTrue: [ ^ self scan33 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scanForTokenX1X1	[ self recordMatch: #(157).	self step.	currentCharacter isAlphaNumeric or: [ currentCharacter == $_ ] ]		whileTrue! !!CSharpScanner methodsFor: 'generated'!scanForTokenX1X2	currentCharacter == $?		ifTrue: [ ^ self scan25 ].	currentCharacter == $@		ifTrue: [ ^ self scan32 ].	currentCharacter == $[		ifTrue: [ ^ self recordAndReportMatch: #(37) ].	currentCharacter == $]		ifTrue: [ ^ self recordAndReportMatch: #(38) ].	currentCharacter == $^		ifTrue: [ ^ self scan27 ].	currentCharacter == $`		ifTrue: [ ^ self scan28 ].	currentCharacter == ${		ifTrue: [ ^ self recordAndReportMatch: #(148) ].	currentCharacter == $|		ifTrue: [ ^ self scan29 ].	currentCharacter == $}		ifTrue: [ ^ self scan35 ].	currentCharacter == $~		ifTrue: [ ^ self recordAndReportMatch: #(152) ].	(currentCharacter isLetter or: [ currentCharacter == $_ ])		ifTrue:			[ self scanForTokenX1X1 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan1	self step.	currentCharacter == $!!		ifTrue: [ ^ self scan2 ].	currentCharacter == $"		ifTrue: [ ^ self scan3 ].	currentCharacter == $#		ifTrue:			[ ^ self scan1X4 ].	currentCharacter == $$		ifTrue:			[ ^ self scan1X9 ].	currentCharacter == $%		ifTrue: [ ^ self scan8 ].	currentCharacter == $&		ifTrue: [ ^ self scan9 ].	currentCharacter == $'		ifTrue:			[ ^ self scan1X1 ].	currentCharacter == $(		ifTrue: [ ^ self recordAndReportMatch: #(8) ].	currentCharacter == $)		ifTrue: [ ^ self recordAndReportMatch: #(9) ].	currentCharacter == $*		ifTrue: [ ^ self scan11 ].	currentCharacter == $+		ifTrue: [ ^ self scan12 ].	^ self scan1X12! !!CSharpScanner methodsFor: 'generated'!scan11	self recordMatch: #(10).	self step.	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(11) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan1X4	[ self recordMatch: #(172).	self step.	currentCharacter <= Character tab		or: [ (currentCharacter between: Character pageUp and: Character newPage)				or: [ currentCharacter >= (Character value: 14) ] ] ] whileTrue.	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan29	self recordMatch: #(149).	self step.	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(150) ].	currentCharacter == $|		ifTrue: [ ^ self recordAndReportMatch: #(151) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scanForTokenX1X3	currentCharacter == $)		ifTrue: [ ^ self recordAndReportMatch: #(9) ].	currentCharacter == $*		ifTrue: [ ^ self scan11 ].	currentCharacter == $+		ifTrue: [ ^ self scan12 ].	currentCharacter == $,		ifTrue: [ ^ self recordAndReportMatch: #(15) ].	currentCharacter == $-		ifTrue: [ ^ self scan13 ].	currentCharacter == $.		ifTrue: [ ^ self recordAndReportMatch: #(20) ].	currentCharacter == $/		ifTrue: [ ^ self scan30 ].	currentCharacter == $:		ifTrue: [ ^ self scan22 ].	currentCharacter == $;		ifTrue: [ ^ self recordAndReportMatch: #(25) ].	currentCharacter == $<		ifTrue: [ ^ self scan23 ].	currentCharacter == $=		ifTrue: [ ^ self scan24 ].	currentCharacter == $>		ifTrue: [ ^ self scan31 ].	^ self scanForTokenX1X2! !!CSharpScanner methodsFor: 'generated'!scanForTokenX2X1	[ self recordMatch: #(157).	self step.	currentCharacter isAlphaNumeric or: [ currentCharacter == $_ ] ]		whileTrue! !!CSharpScanner methodsFor: 'generated'!scan13	self recordMatch: #(16).	self step.	currentCharacter == $-		ifTrue: [ ^ self recordAndReportMatch: #(17) ].	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(18) ].	currentCharacter == $>		ifTrue: [ ^ self recordAndReportMatch: #(19) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scanForTokenX2X3	currentCharacter == $)		ifTrue: [ ^ self recordAndReportMatch: #(9) ].	currentCharacter == $*		ifTrue: [ ^ self scan11 ].	currentCharacter == $+		ifTrue: [ ^ self scan12 ].	currentCharacter == $,		ifTrue: [ ^ self recordAndReportMatch: #(15) ].	currentCharacter == $-		ifTrue: [ ^ self scan13 ].	currentCharacter == $.		ifTrue: [ ^ self recordAndReportMatch: #(20) ].	currentCharacter == $/		ifTrue: [ ^ self scan30 ].	currentCharacter == $:		ifTrue: [ ^ self scan22 ].	currentCharacter == $;		ifTrue: [ ^ self recordAndReportMatch: #(25) ].	currentCharacter == $<		ifTrue: [ ^ self scan23 ].	currentCharacter == $=		ifTrue: [ ^ self scan24 ].	currentCharacter == $>		ifTrue: [ ^ self scan31 ].	^ self scanForTokenX2X2! !!CSharpScanner methodsFor: 'generated'!scan18	self step.	currentCharacter isDigit		ifTrue: [ ^ self scan14 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!gtgtId	^ 154! !!CSharpScanner methodsFor: 'generated'!scan24	self recordMatch: #(30).	self step.	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(31) ].	currentCharacter == $>		ifTrue: [ ^ self recordAndReportMatch: #(32) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan22	self recordMatch: #(23).	self step.	currentCharacter == $:		ifTrue: [ ^ self recordAndReportMatch: #(24) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan16	[ self recordMatch: #(159).	self step.	currentCharacter isDigit ] whileTrue.	('DFMdfm' includes: currentCharacter)		ifTrue: [ ^ self recordAndReportMatch: #(159) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan1X5	self step.	currentCharacter == $"		ifTrue: [ ^ self scan26 ].	(currentCharacter isLetter or: [ currentCharacter == $_ ])		ifTrue: [ [ self recordMatch: #(157).			self step.			currentCharacter isAlphaNumeric or: [ currentCharacter == $_ ] ]				whileTrue ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!errorTokenId	^ 615! !!CSharpScanner methodsFor: 'generated'!scan4	self step.	(currentCharacter isDigit		or: [ (currentCharacter between: $A and: $F)				or: [ currentCharacter between: $a and: $f ] ])		ifTrue: [ ^ self scan3 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scanForTokenX2	self step.	currentCharacter == $!!		ifTrue: [ ^ self scan2 ].	currentCharacter == $%		ifTrue: [ ^ self scan8 ].	currentCharacter == $&		ifTrue: [ ^ self scan9 ].	currentCharacter == $(		ifTrue: [ ^ self recordAndReportMatch: #(8) ].	^ self scanForTokenX2X3! !!CSharpScanner methodsFor: 'generated'!scan17	[ self step.	currentCharacter == $*		ifTrue: [ [ self step.			currentCharacter == $* ] whileTrue.			currentCharacter == $/				ifTrue: [ ^ self recordAndReportMatch: #(156) ].			^ self scan17 ].	true ] whileTrue! !!CSharpScanner methodsFor: 'generated'!scan5X1	self step.	currentCharacter == $x		ifTrue: [ ^ self scan6 ].	('Uu' includes: currentCharacter)		ifTrue: [ self step.			(currentCharacter isDigit				or: [ (currentCharacter between: $A and: $F)						or: [ currentCharacter between: $a and: $f ] ])				ifTrue: [ self step.					(currentCharacter isDigit						or: [ (currentCharacter between: $A and: $F)								or: [ currentCharacter between: $a and: $f ] ])						ifTrue: [ self step.							(currentCharacter isDigit								or: [ (currentCharacter between: $A and: $F)										or: [ currentCharacter between: $a and: $f ] ])								ifTrue: [ ^ self scan6 ] ] ].			^ self reportLastMatch ].	(('"''0\' includes: currentCharacter)		or: [ (currentCharacter between: $a and: $b)				or:					[ 'fnrtv' includes: currentCharacter ] ])		ifTrue: [ ^ self scan5 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan1X2	self recordMatch: #(158 159).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan18 ].	currentCharacter isDigit		ifTrue: [ ^ self scan19 ].	('Ee' includes: currentCharacter)		ifTrue: [ ^ self scan15 ].	('Ll' includes: currentCharacter)		ifTrue: [ ^ self scan20 ].	('Uu' includes: currentCharacter)		ifTrue: [ ^ self scan21 ].	('Xx' includes: currentCharacter)		ifTrue: [ self step.			(currentCharacter isDigit				or: [ (currentCharacter between: $A and: $F)						or: [ currentCharacter between: $a and: $f ] ])				ifTrue: [ [ self recordMatch: #(158).					self step.					('Ll' includes: currentCharacter)						ifTrue: [ ^ self scan20 ].					('Uu' includes: currentCharacter)						ifTrue: [ ^ self scan21 ].					currentCharacter isDigit						or: [ (currentCharacter between: $A and: $F)								or: [ currentCharacter between: $a and: $f ] ] ] whileTrue ].			^ self reportLastMatch ].	('DFMdfm' includes: currentCharacter)		ifTrue: [ ^ self recordAndReportMatch: #(159) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan1X11	currentCharacter == $[		ifTrue: [ ^ self recordAndReportMatch: #(37) ].	currentCharacter == $]		ifTrue: [ ^ self recordAndReportMatch: #(38) ].	currentCharacter == $^		ifTrue: [ ^ self scan27 ].	currentCharacter == $`		ifTrue: [ ^ self scan28 ].	currentCharacter == ${		ifTrue: [ ^ self recordAndReportMatch: #(148) ].	currentCharacter == $|		ifTrue: [ ^ self scan29 ].	currentCharacter == $}		ifTrue: [ ^ self recordAndReportMatch: #(155) ].	currentCharacter == $~		ifTrue: [ ^ self recordAndReportMatch: #(152) ].	currentCharacter isDigit		ifTrue: [ ^ self scan19 ].	(currentCharacter isSeparator		or: [ currentCharacter == Character pageUp ])		ifTrue:			[ ^ self scan1X7 ].	(currentCharacter isLetter or: [ currentCharacter == $_ ])		ifTrue:			[ self scan1X8 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan10	self step.	currentCharacter == $'		ifTrue: [ ^ self recordAndReportMatch: #(160) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scanForToken	scope == #interpolatedString		ifTrue:			[ ^ self scanForTokenX2 ].	scope == #interpolatedVerbatimString		ifTrue:			[ ^ self scanForTokenX1 ].	scope == #default		ifTrue: [ ^ self scan1 ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan9	self recordMatch: #(5).	self step.	currentCharacter == $&		ifTrue: [ ^ self recordAndReportMatch: #(6) ].	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(7) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!rightBraceId	^ 155! !!CSharpScanner methodsFor: 'generated'!scan1X12	currentCharacter == $,		ifTrue: [ ^ self recordAndReportMatch: #(15) ].	currentCharacter == $-		ifTrue: [ ^ self scan13 ].	currentCharacter == $.		ifTrue:			[ ^ self scan1X10 ].	currentCharacter == $/		ifTrue:			[ ^ self scan1X3 ].	currentCharacter == $0		ifTrue:			[ ^ self scan1X2 ].	currentCharacter == $:		ifTrue: [ ^ self scan22 ].	currentCharacter == $;		ifTrue: [ ^ self recordAndReportMatch: #(25) ].	currentCharacter == $<		ifTrue: [ ^ self scan23 ].	currentCharacter == $=		ifTrue: [ ^ self scan24 ].	currentCharacter == $>		ifTrue:			[ ^ self scan1X6 ].	currentCharacter == $?		ifTrue: [ ^ self scan25 ].	currentCharacter == $@		ifTrue:			[ ^ self scan1X5 ].	^ self scan1X11! !!CSharpScanner methodsFor: 'generated'!scan25	self recordMatch: #(35).	self step.	currentCharacter == $?		ifTrue: [ ^ self recordAndReportMatch: #(36) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan31	self step.	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(33) ].	currentCharacter == $>		ifTrue: [ self step.			currentCharacter == $=				ifTrue: [ ^ self recordAndReportMatch: #(34) ] ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!IdentifierId	^ 157! !!CSharpScanner methodsFor: 'generated'!scan20	self recordMatch: #(158).	self step.	('Uu' includes: currentCharacter)		ifTrue: [ ^ self recordAndReportMatch: #(158) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan1X3	self recordMatch: #(21).	self step.	currentCharacter == $*		ifTrue: [ ^ self scan17 ].	currentCharacter == $/		ifTrue: [ [ self recordMatch: #(156).			self step.			currentCharacter <= Character tab				or: [ (currentCharacter between: Character pageUp and: Character newPage)						or: [ currentCharacter >= (Character value: 14) ] ] ] whileTrue.			^ self reportLastMatch ].	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(22) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan1X6	self recordMatch: #(153).	self step.	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(33) ].	currentCharacter == $>		ifTrue: [ self recordMatch: #(154).			self step.			currentCharacter == $=				ifTrue: [ ^ self recordAndReportMatch: #(34) ] ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan2	self recordMatch: #(1).	self step.	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(2) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan21	self recordMatch: #(158).	self step.	('Ll' includes: currentCharacter)		ifTrue: [ ^ self recordAndReportMatch: #(158) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'generated'!scan12	self recordMatch: #(12).	self step.	currentCharacter == $+		ifTrue: [ ^ self recordAndReportMatch: #(13) ].	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(14) ].	^ self reportLastMatch! !!CSharpScanner methodsFor: 'initialize-release'!initialize	super initialize.	preprocessorDirectives := Set new! !!CSharpScanner methodsFor: 'scanning'!preprocessorDirective	preprocessorDirectives add: (Array with: start + 1 with: matchEnd).	^ self whitespace! !!CSharpScanner methodsFor: 'accessing'!preprocessorDirectives	^ preprocessorDirectives! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CSharpScanner class	instanceVariableNames: ''!!CSharpScanner class methodsFor: 'generated-initialization'!initializeKeywordMap	keywordMap := Dictionary new.	#(#(157 'abstract' #(41 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'add' #(42 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'alias' #(43 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'as' #(44 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'ascending' #(45 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'assembly' #(46 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'await' #(47 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'base' #(48 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'bool' #(49 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'break' #(50 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'by' #(51 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'byte' #(52 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'case' #(53 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'catch' #(54 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'char' #(55 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'checked' #(56 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'class' #(57 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'const' #(58 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'continue' #(59 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'decimal' #(60 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'default' #(61 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'delegate' #(62 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'descending' #(63 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'do' #(64 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'double' #(65 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'else' #(66 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'enum' #(67 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'equals' #(68 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'event' #(69 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'explicit' #(70 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'extern' #(71 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'false' #(72 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'field' #(73 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'finally' #(74 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'fixed' #(75 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'float' #(76 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'for' #(77 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'foreach' #(78 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'from' #(79 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'get' #(80 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'goto' #(81 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'group' #(82 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'if' #(83 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'implicit' #(84 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'in' #(85 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'int' #(86 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'interface' #(87 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'internal' #(88 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'into' #(89 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'is' #(90 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'join' #(91 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'let' #(92 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'lock' #(93 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'long' #(94 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'method' #(95 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'module' #(96 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'nameof' #(97 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'namespace' #(98 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'new' #(99 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'null' #(170 #(#default))) #(157 'object' #(100 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'on' #(101 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'operator' #(102 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'orderby' #(103 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'out' #(104 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'override' #(105 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'param' #(106 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'params' #(107 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'partial' #(108 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'private' #(109 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'property' #(110 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'protected' #(111 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'public' #(112 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'readonly' #(113 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'ref' #(114 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'remove' #(115 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'return' #(116 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'sbyte' #(117 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'sealed' #(118 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'select' #(119 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'set' #(120 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'short' #(121 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'sizeof' #(122 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'stackalloc' #(123 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'static' #(124 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'string' #(125 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'struct' #(126 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'switch' #(127 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'this' #(128 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'throw' #(129 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'true' #(130 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'try' #(131 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'type' #(132 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'typeof' #(133 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'uint' #(134 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'ulong' #(135 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'unchecked' #(136 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'unsafe' #(137 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'ushort' #(138 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'using' #(139 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'var' #(140 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'virtual' #(141 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'void' #(142 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'volatile' #(143 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'when' #(144 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'where' #(145 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'while' #(146 #(#default #interpolatedString #interpolatedVerbatimString))) #(157 'yield' #(147 #(#default #interpolatedString #interpolatedVerbatimString))))		do: [ :each | 			(keywordMap at: each first ifAbsentPut: [ Dictionary new ])				at: (each at: 2)				put: each last ].	^ keywordMap! !