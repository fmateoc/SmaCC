SmaCCParseNode subclass: #JSONParseNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_JSON_Parser'!!JSONParseNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitParse: self! !JSONParseNode subclass: #JSONArrayNode	instanceVariableNames: 'leftBracket rightBracket commas values'	classVariableNames: ''	package: 'SmaCC_JSON_Parser'!!JSONArrayNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	commas := OrderedCollection new: 2.	values := OrderedCollection new: 2.! !!JSONArrayNode methodsFor: 'generated'!tokenVariables	^ #(#leftBracket #rightBracket)! !!JSONArrayNode methodsFor: 'generated'!rightBracket	^ rightBracket! !!JSONArrayNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commas)! !!JSONArrayNode methodsFor: 'generated'!leftBracket	^ leftBracket! !!JSONArrayNode methodsFor: 'generated'!compositeNodeVariables	^ #(#values)! !!JSONArrayNode methodsFor: 'generated'!values	^ values! !!JSONArrayNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!JSONArrayNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitArray: self! !!JSONArrayNode methodsFor: 'generated'!commas	^ commas! !!JSONArrayNode methodsFor: 'generated'!leftBracket: aSmaCCToken	leftBracket := aSmaCCToken! !!JSONArrayNode methodsFor: 'generated'!rightBracket: aSmaCCToken	rightBracket := aSmaCCToken! !!JSONArrayNode methodsFor: 'generated'!values: anOrderedCollection	self setParents: self values to: nil.	values := anOrderedCollection.	self setParents: self values to: self! !JSONParseNode subclass: #JSONLiteralNode	instanceVariableNames: 'value'	classVariableNames: ''	package: 'SmaCC_JSON_Parser'!!JSONLiteralNode methodsFor: 'generated'!tokenVariables	^ #(#value)! !!JSONLiteralNode methodsFor: 'generated'!value	^ value! !!JSONLiteralNode methodsFor: 'generated'!value: aSmaCCToken	value := aSmaCCToken! !!JSONLiteralNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitLiteral: self! !JSONLiteralNode subclass: #JSONBooleanNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_JSON_Parser'!!JSONBooleanNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitBoolean: self! !JSONParseNode subclass: #JSONMemberNode	instanceVariableNames: 'name colon value'	classVariableNames: ''	package: 'SmaCC_JSON_Parser'!!JSONMemberNode methodsFor: 'generated'!tokenVariables	^ #(#name #colon)! !!JSONMemberNode methodsFor: 'generated'!colon: aSmaCCToken	colon := aSmaCCToken! !!JSONMemberNode methodsFor: 'generated'!colon	^ colon! !!JSONMemberNode methodsFor: 'generated'!nodeVariables	^ #(#value)! !!JSONMemberNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitMember: self! !!JSONMemberNode methodsFor: 'generated'!value	^ value! !!JSONMemberNode methodsFor: 'generated'!name	^ name! !!JSONMemberNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!JSONMemberNode methodsFor: 'generated'!value: aJSONParseNode	self value notNil		ifTrue: [ self value parent: nil ].	value := aJSONParseNode.	self value notNil		ifTrue: [ self value parent: self ]! !JSONLiteralNode subclass: #JSONNullNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_JSON_Parser'!!JSONNullNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitNull: self! !JSONLiteralNode subclass: #JSONNumberNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_JSON_Parser'!!JSONNumberNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitNumber: self! !JSONParseNode subclass: #JSONObjectNode	instanceVariableNames: 'leftBrace rightBrace commas members'	classVariableNames: ''	package: 'SmaCC_JSON_Parser'!!JSONObjectNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	commas := OrderedCollection new: 2.	members := OrderedCollection new: 2.! !!JSONObjectNode methodsFor: 'generated'!tokenVariables	^ #(#leftBrace #rightBrace)! !!JSONObjectNode methodsFor: 'generated'!leftBrace	^ leftBrace! !!JSONObjectNode methodsFor: 'generated'!rightBrace: aSmaCCToken	rightBrace := aSmaCCToken! !!JSONObjectNode methodsFor: 'generated'!members	^ members! !!JSONObjectNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#commas)! !!JSONObjectNode methodsFor: 'generated'!compositeNodeVariables	^ #(#members)! !!JSONObjectNode methodsFor: 'generated'!rightBrace	^ rightBrace! !!JSONObjectNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!JSONObjectNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitObject: self! !!JSONObjectNode methodsFor: 'generated'!members: anOrderedCollection	self setParents: self members to: nil.	members := anOrderedCollection.	self setParents: self members to: self! !!JSONObjectNode methodsFor: 'generated'!commas	^ commas! !!JSONObjectNode methodsFor: 'generated'!leftBrace: aSmaCCToken	leftBrace := aSmaCCToken! !SmaCCParseNodeVisitor subclass: #JSONParseNodeVisitor	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_JSON_Parser'!!JSONParseNodeVisitor methodsFor: 'generated'!visitMember: aMember	^ self visitParse: aMember! !!JSONParseNodeVisitor methodsFor: 'generated'!visitParse: aParse	^ self visitSmaCCParseNode: aParse! !!JSONParseNodeVisitor methodsFor: 'generated'!visitNull: aNull	^ self visitLiteral: aNull! !!JSONParseNodeVisitor methodsFor: 'generated'!visitLiteral: aLiteral	^ self visitParse: aLiteral! !!JSONParseNodeVisitor methodsFor: 'generated'!visitObject: anObject	^ self visitParse: anObject! !!JSONParseNodeVisitor methodsFor: 'generated'!visitString: aString	^ self visitLiteral: aString! !!JSONParseNodeVisitor methodsFor: 'generated'!visitArray: anArray	^ self visitParse: anArray! !!JSONParseNodeVisitor methodsFor: 'generated'!visitBoolean: aBoolean	^ self visitLiteral: aBoolean! !!JSONParseNodeVisitor methodsFor: 'generated'!visitNumber: aNumber	^ self visitLiteral: aNumber! !SmaCCParser subclass: #JSONParser	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_JSON_Parser'!!JSONParser methodsFor: 'generated-reduction actions'!reduceActionForvalue7: nodes	| result |	result := JSONNullNode new.	result value: (nodes at: 1).	^ result! !!JSONParser methodsFor: 'generated-reduction actions'!reduceActionForelements1: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 1).	self add: (nodes at: 3) to: (result at: 2).	^ result! !!JSONParser methodsFor: 'generated-reduction actions'!reduceActionForvalue3: nodes	| result |	result := JSONStringNode new.	result value: (nodes at: 1).	^ result! !!JSONParser methodsFor: 'generated-reduction actions'!reduceActionForarray2: nodes	| result |	result := JSONArrayNode new.	result leftBracket: (nodes at: 1).	result addTokens: ((nodes at: 2) at: 1) to: result commas.	result addNodes: ((nodes at: 2) at: 2) to: result values.	result rightBracket: (nodes at: 3).	^ result! !!JSONParser methodsFor: 'generated-reduction actions'!reduceActionFormember1: nodes	| result |	result := JSONMemberNode new.	result name: (nodes at: 1).	result colon: (nodes at: 2).	result value: (nodes at: 3).	^ result! !!JSONParser methodsFor: 'generated-reduction actions'!reduceActionForvalue6: nodes	| result |	result := JSONBooleanNode new.	result value: (nodes at: 1).	^ result! !!JSONParser methodsFor: 'generated-reduction actions'!reduceActionForelements2: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 2).	^ result! !!JSONParser methodsFor: 'generated-reduction actions'!reduceActionForvalue4: nodes	| result |	result := JSONNumberNode new.	result value: (nodes at: 1).	^ result! !!JSONParser methodsFor: 'generated-reduction actions'!reduceActionForobject1: nodes	| result |	result := JSONObjectNode new.	result leftBrace: (nodes at: 1).	result rightBrace: (nodes at: 2).	^ result! !!JSONParser methodsFor: 'generated-reduction actions'!reduceActionForarray1: nodes	| result |	result := JSONArrayNode new.	result leftBracket: (nodes at: 1).	result rightBracket: (nodes at: 2).	^ result! !!JSONParser methodsFor: 'generated-reduction actions'!reduceActionForobject2: nodes	| result |	result := JSONObjectNode new.	result leftBrace: (nodes at: 1).	result addTokens: ((nodes at: 2) at: 1) to: result commas.	result addNodes: ((nodes at: 2) at: 2) to: result members.	result rightBrace: (nodes at: 3).	^ result! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!JSONParser class	instanceVariableNames: ''!!JSONParser class methodsFor: 'file types'!fileExtension	^ '.json'! !!JSONParser class methodsFor: 'generated'!definitionComment"%root Parse;%prefix JSON;%suffix Node;%hierarchy Literal (String Number Boolean Null);%ignore_variables comma;%unicode;<hex>	: [0-9a-fA-F]	;<number>	: \-? (\d | [1-9]\d+) (\.\d+)? ([eE][\+\-]?\d+)?	;<string>	: \"" ([^\x00-\x1F\""\\]|(\\([\""\\\/bnrt]|(u<hex>{4,4}))))* \""	;<whitespace>	: [\x09\x0a\x0d\x20]+	;value	: object	| array	| <string> 'value' {{String}}	| <number> 'value' {{Number}}	| ""true"" 'value' {{Boolean}}	| ""false"" 'value' {{Boolean}}	| ""null"" 'value' {{Null}}	;object	: ""{"" 'leftBrace' members? ""}"" 'rightBrace' {{}}	;members	: members "","" 'comma' member 'member'	| member 'member'	;member	: <string> 'name' "":"" 'colon' value 'value' {{}}	;array	: ""["" 'leftBracket' elements? ""]"" 'rightBracket' {{}}	;elements	: elements "","" 'comma' value 'value'	| value 'value'	;"! !!JSONParser class methodsFor: 'generated'!symbolTypes	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #JSONParseNode #JSONParseNode #JSONObjectNode #OrderedCollection #JSONMemberNode #JSONArrayNode #OrderedCollection #SmaCCToken #SmaCCErrorNode)! !!JSONParser class methodsFor: 'generated'!startingStateForvalue	^ 1! !!JSONParser class methodsFor: 'generated'!reduceTable^#(	#(14 1 #reduceActionForvalue6: 337926 false ) 	#(14 1 #reduceActionForvalue7: 337927 false ) 	#(14 1 #reduceActionForvalue6: 337925 false ) 	#(14 1 #reduceActionForvalue4: 337924 false ) 	#(14 1 #reduceActionForvalue3: 337923 false ) 	#(14 1 #liftFirstValue: 337921 false ) 	#(14 1 #liftFirstValue: 337922 false ) 	#(18 2 #reduceActionForarray1: 713729 false ) 	#(19 1 #reduceActionForelements2: 779266 false ) 	#(15 2 #reduceActionForobject1: 520193 false ) 	#(16 1 #reduceActionForelements2: 581634 false ) 	#(18 3 #reduceActionForarray2: 713730 false ) 	#(15 3 #reduceActionForobject2: 520194 false ) 	#(19 3 #reduceActionForelements1: 779265 false ) 	#(17 3 #reduceActionFormember1: 652289 false ) 	#(16 3 #reduceActionForelements1: 581633 false )	).! !!JSONParser class methodsFor: 'generated'!symbolNames	^ #('","' '":"' '"["' '"]"' '"false"' '"null"' '"true"' '"{"' '"}"' '<number>' '<string>' '<whitespace>' 'B e g i n' 'value' 'object' 'members' 'member' 'array' 'elements' 'E O F' 'error')! !!JSONParser class methodsFor: 'generated'!transitionTable^#(#[1 0 9 0 3 0 13 0 5 0 17 0 6 0 21 0 7 0 25 0 8 0 29 0 10 0 33 0 11 0 37 0 14 0 37 0 15 0 37 0 18] #[1 0 9 0 3 0 49 0 4 0 13 0 5 0 17 0 6 0 21 0 7 0 25 0 8 0 29 0 10 0 33 0 11 0 53 0 14 0 53 0 15 0 53 0 18 0 57 0 19] #[0 0 6 0 1 0 4 0 9 0 20] #[0 0 10 0 1 0 4 0 9 0 20] #[0 0 14 0 1 0 4 0 9 0 20] #[1 0 61 0 9 0 65 0 11 0 69 0 16 0 73 0 17] #[0 0 18 0 1 0 4 0 9 0 20] #[0 0 22 0 1 0 4 0 9 0 20] #[0 0 0 0 20] #[0 0 26 0 1 0 4 0 9 0 20] #[0 0 30 0 1 0 4 0 9 0 20] #[0 0 34 0 1 0 4 0 9 0 20] #[0 0 38 0 1 0 4] #[1 0 77 0 1 0 81 0 4] #[0 0 42 0 1 0 4 0 9 0 20] #[0 0 85 0 2] #[1 0 89 0 1 0 93 0 9] #[0 0 46 0 1 0 9] #[1 0 9 0 3 0 13 0 5 0 17 0 6 0 21 0 7 0 25 0 8 0 29 0 10 0 33 0 11 0 97 0 14 0 97 0 15 0 97 0 18] #[0 0 50 0 1 0 4 0 9 0 20] #[1 0 9 0 3 0 13 0 5 0 17 0 6 0 21 0 7 0 25 0 8 0 29 0 10 0 33 0 11 0 101 0 14 0 101 0 15 0 101 0 18] #[1 0 65 0 11 0 105 0 17] #[0 0 54 0 1 0 4 0 9 0 20] #[0 0 58 0 1 0 4] #[0 0 62 0 1 0 9] #[0 0 66 0 1 0 9]	).! !!JSONParser class methodsFor: 'generated-accessing'!scannerClass	^JSONScanner! !!JSONParser class methodsFor: 'generated-accessing'!cacheId	^'2019-04-22T07:07:38.619472-05:00'! !SmaCCScanner subclass: #JSONScanner	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_JSON_Parser'!!JSONScanner methodsFor: 'generated'!scanForTokenX1	[ self recordMatch: #(12).	self step.	(currentCharacter between: Character tab and: Character lf)		or: [ currentCharacter == Character cr				or: [ currentCharacter == Character space ] ] ] whileTrue! !!JSONScanner methodsFor: 'generated'!errorTokenId	^ 21! !!JSONScanner methodsFor: 'generated'!scanForTokenX4	(self scanForString: 'ull')		ifTrue: [ ^ self recordAndReportMatch: #(6) ].	^ self reportLastMatch! !!JSONScanner methodsFor: 'generated'!tokenActions	^ #(nil nil nil nil nil nil nil nil nil nil nil #whitespace)! !!JSONScanner methodsFor: 'generated'!scan2	self recordMatch: #(10).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan3 ].	('Ee' includes: currentCharacter)		ifTrue: [ ^ self scan4 ].	^ self reportLastMatch! !!JSONScanner methodsFor: 'generated'!scan4	self step.	(currentCharacter between: $0 and: $9)		ifTrue: [ [ self recordMatch: #(10).			self step.			currentCharacter between: $0 and: $9 ] whileTrue.			^ self reportLastMatch ].	('+-' includes: currentCharacter)		ifTrue: [ self step.			(currentCharacter between: $0 and: $9)				ifTrue: [ [ self recordMatch: #(10).					self step.					currentCharacter between: $0 and: $9 ] whileTrue ] ].	^ self reportLastMatch! !!JSONScanner methodsFor: 'generated'!scanForTokenX2	self step.	currentCharacter == $0		ifTrue: [ ^ self scan2 ].	(currentCharacter between: $1 and: $9)		ifTrue: [ ^ self scan5 ].	^ self reportLastMatch! !!JSONScanner methodsFor: 'generated'!scan5	[ self recordMatch: #(10).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan3 ].	currentCharacter between: $0 and: $9 ] whileTrue.	('Ee' includes: currentCharacter)		ifTrue: [ ^ self scan4 ].	^ self reportLastMatch! !!JSONScanner methodsFor: 'generated'!scan3	self step.	(currentCharacter between: $0 and: $9)		ifTrue: [ [ self recordMatch: #(10).			self step.			currentCharacter between: $0 and: $9 ] whileTrue.			('Ee' includes: currentCharacter)				ifTrue: [ ^ self scan4 ] ].	^ self reportLastMatch! !!JSONScanner methodsFor: 'generated'!scanForTokenX5	(self scanForString: 'alse')		ifTrue: [ ^ self recordAndReportMatch: #(5) ].	^ self reportLastMatch! !!JSONScanner methodsFor: 'generated'!scanForToken	self step.	currentCharacter == $"		ifTrue: [ ^ self scan1 ].	currentCharacter == $,		ifTrue: [ ^ self recordAndReportMatch: #(1) ].	currentCharacter == $-		ifTrue:			[ ^ self scanForTokenX2 ].	currentCharacter == $0		ifTrue: [ ^ self scan2 ].	currentCharacter == $:		ifTrue: [ ^ self recordAndReportMatch: #(2) ].	^ self scanForTokenX6! !!JSONScanner methodsFor: 'generated'!emptySymbolTokenId	^ 20! !!JSONScanner methodsFor: 'generated'!scanForTokenX6	currentCharacter == $[		ifTrue: [ ^ self recordAndReportMatch: #(3) ].	currentCharacter == $]		ifTrue: [ ^ self recordAndReportMatch: #(4) ].	currentCharacter == $f		ifTrue:			[ ^ self scanForTokenX5 ].	currentCharacter == $n		ifTrue:			[ ^ self scanForTokenX4 ].	currentCharacter == $t		ifTrue:			[ ^ self scanForTokenX3 ].	currentCharacter == ${		ifTrue: [ ^ self recordAndReportMatch: #(8) ].	currentCharacter == $}		ifTrue: [ ^ self recordAndReportMatch: #(9) ].	(currentCharacter between: $1 and: $9)		ifTrue: [ ^ self scan5 ].	((currentCharacter between: Character tab and: Character lf)		or: [ currentCharacter == Character cr				or: [ currentCharacter == Character space ] ])		ifTrue:			[ self scanForTokenX1 ].	^ self reportLastMatch! !!JSONScanner methodsFor: 'generated'!scanForTokenX3	(self scanForString: 'rue')		ifTrue: [ ^ self recordAndReportMatch: #(7) ].	^ self reportLastMatch! !!JSONScanner methodsFor: 'generated'!scan1	[ self step.	currentCharacter == $"		ifTrue: [ ^ self recordAndReportMatch: #(11) ].	currentCharacter == $\		ifTrue: [ self step.			currentCharacter == $u				ifTrue: [ self step.					((currentCharacter between: $0 and: $9)						or: [ (currentCharacter between: $A and: $F)								or: [ currentCharacter between: $a and: $f ] ])						ifTrue: [ self step.							((currentCharacter between: $0 and: $9)								or: [ (currentCharacter between: $A and: $F)										or: [ currentCharacter between: $a and: $f ] ])								ifTrue: [ self step.									((currentCharacter between: $0 and: $9)										or: [ (currentCharacter between: $A and: $F)												or: [ currentCharacter between: $a and: $f ] ])										ifTrue: [ self step.											((currentCharacter between: $0 and: $9)												or: [ (currentCharacter between: $A and: $F)														or: [ currentCharacter between: $a and: $f ] ])												ifTrue: [ ^ self scan1 ] ] ] ].					^ self reportLastMatch ].			('"/\bnrt' includes: currentCharacter)				ifTrue: [ ^ self scan1 ].			^ self reportLastMatch ].	(currentCharacter between: Character space and: $!!)		or: [ (currentCharacter between: $# and: $[)				or: [ currentCharacter >= $] ] ] ] whileTrue.	^ self reportLastMatch! !JSONLiteralNode subclass: #JSONStringNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_JSON_Parser'!!JSONStringNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitString: self! !