GLMCompositePresentation subclass: #SmaCCRewriteEditor	instanceVariableNames: 'treeInitializer'	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_UI'!!SmaCCRewriteEditor methodsFor: 'building'!compose	| tabulator file |	tabulator := self tabulator.	tabulator		column: #rewrites;		column: #rule span: 3.	tabulator transmit		to: #rewrites;		transformed: [ :rewriteFile | 			"Hack to get the value since sometimes it passes the wrong value"			file := (rewriteFile isKindOf: SmaCCTransformationToolkitModel)				ifTrue: [ rewriteFile rewrites ]				ifFalse: [ rewriteFile ].			Array with: file ];		andShow: [ :presentation | 			| tree |			tree := presentation tree.			tree				title: 'Rewrites';				updateOn: #display from: [ file announcer ];				act: [ :t | self deleteRule: t selection ] icon: GLMUIThemeExtraIcons glamorousTrash entitled: 'Delete';				act: [ :t | self addRuleTo: t selection ] icon: GLMUIThemeExtraIcons glamorousAdd entitled: 'Add Rule';				act: [ :t | self addFileRuleTo: t selection ] entitled: 'Add File';				act: [ :t | self addMethodRuleTo: t selection ] entitled: 'Add Method';				act: [ :t | self addPropertyRuleTo: t selection ] entitled: 'Add Property';				allExpanded;				filterOn: [ :text :each | each matches: text ];				format: [ :rewrite | rewrite displayString ];				children: [ :rewrite | rewrite rewrites ].			treeInitializer value: tree ].	tabulator transmit		from: #rewrites port: #selection;		to: #rule;		andShow: [ :presentation :rewrite | 			rewrite notNil				ifTrue: [ rewrite buildInterfaceIn: presentation ] ].	tabulator transmit		fromOutsidePort: #rewriteToSelect;		to: #rewrites port: #selection! !!SmaCCRewriteEditor methodsFor: 'initialize-release'!treeInitializer: aBlock	treeInitializer := aBlock! !!SmaCCRewriteEditor methodsFor: 'initialize-release'!initialize	super initialize.	treeInitializer := [ :tree |  ]! !!SmaCCRewriteEditor methodsFor: 'private'!addPropertyRuleTo: aRewrite	| rewrite |	aRewrite isNil		ifTrue: [ ^ self ].	rewrite := SmaCCRewritePropertyDefinition new.	self addRewrite: rewrite to: aRewrite! !!SmaCCRewriteEditor methodsFor: 'private'!addMethodRuleTo: aRewrite	| rewrite |	aRewrite isNil		ifTrue: [ ^ self ].	rewrite := SmaCCRewriteMethodDefinition new.	self addRewrite: rewrite to: aRewrite! !!SmaCCRewriteEditor methodsFor: 'private'!addRewrite: newRewrite to: aRewrite	aRewrite isComposite		ifTrue: [ aRewrite addTransformation: newRewrite ]		ifFalse: [ aRewrite parent notNil				ifTrue: [ aRewrite parent addTransformation: newRewrite before: aRewrite ] ]! !!SmaCCRewriteEditor methodsFor: 'private'!addRuleTo: aRewrite	| rewrite |	aRewrite isNil		ifTrue: [ ^ self ].	rewrite := SmaCCRewrite newInstance.	self addRewrite: rewrite to: aRewrite! !!SmaCCRewriteEditor methodsFor: 'private'!addFileRuleTo: aRewriteFile	| rewrite filename |	aRewriteFile isNil		ifTrue: [ ^ self ].	filename := UITheme current		fileSaveIn: UITheme builder		title: 'Enter rewrite rule file name'		extensions: #('rw')		path: nil.	filename isNil		ifTrue: [ ^ self ].	rewrite := filename asFileReference exists		ifTrue: [ SmaCCRewriteRuleFileParser parseFile: filename ]		ifFalse: [ SmaCCRewriteFile new filename: filename ].	self addRewrite: rewrite to: aRewriteFile! !!SmaCCRewriteEditor methodsFor: 'private'!deleteRule: aRewrite	(aRewrite isNil or: [ aRewrite parent isNil ])		ifTrue: [ ^ self ].	(self confirm: 'Do you want to delete: ' , aRewrite displayString)		ifFalse: [ ^ self ].	aRewrite parent removeTransformation: aRewrite.	self update! !GLMRubricTextPresentation subclass: #SmaCCTextPresentation	instanceVariableNames: 'morph highlights'	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_UI'!!SmaCCTextPresentation methodsFor: 'copying'!copy! !!SmaCCTextPresentation methodsFor: 'rendering'!renderGlamorouslyOn: aRenderer	morph := super renderGlamorouslyOn: aRenderer.	^ morph! !!SmaCCTextPresentation methodsFor: 'highlighting'!addHighlight: aColor from: startIndex to: stopIndex	highlights isNil		ifTrue: [ highlights := OrderedCollection new ].	highlights add: (Array with: aColor with: startIndex with: stopIndex)! !!SmaCCTextPresentation methodsFor: 'highlighting'!buildHighlight: anArray into: aHighlightCollection	| paragraph from to |	paragraph := morph paragraph.	from := paragraph characterBlockForIndex: (anArray at: 2).	to := paragraph characterBlockForIndex: anArray last.	from textLine = to textLine		ifTrue: [ aHighlightCollection				add:					(TextHighlightByBounds new						color: anArray first;						bounds: (from topLeft corner: to bottomRight)) ]		ifFalse: [ aHighlightCollection				add:					(TextHighlightByBounds new						color: anArray first;						bounds: (from topLeft corner: from textLine bottomRight));				add:					(TextHighlightByBounds new						fillWidth: true;						color: anArray first;						bounds: (from bottomLeft corner: to topRight));				add:					(TextHighlightByBounds new						color: anArray first;						bounds: (to textLine topLeft corner: to bottomRight)) ]! !!SmaCCTextPresentation methodsFor: 'highlighting'!updateHighlights	| hlghts |	morph isNil		ifTrue: [ ^ self ].	(highlights isNil or: [ highlights isEmpty ])		ifTrue: [ morph highlights: #() ]		ifFalse: [ hlghts := OrderedCollection new.			highlights do: [ :each | self buildHighlight: each into: hlghts ].			morph highlights: hlghts ].	morph changed! !!SmaCCTextPresentation methodsFor: 'highlighting'!clearHighlights	highlights := nil! !!SmaCCTextPresentation methodsFor: 'highlighting'!updateHighlightsAndScroll	self updateHighlights.	self scrollToFirstHighlight! !!SmaCCTextPresentation methodsFor: 'highlighting'!scrollToFirstHighlight	| paragraph from |	(morph isNil or: [ highlights isNil or: [ highlights isEmpty ] ])		ifTrue: [ ^ self ].	paragraph := morph paragraph.	from := paragraph characterBlockForIndex: (highlights first at: 2).	morph scrollPane vScrollbarValue: (from textLine lineNumber - 1) / paragraph lines size! !GLMCompositePresentation subclass: #SmaCCTransformationToolkit	instanceVariableNames: 'filename resultsList previewResult'	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_UI'!!SmaCCTransformationToolkit methodsFor: 'initialize-release'!initialize	super initialize.	self model: SmaCCTransformationToolkitModel new! !!SmaCCTransformationToolkit methodsFor: 'actions'!selectValidationParser	| class |	class := UITheme builder chooseDropList: 'Select validation parser class' list: self parserClasses.	class isNil		ifTrue: [ ^ self ].	self model validationParserClass: class! !!SmaCCTransformationToolkit methodsFor: 'actions'!debugRewriteForNode: selection	self		debugUsingSeachBlock: nil		andTransformationBlock: [ :rewrite :node | 			rewrite == selection rewrite				and: [ node class == selection nodeClass						and: [ node startPosition = selection nodeInterval first								and: [ node stopPosition = selection nodeInterval last ] ] ] ]! !!SmaCCTransformationToolkit methodsFor: 'actions'!selectInputParser	| class |	class := UITheme builder chooseDropList: 'Select input parser class' list: self parserClasses.	class isNil		ifTrue: [ ^ self ].	self model inputParserClass: class! !!SmaCCTransformationToolkit methodsFor: 'actions'!runAll	self runOn: self model files! !!SmaCCTransformationToolkit methodsFor: 'actions'!ensureRewriteFilename	| name |	self model rewrites filename isNil		ifTrue: [ name := self				promptForSaveFile: 'Save Rewrites To'				extensions: #('rw').			name isNil				ifTrue: [ ^ self ].			self model rewrites filename: name ]! !!SmaCCTransformationToolkit methodsFor: 'actions'!debugUsingSeachBlock: searchBlock andTransformationBlock: transformationBlock	SmaCCRewriteMatch haltBlock: searchBlock.	SmaCCRewriteTransformation haltBlock: transformationBlock.	[ self openResultFor: self selectedFile ]		ensure: [ SmaCCRewriteMatch haltBlock: nil.			SmaCCRewriteTransformation haltBlock: nil ]! !!SmaCCTransformationToolkit methodsFor: 'actions'!saveRewrites	self ensureRewriteFilename.	self model saveRewrites! !!SmaCCTransformationToolkit methodsFor: 'actions'!saveConfiguration	self ensureRewriteFilename.	filename isNil		ifTrue: [ filename := self promptForSaveFile: 'Save Configuration To' extensions: #('rwc').			filename isNil				ifTrue: [ ^ self ] ].	self model saveTo: filename! !!SmaCCTransformationToolkit methodsFor: 'actions'!addFiles	| name |	name := self		promptForFile: 'Add file'		extensions:			((self model inputParserClass ifNil: [ SmaCCParser ]) fileExtensions				collect: [ :each | 					each first = $.						ifTrue: [ each copyFrom: 2 to: each size ]						ifFalse: [ each ] ]).	name isNil		ifTrue: [ ^ self ].	self addFiles: (Array with: name)! !!SmaCCTransformationToolkit methodsFor: 'actions'!openResultFor: aFilename	| result processor |	aFilename isNil		ifTrue: [ ^ self ].	Cursor wait		showWhile: [ result := SmaCCRewriteCompleteResult new.			processor := SmaCCRewriteProcessor new.			processor rules: self model rewrites.			processor parserClass: self model inputParserClass.			processor validationParserClass: self model validationParserClass.			processor debug: true.			[ processor processFile: aFilename usingResult: result ]				ensure: [ processor debug: false ].			self result: result.			self gotoPreviewTab ]! !!SmaCCTransformationToolkit methodsFor: 'actions'!addFiles: aCollection	| files |	files := Set withAll: self model files.	files addAll: aCollection.	self model files: files asSortedCollection asArray.	self updateModel! !!SmaCCTransformationToolkit methodsFor: 'actions'!updateModel	"Hack to get things to update"	self model: self model! !!SmaCCTransformationToolkit methodsFor: 'actions'!addDirectory	| dir names match stream todo |	dir := UITheme builder chooseDirectory: 'Add all files in directory' path: nil.	dir isNil		ifTrue: [ ^ self ].	names := Set new.	stream := WriteStream on: String new.	(self model inputParserClass ifNil: [ SmaCCParser ]) fileExtensions		do: [ :each | 			stream				nextPut: $*;				nextPutAll: each ]		separatedBy: [ stream nextPut: $; ].	match := stream contents.	todo := OrderedCollection with: dir.	[ todo notEmpty ]		whileTrue: [ ((dir := todo removeFirst) filesMatching: match) do: [ :each | names add: each fullName ].			todo addAll: dir directories ].	self addFiles: names! !!SmaCCTransformationToolkit methodsFor: 'actions'!setServer	| server |	server := UITheme builder textEntry: 'Enter server name:' title: 'Server' entryText: self model server.	server isNil		ifTrue: [ ^ self ].	self model server: server! !!SmaCCTransformationToolkit methodsFor: 'actions'!parserClasses	^ SmaCCParser allSubclasses		asSortedCollection: [ :a :b | a name < b name ]! !!SmaCCTransformationToolkit methodsFor: 'actions'!debugRewrite: aSmaCCRewrite	| block |	aSmaCCRewrite isNil		ifTrue: [ ^ self ].	block := [ :rewrite :node | rewrite == aSmaCCRewrite ].	self debugUsingSeachBlock: block andTransformationBlock: block! !!SmaCCTransformationToolkit methodsFor: 'actions'!runOn: aCollection	(self model runOnServer and: [ self model areRewritesModified ])		ifTrue: [ (self confirm: 'Do you want to save your transformations before running on the server?')				ifTrue: [ self saveRewrites ] ].	self fileResults removeAllSuchThat: [ :each | aCollection includes: each filename ].	self model runOn: aCollection! !!SmaCCTransformationToolkit methodsFor: 'actions'!setCreateSubdirectories	| createSubdirectories |	createSubdirectories := UITheme builder questionWithoutCancel: 'Create subdirectories'.	self model createSubdirectories: createSubdirectories! !!SmaCCTransformationToolkit methodsFor: 'actions'!removeFiles: anArray	| files |	anArray isEmpty		ifTrue: [ ^ self ].	(self confirm: 'Do you want to remove the files?')		ifFalse: [ ^ self ].	files := Set withAll: self model files.	anArray do: [ :each | files remove: each ifAbsent: [  ] ].	self model files: files asSortedCollection! !!SmaCCTransformationToolkit methodsFor: 'actions'!loadConfiguration	| file |	file := self promptForFile: 'Load Configuration File' extensions: #('rwc').	file isNil		ifTrue: [ ^ self ].	self model: (SmaCCTransformationToolkitModel new loadFile: file).	self fileResults removeAll.	self result: SmaCCRewriteCompleteResult new! !!SmaCCTransformationToolkit methodsFor: 'actions'!loadRewrites	| file |	file := self promptForFile: 'Load Transformation File' extensions: #('rw').	file isNil		ifTrue: [ ^ self ].	self model loadRewriteFile: file.	self updateModel! !!SmaCCTransformationToolkit methodsFor: 'actions'!setOutputDirectory	| dir |	dir := UITheme builder textEntry: 'Enter output directory name:' title: 'Directory' entryText: self model outputDirectory.	dir isNil		ifTrue: [ ^ self ].	self model outputDirectory: dir! !!SmaCCTransformationToolkit methodsFor: 'actions'!setRunOnServer	| runOnServer |	runOnServer := UITheme builder questionWithoutCancel: 'Run on server'.	self model runOnServer: runOnServer! !!SmaCCTransformationToolkit methodsFor: 'building'!addPreviewMenuActionsTo: composite	| pragmaMethods symbol parser |	parser := self model inputParserClass.	parser isNil		ifTrue: [ ^ self ].	symbol := #smaccTransformationToolkitMenu:for:parser:.	pragmaMethods := self methodsWithPragma: symbol.	pragmaMethods		do: [ :each | 			each pragmas				do: [ :pragma | 					(pragma keyword = symbol						and: [ pragma arguments second = #previewInput								and: [ parser										includesBehavior: (Smalltalk at: pragma arguments third ifAbsent: [ self class ]) ] ])						ifTrue: [ composite								selectionAct: [ :text | 									each methodClass instanceSide										perform: each selector										with: text										with: self ]								entitled: pragma arguments first ] ] ]! !!SmaCCTransformationToolkit methodsFor: 'building'!updateInput: sourcePresentation target: targetPresentation using: selection	sourcePresentation clearHighlights.	targetPresentation clearHighlights.	selection notNil		ifTrue: [ sourcePresentation addHighlight: (Color red alpha: 0.2) from: selection nodeInterval first to: selection nodeInterval last.			(self result transformedString annotationRangesFor: selection) do: [ :each | targetPresentation addHighlight: (Color red alpha: 0.2) from: each first to: each last ] ].	sourcePresentation updateHighlightsAndScroll.	targetPresentation updateHighlightsAndScroll! !!SmaCCTransformationToolkit methodsFor: 'building'!buildPreviewList: list in: presenter	presenter table		display: [ list ];		column: 'Rewrite' evaluated: [ :each | each rewrite displayString ];		column: 'Node' evaluated: [ :each | each nodeClass ];		column: 'Location' evaluated: [ :each | each nodeInterval ];		morphicSelectionAct: [ :table | self debugRewriteForNode: table selection ]			icon: GLMUIThemeExtraIcons glamorousBug			on: $d			entitled: 'Debug';		morphicSelectionAct: [ :table | self gotoRewrite: table selection rewrite ] entitled: 'Goto Rewrite'! !!SmaCCTransformationToolkit methodsFor: 'building'!compose	self title: 'SmaCC Transformation Toolkit'.	self buildConfigurationTab.	self buildTransformationTab.	self buildPreviewTab! !!SmaCCTransformationToolkit methodsFor: 'building'!buildTransformationTab	self dynamic		title: 'Transformations';		act: [ :p | self loadRewrites ] icon: GLMUIThemeExtraIcons glamorousOpen entitled: 'Load';		act: [ :p | self saveRewrites ] icon: GLMUIThemeExtraIcons glamorousSave entitled: 'Save';		presentation: [ :presentation :each | 			presentation				custom:					(SmaCCRewriteEditor new						treeInitializer: [ :tree | 							tree								morphicSelectionAct: [ :presenter | self debugRewrite: presenter selection ]								icon: GLMUIThemeExtraIcons glamorousBug								on: $d								entitled: 'Debug' ];						transformation: [ :e | self model rewrites ];						entity: self model rewrites;						yourself) ]! !!SmaCCTransformationToolkit methodsFor: 'building'!buildPreviewTab	| resultPresenter sourcePresentation targetPresentation |	self dynamic		title: 'Preview';		updateOn: ValueChanged			from: [ self previewResultHolder instVarNamed: 'announcer' ];		display: [ | presentation |			presentation := GLMCompositePresentation new.			(resultPresenter := presentation tabulator)				row: [ :row | 					row						column: #input;						column: #output ]					span: 2;				row: #rewrites;				row: #rewriteSelection span: 0.			resultPresenter transmit				to: #input;				transformed: [ :each | each value ];				andShow: [ :presenter | 					(presenter custom: (sourcePresentation := SmaCCTextPresentation new))						title: [ :result | 							result filename								ifNil: [ 'Input' ]								ifNotNil: [ :name | name asFileReference basename ] ];						wrapped: false;						withLineNumbers: true;						display: [ :result | result inputSource ifNil: [ '' ] ].					self addPreviewMenuActionsTo: sourcePresentation ].			resultPresenter transmit				to: #output;				transformed: [ :each | each value ];				andShow: [ :presenter | 					presenter dynamic						presentation: [ :dynamic :each | 							(dynamic custom: (targetPresentation := SmaCCTextPresentation new))								wrapped: false;								withLineNumbers: true;								initialize: [ :text | 									(each interval notNil and: [ each outputSource notNil ])										ifTrue: [ text selectionInterval: each interval ] ];								title: [ :result | 									result outputFilename										ifNil: [ 'Output' ]										ifNotNil: [ :name | name asFileReference basename ] ];								display: [ :result | 									| text |									text := (result outputSource ifNil: [ '' ]) asText.									text size > 0										ifTrue: [ result interval												ifNotNil: [ :interval | 													text makeColor: Color red from: interval first to: interval last.													text makeBoldFrom: interval first to: interval last ] ].									text ].							each additionalFiles keys asSortedCollection								do: [ :key | 									dynamic text										title: key asFileReference basename;										wrapped: false;										withLineNumbers: true;										display: (each additionalFiles at: key) asString ] ] ].			resultPresenter transmit				to: #rewrites;				andShow: [ :presenter | self buildPreviewList: #() in: presenter ].			resultPresenter transmit				from: #input port: #selectionInterval;				to: #rewrites;				andShow: [ :presenter :interval | 					self						buildPreviewList:							(interval isNil								ifTrue: [ #() ]								ifFalse: [ self result transformedString annotationsInOriginalRange: interval ])						in: presenter ].			resultPresenter transmit				from: #output port: #selectionInterval;				to: #rewrites;				andShow: [ :presenter :interval | 					self						buildPreviewList:							(interval isNil								ifTrue: [ #() ]								ifFalse: [ self result transformedString annotationsInNewRange: interval ])						in: presenter ].			resultPresenter transmit				from: #rewrites port: #selection;				to: #rewriteSelection;				transformed: [ :sel | 					self						updateInput: sourcePresentation						target: targetPresentation						using: sel ].			presentation startOn: self previewResultHolder.			presentation ]! !!SmaCCTransformationToolkit methodsFor: 'building'!methodsWithPragma: aSymbol	| methods |	methods := OrderedCollection new.	Smalltalk		allClassesAndTraitsDo: [ :each | 			each classSide				methodsDo: [ :method | 					(method hasPragmaNamed: aSymbol)						ifTrue: [ methods add: method ] ] ].	^ methods! !!SmaCCTransformationToolkit methodsFor: 'building'!buildConfigurationTab	| browser |	(browser := self tabulator)		title: 'Configuration';		act: [ self loadConfiguration ] icon: GLMUIThemeExtraIcons glamorousOpen entitled: 'Load';		act: [ self saveConfiguration ] icon: GLMUIThemeExtraIcons glamorousSave entitled: 'Save';		act: [ self runAll ] icon: GLMUIThemeExtraIcons glamorousPlay entitled: 'Transform All';		act: [ self selectInputParser ] entitled: 'Set Input Parser Class...';		act: [ self selectValidationParser ] entitled: 'Set Validation Parser Class...';		act: [ self setOutputDirectory ] entitled: 'Set output directory...';		act: [ self setCreateSubdirectories ] entitled: 'Create subdirectories...';		act: [ self setServer ] entitled: 'Set Server...';		act: [ self setRunOnServer ] entitled: 'Run On Server...';		act: [ self class new openOn: self entity ] entitled: 'Open another window';		row: [ :row | 			row				column: #filesLabel size: 100;				column: #files;				column: #buttons size: 102 ];		row: #results.	browser transmit		to: #filesLabel;		andShow: [ :presentation | presentation label display: 'Files:' ].	browser transmit		to: #files;		andShow: [ :presentation | 			presentation fastList				updateOn: #files from: [ self entity ifNotNil: [ self entity announcer ] ];				beMultiple;				display: [ :toolkit | toolkit files ];				initialize: [ :list | list selection: self selectedFile ];				selection: self selectedFile;				enableFilter ].	browser transmit		from: #files port: #selection;		to: #buttons port: #selection.	browser transmit		from: #files port: #selection;		toOutsidePort: #selection.	browser transmit		to: #buttons;		andShow: [ :presentation | 			presentation actionList				beVertical;				act: [ self addDirectory ] icon: GLMUIThemeExtraIcons glamorousAdd entitled: 'Add Dir';				act: [ self addFiles ] icon: GLMUIThemeExtraIcons glamorousAdd entitled: 'Add';				act: [ :list | self removeFiles: (self fixSelection: list selection) ] icon: GLMUIThemeExtraIcons glamorousRemove entitled: 'Remove';				act: [ :list | 					list selection notEmpty						ifTrue: [ self openResultFor: (self fixSelection: list selection) first ] ]					icon: GLMUIThemeExtraIcons glamorousPlay					entitled: 'Preview';				act: [ :list | self runOn: (self fixSelection: list selection) ] icon: GLMUIThemeExtraIcons glamorousPlay entitled: 'Run' ].	browser transmit		to: #results;		andShow: [ :presentation | 			presentation fastTable				display: [ self fileResults ];				updateOn: ValueAdded from: [ self fileResults instVarNamed: 'announcer' ];				updateOn: ValueRemoved from: [ self fileResults instVarNamed: 'announcer' ];				column: 'File' evaluated: [ :each | each filename ];				column: 'Error' evaluated: [ :each | each errorString ifNil: [ '' ] ];				column: 'Transformation' evaluated: [ :each | each transformation ifNil: [ '' ] ifNotNil: [ :t | t displayString ] ];				column: 'Line' evaluated: [ :each | each startLine ifNil: [ '' ] ];				column: 'Column' evaluated: [ :each | each startColumn ifNil: [ '' ] ] ]! !!SmaCCTransformationToolkit methodsFor: 'private'!fixSelection: anArray	"Hack around the selection bug that may return an array or the single item"	^ anArray isString		ifTrue: [ Array with: anArray ]		ifFalse: [ anArray ]! !!SmaCCTransformationToolkit methodsFor: 'private'!rewritesPresentation	^ self presentations at: 2! !!SmaCCTransformationToolkit methodsFor: 'private'!gotoPreviewTab	self pane lastActivePresentation: self previewPresentation! !!SmaCCTransformationToolkit methodsFor: 'private'!selectPreviewOutputInterval: anInterval	(self outputPane port: #selectionInterval) value: anInterval! !!SmaCCTransformationToolkit methodsFor: 'private'!promptForFile: aTitle extensions: anArray	^ UIManager default		chooseExistingFileReference: aTitle		extensions: anArray		path: FileSystem workingDirectory! !!SmaCCTransformationToolkit methodsFor: 'private'!promptForSaveFile: aTitle extensions: anArray	^ UIManager default		chooseForSaveFileReference: aTitle		extensions: anArray		path: FileSystem workingDirectory! !!SmaCCTransformationToolkit methodsFor: 'private'!gotoRewritesTab	self pane lastActivePresentation: self rewritesPresentation! !!SmaCCTransformationToolkit methodsFor: 'private'!previewPresentation	^ self presentations last! !!SmaCCTransformationToolkit methodsFor: 'private'!outputPane	^ self previewPresentation first panes detect: [ :each | each name = #output ]! !!SmaCCTransformationToolkit methodsFor: 'private'!addResult: aResult	self fileResults add: aResult! !!SmaCCTransformationToolkit methodsFor: 'private'!gotoRewrite: aRewrite	self gotoRewritesTab.	(self rewritesPresentation pane port: #rewriteToSelect) value: aRewrite! !!SmaCCTransformationToolkit methodsFor: 'updating'!update: aSymbol with: aValue	super update: aSymbol with: aValue.	aSymbol = #resultAdded		ifTrue: [ self addResult: aValue ]! !!SmaCCTransformationToolkit methodsFor: 'accessing'!model	^ self entity! !!SmaCCTransformationToolkit methodsFor: 'accessing'!previewResultHolder	^ previewResult ifNil: [ previewResult := NewValueHolder value: SmaCCRewriteResult new ]! !!SmaCCTransformationToolkit methodsFor: 'accessing'!fileResults	^ resultsList ifNil: [ resultsList := CollectionValueHolder value: OrderedCollection new ]! !!SmaCCTransformationToolkit methodsFor: 'accessing'!result: aSmaCCRewriteResult	self previewResultHolder value: aSmaCCRewriteResult! !!SmaCCTransformationToolkit methodsFor: 'accessing'!model: aToolkitModel	self model notNil		ifTrue: [ self model removeDependent: self ].	self entity: aToolkitModel.	aToolkitModel addDependent: self! !!SmaCCTransformationToolkit methodsFor: 'accessing'!selectedFile	^ ((self pane port: #selection) value		ifNotNil: [ :selection | 			"Hack to work around selection changing from value to array with value"			selection isArray				ifTrue: [ selection notEmpty						ifTrue: [ selection first ] ]				ifFalse: [ selection ] ]) ifNil: [ self result filename ]! !!SmaCCTransformationToolkit methodsFor: 'accessing'!result	^ self previewResultHolder value! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmaCCTransformationToolkit class	instanceVariableNames: ''!!SmaCCTransformationToolkit class methodsFor: 'world menu'!menuCommandOn: aBuilder	<worldMenu>	(aBuilder item: #'SmaCC Transformation Toolkit')		parent: #Tools;		order: 490.2;		help: 'SmaCC Transformation Toolkit';		action: [ self open ].	aBuilder withSeparatorAfter! !!SmaCCTransformationToolkit class methodsFor: 'opening'!open	^ self new open! !DebugAction subclass: #SmaCCTransformationToolkitDebugAction	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_UI'!!SmaCCTransformationToolkitDebugAction methodsFor: 'private'!stepUntil: aBlock	| context process searchBlock transformationBlock previousContext searchContext found rootContext |	searchBlock := SmaCCRewriteMatch haltBlock.	transformationBlock := SmaCCRewriteTransformation haltBlock.	SmaCCRewriteMatch haltBlock: nil.	SmaCCRewriteTransformation haltBlock: nil.	[ process := self session process.	context := self currentContext.	searchContext := process suspendedContext.	previousContext := searchContext.	found := false.	[ searchContext notNil ]		whileTrue: [ found := found or: [ searchContext == context ].			(self session isRewriteContext: searchContext)				ifTrue: [ rootContext := searchContext ].			searchContext := searchContext sender ].	(found and: [ rootContext notNil ])		ifFalse: [ ^ self ].	[ context notNil		and: [ process isTerminating not and: [ process isTerminated not and: [ process suspendedContext notNil and: [ aBlock value: context ] ] ] ] ]		whileFalse: [ previousContext == context				ifFalse: [ (context findContextSuchThat: [ :c | c == rootContext ]) isNil						ifTrue: [ ^ self session updateContextTo: context ].					previousContext := context ].			context := process step: context ].	self session updateContextTo: context ]		ensure: [ SmaCCRewriteMatch haltBlock: searchBlock.			SmaCCRewriteTransformation haltBlock: transformationBlock ]! !!SmaCCTransformationToolkitDebugAction methodsFor: 'testing'!appliesToContext: aContext	^ self session isActive! !SmaCCTransformationToolkitDebugAction subclass: #SmaCCSendRuleDebugAction	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_UI'!!SmaCCSendRuleDebugAction methodsFor: 'accessing'!defaultOrder	^ 90! !!SmaCCSendRuleDebugAction methodsFor: 'accessing'!defaultKeymap	^ $O meta! !!SmaCCSendRuleDebugAction methodsFor: 'accessing'!help	^ 'Step into message'! !!SmaCCSendRuleDebugAction methodsFor: 'accessing'!executeAction	| first |	first := true.	self		stepUntil: [ :context | 			first				ifTrue: [ first := false ]				ifFalse: [ self session isRewriteContext: context ] ]! !!SmaCCSendRuleDebugAction methodsFor: 'accessing'!defaultLabel	^ 'Into'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmaCCSendRuleDebugAction class	instanceVariableNames: ''!!SmaCCSendRuleDebugAction class methodsFor: 'registration'!gtActionFor: aDebugger	<gtSmaCCTransformationStack>	^ (self forDebugger: aDebugger) icon: GLMUIThemeExtraIcons glamorousInto! !SmaCCTransformationToolkitDebugAction subclass: #SmaCCStepRuleDebugAction	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_UI'!!SmaCCStepRuleDebugAction methodsFor: 'accessing'!defaultOrder	^ 100! !!SmaCCStepRuleDebugAction methodsFor: 'accessing'!defaultKeymap	^ $o meta! !!SmaCCStepRuleDebugAction methodsFor: 'accessing'!help	^ 'Step over message'! !!SmaCCStepRuleDebugAction methodsFor: 'accessing'!executeAction	self session stepOver: self currentContext! !!SmaCCStepRuleDebugAction methodsFor: 'accessing'!defaultLabel	^ 'Over'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmaCCStepRuleDebugAction class	instanceVariableNames: ''!!SmaCCStepRuleDebugAction class methodsFor: 'registration'!gtActionFor: aDebugger	<gtSmaCCTransformationStack>	^ (self forDebugger: aDebugger) icon: GLMUIThemeExtraIcons glamorousOver! !SmaCCTransformationToolkitDebugAction subclass: #SmaCCStepToLocationAction	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_UI'!!SmaCCStepToLocationAction methodsFor: 'accessing'!defaultOrder	^ 100! !!SmaCCStepToLocationAction methodsFor: 'accessing'!defaultKeymap	^ $r meta! !!SmaCCStepToLocationAction methodsFor: 'accessing'!help	^ 'Step until we process a node at the current location'! !!SmaCCStepToLocationAction methodsFor: 'accessing'!executeAction	| first node interval nextNode |	first := true.	interval := self debugger currentInputSelectionInterval.	node := self session currentNode.	self		stepUntil: [ :context | 			first				ifTrue: [ first := false ]				ifFalse: [ context isBlockContext not						and: [ (self session isRewriteContext: context)								and: [ node ~~ (nextNode := context receiver match)										and: [ (interval first between: nextNode startPosition and: nextNode stopPosition)												or:													[ (interval last between: nextNode startPosition and: nextNode stopPosition) or: [ nextNode startPosition between: interval first and: interval last ] ] ] ] ] ] ]! !!SmaCCStepToLocationAction methodsFor: 'accessing'!defaultLabel	^ 'Run to Cursor'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmaCCStepToLocationAction class	instanceVariableNames: ''!!SmaCCStepToLocationAction class methodsFor: 'registration'!gtActionFor: aDebugger	<gtSmaCCTransformationInput>	^ (self forDebugger: aDebugger) icon: GLMUIThemeExtraIcons glamorousInto! !SmaCCTransformationToolkitDebugAction subclass: #SmaCCStepToNextNodeAction	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_UI'!!SmaCCStepToNextNodeAction methodsFor: 'accessing'!defaultOrder	^ 110! !!SmaCCStepToNextNodeAction methodsFor: 'accessing'!defaultKeymap	^ $n meta! !!SmaCCStepToNextNodeAction methodsFor: 'accessing'!help	^ 'Step until we get to another node'! !!SmaCCStepToNextNodeAction methodsFor: 'accessing'!executeAction	| nodes |	nodes := (self session transformationStack collect: [ :each | each last receiver match ]) asSet.	self		stepUntil: [ :context | context isBlockContext not and: [ (self session isRewriteContext: context) and: [ (nodes includes: context receiver match) not ] ] ]! !!SmaCCStepToNextNodeAction methodsFor: 'accessing'!defaultLabel	^ 'Run to Next Node'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmaCCStepToNextNodeAction class	instanceVariableNames: ''!!SmaCCStepToNextNodeAction class methodsFor: 'registration'!gtActionFor: aDebugger	<gtSmaCCTransformationStack>	^ (self forDebugger: aDebugger) icon: GLMUIThemeExtraIcons glamorousThrough! !SmaCCTransformationToolkitDebugAction subclass: #SmaCCStepToNextRewriteAction	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_UI'!!SmaCCStepToNextRewriteAction methodsFor: 'accessing'!defaultOrder	^ 120! !!SmaCCStepToNextRewriteAction methodsFor: 'accessing'!defaultKeymap	^ $t meta! !!SmaCCStepToNextRewriteAction methodsFor: 'accessing'!help	^ 'Step until we get to another rewrite'! !!SmaCCStepToNextRewriteAction methodsFor: 'accessing'!executeAction	| rewrites |	rewrites := (self session transformationStack collect: [ :each | self session rewriteForContext: each last ]) asSet.	self		stepUntil: [ :context | 			context isBlockContext not				and: [ (self session isRewriteContext: context) and: [ (rewrites includes: (self session rewriteForContext: context)) not ] ] ]! !!SmaCCStepToNextRewriteAction methodsFor: 'accessing'!defaultLabel	^ 'Run to Next Rewrite'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmaCCStepToNextRewriteAction class	instanceVariableNames: ''!!SmaCCStepToNextRewriteAction class methodsFor: 'registration'!gtActionFor: aDebugger	<gtSmaCCTransformationStack>	^ (self forDebugger: aDebugger) icon: GLMUIThemeExtraIcons glamorousThrough! !DebugSession subclass: #SmaCCTransformationToolkitDebugSession	instanceVariableNames: 'rootContext'	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_UI'!!SmaCCTransformationToolkitDebugSession methodsFor: 'accessing'!rootContext	^ rootContext		ifNil: [ rootContext := interruptedContext findContextSuchThat: [ :each | SmaCCTransformationToolkitDebugger isTransformationContext: each ] ]! !!SmaCCTransformationToolkitDebugSession methodsFor: 'accessing'!rewriteEngine	^ self rootContext receiver! !!SmaCCTransformationToolkitDebugSession methodsFor: 'accessing'!rewriteForContext: context	^ context receiver rewriteEngine rewriteRule rewriteForMethod: context method! !!SmaCCTransformationToolkitDebugSession methodsFor: 'accessing'!currentNode	| context |	context := interruptedContext.	[ context isNil ]		whileFalse: [ (self isRewriteContext: context)				ifTrue: [ ^ context receiver match ].			context := context sender ].	^ nil! !!SmaCCTransformationToolkitDebugSession methodsFor: 'accessing'!newSource	^ self rewriteEngine source asString! !!SmaCCTransformationToolkitDebugSession methodsFor: 'accessing'!rewriteNode	^ self rootContext tempAt: 1! !!SmaCCTransformationToolkitDebugSession methodsFor: 'accessing'!originalSource	^ self rewriteNode completeSource asString! !!SmaCCTransformationToolkitDebugSession methodsFor: 'accessing'!isRewriteContext: context	^ (context receiver isKindOf: SmaCCRewriteMatchContext)		and: [ (SmaCCRewriteMatchContext methodDictionary at: context selector ifAbsent: [ nil ]) ~~ context method ]! !!SmaCCTransformationToolkitDebugSession methodsFor: 'accessing'!transformationStack	| stack context rewrite |	stack := OrderedCollection new.	context := interruptedContext.	[ context isNil ]		whileFalse: [ (self isRewriteContext: context)				ifTrue: [ rewrite := self rewriteForContext: context.					rewrite notNil						ifTrue: [ stack								add:									{rewrite.									context} ] ].			context := context sender ].	^ stack! !!SmaCCTransformationToolkitDebugSession methodsFor: 'testing'!isActive	^ rootContext notNil and: [ rootContext isDead not and: [ rootContext ~= self process suspendedContext or: [ rootContext willReturn not ] ] ]! !GTGenericStackDebugger subclass: #SmaCCTransformationToolkitDebugger	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_UI'!!SmaCCTransformationToolkitDebugger methodsFor: 'accessing'!rewriteCode	^ self rewriteCodePane presentations first! !!SmaCCTransformationToolkitDebugger methodsFor: 'accessing'!currentInputSelectionInterval	^ self selectionIntervalForPane: #originalSource! !!SmaCCTransformationToolkitDebugger methodsFor: 'accessing'!rewriteCodePane	^ self browser paneNamed: #ruleSource! !!SmaCCTransformationToolkitDebugger methodsFor: 'private'!equivalentNodeTo: aNode in: otherTree	| equivParent nodeIndex equivNode |	aNode isMethod		ifTrue: [ ^ otherTree ].	(aNode parent isReturn and: [ aNode parent parent parent isMethod ])		ifTrue: [ "Hack to handle the inserted return statements"			equivNode := otherTree isSequence				ifTrue: [ otherTree statements last ]				ifFalse: [ otherTree ].			^ equivNode isReturn				ifTrue: [ equivNode value ]				ifFalse: [ equivNode ] ].	aNode parent isMethod		ifTrue: [ otherTree isSequence				ifTrue: [ ^ otherTree ]				ifFalse: [ ^ otherTree parent ] ].	equivParent := self equivalentNodeTo: aNode parent in: otherTree.	equivParent isNil		ifTrue: [ ^ nil ].	nodeIndex := aNode parent children identityIndexOf: aNode.	^ equivParent children at: nodeIndex ifAbsent: [ nil ]! !!SmaCCTransformationToolkitDebugger methodsFor: 'private'!sourceSelectionIntervalFor: selection	selection isNil		ifTrue: [ ^ 1 to: 0 ].	^ self intervalFromMethodNode: (selection last method sourceNodeForPC: selection last pc) inSource: (self sourceForSelection: selection)! !!SmaCCTransformationToolkitDebugger methodsFor: 'private'!codeObjectForSelection: anArray	(anArray first isKindOf: SmaCCRewriteMethodDefinition)		ifTrue: [ ^ anArray first ].	^ (self isTransformation: anArray)		ifTrue: [ anArray first transformation ]		ifFalse: [ anArray first match ]! !!SmaCCTransformationToolkitDebugger methodsFor: 'private'!save: aString into: selection	| context obj newContext method |	(obj := self codeObjectForSelection: selection) code: aString.	method := obj method.	context := self findFirstContext: selection last.	context isBlockContext		ifTrue: [ ^ self inform: 'Cannot find method context to restart' ].	self session unwindAndRestartToContext: context.	newContext := Context		sender: context sender		receiver: context receiver		method: method		arguments: #().	newContext push: context receiver.	newContext privRefresh.	self session interruptedProcess suspendedContext: newContext.	self session stepToFirstInterestingBytecodeIn: self session interruptedProcess.	self session updateContextTo: newContext.	self updateBrowser! !!SmaCCTransformationToolkitDebugger methodsFor: 'private'!intervalFromMethodNode: aNode inSource: aString	| otherTree otherNode |	otherTree := RBParser parseExpression: aString onError: [ :msg :pos | ^ 1 to: 0 ].	otherNode := self equivalentNodeTo: aNode in: otherTree.	otherNode isNil		ifTrue: [ ^ 1 to: 0 ].	^ otherNode start to: otherNode stop! !!SmaCCTransformationToolkitDebugger methodsFor: 'private'!outputSelectionIntervalFor: selection	| source stop context match start |	selection isNil		ifTrue: [ ^ 1 to: 0 ].	context := selection last receiver.	source := context source.	match := context match.	start := context startIndexFor: match.	stop := context stopIndexFor: match.	^ (source stringIndexFor: start) to: (source stringIndexFor: stop)! !!SmaCCTransformationToolkitDebugger methodsFor: 'private'!saveMethod: aString in: selection	RBParser parseMethod: aString onError: [ :msg :pos | ^ self inform: 'Code does not parse' ].	self save: aString into: selection! !!SmaCCTransformationToolkitDebugger methodsFor: 'private'!inputSelectionIntervalFor: selection	^ selection isNil		ifTrue: [ 1 to: 0 ]		ifFalse: [ selection last receiver match sourceInterval ]! !!SmaCCTransformationToolkitDebugger methodsFor: 'private'!saveRule: aString in: selection	RBParser parseExpression: aString onError: [ :msg :pos | ^ self inform: 'Code does not parse' ].	self save: aString into: selection! !!SmaCCTransformationToolkitDebugger methodsFor: 'private'!isTransformation: selection	^ selection first transformation method == selection last method! !!SmaCCTransformationToolkitDebugger methodsFor: 'private'!sourceForSelection: anArray	anArray isNil		ifTrue: [ ^ '' ].	^ (self codeObjectForSelection: anArray) source! !!SmaCCTransformationToolkitDebugger methodsFor: 'private'!findFirstContext: aContext	| next context |	context := aContext.	[ (next := context findSimilarSender) notNil ] whileTrue: [context := next].	^ context! !!SmaCCTransformationToolkitDebugger methodsFor: 'building'!debuggerTransmissionsIn: browser	super debuggerTransmissionsIn: browser.	self buildInputOutputSourceIn: browser.	self buildRuleStackIn: browser.	self buildRuleSourceIn: browser.! !!SmaCCTransformationToolkitDebugger methodsFor: 'building'!buildRuleStackIn: browser	browser transmit		to: #ruleStack;		andShow: [ :presentation | 			| stack |			stack := self session transformationStack.			presentation list				title: 'Stack';				display: [ stack ];				initialize: [ :list | 					stack isEmpty						ifFalse: [ list selection: stack first ] ];				format: [ :each | 					| isBlock |					isBlock := each last isBlockContext.					(isBlock						ifTrue: [ '[' ]						ifFalse: [ '' ]) , each first displayString						,							(isBlock								ifTrue: [ ']' ]								ifFalse: [ '' ]) ] ].	browser transmit		from: #ruleStack port: #selection;		transformed: [ :each | each ifNotNil: [ each last ] ];		to: #stack port: #selection! !!SmaCCTransformationToolkitDebugger methodsFor: 'building'!debuggerStructureIn: browser	browser		row: [ :row | 			row				column: #ruleStack span: 1;				column: #ruleSource span: 3 ];		row: [ :row | 			row				column: #originalSource;				column: #newSource ];		row: [ :row | 			row				column: #stack;				column: #code ]			size: 0;		row: #inspector! !!SmaCCTransformationToolkitDebugger methodsFor: 'building'!buildInputOutputSourceIn: browser	browser transmit		to: #originalSource;		andShow: [ :presentation | 			presentation text				title: 'Original Source';				wrapped: false;				withLineNumbers: true;				display: self session originalSource;				with: [ :text | self installActionsForRootPragmas: #(#SmaCCTransformationInput) in: text ] ].	browser transmit		to: #newSource;		andShow: [ :presentation | 			presentation text				title: 'New Source';				wrapped: false;				withLineNumbers: true;				display: self session newSource ].	browser transmit		from: #ruleStack port: #selection;		transformed: [ :selection | self inputSelectionIntervalFor: selection ];		to: #originalSource port: #selectionInterval.	browser transmit		from: #ruleStack port: #selection;		transformed: [ :selection | self outputSelectionIntervalFor: selection ];		to: #newSource port: #selectionInterval! !!SmaCCTransformationToolkitDebugger methodsFor: 'building'!buildRuleSourceIn: browser	browser transmit		from: #ruleStack port: #selection;		when: [ :selection | selection notNil and: [ selection first isKindOf: SmaCCRewrite ] ];		to: #ruleSource;		andShow: [ :presentation :selection | 			presentation pharoScript				title:					(selection isNil						ifTrue: [ 'Source' ]						ifFalse: [ (self codeObjectForSelection: selection) title ]);				morphicSelectionAct: [ :text | self saveRule: text text asString in: selection ] entitled: 'Save';				display: [ :each | self sourceForSelection: each ];				smalltalkClass: [ selection ifNotNil: [ selection last methodClass ] ];				doItReceiver: [ selection ifNotNil: [ selection last receiver ] ];				doItContext: [ selection ifNotNil: [ selection last ] ];				initialize: [ :text | text selectionInterval: (self sourceSelectionIntervalFor: selection) ];				with: [ :text | self installActionsForRootPragmas: #(#SmaCCTransformationStack) in: text ] ].	browser transmit		from: #ruleStack port: #selection;		when: [ :selection | selection notNil and: [ selection first isKindOf: SmaCCRewriteMethodDefinition ] ];		to: #ruleSource;		andShow: [ :presentation :selection | 			presentation pharoMethod				title: 'Method';				morphicSelectionAct: [ :text | self saveMethod: text text asString in: selection ] entitled: 'Save';				display: [ :each | self sourceForSelection: each ];				smalltalkClass: [ selection ifNotNil: [ selection last methodClass ] ];				doItReceiver: [ selection ifNotNil: [ selection last receiver ] ];				doItContext: [ selection ifNotNil: [ selection last ] ];				initialize: [ :text | text selectionInterval: (selection last method sourceNodeForPC: selection last pc) debugHighlightRange ];				with: [ :text | self installActionsForRootPragmas: #(#SmaCCTransformationStack) in: text ] ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmaCCTransformationToolkitDebugger class	instanceVariableNames: ''!!SmaCCTransformationToolkitDebugger class methodsFor: 'class initialization'!initialize	self register! !!SmaCCTransformationToolkitDebugger class methodsFor: 'accessing'!sessionClass	^ SmaCCTransformationToolkitDebugSession! !!SmaCCTransformationToolkitDebugger class methodsFor: 'accessing'!defaultTitle	^ 'Transformation'! !!SmaCCTransformationToolkitDebugger class methodsFor: 'tools registry'!registerToolsOn: aRegistry	aRegistry registerDebugger: self withRank: 70! !!SmaCCTransformationToolkitDebugger class methodsFor: 'tools registry'!register	self registerToolsOn: Smalltalk tools! !!SmaCCTransformationToolkitDebugger class methodsFor: 'testing'!isTransformationContext: each	^ each selector = #rewriteTree: and: [ each receiver isKindOf: SmaCCRewriteEngine ]! !!SmaCCTransformationToolkitDebugger class methodsFor: 'testing'!availableAutomatically	^ true! !!SmaCCTransformationToolkitDebugger class methodsFor: 'testing'!handlesContext: aContext	^ (aContext findContextSuchThat: [ :each | self isTransformationContext: each ]) notNil! !SmaCCTransformationToolkitDebugger initialize!'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.385656 pm'!!SmaCCAbstractRewrite methodsFor: '*SmaCC_Rewrite_Engine_UI'!contextClass	^ SmaCCRewriteMatchContext! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.386656 pm'!!SmaCCRewriteMatch methodsFor: '*SmaCC_Rewrite_Engine_UI'!method	^ nil! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.386656 pm'!!SmaCCRewriteMethodDefinition methodsFor: '*SmaCC_Rewrite_Engine_UI'!buildInterfaceIn: aPresentation	| tabulator |	(tabulator := aPresentation tabulator)		row: [ :row | 			row				column: #label size: 75;				column: #comment ]			size: 25;		row: #source.	tabulator transmit		to: #label;		andShow: [ :presentation | presentation label display: 'Comment:' ].	tabulator transmit		to: #comment;		andShow: [ :presentation | 			presentation text				display: self comment;				onChangeOfPort: #text act: [ :text | self comment: text text asString ] ].	tabulator updateOn: #source from: #yourself.	tabulator transmit		to: #source;		andShow: [ :presentation | 			presentation pharoMethod				title: 'Source';				smalltalkClass: [ self contextClass ];				display: self source;				onChangeOfPort: #text act: [ :text | self source: text text asString ];				morphicSelectionAct: [ :text | 						text							text: (RBParser parseMethod: text text asString) formattedCode;							update ]					icon: GLMUIThemeExtraIcons glamorousPlay					on: $t					entitled: 'Format' ]! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.387656 pm'!!SmaCCRewriteMethodDefinition methodsFor: '*SmaCC_Rewrite_Engine_UI'!rewriteForMethod: aMethod	aMethod == self method		ifTrue: [ ^ self ].	^ nil! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.388656 pm'!!SmaCCRewriteMethodDefinition methodsFor: '*SmaCC_Rewrite_Engine_UI'!title	^ 'Method'! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.389656 pm'!!SmaCCRewriteTypeMatch methodsFor: '*SmaCC_Rewrite_Engine_UI'!source	^ self code! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.390656 pm'!!SmaCCRewriteTypeMatch methodsFor: '*SmaCC_Rewrite_Engine_UI'!buildInterfaceIn: aPresentation	| browser classes |	browser := aPresentation tabulator.	browser		row: [ :row | 			row				column: #label size: 50;				column: #class;				column: #debug size: 50 ]			size: 25;		row: [ :row | 			row				column: #value span: 2;				column: #variables ].	browser transmit		to: #label;		andShow: [ :presentation | presentation label display: 'Class:' ].	classes := SmaCCParseNode withAllSubclasses asSortedCollection: [ :a :b | a name < b name ].	browser transmit		to: #class;		andShow: [ :presentation | 			presentation dropDownList				display: [ classes ];				selectedIndex: (classes indexOf: self nodeClass);				onChangeOfPort: #selection act: [ :list | self nodeClass: list selection ] ].	browser transmit		to: #debug;		andShow: [ :presentation | 			| button |			presentation morph				morph:					((button := SimpleSwitchMorph new)						target: self;						actionSelector: #enableDebug:;						arguments: #();						setSwitchState: self enableDebug;						label: 'Debug';						yourself) ].	browser transmit		to: #value;		andShow: [ :presentation | 			presentation pharoScript				display: (self code ifNil: [ '' ]);				title: 'Code';				smalltalkClass: [ rewrite contextClass ];				onChangeOfPort: #text act: [ :text | self code: text text asString ];				morphicSelectionAct: [ :text | 						text							text: (RBParser parseExpression: text text asString) formattedCode;							update ]					icon: GLMUIThemeExtraIcons glamorousPlay					on: $t					entitled: 'Format' ].	browser transmit		from: #class port: #selection;		to: #variables;		andShow: [ :presentation | 			presentation fastList				title: [ :selection | selection ifNil: [ 'Variables' ] ifNotNil: [ selection name ] ];				display: [ :selection | 					selection notNil						ifTrue: [ (Set new								addAll: selection allInstVarNames;								removeAll: SmaCCParseNode allInstVarNames;								yourself) asSortedCollection ]						ifFalse: [ #() ] ];				act: [ :list | ((browser paneNamed: #class) port: #selection) value ifNotNil: [ :sel | Smalltalk tools browser openOnClass: sel ] ]					icon: GLMUIThemeExtraIcons glamorousBrowse					entitled: 'Browse' ]! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.390656 pm'!!SmaCCRewriteTypeMatch methodsFor: '*SmaCC_Rewrite_Engine_UI'!title	^ 'Match'! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.391656 pm'!!SmaCCRewrite methodsFor: '*SmaCC_Rewrite_Engine_UI'!buildInterfaceIn: aPresentation	| tabulator |	(tabulator := aPresentation tabulator)		row: [ :row | 			row				column: #label size: 75;				column: #comment ]			size: 25;		row: #search;		row: #replace.	tabulator transmit		to: #label;		andShow: [ :presentation | presentation label display: 'Comment:' ].	tabulator transmit		to: #comment;		andShow: [ :presentation | 			presentation text				display: self comment;				onChangeOfPort: #text act: [ :text | self comment: text text asString ] ].	tabulator updateOn: #match from: #yourself.	tabulator updateOn: #transformation from: #yourself.	tabulator transmit		to: #search;		transformed: [ :rewrite | rewrite match ];		andShow: [ :presentation | self buildSearchIn: presentation ].	tabulator transmit		to: #replace;		transformed: [ :rewrite | rewrite transformation ];		andShow: [ :presentation | self buildReplaceIn: presentation ]! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.392656 pm'!!SmaCCRewrite methodsFor: '*SmaCC_Rewrite_Engine_UI'!changedSearchTo: aSymbol	| class newMatch |	class := SmaCCRewriteMatch withAllSubclasses detect: [ :each | each type = aSymbol ].	self match class == class		ifTrue: [ ^ self ].	newMatch := class new.	self match: newMatch! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.393656 pm'!!SmaCCRewrite methodsFor: '*SmaCC_Rewrite_Engine_UI'!matchTypes	^ (SmaCCRewriteMatch allSubclasses collect: [ :each | each type ])		asSet asSortedCollection! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.394656 pm'!!SmaCCRewrite methodsFor: '*SmaCC_Rewrite_Engine_UI'!rewriteForMethod: aMethod	(match method == aMethod or: [ transformation method == aMethod ])		ifTrue: [ ^ self ].	^ nil! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.395656 pm'!!SmaCCRewrite methodsFor: '*SmaCC_Rewrite_Engine_UI'!changedReplaceTo: aSymbol	| class rewrite |	class := SmaCCRewriteTransformation withAllSubclasses detect: [ :each | each type = aSymbol ].	self transformation class == class		ifTrue: [ ^ self ].	rewrite := class new.	self transformation: rewrite! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.396656 pm'!!SmaCCRewrite methodsFor: '*SmaCC_Rewrite_Engine_UI'!transformationTypes	^ ((SmaCCRewriteTransformation allSubclasses		collect: [ :each | each type ]) asSet		remove: nil ifAbsent: [  ];		yourself) asSortedCollection! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.396656 pm'!!SmaCCRewrite methodsFor: '*SmaCC_Rewrite_Engine_UI'!buildSearchIn: aPresentation	| browser types |	browser := aPresentation tabulator.	browser		row: #type size: 25;		row: #value.	types := self matchTypes.	browser transmit		to: #type;		andShow: [ :presentation | 			presentation dropDownList				display: [ types ];				selectedIndex: (types indexOf: self match class type);				onChangeOfPort: #selection act: [ :list | self changedSearchTo: list selection ] ].	browser transmit		to: #value;		andShow: [ :presentation | 			presentation dynamic				updateOn: #match from: [ self announcer ];				display: [ | composite |					composite := GLMCompositePresentation new.					match buildInterfaceIn: composite.					composite startOn: match.					composite ] ]! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.397656 pm'!!SmaCCRewrite methodsFor: '*SmaCC_Rewrite_Engine_UI'!buildReplaceIn: aPresentation	| browser types |	browser := aPresentation tabulator.	browser		row: #type size: 25;		row: #value.	types := self transformationTypes.	browser transmit		to: #type;		andShow: [ :presentation | 			presentation dropDownList				display: [ types ];				selectedIndex: (types indexOf: self transformation class type);				onChangeOfPort: #selection act: [ :list | self changedReplaceTo: list selection ] ].	browser transmit		to: #value;		andShow: [ :presentation | 			presentation dynamic				updateOn: #transformation from: [ self announcer ];				display: [ | composite |					composite := GLMCompositePresentation new.					transformation buildInterfaceIn: composite.					composite startOn: match.					composite ] ]! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.398656 pm'!!SmaCCRewriteFile methodsFor: '*SmaCC_Rewrite_Engine_UI'!buildInterfaceIn: aPresentation	| classes tabulator |	classes := SmaCCParser allSubclasses asSortedCollection: [ :a :b | a name < b name ].	(tabulator := aPresentation tabulator)		row: [ :row | 			row				column: #label size: 75;				column: #parser size: 250;				column: #ignore1 ]			size: 25;		row: #ignore.	tabulator transmit		to: #label;		andShow: [ :presentation | presentation label display: 'Parser:' ].	tabulator transmit		to: #parser;		andShow: [ :presentation | 			presentation dropDownList				display: [ classes ];				selectedIndex: (classes indexOf: self parserClass);				onChangeOfPort: #selection					act: [ :list | 					| parser |					parser := classes at: list selectedIndex ifAbsent: [ nil ].					self parserClass ~= parser						ifTrue: [ self parserClass: parser ] ] ]! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.399656 pm'!!SmaCCRewriteFile methodsFor: '*SmaCC_Rewrite_Engine_UI'!rewriteForMethod: aMethod	rewrites do: [ :each | (each rewriteForMethod: aMethod) ifNotNil: [ :rewrite | ^ rewrite ] ].	^ nil! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.400656 pm'!!SmaCCTransformationToolkitModel methodsFor: '*SmaCC_Rewrite_Engine_UI'!changed: aSymbol	super changed: aSymbol.	self announcer announce: aSymbol! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.401656 pm'!!SmaCCTransformationToolkitModel methodsFor: '*SmaCC_Rewrite_Engine_UI'!changed: aSymbol with: anObject	super changed: aSymbol with: anObject.	self announcer announce: aSymbol! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.402656 pm'!!SmaCCRewritePropertyDefinition methodsFor: '*SmaCC_Rewrite_Engine_UI'!addGlobal	| variable |	variable := UITheme builder textEntry: 'Enter variable name:' title: 'Variable' entryText: ''.	(variable notNil and: [ RBScanner isVariable: variable ])		ifTrue: [ self addGlobal: variable ]! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.403656 pm'!!SmaCCRewritePropertyDefinition methodsFor: '*SmaCC_Rewrite_Engine_UI'!buildInterfaceIn: aPresentation	| tabulator |	(tabulator := aPresentation tabulator)		row: [ :row | 			row				column: #label size: 75;				column: #comment ]			size: 25;		row: #locals;		row: #globals.	tabulator transmit		to: #label;		andShow: [ :presentation | presentation label display: 'Comment:' ].	tabulator transmit		to: #comment;		andShow: [ :presentation | 			presentation text				display: self comment;				onChangeOfPort: #text act: [ :text | self comment: text text asString ] ].	tabulator transmit		to: #locals;		andShow: [ :presentation | 			presentation list				title: 'Locals';				updateOn: #locals from: [ self announcer ];				act: [ self addLocal ] icon: GLMUIThemeExtraIcons glamorousAdd entitled: 'Add';				act: [ :list | self removeLocal: list selection ] icon: GLMUIThemeExtraIcons glamorousRemove entitled: 'Remove';				display: [ propertyNames asSortedCollection ] ].	tabulator transmit		to: #globals;		andShow: [ :presentation | 			presentation list				title: 'Globals';				updateOn: #globals from: [ self announcer ];				act: [ self addGlobal ] icon: GLMUIThemeExtraIcons glamorousAdd entitled: 'Add';				act: [ :list | self removeGlobal: list selection ] icon: GLMUIThemeExtraIcons glamorousRemove entitled: 'Remove';				display: [ globalValues keys asSortedCollection ] ]! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.404656 pm'!!SmaCCRewritePropertyDefinition methodsFor: '*SmaCC_Rewrite_Engine_UI'!addLocal	| variable |	variable := UITheme builder textEntry: 'Enter variable name:' title: 'Variable' entryText: ''.	(variable notNil and: [ RBScanner isVariable: variable ])		ifTrue: [ self addLocal: variable ]! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.405656 pm'!!SmaCCRewritePropertyDefinition methodsFor: '*SmaCC_Rewrite_Engine_UI'!rewriteForMethod: aMethod	^ nil! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.406656 pm'!!SmaCCRewriteStringTransformation methodsFor: '*SmaCC_Rewrite_Engine_UI'!source	^ self string! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.406656 pm'!!SmaCCRewriteStringTransformation methodsFor: '*SmaCC_Rewrite_Engine_UI'!buildInterfaceIn: aPresentation	aPresentation text		display: (self string ifNil: [ '' ]);		title: 'Replacement Pattern';		onChangeOfPort: #text act: [ :text | self string: text text asString ]! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.407656 pm'!!SmaCCRewriteTreeMatch methodsFor: '*SmaCC_Rewrite_Engine_UI'!buildInterfaceIn: aPresentation	| browser states |	browser := aPresentation tabulator.	browser		row: [ :row | 			row				column: #label size: 50;				column: #state;				column: #empty size: 1 ]			size: 25;		row: #value.	browser transmit		to: #label;		andShow: [ :presentation | presentation label display: 'State:' ].	states := self parserStartingStates.	browser transmit		to: #state;		andShow: [ :presentation | 			presentation dropDownList				display: [ states ];				selectedIndex: (states indexOf: self startingState);				onChangeOfPort: #selection act: [ :list | self startingState: list selection ] ].	browser transmit		to: #value;		andShow: [ :presentation | 			presentation text				display: (self source ifNil: [ '' ]);				title: 'Pattern';				onChangeOfPort: #text act: [ :text | self source: text text asString ] ]! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.408656 pm'!!SmaCCRewriteTreeMatch methodsFor: '*SmaCC_Rewrite_Engine_UI'!parserStartingStates	^ ((self parserClass class allSelectors select: [ :each | each beginsWith: 'startingStateFor' ])		collect: [ :each | each asString copyFrom: 17 to: each size ]) asSortedCollection! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.409656 pm'!!SmaCCRewriteCodeTransformation methodsFor: '*SmaCC_Rewrite_Engine_UI'!source	^ self code! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.411656 pm'!!SmaCCRewriteCodeTransformation methodsFor: '*SmaCC_Rewrite_Engine_UI'!buildInterfaceIn: aPresentation	| updating |	updating := false.	aPresentation pharoScript		display: (self code ifNil: [ '' ]);		title: 'Code';		smalltalkClass: [ rewrite contextClass ];		onChangeOfPort: #text			act: [ :text | 			updating				ifFalse: [ self code: text text asString ] ];		morphicSelectionAct: [ :text | 				self code: (RBParser parseExpression: text text asString) formattedCode.				updating := true.				[ text update ]					ensure: [ updating := false ] ]			icon: GLMUIThemeExtraIcons glamorousPlay			on: $t			entitled: 'Format'! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.412656 pm'!!SmaCCRewriteCodeTransformation methodsFor: '*SmaCC_Rewrite_Engine_UI'!title	^ 'Transformation'! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.413656 pm'!!SmaCCRewriteTransformation methodsFor: '*SmaCC_Rewrite_Engine_UI'!method	^ nil! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.414656 pm'!!GTPrintSelectionDebugAction class methodsFor: '*SmaCC_Rewrite_Engine_UI'!gtTransformationActionFor: aDebugger	<gtContextSmaCCTransformationStack>	^ (self forDebugger: aDebugger)		codePresentationSelector: #rewriteCode;		icon: GLMUIThemeExtraIcons glamorousInspect! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.415656 pm'!!SmaCCRewriteMatch class methodsFor: '*SmaCC_Rewrite_Engine_UI'!type	^ nil! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.416656 pm'!!ResumeDebugAction class methodsFor: '*SmaCC_Rewrite_Engine_UI'!gtSmaCCTransformationStackActionFor: aDebugger	<gtSmaCCTransformationStack>	^ (self forDebugger: aDebugger) icon: GLMUIThemeExtraIcons glamorousPlay! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.417656 pm'!!GTExecuteSelectionDebugAction class methodsFor: '*SmaCC_Rewrite_Engine_UI'!gtTransformationActionFor: aDebugger	<gtContextSmaCCTransformationStack>	^ (self forDebugger: aDebugger)		codePresentationSelector: #rewriteCode;		icon: GLMUIThemeExtraIcons glamorousInspect! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.418656 pm'!!SmaCCRewriteTypeMatch class methodsFor: '*SmaCC_Rewrite_Engine_UI'!type	^ #Type! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.418656 pm'!!SmaCCRewriteStringTransformation class methodsFor: '*SmaCC_Rewrite_Engine_UI'!type	^ #String! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.419656 pm'!!SmaCCRewriteTreeMatch class methodsFor: '*SmaCC_Rewrite_Engine_UI'!type	^ #Pattern! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.420656 pm'!!GTInspectSelectionDebugAction class methodsFor: '*SmaCC_Rewrite_Engine_UI'!gtTransformationActionFor: aDebugger	<gtContextSmaCCTransformationStack>	^ (self forDebugger: aDebugger)		codePresentationSelector: #rewriteCode;		icon: GLMUIThemeExtraIcons glamorousInspect! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.421656 pm'!!SmaCCRewriteCodeTransformation class methodsFor: '*SmaCC_Rewrite_Engine_UI'!type	^ #Code! !'From Pharo8.0.0 of 22 January 2020 [Build information: Pharo-8.0.0+build.1124.sha.0932da82f08175e906b0e2a8052120c823374e9f (64 Bit)] on 20 April 2020 at 11:19:54.422656 pm'!!SmaCCRewriteTransformation class methodsFor: '*SmaCC_Rewrite_Engine_UI'!type	^ nil! !