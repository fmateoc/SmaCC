CommandLineHandler subclass: #SmaCCRewriteServerCommandLineHandler	instanceVariableNames: 'port'	classVariableNames: ''	package: 'SmaCC_Rewrite_Server'!!SmaCCRewriteServerCommandLineHandler methodsFor: 'activation'!startServer	[ | server |	server := SmaCCServer startOn: self port.	self writePortNumber: server port.	[ server run ]		ensure: [ server close ] ]		on: Error		do: [ :ex | self stderr nextPutAll: ex messageText ]! !!SmaCCRewriteServerCommandLineHandler methodsFor: 'activation'!port	port isNil		ifTrue: [ port := (self portArgument ifNil: [ 36rSM ]) asInteger ].	^ port! !!SmaCCRewriteServerCommandLineHandler methodsFor: 'activation'!activate	[ self startServer ] fork! !!SmaCCRewriteServerCommandLineHandler methodsFor: 'activation'!portArgument	^ self optionAt: 'port' ifAbsent: [ nil ]! !!SmaCCRewriteServerCommandLineHandler methodsFor: 'activation'!portFile	^ self optionAt: 'port-file' ifAbsent: [ nil ]! !!SmaCCRewriteServerCommandLineHandler methodsFor: 'activation'!writePortNumber: anInteger	| filename |	filename := self portFile.	filename isNil		ifTrue: [ ^ self ].	filename asFileReference writeStreamDo: [ :stream | stream print: anInteger ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmaCCRewriteServerCommandLineHandler class	instanceVariableNames: ''!!SmaCCRewriteServerCommandLineHandler class methodsFor: 'accessing'!commandName	^ 'SmaCCServer'! !Object subclass: #SmaCCServer	instanceVariableNames: 'socket availableServers registeredServers'	classVariableNames: ''	package: 'SmaCC_Rewrite_Server'!!SmaCCServer methodsFor: 'running'!readBytesFrom: aStream	^aStream next: (self nextInteger: aStream)! !!SmaCCServer methodsFor: 'running'!processRequest: aSocketStream	[ 	[ 	| string items canceled results |	string := (self readBytesFrom: aSocketStream) asString.	items := string substrings: (Character value: 0) asString.	canceled := ValueHolder new.	canceled contents: false.	results := SharedQueue new.	[ 	items		do:			[ :each | 			canceled contents				ifFalse:					[ 					| server |					server := availableServers next.					[ 					self						processRequest: each						on: server						notifying: results						canceled: canceled ] fork ] ] ] fork.	[ 	items size		timesRepeat:			[ 			| bytes |			bytes := results next.			self writeBytes: bytes on: aSocketStream ] ]		on: Error		do: [ :ex | canceled contents: true ] ]		ensure: [ aSocketStream close ] ] fork! !!SmaCCServer methodsFor: 'running'!stop	socket close! !!SmaCCServer methodsFor: 'running'!writeBytes: bytes on: aStream	self nextPutInteger: bytes size on: aStream.	aStream		nextPutAll: bytes asByteArray;		flush! !!SmaCCServer methodsFor: 'running'!run	[ | accepted |	accepted := socket waitForAcceptFor: 1000 ifTimedOut: [ nil ].	accepted notNil		ifTrue: [ self process: accepted ] ] repeat! !!SmaCCServer methodsFor: 'running'!process: aSocket	| type socketStream |	socketStream := SocketStream on: aSocket.	socketStream		noTimeout;		binary.	type := socketStream next.	type = $0 asInteger		ifTrue: [ ^ self register: socketStream ].	type = $1 asInteger		ifTrue: [ ^ self processRequest: socketStream ].	type = $E asInteger		ifTrue: [ Exit signalSuccess ].	self error: 'Invalid request'! !!SmaCCServer methodsFor: 'running'!startOn: anInteger	availableServers := SharedQueue new.	registeredServers := IdentitySet new.	socket := Socket newTCP.	socket		setOption: 'TCP_NODELAY' value: 1;		setOption: 'SO_SNDBUF' value: 4096;		setOption: 'SO_RCVBUF' value: 4096.	socket listenOn: anInteger backlogSize: 50! !!SmaCCServer methodsFor: 'running'!processRequest: aByteArray on: aSocketStream notifying: aSharedQueue canceled: aValueHolder	| resultBytes |	[ 	self writeBytes: aByteArray on: aSocketStream.	resultBytes := self readBytesFrom: aSocketStream.	availableServers nextPut: aSocketStream ]		on: Error		do:			[ :ex | 			registeredServers remove: aSocketStream.			[ aSocketStream close ]				on: Error				do: [ :e |  ].			aValueHolder contents				ifFalse: [ ^ self ].			^ self				processRequest: aByteArray				on: availableServers next				notifying: aSharedQueue				canceled: aValueHolder ].	aSharedQueue nextPut: resultBytes! !!SmaCCServer methodsFor: 'running'!register: aSocketStream	availableServers nextPut: aSocketStream.	registeredServers add: aSocketStream! !!SmaCCServer methodsFor: 'running'!port	^ socket localPort! !!SmaCCServer methodsFor: 'running'!nextInteger: aStream	| value |	value := 0.	0 to: 3 do: [ :i | value := value + (aStream next << (i * 8)) ].	^ value! !!SmaCCServer methodsFor: 'running'!nextPutInteger: anInteger on: aStream	| value |	value := anInteger.	4		timesRepeat: [ 			aStream nextPut: (value bitAnd: 16rFF).			value := value bitShift: -8 ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmaCCServer class	instanceVariableNames: ''!!SmaCCServer class methodsFor: 'instance creation'!startOn: anInteger	^ self new		startOn: anInteger;		yourself! !