CommandLineHandler subclass: #SmaCCRewriteEngineCommandLineHandler	instanceVariableNames: 'failingFiles doneCount totalCount doneSemaphore'	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_Command_Line'!!SmaCCRewriteEngineCommandLineHandler methodsFor: 'testing'!isServer	^ self hasOption: 'server'! !!SmaCCRewriteEngineCommandLineHandler methodsFor: 'testing'!isLocal	^ self hasOption: 'local'! !!SmaCCRewriteEngineCommandLineHandler methodsFor: 'testing'!shouldTerminateServer	^ self hasOption: 'terminate'! !!SmaCCRewriteEngineCommandLineHandler methodsFor: 'activation'!update: aSymbol with: anObject	aSymbol = #resultAdded		ifTrue: [ ^ self finished: anObject ].	super update: aSymbol with: anObject! !!SmaCCRewriteEngineCommandLineHandler methodsFor: 'activation'!activate	self configurationFilename ifNotNil: [ :filename | ^ self runFile: filename ].	self exitFailure: 'Please provide rewrite file to run: --file=filename.rwc'! !!SmaCCRewriteEngineCommandLineHandler methodsFor: 'activation'!configurationFilename	^ self optionAt: 'file' ifAbsent: [ self arguments detect: [ :each | each first ~= '-' ] ifNone: [ nil ] ]! !!SmaCCRewriteEngineCommandLineHandler methodsFor: 'activation'!run: aSmaCCTransformationToolkitModel	failingFiles := 0.	doneCount := 0.	totalCount := aSmaCCTransformationToolkitModel files size.	totalCount = 0		ifTrue: [ self stderr				nextPutAll: 'No files specified';				cr.			self exitSuccess ].	doneSemaphore := Semaphore new.	aSmaCCTransformationToolkitModel addDependent: self.	aSmaCCTransformationToolkitModel		perform: self runType		with: aSmaCCTransformationToolkitModel files.	doneSemaphore wait.	self shouldTerminateServer		ifTrue: [ aSmaCCTransformationToolkitModel terminateServer ].	^ (Exit status: (failingFiles min: 255)) signal! !!SmaCCRewriteEngineCommandLineHandler methodsFor: 'activation'!runFile: aString	| model |	model := SmaCCTransformationToolkitModel new.	[ model loadFile: aString ]		on: Error		do: [ :ex | ^ self exitFailure: 'Unable to load file: ' , aString ].	self run: model! !!SmaCCRewriteEngineCommandLineHandler methodsFor: 'activation'!finished: aSmaCCRewriteResult	doneCount := doneCount + 1.	(aSmaCCRewriteResult isError or: [ aSmaCCRewriteResult isWarning ])		ifTrue: [ failingFiles := failingFiles + 1.			self stderr nextPutAll: aSmaCCRewriteResult filename.			aSmaCCRewriteResult startLine notNil				ifTrue: [ self stderr						nextPut: $[;						print: aSmaCCRewriteResult startLine.					aSmaCCRewriteResult startColumn notNil						ifTrue: [ self stderr								nextPut: $:;								print: aSmaCCRewriteResult startColumn ].					self stderr nextPut: $] ]				ifFalse: [ aSmaCCRewriteResult interval notNil						ifTrue: [ self stderr								nextPut: $[;								print: aSmaCCRewriteResult interval first;								nextPut: $-;								print: aSmaCCRewriteResult interval last;								nextPut: $] ] ].			aSmaCCRewriteResult transformation notNil				ifTrue: [ self stderr						nextPut: $(;						nextPutAll: aSmaCCRewriteResult transformation displayString;						nextPut: $) ].			self stderr				nextPutAll: ': ';				nextPutAll: aSmaCCRewriteResult errorString;				nextPutAll: String crlf ].	totalCount = doneCount		ifTrue: [ doneSemaphore signal ]! !!SmaCCRewriteEngineCommandLineHandler methodsFor: 'activation'!runType	self isLocal		ifTrue: [ ^ #localRunOn: ].	self isServer		ifTrue: [ ^ #localRunOn: ].	^ #runOn:! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmaCCRewriteEngineCommandLineHandler class	instanceVariableNames: ''!!SmaCCRewriteEngineCommandLineHandler class methodsFor: 'accessing'!commandName	^ 'SmaCCTransformationRunner'! !