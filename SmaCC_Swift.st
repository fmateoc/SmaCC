SmaCCParseNode subclass: #SwiftParseNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftParseNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitParse: self! !SwiftParseNode subclass: #SwiftArrayTypeNode	instanceVariableNames: 'leftBracketTokens identifierTokens periodTokens protocolTokens lessThanTokens greaterThanTokens rightBracketTokens colonTokens minusGreaterThanTokens commaTokens leftParenTokens rightParenTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens inoutTokens _Tokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftArrayTypeNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.! !!SwiftArrayTypeNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitArrayType: self! !!SwiftArrayTypeNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!compositeTokenVariables	^ #(#leftBracketTokens #rightBracketTokens #colonTokens #minusGreaterThanTokens #periodTokens #leftParenTokens #rightParenTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #identifierTokens #commaTokens #periodPeriodPeriodTokens #_Tokens #inoutTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens)! !!SwiftArrayTypeNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftArrayTypeNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftArrayTypeNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftArrayTypeNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !SwiftParseNode subclass: #SwiftAssignmentOperatorNode	instanceVariableNames: 'equalTokens identifierTokens lessThanTokens commaTokens greaterThanTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens leftBracketTokens expressions rightBracketTokens keyExpressions colonTokens valueExpressions __FILE__Token __LINE__Token __COLUMN__Token __FUNCTION__Token selfTokens periodTokens initTokens leftBraceTokens leftParenTokens rightParenTokens inoutTokens letTokens _Tokens protocolTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens varTokens rightBraceTokens operatorTokens inToken weakToken unownedToken unownedLeftParensafeRightParenToken unownedLeftParenunsafeRightParenToken statements dynamicTypeTokens andToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftAssignmentOperatorNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	equalTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	keyExpressions := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	valueExpressions := OrderedCollection new: 2.	selfTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	initTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.	dynamicTypeTokens := OrderedCollection new: 2.! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!keyExpressions	^ keyExpressions! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!__FUNCTION__Token	^ __FUNCTION__Token! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!__FUNCTION__Token: aSmaCCToken	__FUNCTION__Token := aSmaCCToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!otherVariables	^ #(#expressions #keyExpressions #valueExpressions)! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken	^ unownedLeftParensafeRightParenToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!andToken	^ andToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!valueExpressions: anOrderedCollection	valueExpressions := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken: aSmaCCToken	unownedLeftParensafeRightParenToken := aSmaCCToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!valueExpressions	^ valueExpressions! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!weakToken	^ weakToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!dynamicTypeTokens	^ dynamicTypeTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!initTokens	^ initTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!__FILE__Token: aSmaCCToken	__FILE__Token := aSmaCCToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!__FILE__Token	^ __FILE__Token! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!compositeTokenVariables	^ #(#equalTokens #identifierTokens #lessThanTokens #commaTokens #greaterThanTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #leftBracketTokens #rightBracketTokens #colonTokens #selfTokens #periodTokens #initTokens #leftBraceTokens #leftParenTokens #rightParenTokens #inoutTokens #letTokens #_Tokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #protocolTokens #typeTokens #periodPeriodPeriodTokens #varTokens #rightBraceTokens #operatorTokens #dynamicTypeTokens)! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!dynamicTypeTokens: anOrderedCollection	dynamicTypeTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken: aSmaCCToken	unownedLeftParenunsafeRightParenToken := aSmaCCToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!__COLUMN__Token: aSmaCCToken	__COLUMN__Token := aSmaCCToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!selfTokens	^ selfTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!selfTokens: anOrderedCollection	selfTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!initTokens: anOrderedCollection	initTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!__COLUMN__Token	^ __COLUMN__Token! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!unownedToken	^ unownedToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!unownedToken: aSmaCCToken	unownedToken := aSmaCCToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!__LINE__Token: aSmaCCToken	__LINE__Token := aSmaCCToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!andToken: aSmaCCToken	andToken := aSmaCCToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!weakToken: aSmaCCToken	weakToken := aSmaCCToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken	^ unownedLeftParenunsafeRightParenToken! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!tokenVariables	^ #(#__FILE__Token #__LINE__Token #__COLUMN__Token #__FUNCTION__Token #inToken #weakToken #unownedToken #unownedLeftParensafeRightParenToken #unownedLeftParenunsafeRightParenToken #andToken)! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!__LINE__Token	^ __LINE__Token! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitAssignmentOperator: self! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!keyExpressions: anOrderedCollection	keyExpressions := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftAssignmentOperatorNode methodsFor: 'generated'!statements	^ statements! !SwiftParseNode subclass: #SwiftBinaryExpressionNode	instanceVariableNames: 'identifierTokens lessThanTokens commaTokens greaterThanTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens leftBracketTokens expressions rightBracketTokens keyExpressions colonTokens valueExpressions __FILE__Token __LINE__Token __COLUMN__Token __FUNCTION__Token selfTokens periodTokens initTokens leftBraceTokens leftParenTokens rightParenTokens inoutTokens letTokens _Tokens protocolTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens equalTokens varTokens rightBraceTokens operatorTokens inToken weakToken unownedToken unownedLeftParensafeRightParenToken unownedLeftParenunsafeRightParenToken statements dynamicTypeTokens andToken operators'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftBinaryExpressionNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!keyExpressions	^ keyExpressions! !!SwiftBinaryExpressionNode methodsFor: 'generated'!__FUNCTION__Token	^ __FUNCTION__Token! !!SwiftBinaryExpressionNode methodsFor: 'generated'!__FUNCTION__Token: aSmaCCToken	__FUNCTION__Token := aSmaCCToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expressions #keyExpressions #valueExpressions)! !!SwiftBinaryExpressionNode methodsFor: 'generated'!operators: anOrderedCollection	self setParents: self operators to: nil.	operators := anOrderedCollection.	self setParents: self operators to: self! !!SwiftBinaryExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements #operators)! !!SwiftBinaryExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken	^ unownedLeftParensafeRightParenToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!andToken	^ andToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!valueExpressions: anOrderedCollection	valueExpressions := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken: aSmaCCToken	unownedLeftParensafeRightParenToken := aSmaCCToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!valueExpressions	^ valueExpressions! !!SwiftBinaryExpressionNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!weakToken	^ weakToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!dynamicTypeTokens	^ dynamicTypeTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!initTokens	^ initTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!__FILE__Token: aSmaCCToken	__FILE__Token := aSmaCCToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!operators	^ operators! !!SwiftBinaryExpressionNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!__FILE__Token	^ __FILE__Token! !!SwiftBinaryExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#identifierTokens #lessThanTokens #commaTokens #greaterThanTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #leftBracketTokens #rightBracketTokens #colonTokens #selfTokens #periodTokens #initTokens #leftBraceTokens #leftParenTokens #rightParenTokens #inoutTokens #letTokens #_Tokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #protocolTokens #typeTokens #periodPeriodPeriodTokens #equalTokens #varTokens #rightBraceTokens #operatorTokens #dynamicTypeTokens)! !!SwiftBinaryExpressionNode methodsFor: 'generated'!dynamicTypeTokens: anOrderedCollection	dynamicTypeTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken: aSmaCCToken	unownedLeftParenunsafeRightParenToken := aSmaCCToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!__COLUMN__Token: aSmaCCToken	__COLUMN__Token := aSmaCCToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!selfTokens	^ selfTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!selfTokens: anOrderedCollection	selfTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!initTokens: anOrderedCollection	initTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!__COLUMN__Token	^ __COLUMN__Token! !!SwiftBinaryExpressionNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftBinaryExpressionNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!unownedToken	^ unownedToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!unownedToken: aSmaCCToken	unownedToken := aSmaCCToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!__LINE__Token: aSmaCCToken	__LINE__Token := aSmaCCToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftBinaryExpressionNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!andToken: aSmaCCToken	andToken := aSmaCCToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!weakToken: aSmaCCToken	weakToken := aSmaCCToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken	^ unownedLeftParenunsafeRightParenToken! !!SwiftBinaryExpressionNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#__FILE__Token #__LINE__Token #__COLUMN__Token #__FUNCTION__Token #inToken #weakToken #unownedToken #unownedLeftParensafeRightParenToken #unownedLeftParenunsafeRightParenToken #andToken)! !!SwiftBinaryExpressionNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!__LINE__Token	^ __LINE__Token! !!SwiftBinaryExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitBinaryExpression: self! !!SwiftBinaryExpressionNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!keyExpressions: anOrderedCollection	keyExpressions := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftBinaryExpressionNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftBinaryExpressionNode methodsFor: 'generated'!statements	^ statements! !!SwiftBinaryExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	keyExpressions := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	valueExpressions := OrderedCollection new: 2.	selfTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	initTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.	dynamicTypeTokens := OrderedCollection new: 2.	operators := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftBinaryOperatorNode	instanceVariableNames: 'operatorTokens identifierTokens lessThanTokens commaTokens greaterThanTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens leftBracketTokens expressions rightBracketTokens keyExpressions colonTokens valueExpressions __FILE__Token __LINE__Token __COLUMN__Token __FUNCTION__Token selfTokens periodTokens initTokens leftBraceTokens leftParenTokens rightParenTokens inoutTokens letTokens _Tokens protocolTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens equalTokens varTokens rightBraceTokens inToken weakToken unownedToken unownedLeftParensafeRightParenToken unownedLeftParenunsafeRightParenToken statements dynamicTypeTokens andToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftBinaryOperatorNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!keyExpressions	^ keyExpressions! !!SwiftBinaryOperatorNode methodsFor: 'generated'!__FUNCTION__Token	^ __FUNCTION__Token! !!SwiftBinaryOperatorNode methodsFor: 'generated'!__FUNCTION__Token: aSmaCCToken	__FUNCTION__Token := aSmaCCToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!otherVariables	^ #(#expressions #keyExpressions #valueExpressions)! !!SwiftBinaryOperatorNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftBinaryOperatorNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken	^ unownedLeftParensafeRightParenToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!andToken	^ andToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!valueExpressions: anOrderedCollection	valueExpressions := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken: aSmaCCToken	unownedLeftParensafeRightParenToken := aSmaCCToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!valueExpressions	^ valueExpressions! !!SwiftBinaryOperatorNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!weakToken	^ weakToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!dynamicTypeTokens	^ dynamicTypeTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!initTokens	^ initTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!__FILE__Token: aSmaCCToken	__FILE__Token := aSmaCCToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!__FILE__Token	^ __FILE__Token! !!SwiftBinaryOperatorNode methodsFor: 'generated'!compositeTokenVariables	^ #(#operatorTokens #identifierTokens #lessThanTokens #commaTokens #greaterThanTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #leftBracketTokens #rightBracketTokens #colonTokens #selfTokens #periodTokens #initTokens #leftBraceTokens #leftParenTokens #rightParenTokens #inoutTokens #letTokens #_Tokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #protocolTokens #typeTokens #periodPeriodPeriodTokens #equalTokens #varTokens #rightBraceTokens #dynamicTypeTokens)! !!SwiftBinaryOperatorNode methodsFor: 'generated'!dynamicTypeTokens: anOrderedCollection	dynamicTypeTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken: aSmaCCToken	unownedLeftParenunsafeRightParenToken := aSmaCCToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!__COLUMN__Token: aSmaCCToken	__COLUMN__Token := aSmaCCToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!selfTokens	^ selfTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!selfTokens: anOrderedCollection	selfTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!initTokens: anOrderedCollection	initTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!__COLUMN__Token	^ __COLUMN__Token! !!SwiftBinaryOperatorNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftBinaryOperatorNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!unownedToken	^ unownedToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!unownedToken: aSmaCCToken	unownedToken := aSmaCCToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!__LINE__Token: aSmaCCToken	__LINE__Token := aSmaCCToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftBinaryOperatorNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!andToken: aSmaCCToken	andToken := aSmaCCToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!weakToken: aSmaCCToken	weakToken := aSmaCCToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken	^ unownedLeftParenunsafeRightParenToken! !!SwiftBinaryOperatorNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!tokenVariables	^ #(#__FILE__Token #__LINE__Token #__COLUMN__Token #__FUNCTION__Token #inToken #weakToken #unownedToken #unownedLeftParensafeRightParenToken #unownedLeftParenunsafeRightParenToken #andToken)! !!SwiftBinaryOperatorNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!__LINE__Token	^ __LINE__Token! !!SwiftBinaryOperatorNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitBinaryOperator: self! !!SwiftBinaryOperatorNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!keyExpressions: anOrderedCollection	keyExpressions := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftBinaryOperatorNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftBinaryOperatorNode methodsFor: 'generated'!statements	^ statements! !!SwiftBinaryOperatorNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	operatorTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	keyExpressions := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	valueExpressions := OrderedCollection new: 2.	selfTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	initTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.	dynamicTypeTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftBlockNode	instanceVariableNames: 'leftBraceToken statements rightBraceToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftBlockNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!SwiftBlockNode methodsFor: 'generated'!statements	^ statements! !!SwiftBlockNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftBlockNode methodsFor: 'generated'!tokenVariables	^ #(#leftBraceToken #rightBraceToken)! !!SwiftBlockNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!SwiftBlockNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitBlock: self! !!SwiftBlockNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!SwiftBlockNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftBlockNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !!SwiftBlockNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	statements := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftClassDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens classToken lessThanTokens colonTokens commaTokens greaterThanTokens periodTokens protocolTokens whereToken equalEqualTokens declarations'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftClassDeclarationNode methodsFor: 'generated'!classToken	^ classToken! !!SwiftClassDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!equalEqualTokens: anOrderedCollection	equalEqualTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!declarations	^ declarations! !!SwiftClassDeclarationNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#classToken #whereToken)! !!SwiftClassDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitClassDeclaration: self! !!SwiftClassDeclarationNode methodsFor: 'generated'!declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self! !!SwiftClassDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!equalEqualTokens	^ equalEqualTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #lessThanTokens #colonTokens #commaTokens #greaterThanTokens #periodTokens #protocolTokens #equalEqualTokens)! !!SwiftClassDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!whereToken: aSmaCCToken	whereToken := aSmaCCToken! !!SwiftClassDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!classToken: aSmaCCToken	classToken := aSmaCCToken! !!SwiftClassDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#declarations)! !!SwiftClassDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftClassDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftClassDeclarationNode methodsFor: 'generated'!whereToken	^ whereToken! !!SwiftClassDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	equalEqualTokens := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftClosureExpressionNode	instanceVariableNames: 'leftBraceTokens leftParenTokens rightParenTokens inoutTokens letTokens _Tokens identifierTokens colonTokens leftBracketTokens periodTokens protocolTokens lessThanTokens greaterThanTokens rightBracketTokens minusGreaterThanTokens commaTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens equalTokens expressions varTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens inToken weakToken unownedToken unownedLeftParensafeRightParenToken unownedLeftParenunsafeRightParenToken statements'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftClosureExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	leftBraceTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.! !!SwiftClosureExpressionNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftClosureExpressionNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftClosureExpressionNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftClosureExpressionNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken	^ unownedLeftParensafeRightParenToken! !!SwiftClosureExpressionNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!weakToken: aSmaCCToken	weakToken := aSmaCCToken! !!SwiftClosureExpressionNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!statements	^ statements! !!SwiftClosureExpressionNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#inToken #weakToken #unownedToken #unownedLeftParensafeRightParenToken #unownedLeftParenunsafeRightParenToken)! !!SwiftClosureExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitClosureExpression: self! !!SwiftClosureExpressionNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!unownedToken: aSmaCCToken	unownedToken := aSmaCCToken! !!SwiftClosureExpressionNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expressions)! !!SwiftClosureExpressionNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!weakToken	^ weakToken! !!SwiftClosureExpressionNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#leftBraceTokens #leftParenTokens #rightParenTokens #inoutTokens #letTokens #_Tokens #identifierTokens #colonTokens #leftBracketTokens #rightBracketTokens #minusGreaterThanTokens #periodTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #commaTokens #periodPeriodPeriodTokens #equalTokens #varTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens)! !!SwiftClosureExpressionNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken	^ unownedLeftParenunsafeRightParenToken! !!SwiftClosureExpressionNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken: aSmaCCToken	unownedLeftParensafeRightParenToken := aSmaCCToken! !!SwiftClosureExpressionNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!unownedToken	^ unownedToken! !!SwiftClosureExpressionNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftClosureExpressionNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftClosureExpressionNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftClosureExpressionNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftClosureExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken: aSmaCCToken	unownedLeftParenunsafeRightParenToken := aSmaCCToken! !!SwiftClosureExpressionNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !SwiftParseNode subclass: #SwiftCondionalOperatorNode	instanceVariableNames: 'questionMarkTokens trueExpression colonTokens identifierTokens lessThanTokens commaTokens greaterThanTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens leftBracketTokens expressions rightBracketTokens keyExpressions valueExpressions __FILE__Token __LINE__Token __COLUMN__Token __FUNCTION__Token selfTokens periodTokens initTokens leftBraceTokens leftParenTokens rightParenTokens inoutTokens letTokens _Tokens protocolTokens minusGreaterThanTokens bangTokens typeTokens periodPeriodPeriodTokens equalTokens varTokens rightBraceTokens operatorTokens inToken weakToken unownedToken unownedLeftParensafeRightParenToken unownedLeftParenunsafeRightParenToken statements dynamicTypeTokens andToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftCondionalOperatorNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	questionMarkTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	keyExpressions := OrderedCollection new: 2.	valueExpressions := OrderedCollection new: 2.	selfTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	initTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.	dynamicTypeTokens := OrderedCollection new: 2.! !!SwiftCondionalOperatorNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!keyExpressions	^ keyExpressions! !!SwiftCondionalOperatorNode methodsFor: 'generated'!__FUNCTION__Token	^ __FUNCTION__Token! !!SwiftCondionalOperatorNode methodsFor: 'generated'!__FUNCTION__Token: aSmaCCToken	__FUNCTION__Token := aSmaCCToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!otherVariables	^ #(#trueExpression #expressions #keyExpressions #valueExpressions)! !!SwiftCondionalOperatorNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftCondionalOperatorNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken	^ unownedLeftParensafeRightParenToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!andToken	^ andToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!valueExpressions: anOrderedCollection	valueExpressions := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken: aSmaCCToken	unownedLeftParensafeRightParenToken := aSmaCCToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!valueExpressions	^ valueExpressions! !!SwiftCondionalOperatorNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!weakToken	^ weakToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!dynamicTypeTokens	^ dynamicTypeTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!initTokens	^ initTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!__FILE__Token: aSmaCCToken	__FILE__Token := aSmaCCToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!__FILE__Token	^ __FILE__Token! !!SwiftCondionalOperatorNode methodsFor: 'generated'!compositeTokenVariables	^ #(#questionMarkTokens #colonTokens #identifierTokens #lessThanTokens #commaTokens #greaterThanTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #leftBracketTokens #rightBracketTokens #selfTokens #periodTokens #initTokens #leftBraceTokens #leftParenTokens #rightParenTokens #inoutTokens #letTokens #_Tokens #minusGreaterThanTokens #bangTokens #protocolTokens #typeTokens #periodPeriodPeriodTokens #equalTokens #varTokens #rightBraceTokens #operatorTokens #dynamicTypeTokens)! !!SwiftCondionalOperatorNode methodsFor: 'generated'!dynamicTypeTokens: anOrderedCollection	dynamicTypeTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken: aSmaCCToken	unownedLeftParenunsafeRightParenToken := aSmaCCToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!__COLUMN__Token: aSmaCCToken	__COLUMN__Token := aSmaCCToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!selfTokens	^ selfTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!selfTokens: anOrderedCollection	selfTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!initTokens: anOrderedCollection	initTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!__COLUMN__Token	^ __COLUMN__Token! !!SwiftCondionalOperatorNode methodsFor: 'generated'!trueExpression	^ trueExpression! !!SwiftCondionalOperatorNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!trueExpression: anObject	trueExpression := anObject! !!SwiftCondionalOperatorNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftCondionalOperatorNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!unownedToken	^ unownedToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!unownedToken: aSmaCCToken	unownedToken := aSmaCCToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!__LINE__Token: aSmaCCToken	__LINE__Token := aSmaCCToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftCondionalOperatorNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!andToken: aSmaCCToken	andToken := aSmaCCToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!weakToken: aSmaCCToken	weakToken := aSmaCCToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken	^ unownedLeftParenunsafeRightParenToken! !!SwiftCondionalOperatorNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!tokenVariables	^ #(#__FILE__Token #__LINE__Token #__COLUMN__Token #__FUNCTION__Token #inToken #weakToken #unownedToken #unownedLeftParensafeRightParenToken #unownedLeftParenunsafeRightParenToken #andToken)! !!SwiftCondionalOperatorNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!__LINE__Token	^ __LINE__Token! !!SwiftCondionalOperatorNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitCondionalOperator: self! !!SwiftCondionalOperatorNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!keyExpressions: anOrderedCollection	keyExpressions := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftCondionalOperatorNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftCondionalOperatorNode methodsFor: 'generated'!statements	^ statements! !SwiftParseNode subclass: #SwiftConstantDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens classTokens mutatingTokens nonmutatingTokens overrideTokens staticTokens unownedTokens unownedLeftParensafeRightParenTokens unownedLeftParenunsafeRightParenTokens weakTokens letToken inializers commaTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftConstantDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	classTokens := OrderedCollection new: 2.	mutatingTokens := OrderedCollection new: 2.	nonmutatingTokens := OrderedCollection new: 2.	overrideTokens := OrderedCollection new: 2.	staticTokens := OrderedCollection new: 2.	unownedTokens := OrderedCollection new: 2.	unownedLeftParensafeRightParenTokens := OrderedCollection new: 2.	unownedLeftParenunsafeRightParenTokens := OrderedCollection new: 2.	weakTokens := OrderedCollection new: 2.	inializers := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !!SwiftConstantDeclarationNode methodsFor: 'generated'!classTokens	^ classTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!nonmutatingTokens	^ nonmutatingTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!inializers	^ inializers! !!SwiftConstantDeclarationNode methodsFor: 'generated'!weakTokens	^ weakTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!nonmutatingTokens: anOrderedCollection	nonmutatingTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#letToken)! !!SwiftConstantDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitConstantDeclaration: self! !!SwiftConstantDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!unownedLeftParensafeRightParenTokens: anOrderedCollection	unownedLeftParensafeRightParenTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!unownedTokens: anOrderedCollection	unownedTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!mutatingTokens: anOrderedCollection	mutatingTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!staticTokens: anOrderedCollection	staticTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!unownedLeftParensafeRightParenTokens	^ unownedLeftParensafeRightParenTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #classTokens #mutatingTokens #nonmutatingTokens #overrideTokens #staticTokens #unownedTokens #unownedLeftParensafeRightParenTokens #unownedLeftParenunsafeRightParenTokens #weakTokens #commaTokens)! !!SwiftConstantDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!overrideTokens	^ overrideTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!staticTokens	^ staticTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!mutatingTokens	^ mutatingTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenTokens: anOrderedCollection	unownedLeftParenunsafeRightParenTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!overrideTokens: anOrderedCollection	overrideTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!letToken	^ letToken! !!SwiftConstantDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!weakTokens: anOrderedCollection	weakTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#inializers)! !!SwiftConstantDeclarationNode methodsFor: 'generated'!inializers: anOrderedCollection	self setParents: self inializers to: nil.	inializers := anOrderedCollection.	self setParents: self inializers to: self! !!SwiftConstantDeclarationNode methodsFor: 'generated'!classTokens: anOrderedCollection	classTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenTokens	^ unownedLeftParenunsafeRightParenTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!unownedTokens	^ unownedTokens! !!SwiftConstantDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftConstantDeclarationNode methodsFor: 'generated'!letToken: aSmaCCToken	letToken := aSmaCCToken! !SwiftParseNode subclass: #SwiftDeinitializerDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens deinitToken block'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!block	^ block! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitDeinitializerDeclaration: self! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!deinitToken	^ deinitToken! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!block: aSwiftBlockNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aSwiftBlockNode.	self block notNil		ifTrue: [ self block parent: self ]! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens)! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#deinitToken)! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!deinitToken: aSmaCCToken	deinitToken := aSmaCCToken! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftDeinitializerDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftDictionaryTypeNode	instanceVariableNames: 'leftBracketTokens identifierTokens periodTokens protocolTokens lessThanTokens greaterThanTokens rightBracketTokens colonTokens minusGreaterThanTokens commaTokens leftParenTokens rightParenTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens inoutTokens _Tokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftDictionaryTypeNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.! !!SwiftDictionaryTypeNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitDictionaryType: self! !!SwiftDictionaryTypeNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!compositeTokenVariables	^ #(#leftBracketTokens #rightBracketTokens #colonTokens #minusGreaterThanTokens #periodTokens #leftParenTokens #rightParenTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #identifierTokens #commaTokens #periodPeriodPeriodTokens #_Tokens #inoutTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens)! !!SwiftDictionaryTypeNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftDictionaryTypeNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftDictionaryTypeNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !SwiftParseNode subclass: #SwiftDynamicTypeExpressionNode	instanceVariableNames: 'identifierTokens lessThanTokens commaTokens greaterThanTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens leftBracketTokens expressions rightBracketTokens keyExpressions colonTokens valueExpressions __FILE__Token __LINE__Token __COLUMN__Token __FUNCTION__Token selfTokens periodTokens initTokens leftBraceTokens leftParenTokens rightParenTokens inoutTokens letTokens _Tokens protocolTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens equalTokens varTokens rightBraceTokens operatorTokens inToken weakToken unownedToken unownedLeftParensafeRightParenToken unownedLeftParenunsafeRightParenToken statements dynamicTypeTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!keyExpressions	^ keyExpressions! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!__FUNCTION__Token	^ __FUNCTION__Token! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!__FUNCTION__Token: aSmaCCToken	__FUNCTION__Token := aSmaCCToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expressions #keyExpressions #valueExpressions)! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken	^ unownedLeftParensafeRightParenToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!valueExpressions: anOrderedCollection	valueExpressions := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken: aSmaCCToken	unownedLeftParensafeRightParenToken := aSmaCCToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!valueExpressions	^ valueExpressions! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!weakToken	^ weakToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!dynamicTypeTokens	^ dynamicTypeTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!initTokens	^ initTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!__FILE__Token: aSmaCCToken	__FILE__Token := aSmaCCToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!__FILE__Token	^ __FILE__Token! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#identifierTokens #lessThanTokens #commaTokens #greaterThanTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #leftBracketTokens #rightBracketTokens #colonTokens #selfTokens #periodTokens #initTokens #leftBraceTokens #leftParenTokens #rightParenTokens #inoutTokens #letTokens #_Tokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #protocolTokens #typeTokens #periodPeriodPeriodTokens #equalTokens #varTokens #rightBraceTokens #operatorTokens #dynamicTypeTokens)! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!dynamicTypeTokens: anOrderedCollection	dynamicTypeTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken: aSmaCCToken	unownedLeftParenunsafeRightParenToken := aSmaCCToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!__COLUMN__Token: aSmaCCToken	__COLUMN__Token := aSmaCCToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!selfTokens	^ selfTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!selfTokens: anOrderedCollection	selfTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!initTokens: anOrderedCollection	initTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!__COLUMN__Token	^ __COLUMN__Token! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!unownedToken	^ unownedToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!unownedToken: aSmaCCToken	unownedToken := aSmaCCToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!__LINE__Token: aSmaCCToken	__LINE__Token := aSmaCCToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!weakToken: aSmaCCToken	weakToken := aSmaCCToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken	^ unownedLeftParenunsafeRightParenToken! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#__FILE__Token #__LINE__Token #__COLUMN__Token #__FUNCTION__Token #inToken #weakToken #unownedToken #unownedLeftParensafeRightParenToken #unownedLeftParenunsafeRightParenToken)! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!__LINE__Token	^ __LINE__Token! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitDynamicTypeExpression: self! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!keyExpressions: anOrderedCollection	keyExpressions := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated'!statements	^ statements! !!SwiftDynamicTypeExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	keyExpressions := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	valueExpressions := OrderedCollection new: 2.	selfTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	initTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.	dynamicTypeTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftEnumDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens lessThanTokens colonTokens commaTokens greaterThanTokens periodTokens protocolTokens whereTokens equalEqualTokens importTokens typealiasTokens structTokens classTokens enumTokens varTokens funcTokens mutatingTokens nonmutatingTokens overrideTokens staticTokens unownedTokens unownedLeftParensafeRightParenTokens unownedLeftParenunsafeRightParenTokens weakTokens letTokens inializers minusGreaterThanTokens questionMarkTokens bangTokens typeTokens blocks getTokens setTokens periodPeriodPeriodTokens equalTokens expressions willSetTokens didSetTokens deinitTokens extensionTokens caseTokens declarations convenienceTokens initTokens inoutTokens subscriptTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftEnumDeclarationNode methodsFor: 'generated'!willSetTokens: anOrderedCollection	willSetTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!classTokens	^ classTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!otherVariables	^ #(#expressions)! !!SwiftEnumDeclarationNode methodsFor: 'generated'!unownedTokens: anOrderedCollection	unownedTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#inializers #blocks #declarations)! !!SwiftEnumDeclarationNode methodsFor: 'generated'!enumTokens	^ enumTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!structTokens: anOrderedCollection	structTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!nonmutatingTokens: anOrderedCollection	nonmutatingTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!weakTokens: anOrderedCollection	weakTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self! !!SwiftEnumDeclarationNode methodsFor: 'generated'!importTokens	^ importTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!blocks: anOrderedCollection	self setParents: self blocks to: nil.	blocks := anOrderedCollection.	self setParents: self blocks to: self! !!SwiftEnumDeclarationNode methodsFor: 'generated'!initTokens	^ initTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!overrideTokens	^ overrideTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!equalEqualTokens: anOrderedCollection	equalEqualTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!extensionTokens	^ extensionTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!getTokens	^ getTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!caseTokens: anOrderedCollection	caseTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #lessThanTokens #colonTokens #commaTokens #greaterThanTokens #periodTokens #protocolTokens #whereTokens #equalEqualTokens #importTokens #typealiasTokens #structTokens #classTokens #enumTokens #varTokens #funcTokens #mutatingTokens #nonmutatingTokens #overrideTokens #staticTokens #unownedTokens #unownedLeftParensafeRightParenTokens #unownedLeftParenunsafeRightParenTokens #weakTokens #letTokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #typeTokens #getTokens #setTokens #equalTokens #willSetTokens #didSetTokens #periodPeriodPeriodTokens #convenienceTokens #initTokens #inoutTokens #deinitTokens #extensionTokens #subscriptTokens #caseTokens)! !!SwiftEnumDeclarationNode methodsFor: 'generated'!funcTokens: anOrderedCollection	funcTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!classTokens: anOrderedCollection	classTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!enumTokens: anOrderedCollection	enumTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!blocks	^ blocks! !!SwiftEnumDeclarationNode methodsFor: 'generated'!weakTokens	^ weakTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!didSetTokens: anOrderedCollection	didSetTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!deinitTokens	^ deinitTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!getTokens: anOrderedCollection	getTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!extensionTokens: anOrderedCollection	extensionTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenTokens	^ unownedLeftParenunsafeRightParenTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!convenienceTokens: anOrderedCollection	convenienceTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!typealiasTokens: anOrderedCollection	typealiasTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!structTokens	^ structTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!whereTokens: anOrderedCollection	whereTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!funcTokens	^ funcTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!equalEqualTokens	^ equalEqualTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!initTokens: anOrderedCollection	initTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenTokens: anOrderedCollection	unownedLeftParenunsafeRightParenTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!unownedLeftParensafeRightParenTokens	^ unownedLeftParensafeRightParenTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!unownedLeftParensafeRightParenTokens: anOrderedCollection	unownedLeftParensafeRightParenTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!subscriptTokens	^ subscriptTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!unownedTokens	^ unownedTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!typealiasTokens	^ typealiasTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!willSetTokens	^ willSetTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!mutatingTokens	^ mutatingTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!inializers	^ inializers! !!SwiftEnumDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!convenienceTokens	^ convenienceTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!setTokens: anOrderedCollection	setTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!importTokens: anOrderedCollection	importTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftEnumDeclarationNode methodsFor: 'generated'!inializers: anOrderedCollection	self setParents: self inializers to: nil.	inializers := anOrderedCollection.	self setParents: self inializers to: self! !!SwiftEnumDeclarationNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!subscriptTokens: anOrderedCollection	subscriptTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!whereTokens	^ whereTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!staticTokens: anOrderedCollection	staticTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!nonmutatingTokens	^ nonmutatingTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitEnumDeclaration: self! !!SwiftEnumDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!overrideTokens: anOrderedCollection	overrideTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!staticTokens	^ staticTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!caseTokens	^ caseTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!declarations	^ declarations! !!SwiftEnumDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!mutatingTokens: anOrderedCollection	mutatingTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!setTokens	^ setTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated'!deinitTokens: anOrderedCollection	deinitTokens := anOrderedCollection! !!SwiftEnumDeclarationNode methodsFor: 'generated'!didSetTokens	^ didSetTokens! !!SwiftEnumDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	whereTokens := OrderedCollection new: 2.	equalEqualTokens := OrderedCollection new: 2.	importTokens := OrderedCollection new: 2.	typealiasTokens := OrderedCollection new: 2.	structTokens := OrderedCollection new: 2.	classTokens := OrderedCollection new: 2.	enumTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	funcTokens := OrderedCollection new: 2.	mutatingTokens := OrderedCollection new: 2.	nonmutatingTokens := OrderedCollection new: 2.	overrideTokens := OrderedCollection new: 2.	staticTokens := OrderedCollection new: 2.	unownedTokens := OrderedCollection new: 2.	unownedLeftParensafeRightParenTokens := OrderedCollection new: 2.	unownedLeftParenunsafeRightParenTokens := OrderedCollection new: 2.	weakTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	inializers := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	blocks := OrderedCollection new: 2.	getTokens := OrderedCollection new: 2.	setTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	willSetTokens := OrderedCollection new: 2.	didSetTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.	convenienceTokens := OrderedCollection new: 2.	initTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	deinitTokens := OrderedCollection new: 2.	extensionTokens := OrderedCollection new: 2.	subscriptTokens := OrderedCollection new: 2.	caseTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftExplicitMemberExpressionNode	instanceVariableNames: 'identifierTokens lessThanTokens commaTokens greaterThanTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens leftBracketTokens expressions rightBracketTokens keyExpressions colonTokens valueExpressions __FILE__Token __LINE__Token __COLUMN__Token __FUNCTION__Token selfTokens periodTokens initTokens leftBraceTokens leftParenTokens rightParenTokens inoutTokens letTokens _Tokens protocolTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens equalTokens varTokens rightBraceTokens operatorTokens inToken weakToken unownedToken unownedLeftParensafeRightParenToken unownedLeftParenunsafeRightParenToken statements dynamicTypeTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftExplicitMemberExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	keyExpressions := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	valueExpressions := OrderedCollection new: 2.	selfTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	initTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.	dynamicTypeTokens := OrderedCollection new: 2.! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!keyExpressions	^ keyExpressions! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!__FUNCTION__Token	^ __FUNCTION__Token! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!__FUNCTION__Token: aSmaCCToken	__FUNCTION__Token := aSmaCCToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expressions #keyExpressions #valueExpressions)! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken	^ unownedLeftParensafeRightParenToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!valueExpressions: anOrderedCollection	valueExpressions := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken: aSmaCCToken	unownedLeftParensafeRightParenToken := aSmaCCToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!valueExpressions	^ valueExpressions! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!weakToken	^ weakToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!dynamicTypeTokens	^ dynamicTypeTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!initTokens	^ initTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!__FILE__Token: aSmaCCToken	__FILE__Token := aSmaCCToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!__FILE__Token	^ __FILE__Token! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#identifierTokens #lessThanTokens #commaTokens #greaterThanTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #leftBracketTokens #rightBracketTokens #colonTokens #selfTokens #periodTokens #initTokens #leftBraceTokens #leftParenTokens #rightParenTokens #inoutTokens #letTokens #_Tokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #protocolTokens #typeTokens #periodPeriodPeriodTokens #equalTokens #varTokens #rightBraceTokens #operatorTokens #dynamicTypeTokens)! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!dynamicTypeTokens: anOrderedCollection	dynamicTypeTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken: aSmaCCToken	unownedLeftParenunsafeRightParenToken := aSmaCCToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!__COLUMN__Token: aSmaCCToken	__COLUMN__Token := aSmaCCToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!selfTokens	^ selfTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!selfTokens: anOrderedCollection	selfTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!initTokens: anOrderedCollection	initTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!__COLUMN__Token	^ __COLUMN__Token! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!unownedToken	^ unownedToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!unownedToken: aSmaCCToken	unownedToken := aSmaCCToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!__LINE__Token: aSmaCCToken	__LINE__Token := aSmaCCToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!weakToken: aSmaCCToken	weakToken := aSmaCCToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken	^ unownedLeftParenunsafeRightParenToken! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#__FILE__Token #__LINE__Token #__COLUMN__Token #__FUNCTION__Token #inToken #weakToken #unownedToken #unownedLeftParensafeRightParenToken #unownedLeftParenunsafeRightParenToken)! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!__LINE__Token	^ __LINE__Token! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitExplicitMemberExpression: self! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!keyExpressions: anOrderedCollection	keyExpressions := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftExplicitMemberExpressionNode methodsFor: 'generated'!statements	^ statements! !SwiftParseNode subclass: #SwiftExtensionDeclarationNode	instanceVariableNames: 'extensionToken identifierTokens lessThanTokens commaTokens greaterThanTokens periodTokens colonToken leftBraceToken declarations rightBraceToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftExtensionDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitExtensionDeclaration: self! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!colonToken: aSmaCCToken	colonToken := aSmaCCToken! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!extensionToken: aSmaCCToken	extensionToken := aSmaCCToken! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!declarations	^ declarations! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!extensionToken	^ extensionToken! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#declarations)! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#identifierTokens #lessThanTokens #commaTokens #greaterThanTokens #periodTokens)! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!colonToken	^ colonToken! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#extensionToken #colonToken #leftBraceToken #rightBraceToken)! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftExtensionDeclarationNode methodsFor: 'generated'!declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self! !!SwiftExtensionDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftFileNode	instanceVariableNames: 'statements'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftFileNode methodsFor: 'generated'!statements	^ statements! !!SwiftFileNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftFileNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftFileNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitFile: self! !!SwiftFileNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	statements := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftForcedValueExpressionNode	instanceVariableNames: 'expression bangToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftForcedValueExpressionNode methodsFor: 'generated'!bangToken: aSmaCCToken	bangToken := aSmaCCToken! !!SwiftForcedValueExpressionNode methodsFor: 'generated'!expression: anOrderedCollection	expression := anOrderedCollection! !!SwiftForcedValueExpressionNode methodsFor: 'generated'!expression	^ expression! !!SwiftForcedValueExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#bangToken)! !!SwiftForcedValueExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitForcedValueExpression: self! !!SwiftForcedValueExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expression)! !!SwiftForcedValueExpressionNode methodsFor: 'generated'!bangToken	^ bangToken! !SwiftParseNode subclass: #SwiftFunctionCallExpressionNode	instanceVariableNames: 'expressions leftParenTokens identifierTokens colonTokens commaTokens rightParenTokens leftBraceTokens inoutTokens letTokens _Tokens leftBracketTokens periodTokens protocolTokens lessThanTokens greaterThanTokens rightBracketTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens equalTokens varTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens inToken weakToken unownedToken unownedLeftParensafeRightParenToken unownedLeftParenunsafeRightParenToken statements'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftFunctionCallExpressionNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken	^ unownedLeftParensafeRightParenToken! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!weakToken: aSmaCCToken	weakToken := aSmaCCToken! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!statements	^ statements! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#inToken #weakToken #unownedToken #unownedLeftParensafeRightParenToken #unownedLeftParenunsafeRightParenToken)! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitFunctionCallExpression: self! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!unownedToken: aSmaCCToken	unownedToken := aSmaCCToken! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expressions)! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!weakToken	^ weakToken! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#leftParenTokens #identifierTokens #colonTokens #commaTokens #rightParenTokens #leftBraceTokens #inoutTokens #letTokens #_Tokens #leftBracketTokens #rightBracketTokens #minusGreaterThanTokens #periodTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #periodPeriodPeriodTokens #equalTokens #varTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens)! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken	^ unownedLeftParenunsafeRightParenToken! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken: aSmaCCToken	unownedLeftParensafeRightParenToken := aSmaCCToken! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!unownedToken	^ unownedToken! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken: aSmaCCToken	unownedLeftParenunsafeRightParenToken := aSmaCCToken! !!SwiftFunctionCallExpressionNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftFunctionCallExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	expressions := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftFunctionDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens classTokens mutatingTokens nonmutatingTokens overrideTokens staticTokens unownedTokens unownedLeftParensafeRightParenTokens unownedLeftParenunsafeRightParenTokens weakTokens funcToken lessThanTokens colonTokens commaTokens greaterThanTokens periodTokens protocolTokens whereToken equalEqualTokens periodPeriodPeriodTokens varTokens inoutTokens letTokens equalTokens expressions minusGreaterThanTokens questionMarkTokens bangTokens typeTokens block'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftFunctionDeclarationNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!classTokens	^ classTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!otherVariables	^ #(#expressions)! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!unownedTokens: anOrderedCollection	unownedTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!nonmutatingTokens: anOrderedCollection	nonmutatingTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!weakTokens: anOrderedCollection	weakTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!whereToken	^ whereToken! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!overrideTokens	^ overrideTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!equalEqualTokens: anOrderedCollection	equalEqualTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #classTokens #mutatingTokens #nonmutatingTokens #overrideTokens #staticTokens #unownedTokens #unownedLeftParensafeRightParenTokens #unownedLeftParenunsafeRightParenTokens #weakTokens #lessThanTokens #colonTokens #commaTokens #greaterThanTokens #periodTokens #protocolTokens #equalEqualTokens #periodPeriodPeriodTokens #varTokens #inoutTokens #letTokens #equalTokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #typeTokens)! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!block	^ block! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!block: aSwiftBlockNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aSwiftBlockNode.	self block notNil		ifTrue: [ self block parent: self ]! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!classTokens: anOrderedCollection	classTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!weakTokens	^ weakTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!funcToken	^ funcToken! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenTokens	^ unownedLeftParenunsafeRightParenTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!equalEqualTokens	^ equalEqualTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenTokens: anOrderedCollection	unownedLeftParenunsafeRightParenTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!unownedLeftParensafeRightParenTokens	^ unownedLeftParensafeRightParenTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!unownedLeftParensafeRightParenTokens: anOrderedCollection	unownedLeftParensafeRightParenTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!unownedTokens	^ unownedTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!funcToken: aSmaCCToken	funcToken := aSmaCCToken! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!mutatingTokens	^ mutatingTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!staticTokens: anOrderedCollection	staticTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#funcToken #whereToken)! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!nonmutatingTokens	^ nonmutatingTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitFunctionDeclaration: self! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!overrideTokens: anOrderedCollection	overrideTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!staticTokens	^ staticTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!mutatingTokens: anOrderedCollection	mutatingTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftFunctionDeclarationNode methodsFor: 'generated'!whereToken: aSmaCCToken	whereToken := aSmaCCToken! !!SwiftFunctionDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	classTokens := OrderedCollection new: 2.	mutatingTokens := OrderedCollection new: 2.	nonmutatingTokens := OrderedCollection new: 2.	overrideTokens := OrderedCollection new: 2.	staticTokens := OrderedCollection new: 2.	unownedTokens := OrderedCollection new: 2.	unownedLeftParensafeRightParenTokens := OrderedCollection new: 2.	unownedLeftParenunsafeRightParenTokens := OrderedCollection new: 2.	weakTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	equalEqualTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftFunctionTypeNode	instanceVariableNames: 'leftBracketTokens identifierTokens periodTokens protocolTokens lessThanTokens greaterThanTokens rightBracketTokens colonTokens minusGreaterThanTokens commaTokens leftParenTokens rightParenTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens inoutTokens _Tokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftFunctionTypeNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.! !!SwiftFunctionTypeNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitFunctionType: self! !!SwiftFunctionTypeNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!compositeTokenVariables	^ #(#leftBracketTokens #rightBracketTokens #colonTokens #minusGreaterThanTokens #periodTokens #leftParenTokens #rightParenTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #identifierTokens #commaTokens #periodPeriodPeriodTokens #_Tokens #inoutTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens)! !!SwiftFunctionTypeNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftFunctionTypeNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftFunctionTypeNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !SwiftParseNode subclass: #SwiftImplicitMemberExpressionNode	instanceVariableNames: 'periodToken identifierToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftImplicitMemberExpressionNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!SwiftImplicitMemberExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#periodToken #identifierToken)! !!SwiftImplicitMemberExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitImplicitMemberExpression: self! !!SwiftImplicitMemberExpressionNode methodsFor: 'generated'!periodToken: aSmaCCToken	periodToken := aSmaCCToken! !!SwiftImplicitMemberExpressionNode methodsFor: 'generated'!periodToken	^ periodToken! !!SwiftImplicitMemberExpressionNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !SwiftParseNode subclass: #SwiftImplicitlyUnwrappedOptionalTypeNode	instanceVariableNames: 'leftBracketTokens identifierTokens periodTokens protocolTokens lessThanTokens greaterThanTokens rightBracketTokens colonTokens minusGreaterThanTokens commaTokens leftParenTokens rightParenTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens inoutTokens _Tokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitImplicitlyUnwrappedOptionalType: self! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!compositeTokenVariables	^ #(#leftBracketTokens #rightBracketTokens #colonTokens #minusGreaterThanTokens #periodTokens #leftParenTokens #rightParenTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #identifierTokens #commaTokens #periodPeriodPeriodTokens #_Tokens #inoutTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens)! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftImplicitlyUnwrappedOptionalTypeNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !SwiftParseNode subclass: #SwiftImportDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens importToken typealiasToken structToken classToken enumToken protocolToken varToken funcToken periodTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftImportDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.! !!SwiftImportDeclarationNode methodsFor: 'generated'!classToken	^ classToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftImportDeclarationNode methodsFor: 'generated'!structToken	^ structToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!typealiasToken: aSmaCCToken	typealiasToken := aSmaCCToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!typealiasToken	^ typealiasToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftImportDeclarationNode methodsFor: 'generated'!varToken: aSmaCCToken	varToken := aSmaCCToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!funcToken: aSmaCCToken	funcToken := aSmaCCToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!varToken	^ varToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftImportDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftImportDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#importToken #typealiasToken #structToken #classToken #enumToken #protocolToken #varToken #funcToken)! !!SwiftImportDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftImportDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftImportDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitImportDeclaration: self! !!SwiftImportDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftImportDeclarationNode methodsFor: 'generated'!importToken	^ importToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftImportDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftImportDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftImportDeclarationNode methodsFor: 'generated'!enumToken: aSmaCCToken	enumToken := aSmaCCToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftImportDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftImportDeclarationNode methodsFor: 'generated'!protocolToken: aSmaCCToken	protocolToken := aSmaCCToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!importToken: aSmaCCToken	importToken := aSmaCCToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #periodTokens)! !!SwiftImportDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftImportDeclarationNode methodsFor: 'generated'!enumToken	^ enumToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftImportDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftImportDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftImportDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftImportDeclarationNode methodsFor: 'generated'!structToken: aSmaCCToken	structToken := aSmaCCToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftImportDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftImportDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftImportDeclarationNode methodsFor: 'generated'!funcToken	^ funcToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftImportDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftImportDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftImportDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftImportDeclarationNode methodsFor: 'generated'!classToken: aSmaCCToken	classToken := aSmaCCToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftImportDeclarationNode methodsFor: 'generated'!protocolToken	^ protocolToken! !!SwiftImportDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !SwiftParseNode subclass: #SwiftInOutExpressionNode	instanceVariableNames: 'andToken identifierToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftInOutExpressionNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!SwiftInOutExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#andToken #identifierToken)! !!SwiftInOutExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitInOutExpression: self! !!SwiftInOutExpressionNode methodsFor: 'generated'!andToken	^ andToken! !!SwiftInOutExpressionNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!SwiftInOutExpressionNode methodsFor: 'generated'!andToken: aSmaCCToken	andToken := aSmaCCToken! !SwiftParseNode subclass: #SwiftInfixOperatorDeclarationNode	instanceVariableNames: 'operatorTokens infixToken leftBraceToken precedenceToken integer_literalToken associativityToken leftToken rightToken noneToken rightBraceToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!rightToken: aSmaCCToken	rightToken := aSmaCCToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!infixToken: aSmaCCToken	infixToken := aSmaCCToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!noneToken	^ noneToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!leftToken	^ leftToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!precedenceToken	^ precedenceToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitInfixOperatorDeclaration: self! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!leftToken: aSmaCCToken	leftToken := aSmaCCToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!noneToken: aSmaCCToken	noneToken := aSmaCCToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!infixToken	^ infixToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!associativityToken: aSmaCCToken	associativityToken := aSmaCCToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!integer_literalToken	^ integer_literalToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!precedenceToken: aSmaCCToken	precedenceToken := aSmaCCToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!rightToken	^ rightToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!integer_literalToken: aSmaCCToken	integer_literalToken := aSmaCCToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#infixToken #leftBraceToken #precedenceToken #integer_literalToken #associativityToken #leftToken #rightToken #noneToken #rightBraceToken)! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#operatorTokens)! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!associativityToken	^ associativityToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftInfixOperatorDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	operatorTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftInitializerDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens convenienceToken initToken lessThanTokens colonTokens commaTokens greaterThanTokens periodTokens protocolTokens whereToken equalEqualTokens inoutTokens letTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens equalTokens expressions varTokens periodPeriodPeriodTokens block'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftInitializerDeclarationNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!equalEqualTokens: anOrderedCollection	equalEqualTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#convenienceToken #initToken #whereToken)! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitInitializerDeclaration: self! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!convenienceToken	^ convenienceToken! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!otherVariables	^ #(#expressions)! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!equalEqualTokens	^ equalEqualTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #lessThanTokens #colonTokens #commaTokens #greaterThanTokens #periodTokens #protocolTokens #equalEqualTokens #inoutTokens #letTokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #typeTokens #periodPeriodPeriodTokens #equalTokens #varTokens)! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!convenienceToken: aSmaCCToken	convenienceToken := aSmaCCToken! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!initToken	^ initToken! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!block	^ block! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!block: aSwiftBlockNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aSwiftBlockNode.	self block notNil		ifTrue: [ self block parent: self ]! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!whereToken: aSmaCCToken	whereToken := aSmaCCToken! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!initToken: aSmaCCToken	initToken := aSmaCCToken! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftInitializerDeclarationNode methodsFor: 'generated'!whereToken	^ whereToken! !!SwiftInitializerDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	equalEqualTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftInitializerExpressionNode	instanceVariableNames: 'identifierTokens lessThanTokens commaTokens greaterThanTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens leftBracketTokens expressions rightBracketTokens keyExpressions colonTokens valueExpressions __FILE__Token __LINE__Token __COLUMN__Token __FUNCTION__Token selfTokens periodTokens initTokens leftBraceTokens leftParenTokens rightParenTokens inoutTokens letTokens _Tokens protocolTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens equalTokens varTokens rightBraceTokens operatorTokens inToken weakToken unownedToken unownedLeftParensafeRightParenToken unownedLeftParenunsafeRightParenToken statements dynamicTypeTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftInitializerExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	keyExpressions := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	valueExpressions := OrderedCollection new: 2.	selfTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	initTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.	dynamicTypeTokens := OrderedCollection new: 2.! !!SwiftInitializerExpressionNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!keyExpressions	^ keyExpressions! !!SwiftInitializerExpressionNode methodsFor: 'generated'!__FUNCTION__Token	^ __FUNCTION__Token! !!SwiftInitializerExpressionNode methodsFor: 'generated'!__FUNCTION__Token: aSmaCCToken	__FUNCTION__Token := aSmaCCToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expressions #keyExpressions #valueExpressions)! !!SwiftInitializerExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftInitializerExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken	^ unownedLeftParensafeRightParenToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!valueExpressions: anOrderedCollection	valueExpressions := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken: aSmaCCToken	unownedLeftParensafeRightParenToken := aSmaCCToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!valueExpressions	^ valueExpressions! !!SwiftInitializerExpressionNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!weakToken	^ weakToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!dynamicTypeTokens	^ dynamicTypeTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!initTokens	^ initTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!__FILE__Token: aSmaCCToken	__FILE__Token := aSmaCCToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!__FILE__Token	^ __FILE__Token! !!SwiftInitializerExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#identifierTokens #lessThanTokens #commaTokens #greaterThanTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #leftBracketTokens #rightBracketTokens #colonTokens #selfTokens #periodTokens #initTokens #leftBraceTokens #leftParenTokens #rightParenTokens #inoutTokens #letTokens #_Tokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #protocolTokens #typeTokens #periodPeriodPeriodTokens #equalTokens #varTokens #rightBraceTokens #operatorTokens #dynamicTypeTokens)! !!SwiftInitializerExpressionNode methodsFor: 'generated'!dynamicTypeTokens: anOrderedCollection	dynamicTypeTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken: aSmaCCToken	unownedLeftParenunsafeRightParenToken := aSmaCCToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!__COLUMN__Token: aSmaCCToken	__COLUMN__Token := aSmaCCToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!selfTokens	^ selfTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!selfTokens: anOrderedCollection	selfTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!initTokens: anOrderedCollection	initTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!__COLUMN__Token	^ __COLUMN__Token! !!SwiftInitializerExpressionNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftInitializerExpressionNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!unownedToken	^ unownedToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!unownedToken: aSmaCCToken	unownedToken := aSmaCCToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!__LINE__Token: aSmaCCToken	__LINE__Token := aSmaCCToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftInitializerExpressionNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!weakToken: aSmaCCToken	weakToken := aSmaCCToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken	^ unownedLeftParenunsafeRightParenToken! !!SwiftInitializerExpressionNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#__FILE__Token #__LINE__Token #__COLUMN__Token #__FUNCTION__Token #inToken #weakToken #unownedToken #unownedLeftParensafeRightParenToken #unownedLeftParenunsafeRightParenToken)! !!SwiftInitializerExpressionNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!__LINE__Token	^ __LINE__Token! !!SwiftInitializerExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitInitializerExpression: self! !!SwiftInitializerExpressionNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!keyExpressions: anOrderedCollection	keyExpressions := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftInitializerExpressionNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftInitializerExpressionNode methodsFor: 'generated'!statements	^ statements! !SwiftParseNode subclass: #SwiftLiteralExpressionNode	instanceVariableNames: 'integer_literalToken floating_point_literalToken full_string_literalToken leftBracketToken expressions commaTokens rightBracketToken keyExpressions colonTokens valueExpressions __FILE__Token __LINE__Token __COLUMN__Token __FUNCTION__Token'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftLiteralExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	expressions := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	keyExpressions := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	valueExpressions := OrderedCollection new: 2.! !!SwiftLiteralExpressionNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftLiteralExpressionNode methodsFor: 'generated'!floating_point_literalToken	^ floating_point_literalToken! !!SwiftLiteralExpressionNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftLiteralExpressionNode methodsFor: 'generated'!full_string_literalToken: aSmaCCToken	full_string_literalToken := aSmaCCToken! !!SwiftLiteralExpressionNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftLiteralExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitLiteralExpression: self! !!SwiftLiteralExpressionNode methodsFor: 'generated'!__LINE__Token	^ __LINE__Token! !!SwiftLiteralExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftLiteralExpressionNode methodsFor: 'generated'!valueExpressions: anOrderedCollection	valueExpressions := anOrderedCollection! !!SwiftLiteralExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expressions #keyExpressions #valueExpressions)! !!SwiftLiteralExpressionNode methodsFor: 'generated'!keyExpressions	^ keyExpressions! !!SwiftLiteralExpressionNode methodsFor: 'generated'!__COLUMN__Token	^ __COLUMN__Token! !!SwiftLiteralExpressionNode methodsFor: 'generated'!__FUNCTION__Token	^ __FUNCTION__Token! !!SwiftLiteralExpressionNode methodsFor: 'generated'!__COLUMN__Token: aSmaCCToken	__COLUMN__Token := aSmaCCToken! !!SwiftLiteralExpressionNode methodsFor: 'generated'!keyExpressions: anOrderedCollection	keyExpressions := anOrderedCollection! !!SwiftLiteralExpressionNode methodsFor: 'generated'!full_string_literalToken	^ full_string_literalToken! !!SwiftLiteralExpressionNode methodsFor: 'generated'!__FILE__Token	^ __FILE__Token! !!SwiftLiteralExpressionNode methodsFor: 'generated'!rightBracketToken: aSmaCCToken	rightBracketToken := aSmaCCToken! !!SwiftLiteralExpressionNode methodsFor: 'generated'!valueExpressions	^ valueExpressions! !!SwiftLiteralExpressionNode methodsFor: 'generated'!integer_literalToken	^ integer_literalToken! !!SwiftLiteralExpressionNode methodsFor: 'generated'!leftBracketToken: aSmaCCToken	leftBracketToken := aSmaCCToken! !!SwiftLiteralExpressionNode methodsFor: 'generated'!floating_point_literalToken: aSmaCCToken	floating_point_literalToken := aSmaCCToken! !!SwiftLiteralExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftLiteralExpressionNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftLiteralExpressionNode methodsFor: 'generated'!integer_literalToken: aSmaCCToken	integer_literalToken := aSmaCCToken! !!SwiftLiteralExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#commaTokens #colonTokens)! !!SwiftLiteralExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#integer_literalToken #floating_point_literalToken #full_string_literalToken #leftBracketToken #rightBracketToken #__FILE__Token #__LINE__Token #__COLUMN__Token #__FUNCTION__Token)! !!SwiftLiteralExpressionNode methodsFor: 'generated'!__LINE__Token: aSmaCCToken	__LINE__Token := aSmaCCToken! !!SwiftLiteralExpressionNode methodsFor: 'generated'!rightBracketToken	^ rightBracketToken! !!SwiftLiteralExpressionNode methodsFor: 'generated'!__FUNCTION__Token: aSmaCCToken	__FUNCTION__Token := aSmaCCToken! !!SwiftLiteralExpressionNode methodsFor: 'generated'!leftBracketToken	^ leftBracketToken! !!SwiftLiteralExpressionNode methodsFor: 'generated'!__FILE__Token: aSmaCCToken	__FILE__Token := aSmaCCToken! !SwiftParseNode subclass: #SwiftMetatypeTypeNode	instanceVariableNames: 'leftBracketTokens identifierTokens periodTokens protocolTokens lessThanTokens greaterThanTokens rightBracketTokens colonTokens minusGreaterThanTokens commaTokens leftParenTokens rightParenTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens inoutTokens _Tokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftMetatypeTypeNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.! !!SwiftMetatypeTypeNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitMetatypeType: self! !!SwiftMetatypeTypeNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!compositeTokenVariables	^ #(#leftBracketTokens #rightBracketTokens #colonTokens #minusGreaterThanTokens #periodTokens #leftParenTokens #rightParenTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #identifierTokens #commaTokens #periodPeriodPeriodTokens #_Tokens #inoutTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens)! !!SwiftMetatypeTypeNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftMetatypeTypeNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftMetatypeTypeNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !SwiftParseNode subclass: #SwiftNamedExpressionNode	instanceVariableNames: 'identifierToken colonToken expression'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftNamedExpressionNode methodsFor: 'generated'!expression: anObject	expression := anObject! !!SwiftNamedExpressionNode methodsFor: 'generated'!colonToken: aSmaCCToken	colonToken := aSmaCCToken! !!SwiftNamedExpressionNode methodsFor: 'generated'!expression	^ expression! !!SwiftNamedExpressionNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!SwiftNamedExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitNamedExpression: self! !!SwiftNamedExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#identifierToken #colonToken)! !!SwiftNamedExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expression)! !!SwiftNamedExpressionNode methodsFor: 'generated'!colonToken	^ colonToken! !!SwiftNamedExpressionNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !SwiftParseNode subclass: #SwiftOptionalChainingExpressionNode	instanceVariableNames: 'expression questionMarkToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftOptionalChainingExpressionNode methodsFor: 'generated'!expression: anOrderedCollection	expression := anOrderedCollection! !!SwiftOptionalChainingExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#questionMarkToken)! !!SwiftOptionalChainingExpressionNode methodsFor: 'generated'!expression	^ expression! !!SwiftOptionalChainingExpressionNode methodsFor: 'generated'!questionMarkToken	^ questionMarkToken! !!SwiftOptionalChainingExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitOptionalChainingExpression: self! !!SwiftOptionalChainingExpressionNode methodsFor: 'generated'!questionMarkToken: aSmaCCToken	questionMarkToken := aSmaCCToken! !!SwiftOptionalChainingExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expression)! !SwiftParseNode subclass: #SwiftOptionalTypeNode	instanceVariableNames: 'leftBracketTokens identifierTokens periodTokens protocolTokens lessThanTokens greaterThanTokens rightBracketTokens colonTokens minusGreaterThanTokens commaTokens leftParenTokens rightParenTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens inoutTokens _Tokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftOptionalTypeNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.! !!SwiftOptionalTypeNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitOptionalType: self! !!SwiftOptionalTypeNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!compositeTokenVariables	^ #(#leftBracketTokens #rightBracketTokens #colonTokens #minusGreaterThanTokens #periodTokens #leftParenTokens #rightParenTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #identifierTokens #commaTokens #periodPeriodPeriodTokens #_Tokens #inoutTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens)! !!SwiftOptionalTypeNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftOptionalTypeNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftOptionalTypeNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !SwiftParseNode subclass: #SwiftParenthesizedExpressionNode	instanceVariableNames: 'leftParenToken expressions identifierTokens colonTokens commaTokens rightParenToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftParenthesizedExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	expressions := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#identifierTokens #colonTokens #commaTokens)! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#leftParenToken #rightParenToken)! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitParenthesizedExpression: self! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expressions)! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftParenthesizedExpressionNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !SmaCCParseNodeVisitor subclass: #SwiftParseNodeVisitor	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftParseNodeVisitor methodsFor: 'generated'!visitSubscriptExpression: aSubscriptExpression	^ self visitParse: aSubscriptExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitDynamicTypeExpression: aDynamicTypeExpression	^ self visitParse: aDynamicTypeExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitDeclarationStatement: aDeclarationStatement	^ self visitStatement: aDeclarationStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitVariableDeclaration: aVariableDeclaration	^ self visitParse: aVariableDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitProtocolInitializerDeclaration: aProtocolInitializerDeclaration	^ self visitParse: aProtocolInitializerDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitLiteralExpression: aLiteralExpression	^ self visitParse: aLiteralExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitStatement: aStatement	^ self visitParse: aStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitParse: aParse	^ self visitSmaCCParseNode: aParse! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitPatternInitializer: aPatternInitializer	^ self visitParse: aPatternInitializer! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitSuperclassMethodExpression: aSuperclassMethodExpression	^ self visitParse: aSuperclassMethodExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitPrefixOperatorDeclaration: aPrefixOperatorDeclaration	^ self visitParse: aPrefixOperatorDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitTypeCastOperator: aTypeCastOperator	^ self visitParse: aTypeCastOperator! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitClassDeclaration: aClassDeclaration	^ self visitParse: aClassDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitSuperclassInitializerExpression: aSuperclassInitializerExpression	^ self visitParse: aSuperclassInitializerExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitProtocolCompositionType: aProtocolCompositionType	^ self visitParse: aProtocolCompositionType! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitTypealiasDeclaration: aTypealiasDeclaration	^ self visitParse: aTypealiasDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitOptionalType: anOptionalType	^ self visitParse: anOptionalType! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitFunctionType: aFunctionType	^ self visitParse: aFunctionType! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitInfixOperatorDeclaration: anInfixOperatorDeclaration	^ self visitParse: anInfixOperatorDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitBinaryOperator: aBinaryOperator	^ self visitParse: aBinaryOperator! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitDoWhileStatement: aDoWhileStatement	^ self visitLoopStatement: aDoWhileStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitBreakStatement: aBreakStatement	^ self visitControlTransferStatement: aBreakStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitPostfixSelfExpression: aPostfixSelfExpression	^ self visitParse: aPostfixSelfExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitDeinitializerDeclaration: aDeinitializerDeclaration	^ self visitParse: aDeinitializerDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitMetatypeType: aMetatypeType	^ self visitParse: aMetatypeType! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitExtensionDeclaration: anExtensionDeclaration	^ self visitParse: anExtensionDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitExpressionStatement: anExpressionStatement	^ self visitStatement: anExpressionStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitStructDeclaration: aStructDeclaration	^ self visitParse: aStructDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitPostfixOperatorDeclaration: aPostfixOperatorDeclaration	^ self visitParse: aPostfixOperatorDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitBinaryExpression: aBinaryExpression	^ self visitParse: aBinaryExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitSwitchStatement: aSwitchStatement	^ self visitBranchStatement: aSwitchStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitProtocolSubscriptDeclaration: aProtocolSubscriptDeclaration	^ self visitParse: aProtocolSubscriptDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitPrefixExpression: aPrefixExpression	^ self visitParse: aPrefixExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitFile: aFile	^ self visitParse: aFile! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitSubscriptDeclaration: aSubscriptDeclaration	^ self visitParse: aSubscriptDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitPrimaryExpression: aPrimaryExpression	^ self visitParse: aPrimaryExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitSelfExpression: aSelfExpression	^ self visitParse: aSelfExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitClosureExpression: aClosureExpression	^ self visitParse: aClosureExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitForInStatement: aForInStatement	^ self visitLoopStatement: aForInStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitParenthesizedExpression: aParenthesizedExpression	^ self visitParse: aParenthesizedExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitContinueStatement: aContinueStatement	^ self visitControlTransferStatement: aContinueStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitConstantDeclaration: aConstantDeclaration	^ self visitParse: aConstantDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitInitializerExpression: anInitializerExpression	^ self visitParse: anInitializerExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitInitializerDeclaration: anInitializerDeclaration	^ self visitParse: anInitializerDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitControlTransferStatement: aControlTransferStatement	^ self visitStatement: aControlTransferStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitArrayType: anArrayType	^ self visitParse: anArrayType! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitProtocolMethodDeclaration: aProtocolMethodDeclaration	^ self visitParse: aProtocolMethodDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitLabeledStatement: aLabeledStatement	^ self visitStatement: aLabeledStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitEnumDeclaration: anEnumDeclaration	^ self visitParse: anEnumDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitWildcardExpression: aWildcardExpression	^ self visitParse: aWildcardExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitProtocolAssociationTypeDeclaration: aProtocolAssociationTypeDeclaration	^ self visitParse: aProtocolAssociationTypeDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitSuperclassSubscriptExpression: aSuperclassSubscriptExpression	^ self visitParse: aSuperclassSubscriptExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitReturnStatement: aReturnStatement	^ self visitControlTransferStatement: aReturnStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitTypeIdentifier: aTypeIdentifier	^ self visitParse: aTypeIdentifier! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitBranchStatement: aBranchStatement	^ self visitStatement: aBranchStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitInOutExpression: anInOutExpression	^ self visitParse: anInOutExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitProtocolDeclaration: aProtocolDeclaration	^ self visitParse: aProtocolDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitForcedValueExpression: aForcedValueExpression	^ self visitParse: aForcedValueExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitExplicitMemberExpression: anExplicitMemberExpression	^ self visitParse: anExplicitMemberExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitTupleType: aTupleType	^ self visitParse: aTupleType! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitProtocolPropertyDeclaration: aProtocolPropertyDeclaration	^ self visitParse: aProtocolPropertyDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitImplicitlyUnwrappedOptionalType: anImplicitlyUnwrappedOptionalType	^ self visitParse: anImplicitlyUnwrappedOptionalType! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitNamedExpression: aNamedExpression	^ self visitParse: aNamedExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitIfStatement: anIfStatement	^ self visitBranchStatement: anIfStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitCondionalOperator: aCondionalOperator	^ self visitParse: aCondionalOperator! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitAssignmentOperator: anAssignmentOperator	^ self visitParse: anAssignmentOperator! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitImportDeclaration: anImportDeclaration	^ self visitParse: anImportDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitFallThroughStatement: aFallThroughStatement	^ self visitControlTransferStatement: aFallThroughStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitDictionaryType: aDictionaryType	^ self visitParse: aDictionaryType! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitOptionalChainingExpression: anOptionalChainingExpression	^ self visitParse: anOptionalChainingExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitForStatement: aForStatement	^ self visitLoopStatement: aForStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitWhileStatement: aWhileStatement	^ self visitLoopStatement: aWhileStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitFunctionDeclaration: aFunctionDeclaration	^ self visitParse: aFunctionDeclaration! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitLoopStatement: aLoopStatement	^ self visitStatement: aLoopStatement! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitFunctionCallExpression: aFunctionCallExpression	^ self visitParse: aFunctionCallExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitImplicitMemberExpression: anImplicitMemberExpression	^ self visitParse: anImplicitMemberExpression! !!SwiftParseNodeVisitor methodsFor: 'generated'!visitBlock: aBlock	^ self visitParse: aBlock! !SmaCCGLRParser subclass: #SwiftParser	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordeclaration_specifiers2: nodes	| result |	result := nodes at: 1.	self add: ((nodes at: 2) at: 1) to: (result at: 1).	self add: ((nodes at: 2) at: 2) to: (result at: 2).	self add: ((nodes at: 2) at: 3) to: (result at: 3).	self add: ((nodes at: 2) at: 4) to: (result at: 4).	self add: ((nodes at: 2) at: 5) to: (result at: 5).	self add: ((nodes at: 2) at: 6) to: (result at: 6).	self add: ((nodes at: 2) at: 7) to: (result at: 7).	self add: ((nodes at: 2) at: 8) to: (result at: 8).	self add: ((nodes at: 2) at: 9) to: (result at: 9).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForclosure_expression1: nodes	| result |	result := SwiftClosureExpressionNode new.	result addToken: (nodes at: 1) to: result leftBraceTokens.	result addTokens: ((nodes at: 2) at: 1) to: result leftParenTokens.	result addTokens: ((nodes at: 2) at: 2) to: result rightParenTokens.	result addTokens: ((nodes at: 2) at: 3) to: result inoutTokens.	result addTokens: ((nodes at: 2) at: 4) to: result letTokens.	result addTokens: ((nodes at: 2) at: 5) to: result _Tokens.	result addTokens: ((nodes at: 2) at: 6) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 7) to: result colonTokens.	result addTokens: ((nodes at: 2) at: 8) to: result leftBracketTokens.	result addTokens: ((nodes at: 2) at: 9) to: result rightBracketTokens.	result		addTokens: ((nodes at: 2) at: 10)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 2) at: 11) to: result periodTokens.	result		addTokens: ((nodes at: 2) at: 12)		to: result questionMarkTokens.	result addTokens: ((nodes at: 2) at: 13) to: result bangTokens.	result addTokens: ((nodes at: 2) at: 14) to: result protocolTokens.	result addTokens: ((nodes at: 2) at: 15) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 16) to: result greaterThanTokens.	result addTokens: ((nodes at: 2) at: 17) to: result typeTokens.	result addTokens: ((nodes at: 2) at: 18) to: result commaTokens.	result		addTokens: ((nodes at: 2) at: 19)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 2) at: 20) to: result equalTokens.	result addObjects: ((nodes at: 2) at: 21) to: result expressions.	result addTokens: ((nodes at: 2) at: 22) to: result varTokens.	result addTokens: ((nodes at: 2) at: 23) to: result leftBraceTokens.	result addTokens: ((nodes at: 2) at: 24) to: result rightBraceTokens.	result		addTokens: ((nodes at: 2) at: 25)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 2) at: 26)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 2) at: 27)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 2) at: 28) to: result operatorTokens.	result inToken: ((nodes at: 2) at: 29).	result weakToken: ((nodes at: 2) at: 30).	result unownedToken: ((nodes at: 2) at: 31).	result unownedLeftParensafeRightParenToken: ((nodes at: 2) at: 32).	result unownedLeftParenunsafeRightParenToken: ((nodes at: 2) at: 33).	result addNodes: (nodes at: 3) to: result statements.	result addToken: (nodes at: 4) to: result rightBraceTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForfor_in_statement1: nodes	| result |	result := SwiftForInStatementNode new.	result forToken: (nodes at: 1).	result addTokens: ((nodes at: 2) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 2) at: 2) to: result colonTokens.	result addTokens: ((nodes at: 2) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 2) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 2) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 2) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 2) at: 8) to: result leftBraceTokens.	result addTokens: ((nodes at: 2) at: 9) to: result rightBraceTokens.	result		addTokens: ((nodes at: 2) at: 10)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 2) at: 11)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 2) at: 12)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 2) at: 13) to: result operatorTokens.	result		addTokens: ((nodes at: 2) at: 14)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 2) at: 15) to: result periodTokens.	result		addTokens: ((nodes at: 2) at: 16)		to: result questionMarkTokens.	result addTokens: ((nodes at: 2) at: 17) to: result bangTokens.	result addTokens: ((nodes at: 2) at: 18) to: result protocolTokens.	result addTokens: ((nodes at: 2) at: 19) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 20) to: result greaterThanTokens.	result addTokens: ((nodes at: 2) at: 21) to: result typeTokens.	result addTokens: ((nodes at: 2) at: 22) to: result commaTokens.	result		addTokens: ((nodes at: 2) at: 23)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 2) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 2) at: 25) to: result varTokens.	result addTokens: ((nodes at: 2) at: 26) to: result letTokens.	result addObjects: ((nodes at: 2) at: 27) to: result expressions.	result addTokens: ((nodes at: 2) at: 28) to: result isTokens.	result addTokens: ((nodes at: 2) at: 29) to: result asTokens.	result inToken: (nodes at: 3).	result addObject: (nodes at: 4) to: result expressions.	result block: (nodes at: 5).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordeclaration_specifier9: nodes	| result |	result := Array new: 9.	result at: 9 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForsubscript_declaration3: nodes	| result |	result := SwiftSubscriptDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result subscriptToken: ((nodes at: 1) at: 13).	result addTokens: ((nodes at: 1) at: 14) to: result inoutTokens.	result addTokens: ((nodes at: 1) at: 15) to: result letTokens.	result addTokens: ((nodes at: 1) at: 16) to: result colonTokens.	result		addTokens: ((nodes at: 1) at: 17)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 1) at: 18) to: result periodTokens.	result		addTokens: ((nodes at: 1) at: 19)		to: result questionMarkTokens.	result addTokens: ((nodes at: 1) at: 20) to: result bangTokens.	result addTokens: ((nodes at: 1) at: 21) to: result protocolTokens.	result addTokens: ((nodes at: 1) at: 22) to: result lessThanTokens.	result addTokens: ((nodes at: 1) at: 23) to: result greaterThanTokens.	result addTokens: ((nodes at: 1) at: 24) to: result typeTokens.	result addTokens: ((nodes at: 1) at: 25) to: result commaTokens.	result addTokens: ((nodes at: 1) at: 26) to: result equalTokens.	result addObjects: ((nodes at: 1) at: 27) to: result expressions.	result addTokens: ((nodes at: 1) at: 28) to: result varTokens.	result		addTokens: ((nodes at: 1) at: 29)		to: result periodPeriodPeriodTokens.	result		addTokens: ((nodes at: 2) at: 1)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 2) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 2) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 2) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 2) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 2) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 2) at: 8) to: result leftBraceTokens.	result addTokens: ((nodes at: 2) at: 9) to: result rightBraceTokens.	result		addTokens: ((nodes at: 2) at: 10)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 2) at: 11)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 2) at: 12)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 2) at: 13) to: result operatorTokens.	result addTokens: ((nodes at: 2) at: 14) to: result colonTokens.	result addTokens: ((nodes at: 2) at: 15) to: result periodTokens.	result		addTokens: ((nodes at: 2) at: 16)		to: result questionMarkTokens.	result addTokens: ((nodes at: 2) at: 17) to: result bangTokens.	result addTokens: ((nodes at: 2) at: 18) to: result protocolTokens.	result addTokens: ((nodes at: 2) at: 19) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 20) to: result greaterThanTokens.	result addTokens: ((nodes at: 2) at: 21) to: result typeTokens.	result addTokens: ((nodes at: 2) at: 22) to: result commaTokens.	result		addTokens: ((nodes at: 2) at: 23)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 2) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 3) at: 1) to: result leftBraceTokens.	result addTokens: ((nodes at: 3) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 3) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 3) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 3) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 3) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 3) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 3) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 3) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 3) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 3) at: 12) to: result operatorTokens.	result getToken: ((nodes at: 3) at: 13).	result setToken: ((nodes at: 3) at: 14).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordynamic_type_expression1: nodes	| result |	result := SwiftDynamicTypeExpressionNode new.	result addTokens: ((nodes at: 1) at: 1) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 2) to: result lessThanTokens.	result addTokens: ((nodes at: 1) at: 3) to: result commaTokens.	result addTokens: ((nodes at: 1) at: 4) to: result greaterThanTokens.	result		addTokens: ((nodes at: 1) at: 5)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 6)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 7)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 8) to: result leftBracketTokens.	result addObjects: ((nodes at: 1) at: 9) to: result expressions.	result		addTokens: ((nodes at: 1) at: 10)		to: result rightBracketTokens.	result addObjects: ((nodes at: 1) at: 11) to: result keyExpressions.	result addTokens: ((nodes at: 1) at: 12) to: result colonTokens.	result addObjects: ((nodes at: 1) at: 13) to: result valueExpressions.	result __FILE__Token: ((nodes at: 1) at: 14).	result __LINE__Token: ((nodes at: 1) at: 15).	result __COLUMN__Token: ((nodes at: 1) at: 16).	result __FUNCTION__Token: ((nodes at: 1) at: 17).	result addTokens: ((nodes at: 1) at: 18) to: result selfTokens.	result addTokens: ((nodes at: 1) at: 19) to: result periodTokens.	result addTokens: ((nodes at: 1) at: 20) to: result initTokens.	result addTokens: ((nodes at: 1) at: 21) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 22) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 23) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 1) at: 25) to: result letTokens.	result addTokens: ((nodes at: 1) at: 26) to: result _Tokens.	result		addTokens: ((nodes at: 1) at: 27)		to: result minusGreaterThanTokens.	result		addTokens: ((nodes at: 1) at: 28)		to: result questionMarkTokens.	result addTokens: ((nodes at: 1) at: 29) to: result bangTokens.	result addTokens: ((nodes at: 1) at: 30) to: result protocolTokens.	result addTokens: ((nodes at: 1) at: 31) to: result typeTokens.	result		addTokens: ((nodes at: 1) at: 32)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 1) at: 33) to: result equalTokens.	result addTokens: ((nodes at: 1) at: 34) to: result varTokens.	result addTokens: ((nodes at: 1) at: 35) to: result rightBraceTokens.	result addTokens: ((nodes at: 1) at: 36) to: result operatorTokens.	result inToken: ((nodes at: 1) at: 37).	result weakToken: ((nodes at: 1) at: 38).	result unownedToken: ((nodes at: 1) at: 39).	result unownedLeftParensafeRightParenToken: ((nodes at: 1) at: 40).	result unownedLeftParenunsafeRightParenToken: ((nodes at: 1) at: 41).	result addNodes: ((nodes at: 1) at: 42) to: result statements.	result addTokens: ((nodes at: 1) at: 43) to: result dynamicTypeTokens.	result addToken: (nodes at: 2) to: result periodTokens.	result addToken: (nodes at: 3) to: result dynamicTypeTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForfunction_name2: nodes	| result |	result := Array new: 2.	result at: 2 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForunion_style_enum_case_clause1: nodes	| result |	result := Array new: 25.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	result at: 13 put: (nodes at: 2).	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).	self addAll: ((nodes at: 3) at: 3) to: (result at: 1).	self addAll: ((nodes at: 3) at: 4) to: (result at: 4).	self addAll: ((nodes at: 3) at: 5) to: (result at: 14).	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).	self addAll: ((nodes at: 3) at: 8) to: (result at: 15).	self addAll: ((nodes at: 3) at: 9) to: (result at: 16).	self addAll: ((nodes at: 3) at: 10) to: (result at: 17).	self addAll: ((nodes at: 3) at: 11) to: (result at: 18).	self addAll: ((nodes at: 3) at: 12) to: (result at: 19).	self addAll: ((nodes at: 3) at: 13) to: (result at: 20).	self addAll: ((nodes at: 3) at: 14) to: (result at: 21).	self addAll: ((nodes at: 3) at: 15) to: (result at: 22).	self addAll: ((nodes at: 3) at: 16) to: (result at: 23).	self addAll: ((nodes at: 3) at: 17) to: (result at: 24).	self addAll: ((nodes at: 3) at: 18) to: (result at: 25).	self addAll: ((nodes at: 3) at: 19) to: (result at: 7).	self addAll: ((nodes at: 3) at: 20) to: (result at: 8).	self addAll: ((nodes at: 3) at: 21) to: (result at: 9).	self addAll: ((nodes at: 3) at: 22) to: (result at: 10).	self addAll: ((nodes at: 3) at: 23) to: (result at: 11).	self addAll: ((nodes at: 3) at: 24) to: (result at: 12).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForprotocol_method_declaration1: nodes	| result |	result := SwiftProtocolMethodDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result addTokens: ((nodes at: 1) at: 13) to: result classTokens.	result addTokens: ((nodes at: 1) at: 14) to: result mutatingTokens.	result addTokens: ((nodes at: 1) at: 15) to: result nonmutatingTokens.	result addTokens: ((nodes at: 1) at: 16) to: result overrideTokens.	result addTokens: ((nodes at: 1) at: 17) to: result staticTokens.	result addTokens: ((nodes at: 1) at: 18) to: result unownedTokens.	result		addTokens: ((nodes at: 1) at: 19)		to: result unownedLeftParensafeRightParenTokens.	result		addTokens: ((nodes at: 1) at: 20)		to: result unownedLeftParenunsafeRightParenTokens.	result addTokens: ((nodes at: 1) at: 21) to: result weakTokens.	result funcToken: ((nodes at: 1) at: 22).	result addToken: ((nodes at: 2) at: 1) to: result identifierTokens.	result addToken: ((nodes at: 2) at: 2) to: result operatorTokens.	result addTokens: ((nodes at: 3) at: 1) to: result lessThanTokens.	result addTokens: ((nodes at: 3) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 3) to: result colonTokens.	result addTokens: ((nodes at: 3) at: 4) to: result commaTokens.	result addTokens: ((nodes at: 3) at: 5) to: result greaterThanTokens.	result addTokens: ((nodes at: 3) at: 6) to: result periodTokens.	result addTokens: ((nodes at: 3) at: 7) to: result protocolTokens.	result whereToken: ((nodes at: 3) at: 8).	result addTokens: ((nodes at: 3) at: 9) to: result equalEqualTokens.	result addTokens: ((nodes at: 4) at: 1) to: result leftParenTokens.	result addTokens: ((nodes at: 4) at: 2) to: result rightParenTokens.	result addTokens: ((nodes at: 4) at: 3) to: result commaTokens.	result		addTokens: ((nodes at: 4) at: 4)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 4) at: 5) to: result varTokens.	result addTokens: ((nodes at: 4) at: 6) to: result inoutTokens.	result addTokens: ((nodes at: 4) at: 7) to: result letTokens.	result addTokens: ((nodes at: 4) at: 8) to: result _Tokens.	result addTokens: ((nodes at: 4) at: 9) to: result identifierTokens.	result addTokens: ((nodes at: 4) at: 10) to: result colonTokens.	result addTokens: ((nodes at: 4) at: 11) to: result equalTokens.	result addObjects: ((nodes at: 4) at: 12) to: result expressions.	result addTokens: ((nodes at: 4) at: 13) to: result leftBracketTokens.	result		addTokens: ((nodes at: 4) at: 14)		to: result rightBracketTokens.	result		addTokens: ((nodes at: 4) at: 15)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 4) at: 16) to: result periodTokens.	result		addTokens: ((nodes at: 4) at: 17)		to: result questionMarkTokens.	result addTokens: ((nodes at: 4) at: 18) to: result bangTokens.	result addTokens: ((nodes at: 4) at: 19) to: result protocolTokens.	result addTokens: ((nodes at: 4) at: 20) to: result lessThanTokens.	result addTokens: ((nodes at: 4) at: 21) to: result greaterThanTokens.	result addTokens: ((nodes at: 4) at: 22) to: result typeTokens.	result addTokens: ((nodes at: 4) at: 23) to: result leftBraceTokens.	result addTokens: ((nodes at: 4) at: 24) to: result rightBraceTokens.	result		addTokens: ((nodes at: 4) at: 25)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 4) at: 26)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 4) at: 27)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 4) at: 28) to: result operatorTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForbalanced_token2: nodes	| result |	result := nodes at: 2.	self addFirst: (nodes at: 1) to: (result at: 3).	self add: (nodes at: 3) to: (result at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordeclaration_specifier3: nodes	| result |	result := Array new: 9.	result at: 3 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForpattern5: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 3).	self addAll: ((nodes at: 1) at: 2) to: (result at: 19).	self addAll: ((nodes at: 1) at: 3) to: (result at: 22).	self addAll: ((nodes at: 1) at: 4) to: (result at: 20).	self addAll: ((nodes at: 1) at: 5) to: (result at: 15).	self addAll: ((nodes at: 1) at: 6) to: (result at: 4).	self addAll: ((nodes at: 1) at: 7) to: (result at: 1).	self addAll: ((nodes at: 1) at: 8) to: (result at: 2).	self addAll: ((nodes at: 1) at: 9) to: (result at: 5).	self addAll: ((nodes at: 1) at: 10) to: (result at: 6).	self addAll: ((nodes at: 1) at: 11) to: (result at: 7).	self addAll: ((nodes at: 1) at: 12) to: (result at: 14).	self addAll: ((nodes at: 1) at: 13) to: (result at: 16).	self addAll: ((nodes at: 1) at: 14) to: (result at: 17).	self addAll: ((nodes at: 1) at: 15) to: (result at: 18).	self addAll: ((nodes at: 1) at: 16) to: (result at: 21).	self addAll: ((nodes at: 1) at: 17) to: (result at: 24).	self addAll: ((nodes at: 1) at: 18) to: (result at: 23).	self addAll: ((nodes at: 1) at: 19) to: (result at: 25).	self addAll: ((nodes at: 1) at: 20) to: (result at: 26).	self addAll: ((nodes at: 1) at: 21) to: (result at: 27).	self addAll: ((nodes at: 1) at: 22) to: (result at: 28).	self addAll: ((nodes at: 1) at: 23) to: (result at: 29).	self addAll: ((nodes at: 1) at: 24) to: (result at: 8).	self addAll: ((nodes at: 1) at: 25) to: (result at: 9).	self addAll: ((nodes at: 1) at: 26) to: (result at: 10).	self addAll: ((nodes at: 1) at: 27) to: (result at: 11).	self addAll: ((nodes at: 1) at: 28) to: (result at: 12).	self addAll: ((nodes at: 1) at: 29) to: (result at: 13).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_closure_signature1: nodes	| result |	result := Array new: 33.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForself_expression4: nodes	| result |	result := SwiftSelfExpressionNode new.	result selfToken: (nodes at: 1).	result periodToken: (nodes at: 2).	result initToken: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_union_style_enum_members2: nodes	| result |	result := Array new: 57.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 33 put: (OrderedCollection new: 2).	result at: 34 put: (OrderedCollection new: 2).	result at: 35 put: (OrderedCollection new: 2).	result at: 36 put: (OrderedCollection new: 2).	result at: 37 put: (OrderedCollection new: 2).	result at: 38 put: (OrderedCollection new: 2).	result at: 39 put: (OrderedCollection new: 2).	result at: 40 put: (OrderedCollection new: 2).	result at: 41 put: (OrderedCollection new: 2).	result at: 42 put: (OrderedCollection new: 2).	result at: 43 put: (OrderedCollection new: 2).	result at: 44 put: (OrderedCollection new: 2).	result at: 45 put: (OrderedCollection new: 2).	result at: 46 put: (OrderedCollection new: 2).	result at: 47 put: (OrderedCollection new: 2).	result at: 48 put: (OrderedCollection new: 2).	result at: 49 put: (OrderedCollection new: 2).	result at: 50 put: (OrderedCollection new: 2).	result at: 51 put: (OrderedCollection new: 2).	result at: 52 put: (OrderedCollection new: 2).	result at: 53 put: (OrderedCollection new: 2).	result at: 54 put: (OrderedCollection new: 2).	result at: 55 put: (OrderedCollection new: 2).	result at: 56 put: (OrderedCollection new: 2).	result at: 57 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 27).	self addAll: ((nodes at: 1) at: 6) to: (result at: 28).	self addAll: ((nodes at: 1) at: 7) to: (result at: 38).	self addAll: ((nodes at: 1) at: 8) to: (result at: 41).	self addAll: ((nodes at: 1) at: 9) to: (result at: 55).	self addAll: ((nodes at: 1) at: 10) to: (result at: 56).	self addAll: ((nodes at: 1) at: 11) to: (result at: 57).	self addAll: ((nodes at: 1) at: 12) to: (result at: 13).	self addAll: ((nodes at: 1) at: 13) to: (result at: 5).	self addAll: ((nodes at: 1) at: 14) to: (result at: 6).	self addAll: ((nodes at: 1) at: 15) to: (result at: 7).	self addAll: ((nodes at: 1) at: 16) to: (result at: 8).	self addAll: ((nodes at: 1) at: 17) to: (result at: 9).	self addAll: ((nodes at: 1) at: 18) to: (result at: 10).	self addAll: ((nodes at: 1) at: 19) to: (result at: 11).	self addAll: ((nodes at: 1) at: 20) to: (result at: 12).	self addAll: ((nodes at: 1) at: 21) to: (result at: 14).	self addAll: ((nodes at: 1) at: 22) to: (result at: 15).	self addAll: ((nodes at: 1) at: 23) to: (result at: 16).	self addAll: ((nodes at: 1) at: 24) to: (result at: 17).	self addAll: ((nodes at: 1) at: 25) to: (result at: 18).	self addAll: ((nodes at: 1) at: 26) to: (result at: 19).	self addAll: ((nodes at: 1) at: 27) to: (result at: 20).	self addAll: ((nodes at: 1) at: 28) to: (result at: 21).	self addAll: ((nodes at: 1) at: 29) to: (result at: 22).	self addAll: ((nodes at: 1) at: 30) to: (result at: 23).	self addAll: ((nodes at: 1) at: 31) to: (result at: 24).	self addAll: ((nodes at: 1) at: 32) to: (result at: 25).	self addAll: ((nodes at: 1) at: 33) to: (result at: 26).	self addAll: ((nodes at: 1) at: 34) to: (result at: 29).	self addAll: ((nodes at: 1) at: 35) to: (result at: 30).	self addAll: ((nodes at: 1) at: 36) to: (result at: 31).	self addAll: ((nodes at: 1) at: 37) to: (result at: 32).	self addAll: ((nodes at: 1) at: 38) to: (result at: 33).	self addAll: ((nodes at: 1) at: 39) to: (result at: 34).	self addAll: ((nodes at: 1) at: 40) to: (result at: 36).	self addAll: ((nodes at: 1) at: 41) to: (result at: 35).	self addAll: ((nodes at: 1) at: 42) to: (result at: 37).	self addAll: ((nodes at: 1) at: 43) to: (result at: 39).	self addAll: ((nodes at: 1) at: 44) to: (result at: 40).	self addAll: ((nodes at: 1) at: 45) to: (result at: 42).	self addAll: ((nodes at: 1) at: 46) to: (result at: 43).	self addAll: ((nodes at: 1) at: 47) to: (result at: 44).	self addAll: ((nodes at: 1) at: 48) to: (result at: 45).	self addAll: ((nodes at: 1) at: 49) to: (result at: 46).	self addAll: ((nodes at: 1) at: 50) to: (result at: 47).	self addAll: ((nodes at: 1) at: 51) to: (result at: 48).	self addAll: ((nodes at: 1) at: 52) to: (result at: 49).	self addAll: ((nodes at: 1) at: 53) to: (result at: 50).	self addAll: ((nodes at: 1) at: 54) to: (result at: 51).	self addAll: ((nodes at: 1) at: 55) to: (result at: 52).	self addAll: ((nodes at: 1) at: 56) to: (result at: 53).	self addAll: ((nodes at: 1) at: 57) to: (result at: 54).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForcontinue_statement1: nodes	| result |	result := SwiftContinueStatementNode new.	result continueToken: (nodes at: 1).	result name: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortuple_pattern1: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).	self addAll: ((nodes at: 2) at: 4) to: (result at: 1).	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).	self addAll: ((nodes at: 2) at: 13) to: (result at: 13).	self addAll: ((nodes at: 2) at: 14) to: (result at: 14).	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).	self addAll: ((nodes at: 2) at: 20) to: (result at: 20).	self addAll: ((nodes at: 2) at: 21) to: (result at: 21).	self addAll: ((nodes at: 2) at: 22) to: (result at: 22).	self addAll: ((nodes at: 2) at: 23) to: (result at: 23).	self addAll: ((nodes at: 2) at: 24) to: (result at: 24).	self addAll: ((nodes at: 2) at: 25) to: (result at: 25).	self addAll: ((nodes at: 2) at: 26) to: (result at: 26).	self addAll: ((nodes at: 2) at: 27) to: (result at: 27).	self addAll: ((nodes at: 2) at: 28) to: (result at: 28).	self addAll: ((nodes at: 2) at: 29) to: (result at: 29).	self add: (nodes at: 3) to: (result at: 5).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForbalanced_tokens2: nodes	| result |	result := nodes at: 2.	self addAllFirst: ((nodes at: 1) at: 1) to: (result at: 1).	self addAllFirst: ((nodes at: 1) at: 2) to: (result at: 2).	self addAllFirst: ((nodes at: 1) at: 3) to: (result at: 3).	self addAllFirst: ((nodes at: 1) at: 4) to: (result at: 4).	self addAllFirst: ((nodes at: 1) at: 5) to: (result at: 5).	self addAllFirst: ((nodes at: 1) at: 6) to: (result at: 6).	self addAllFirst: ((nodes at: 1) at: 7) to: (result at: 7).	self addAllFirst: ((nodes at: 1) at: 8) to: (result at: 8).	self addAllFirst: ((nodes at: 1) at: 9) to: (result at: 9).	self addAllFirst: ((nodes at: 1) at: 10) to: (result at: 10).	self addAllFirst: ((nodes at: 1) at: 11) to: (result at: 11).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_associativity_clause1: nodes	| result |	result := Array new: 4.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForimport_kind5: nodes	| result |	result := Array new: 7.	result at: 5 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForcapture_specifier3: nodes	| result |	result := Array new: 4.	result at: 3 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForfunction_declaration1: nodes	| result |	result := SwiftFunctionDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result addTokens: ((nodes at: 1) at: 13) to: result classTokens.	result addTokens: ((nodes at: 1) at: 14) to: result mutatingTokens.	result addTokens: ((nodes at: 1) at: 15) to: result nonmutatingTokens.	result addTokens: ((nodes at: 1) at: 16) to: result overrideTokens.	result addTokens: ((nodes at: 1) at: 17) to: result staticTokens.	result addTokens: ((nodes at: 1) at: 18) to: result unownedTokens.	result		addTokens: ((nodes at: 1) at: 19)		to: result unownedLeftParensafeRightParenTokens.	result		addTokens: ((nodes at: 1) at: 20)		to: result unownedLeftParenunsafeRightParenTokens.	result addTokens: ((nodes at: 1) at: 21) to: result weakTokens.	result funcToken: ((nodes at: 1) at: 22).	result addToken: ((nodes at: 2) at: 1) to: result identifierTokens.	result addToken: ((nodes at: 2) at: 2) to: result operatorTokens.	result addTokens: ((nodes at: 3) at: 1) to: result lessThanTokens.	result addTokens: ((nodes at: 3) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 3) to: result colonTokens.	result addTokens: ((nodes at: 3) at: 4) to: result commaTokens.	result addTokens: ((nodes at: 3) at: 5) to: result greaterThanTokens.	result addTokens: ((nodes at: 3) at: 6) to: result periodTokens.	result addTokens: ((nodes at: 3) at: 7) to: result protocolTokens.	result whereToken: ((nodes at: 3) at: 8).	result addTokens: ((nodes at: 3) at: 9) to: result equalEqualTokens.	result addTokens: ((nodes at: 4) at: 1) to: result leftParenTokens.	result addTokens: ((nodes at: 4) at: 2) to: result rightParenTokens.	result addTokens: ((nodes at: 4) at: 3) to: result commaTokens.	result		addTokens: ((nodes at: 4) at: 4)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 4) at: 5) to: result varTokens.	result addTokens: ((nodes at: 4) at: 6) to: result inoutTokens.	result addTokens: ((nodes at: 4) at: 7) to: result letTokens.	result addTokens: ((nodes at: 4) at: 8) to: result _Tokens.	result addTokens: ((nodes at: 4) at: 9) to: result identifierTokens.	result addTokens: ((nodes at: 4) at: 10) to: result colonTokens.	result addTokens: ((nodes at: 4) at: 11) to: result equalTokens.	result addObjects: ((nodes at: 4) at: 12) to: result expressions.	result addTokens: ((nodes at: 4) at: 13) to: result leftBracketTokens.	result		addTokens: ((nodes at: 4) at: 14)		to: result rightBracketTokens.	result		addTokens: ((nodes at: 4) at: 15)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 4) at: 16) to: result periodTokens.	result		addTokens: ((nodes at: 4) at: 17)		to: result questionMarkTokens.	result addTokens: ((nodes at: 4) at: 18) to: result bangTokens.	result addTokens: ((nodes at: 4) at: 19) to: result protocolTokens.	result addTokens: ((nodes at: 4) at: 20) to: result lessThanTokens.	result addTokens: ((nodes at: 4) at: 21) to: result greaterThanTokens.	result addTokens: ((nodes at: 4) at: 22) to: result typeTokens.	result addTokens: ((nodes at: 4) at: 23) to: result leftBraceTokens.	result addTokens: ((nodes at: 4) at: 24) to: result rightBraceTokens.	result		addTokens: ((nodes at: 4) at: 25)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 4) at: 26)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 4) at: 27)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 4) at: 28) to: result operatorTokens.	result block: (nodes at: 5).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForfor_statement1: nodes	| result |	result := SwiftForStatementNode new.	result forToken: (nodes at: 1).	result addObjects: ((nodes at: 2) at: 1) to: result expressions.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result semicolonToken: (nodes at: 3).	result testExpression: (nodes at: 4).	result semicolonToken: (nodes at: 5).	result incrementExpression: (nodes at: 6).	result block: (nodes at: 7).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForpostfix_expression2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 36).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForswitch_case1: nodes	| result |	result := Array new: 34.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 1 put: ((nodes at: 1) at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	self addAll: ((nodes at: 1) at: 13) to: (result at: 13).	self addAll: ((nodes at: 1) at: 14) to: (result at: 14).	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).	self addAll: ((nodes at: 1) at: 16) to: (result at: 16).	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).	self addAll: ((nodes at: 1) at: 20) to: (result at: 20).	self addAll: ((nodes at: 1) at: 21) to: (result at: 21).	self addAll: ((nodes at: 1) at: 22) to: (result at: 22).	self addAll: ((nodes at: 1) at: 23) to: (result at: 23).	self addAll: ((nodes at: 1) at: 24) to: (result at: 24).	self addAll: ((nodes at: 1) at: 25) to: (result at: 25).	self addAll: ((nodes at: 1) at: 26) to: (result at: 26).	self addAll: ((nodes at: 1) at: 27) to: (result at: 27).	self addAll: ((nodes at: 1) at: 28) to: (result at: 28).	self addAll: ((nodes at: 1) at: 29) to: (result at: 29).	self addAll: ((nodes at: 1) at: 30) to: (result at: 30).	self addAll: ((nodes at: 1) at: 31) to: (result at: 31).	self addAll: (nodes at: 2) to: (result at: 32).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortype_identifier1: nodes	| result |	result := SwiftTypeIdentifierNode new.	result addToken: (nodes at: 1) to: result identifierTokens.	result addToken: ((nodes at: 2) at: 1) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result addToken: ((nodes at: 2) at: 3) to: result greaterThanTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForsubscript_result1: nodes	| result |	result := Array new: 24.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).	self addAll: ((nodes at: 2) at: 7) to: (result at: 8).	self addAll: ((nodes at: 2) at: 8) to: (result at: 9).	self addAll: ((nodes at: 2) at: 9) to: (result at: 10).	self addAll: ((nodes at: 2) at: 10) to: (result at: 11).	self addAll: ((nodes at: 2) at: 11) to: (result at: 12).	self addAll: ((nodes at: 2) at: 12) to: (result at: 13).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForgeneric_parameter1: nodes	| result |	result := Array new: 7.	result at: 1 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForgeneric_argument_clause1: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	result at: 3 put: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForexpression_list2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 2).	self add: (nodes at: 3) to: (result at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordictionary_literal_items2: nodes	| result |	result := nodes at: 3.	self addFirst: ((nodes at: 1) at: 1) to: (result at: 1).	self addFirst: ((nodes at: 1) at: 2) to: (result at: 2).	self addFirst: ((nodes at: 1) at: 3) to: (result at: 3).	self addFirst: (nodes at: 2) to: (result at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_tuple_pattern_element_list1: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForimport_declaration1: nodes	| result |	result := SwiftImportDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result importToken: (nodes at: 2).	result typealiasToken: ((nodes at: 3) at: 1).	result structToken: ((nodes at: 3) at: 2).	result classToken: ((nodes at: 3) at: 3).	result enumToken: ((nodes at: 3) at: 4).	result protocolToken: ((nodes at: 3) at: 5).	result varToken: ((nodes at: 3) at: 6).	result funcToken: ((nodes at: 3) at: 7).	result addTokens: ((nodes at: 4) at: 1) to: result identifierTokens.	result addTokens: ((nodes at: 4) at: 2) to: result operatorTokens.	result addTokens: ((nodes at: 4) at: 3) to: result periodTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForextension_declaration1: nodes	| result |	result := SwiftExtensionDeclarationNode new.	result extensionToken: (nodes at: 1).	result colonToken: ((nodes at: 3) at: 1).	result addTokens: ((nodes at: 3) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 3) to: result lessThanTokens.	result addTokens: ((nodes at: 3) at: 4) to: result greaterThanTokens.	result addTokens: ((nodes at: 3) at: 5) to: result periodTokens.	result addTokens: ((nodes at: 3) at: 6) to: result commaTokens.	result leftBraceToken: ((nodes at: 4) at: 1).	result addNodes: ((nodes at: 4) at: 2) to: result declarations.	result rightBraceToken: ((nodes at: 4) at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_switch_cases1: nodes	| result |	result := Array new: 34.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 33 put: (OrderedCollection new: 2).	result at: 34 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForbalanced_token4: nodes	| result |	result := Array new: 11.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 7).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForarray_type1: nodes	| result |	result := SwiftArrayTypeNode new.	result addToken: (nodes at: 1) to: result leftBracketTokens.	result addToken: (nodes at: 3) to: result rightBracketTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForimport_path2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 3).	self add: ((nodes at: 3) at: 1) to: (result at: 1).	self add: ((nodes at: 3) at: 2) to: (result at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForarray_literal_items2: nodes	| result |	result := nodes at: 3.	self addFirst: (nodes at: 1) to: (result at: 1).	self addFirst: (nodes at: 2) to: (result at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForrequirement_list1: nodes	| result |	result := Array new: 8.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self add: ((nodes at: 1) at: 6) to: (result at: 6).	self add: ((nodes at: 1) at: 7) to: (result at: 7).	self add: ((nodes at: 1) at: 8) to: (result at: 8).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForclosure_signature5: nodes	| result |	result := Array new: 33.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	self add: ((nodes at: 1) at: 1) to: (result at: 8).	result at: 30 put: ((nodes at: 1) at: 2).	result at: 31 put: ((nodes at: 1) at: 3).	result at: 32 put: ((nodes at: 1) at: 4).	result at: 33 put: ((nodes at: 1) at: 5).	self add: ((nodes at: 1) at: 6) to: (result at: 21).	self add: ((nodes at: 1) at: 7) to: (result at: 9).	result at: 29 put: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortype_identifier2: nodes	| result |	result := nodes at: 4.	result addFirstToken: (nodes at: 1) to: result identifierTokens.	result addFirstToken: ((nodes at: 2) at: 1) to: result lessThanTokens.	result addFirstTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result		addFirstToken: ((nodes at: 2) at: 3)		to: result greaterThanTokens.	result addFirstToken: (nodes at: 3) to: result periodTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_attribute_argument_clause1: nodes	| result |	result := Array new: 11.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForunion_style_enum1: nodes	| result |	result := Array new: 57.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 33 put: (OrderedCollection new: 2).	result at: 34 put: (OrderedCollection new: 2).	result at: 35 put: (OrderedCollection new: 2).	result at: 36 put: (OrderedCollection new: 2).	result at: 37 put: (OrderedCollection new: 2).	result at: 38 put: (OrderedCollection new: 2).	result at: 39 put: (OrderedCollection new: 2).	result at: 40 put: (OrderedCollection new: 2).	result at: 41 put: (OrderedCollection new: 2).	result at: 42 put: (OrderedCollection new: 2).	result at: 43 put: (OrderedCollection new: 2).	result at: 44 put: (OrderedCollection new: 2).	result at: 45 put: (OrderedCollection new: 2).	result at: 46 put: (OrderedCollection new: 2).	result at: 47 put: (OrderedCollection new: 2).	result at: 48 put: (OrderedCollection new: 2).	result at: 49 put: (OrderedCollection new: 2).	result at: 50 put: (OrderedCollection new: 2).	result at: 51 put: (OrderedCollection new: 2).	result at: 52 put: (OrderedCollection new: 2).	result at: 53 put: (OrderedCollection new: 2).	result at: 54 put: (OrderedCollection new: 2).	result at: 55 put: (OrderedCollection new: 2).	result at: 56 put: (OrderedCollection new: 2).	result at: 57 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).	self add: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self add: (nodes at: 3) to: (result at: 10).	self addAll: ((nodes at: 4) at: 1) to: (result at: 11).	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).	self addAll: ((nodes at: 4) at: 3) to: (result at: 12).	self addAll: ((nodes at: 4) at: 4) to: (result at: 13).	self addAll: ((nodes at: 4) at: 5) to: (result at: 14).	self addAll: ((nodes at: 4) at: 6) to: (result at: 15).	self addAll: ((nodes at: 4) at: 7) to: (result at: 16).	self addAll: ((nodes at: 4) at: 8) to: (result at: 17).	self addAll: ((nodes at: 4) at: 9) to: (result at: 18).	self addAll: ((nodes at: 4) at: 10) to: (result at: 7).	self addAll: ((nodes at: 4) at: 11) to: (result at: 19).	self addAll: ((nodes at: 4) at: 12) to: (result at: 20).	self addAll: ((nodes at: 4) at: 13) to: (result at: 21).	self addAll: ((nodes at: 4) at: 14) to: (result at: 6).	self addAll: ((nodes at: 4) at: 15) to: (result at: 22).	self addAll: ((nodes at: 4) at: 16) to: (result at: 23).	self addAll: ((nodes at: 4) at: 17) to: (result at: 24).	self addAll: ((nodes at: 4) at: 18) to: (result at: 25).	self addAll: ((nodes at: 4) at: 19) to: (result at: 26).	self addAll: ((nodes at: 4) at: 20) to: (result at: 27).	self addAll: ((nodes at: 4) at: 21) to: (result at: 28).	self addAll: ((nodes at: 4) at: 22) to: (result at: 29).	self addAll: ((nodes at: 4) at: 23) to: (result at: 30).	self addAll: ((nodes at: 4) at: 24) to: (result at: 31).	self addAll: ((nodes at: 4) at: 25) to: (result at: 4).	self addAll: ((nodes at: 4) at: 26) to: (result at: 3).	self addAll: ((nodes at: 4) at: 27) to: (result at: 32).	self addAll: ((nodes at: 4) at: 28) to: (result at: 33).	self addAll: ((nodes at: 4) at: 29) to: (result at: 34).	self addAll: ((nodes at: 4) at: 30) to: (result at: 35).	self addAll: ((nodes at: 4) at: 31) to: (result at: 36).	self addAll: ((nodes at: 4) at: 32) to: (result at: 2).	self addAll: ((nodes at: 4) at: 33) to: (result at: 5).	self addAll: ((nodes at: 4) at: 34) to: (result at: 37).	self addAll: ((nodes at: 4) at: 35) to: (result at: 38).	self addAll: ((nodes at: 4) at: 36) to: (result at: 39).	self addAll: ((nodes at: 4) at: 37) to: (result at: 40).	self addAll: ((nodes at: 4) at: 38) to: (result at: 10).	self addAll: ((nodes at: 4) at: 39) to: (result at: 41).	self addAll: ((nodes at: 4) at: 40) to: (result at: 42).	self addAll: ((nodes at: 4) at: 41) to: (result at: 43).	self addAll: ((nodes at: 4) at: 42) to: (result at: 44).	self addAll: ((nodes at: 4) at: 43) to: (result at: 45).	self addAll: ((nodes at: 4) at: 44) to: (result at: 46).	self addAll: ((nodes at: 4) at: 45) to: (result at: 47).	self addAll: ((nodes at: 4) at: 46) to: (result at: 8).	self addAll: ((nodes at: 4) at: 47) to: (result at: 9).	self addAll: ((nodes at: 4) at: 48) to: (result at: 48).	self addAll: ((nodes at: 4) at: 49) to: (result at: 49).	self addAll: ((nodes at: 4) at: 50) to: (result at: 50).	self addAll: ((nodes at: 4) at: 51) to: (result at: 51).	self addAll: ((nodes at: 4) at: 52) to: (result at: 52).	self addAll: ((nodes at: 4) at: 53) to: (result at: 53).	self addAll: ((nodes at: 4) at: 54) to: (result at: 54).	self addAll: ((nodes at: 4) at: 55) to: (result at: 55).	self addAll: ((nodes at: 4) at: 56) to: (result at: 56).	self addAll: ((nodes at: 4) at: 57) to: (result at: 57).	self add: (nodes at: 5) to: (result at: 43).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForgeneric_argument_list2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForexplicit_member_expression2: nodes	| result |	result := SwiftExplicitMemberExpressionNode new.	result addTokens: ((nodes at: 1) at: 1) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 2) to: result lessThanTokens.	result addTokens: ((nodes at: 1) at: 3) to: result commaTokens.	result addTokens: ((nodes at: 1) at: 4) to: result greaterThanTokens.	result		addTokens: ((nodes at: 1) at: 5)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 6)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 7)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 8) to: result leftBracketTokens.	result addObjects: ((nodes at: 1) at: 9) to: result expressions.	result		addTokens: ((nodes at: 1) at: 10)		to: result rightBracketTokens.	result addObjects: ((nodes at: 1) at: 11) to: result keyExpressions.	result addTokens: ((nodes at: 1) at: 12) to: result colonTokens.	result addObjects: ((nodes at: 1) at: 13) to: result valueExpressions.	result __FILE__Token: ((nodes at: 1) at: 14).	result __LINE__Token: ((nodes at: 1) at: 15).	result __COLUMN__Token: ((nodes at: 1) at: 16).	result __FUNCTION__Token: ((nodes at: 1) at: 17).	result addTokens: ((nodes at: 1) at: 18) to: result selfTokens.	result addTokens: ((nodes at: 1) at: 19) to: result periodTokens.	result addTokens: ((nodes at: 1) at: 20) to: result initTokens.	result addTokens: ((nodes at: 1) at: 21) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 22) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 23) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 1) at: 25) to: result letTokens.	result addTokens: ((nodes at: 1) at: 26) to: result _Tokens.	result		addTokens: ((nodes at: 1) at: 27)		to: result minusGreaterThanTokens.	result		addTokens: ((nodes at: 1) at: 28)		to: result questionMarkTokens.	result addTokens: ((nodes at: 1) at: 29) to: result bangTokens.	result addTokens: ((nodes at: 1) at: 30) to: result protocolTokens.	result addTokens: ((nodes at: 1) at: 31) to: result typeTokens.	result		addTokens: ((nodes at: 1) at: 32)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 1) at: 33) to: result equalTokens.	result addTokens: ((nodes at: 1) at: 34) to: result varTokens.	result addTokens: ((nodes at: 1) at: 35) to: result rightBraceTokens.	result addTokens: ((nodes at: 1) at: 36) to: result operatorTokens.	result inToken: ((nodes at: 1) at: 37).	result weakToken: ((nodes at: 1) at: 38).	result unownedToken: ((nodes at: 1) at: 39).	result unownedLeftParensafeRightParenToken: ((nodes at: 1) at: 40).	result unownedLeftParenunsafeRightParenToken: ((nodes at: 1) at: 41).	result addNodes: ((nodes at: 1) at: 42) to: result statements.	result addTokens: ((nodes at: 1) at: 43) to: result dynamicTypeTokens.	result addToken: (nodes at: 2) to: result periodTokens.	result addToken: (nodes at: 3) to: result identifierTokens.	result addToken: ((nodes at: 4) at: 1) to: result lessThanTokens.	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.	result addToken: ((nodes at: 4) at: 3) to: result greaterThanTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForimport_kind4: nodes	| result |	result := Array new: 7.	result at: 4 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForgeneric_parameter_clause1: nodes	| result |	result := Array new: 9.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 1).	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).	result at: 8 put: ((nodes at: 3) at: 1).	self addAll: ((nodes at: 3) at: 2) to: (result at: 2).	self addAll: ((nodes at: 3) at: 3) to: (result at: 1).	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).	self addAll: ((nodes at: 3) at: 6) to: (result at: 3).	self addAll: ((nodes at: 3) at: 7) to: (result at: 7).	self addAll: ((nodes at: 3) at: 8) to: (result at: 4).	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).	self add: (nodes at: 4) to: (result at: 5).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForpattern2: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 3).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).	self addAll: ((nodes at: 2) at: 13) to: (result at: 13).	self addAll: ((nodes at: 2) at: 14) to: (result at: 14).	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).	self addAll: ((nodes at: 2) at: 20) to: (result at: 20).	self addAll: ((nodes at: 2) at: 21) to: (result at: 21).	self addAll: ((nodes at: 2) at: 22) to: (result at: 22).	self addAll: ((nodes at: 2) at: 23) to: (result at: 23).	self addAll: ((nodes at: 2) at: 24) to: (result at: 24).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForraw_value_style_enum_case_list1: nodes	| result |	result := Array new: 6.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	self add: ((nodes at: 1) at: 1) to: (result at: 1).	self add: ((nodes at: 1) at: 2) to: (result at: 2).	self add: ((nodes at: 1) at: 3) to: (result at: 3).	self add: ((nodes at: 1) at: 4) to: (result at: 4).	self add: ((nodes at: 1) at: 5) to: (result at: 5).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForswitch_cases2: nodes	| result |	result := nodes at: 1.	self add: ((nodes at: 2) at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).	self addAll: ((nodes at: 2) at: 13) to: (result at: 13).	self addAll: ((nodes at: 2) at: 14) to: (result at: 14).	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).	self addAll: ((nodes at: 2) at: 20) to: (result at: 20).	self addAll: ((nodes at: 2) at: 21) to: (result at: 21).	self addAll: ((nodes at: 2) at: 22) to: (result at: 22).	self addAll: ((nodes at: 2) at: 23) to: (result at: 23).	self addAll: ((nodes at: 2) at: 24) to: (result at: 24).	self addAll: ((nodes at: 2) at: 25) to: (result at: 25).	self addAll: ((nodes at: 2) at: 26) to: (result at: 26).	self addAll: ((nodes at: 2) at: 27) to: (result at: 27).	self addAll: ((nodes at: 2) at: 28) to: (result at: 28).	self addAll: ((nodes at: 2) at: 29) to: (result at: 29).	self addAll: ((nodes at: 2) at: 30) to: (result at: 30).	self addAll: ((nodes at: 2) at: 31) to: (result at: 31).	self addAll: ((nodes at: 2) at: 32) to: (result at: 32).	self add: ((nodes at: 2) at: 33) to: (result at: 33).	self add: ((nodes at: 2) at: 34) to: (result at: 34).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForimport_kind6: nodes	| result |	result := Array new: 7.	result at: 6 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortype_casting_pattern2: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 18).	self addAll: ((nodes at: 1) at: 2) to: (result at: 4).	self addAll: ((nodes at: 1) at: 3) to: (result at: 15).	self addAll: ((nodes at: 1) at: 4) to: (result at: 7).	self addAll: ((nodes at: 1) at: 5) to: (result at: 8).	self addAll: ((nodes at: 1) at: 6) to: (result at: 2).	self addAll: ((nodes at: 1) at: 7) to: (result at: 3).	self addAll: ((nodes at: 1) at: 8) to: (result at: 20).	self addAll: ((nodes at: 1) at: 9) to: (result at: 21).	self addAll: ((nodes at: 1) at: 10) to: (result at: 22).	self addAll: ((nodes at: 1) at: 11) to: (result at: 23).	self addAll: ((nodes at: 1) at: 12) to: (result at: 24).	self addAll: ((nodes at: 1) at: 13) to: (result at: 25).	self addAll: ((nodes at: 1) at: 14) to: (result at: 5).	self addAll: ((nodes at: 1) at: 15) to: (result at: 6).	self addAll: ((nodes at: 1) at: 16) to: (result at: 9).	self addAll: ((nodes at: 1) at: 17) to: (result at: 10).	self addAll: ((nodes at: 1) at: 18) to: (result at: 11).	self addAll: ((nodes at: 1) at: 19) to: (result at: 12).	self addAll: ((nodes at: 1) at: 20) to: (result at: 13).	self addAll: ((nodes at: 1) at: 21) to: (result at: 14).	self addAll: ((nodes at: 1) at: 22) to: (result at: 16).	self addAll: ((nodes at: 1) at: 23) to: (result at: 17).	self addAll: ((nodes at: 1) at: 24) to: (result at: 19).	self addAll: ((nodes at: 1) at: 25) to: (result at: 26).	self addAll: ((nodes at: 1) at: 26) to: (result at: 27).	self addAll: ((nodes at: 1) at: 27) to: (result at: 28).	self addAll: ((nodes at: 1) at: 28) to: (result at: 1).	self addAll: ((nodes at: 1) at: 29) to: (result at: 29).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForparameter_clause1: nodes	| result |	result := Array new: 28.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self add: (nodes at: 2) to: (result at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_type_annotation1: nodes	| result |	result := Array new: 24.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForprotocol_initializer_declaration1: nodes	| result |	result := SwiftProtocolInitializerDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result convenienceToken: ((nodes at: 1) at: 13).	result initToken: ((nodes at: 1) at: 14).	result addTokens: ((nodes at: 2) at: 1) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 3) to: result colonTokens.	result addTokens: ((nodes at: 2) at: 4) to: result commaTokens.	result addTokens: ((nodes at: 2) at: 5) to: result greaterThanTokens.	result addTokens: ((nodes at: 2) at: 6) to: result periodTokens.	result addTokens: ((nodes at: 2) at: 7) to: result protocolTokens.	result whereToken: ((nodes at: 2) at: 8).	result addTokens: ((nodes at: 2) at: 9) to: result equalEqualTokens.	result addTokens: ((nodes at: 3) at: 1) to: result leftParenTokens.	result addTokens: ((nodes at: 3) at: 2) to: result rightParenTokens.	result addTokens: ((nodes at: 3) at: 3) to: result inoutTokens.	result addTokens: ((nodes at: 3) at: 4) to: result letTokens.	result addTokens: ((nodes at: 3) at: 5) to: result _Tokens.	result addTokens: ((nodes at: 3) at: 6) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 7) to: result colonTokens.	result addTokens: ((nodes at: 3) at: 8) to: result leftBracketTokens.	result addTokens: ((nodes at: 3) at: 9) to: result rightBracketTokens.	result		addTokens: ((nodes at: 3) at: 10)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 3) at: 11) to: result periodTokens.	result		addTokens: ((nodes at: 3) at: 12)		to: result questionMarkTokens.	result addTokens: ((nodes at: 3) at: 13) to: result bangTokens.	result addTokens: ((nodes at: 3) at: 14) to: result protocolTokens.	result addTokens: ((nodes at: 3) at: 15) to: result lessThanTokens.	result addTokens: ((nodes at: 3) at: 16) to: result greaterThanTokens.	result addTokens: ((nodes at: 3) at: 17) to: result typeTokens.	result addTokens: ((nodes at: 3) at: 18) to: result commaTokens.	result		addTokens: ((nodes at: 3) at: 19)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 3) at: 20) to: result equalTokens.	result addObjects: ((nodes at: 3) at: 21) to: result expressions.	result addTokens: ((nodes at: 3) at: 22) to: result varTokens.	result addTokens: ((nodes at: 3) at: 23) to: result leftBraceTokens.	result addTokens: ((nodes at: 3) at: 24) to: result rightBraceTokens.	result		addTokens: ((nodes at: 3) at: 25)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 3) at: 26)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 3) at: 27)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 3) at: 28) to: result operatorTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForfallthrough_statement1: nodes	| result |	result := SwiftFallThroughStatementNode new.	result fallthroughToken: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForoptional_type1: nodes	| result |	result := SwiftOptionalTypeNode new.	result addToken: (nodes at: 2) to: result questionMarkTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_generic_parameter_clause1: nodes	| result |	result := Array new: 9.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForprotocol_property_declaration1: nodes	| result |	result := SwiftProtocolPropertyDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result addTokens: ((nodes at: 1) at: 13) to: result classTokens.	result addTokens: ((nodes at: 1) at: 14) to: result mutatingTokens.	result addTokens: ((nodes at: 1) at: 15) to: result nonmutatingTokens.	result addTokens: ((nodes at: 1) at: 16) to: result overrideTokens.	result addTokens: ((nodes at: 1) at: 17) to: result staticTokens.	result addTokens: ((nodes at: 1) at: 18) to: result unownedTokens.	result		addTokens: ((nodes at: 1) at: 19)		to: result unownedLeftParensafeRightParenTokens.	result		addTokens: ((nodes at: 1) at: 20)		to: result unownedLeftParenunsafeRightParenTokens.	result addTokens: ((nodes at: 1) at: 21) to: result weakTokens.	result varToken: ((nodes at: 1) at: 22).	result addToken: (nodes at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 1) to: result colonTokens.	result addTokens: ((nodes at: 3) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 3) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 3) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 3) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 3) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 3) at: 8) to: result leftBraceTokens.	result addTokens: ((nodes at: 3) at: 9) to: result rightBraceTokens.	result		addTokens: ((nodes at: 3) at: 10)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 3) at: 11)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 3) at: 12)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 3) at: 13) to: result operatorTokens.	result		addTokens: ((nodes at: 3) at: 14)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 3) at: 15) to: result periodTokens.	result		addTokens: ((nodes at: 3) at: 16)		to: result questionMarkTokens.	result addTokens: ((nodes at: 3) at: 17) to: result bangTokens.	result addTokens: ((nodes at: 3) at: 18) to: result protocolTokens.	result addTokens: ((nodes at: 3) at: 19) to: result lessThanTokens.	result addTokens: ((nodes at: 3) at: 20) to: result greaterThanTokens.	result addTokens: ((nodes at: 3) at: 21) to: result typeTokens.	result addTokens: ((nodes at: 3) at: 22) to: result commaTokens.	result		addTokens: ((nodes at: 3) at: 23)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 3) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 4) at: 1) to: result leftBraceTokens.	result addTokens: ((nodes at: 4) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 4) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 4) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 4) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 4) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 4) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 4) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 4) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 4) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 4) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 4) at: 12) to: result operatorTokens.	result getToken: ((nodes at: 4) at: 13).	result setToken: ((nodes at: 4) at: 14).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForliteral_expression7: nodes	| result |	result := SwiftLiteralExpressionNode new.	result __FUNCTION__Token: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForpattern_initializer1: nodes	| result |	result := SwiftPatternInitializerNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result colonTokens.	result addTokens: ((nodes at: 1) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 8) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 9) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 12)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 13) to: result operatorTokens.	result		addTokens: ((nodes at: 1) at: 14)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 1) at: 15) to: result periodTokens.	result		addTokens: ((nodes at: 1) at: 16)		to: result questionMarkTokens.	result addTokens: ((nodes at: 1) at: 17) to: result bangTokens.	result addTokens: ((nodes at: 1) at: 18) to: result protocolTokens.	result addTokens: ((nodes at: 1) at: 19) to: result lessThanTokens.	result addTokens: ((nodes at: 1) at: 20) to: result greaterThanTokens.	result addTokens: ((nodes at: 1) at: 21) to: result typeTokens.	result addTokens: ((nodes at: 1) at: 22) to: result commaTokens.	result		addTokens: ((nodes at: 1) at: 23)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 1) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 1) at: 25) to: result varTokens.	result addTokens: ((nodes at: 1) at: 26) to: result letTokens.	result addObjects: ((nodes at: 1) at: 27) to: result expressions.	result addTokens: ((nodes at: 1) at: 28) to: result isTokens.	result addTokens: ((nodes at: 1) at: 29) to: result asTokens.	result equalToken: ((nodes at: 2) at: 1).	result addObject: ((nodes at: 2) at: 2) to: result expressions.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_requirement_clause1: nodes	| result |	result := Array new: 9.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForgetter_setter_keyword_block2: nodes	| result |	result := Array new: 14.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).	self addAll: ((nodes at: 2) at: 7) to: (result at: 1).	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).	result at: 14 put: ((nodes at: 2) at: 13).	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).	self addAll: ((nodes at: 3) at: 3) to: (result at: 4).	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).	self addAll: ((nodes at: 3) at: 7) to: (result at: 1).	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).	result at: 13 put: ((nodes at: 3) at: 13).	self add: (nodes at: 4) to: (result at: 8).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForbinary_expression4: nodes	| result |	result := SwiftTypeCastOperatorNode new.	result _isToken: ((nodes at: 1) at: 1).	result type: ((nodes at: 1) at: 2).	result asToken: ((nodes at: 1) at: 3).	result questionMarkToken: ((nodes at: 1) at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForprimary_expression1: nodes	| result |	result := SwiftPrimaryExpressionNode new.	result identifierToken: (nodes at: 1).	result lessThanToken: ((nodes at: 2) at: 1).	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	result greaterThanToken: ((nodes at: 2) at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForinfix_operator_declaration1: nodes	| result |	result := SwiftInfixOperatorDeclarationNode new.	result addToken: (nodes at: 1) to: result operatorTokens.	result infixToken: (nodes at: 2).	result addToken: (nodes at: 3) to: result operatorTokens.	result leftBraceToken: (nodes at: 4).	result precedenceToken: ((nodes at: 5) at: 1).	result integer_literalToken: ((nodes at: 5) at: 2).	result associativityToken: ((nodes at: 5) at: 3).	result leftToken: ((nodes at: 5) at: 4).	result rightToken: ((nodes at: 5) at: 5).	result noneToken: ((nodes at: 5) at: 6).	result rightBraceToken: (nodes at: 6).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForimport_path1: nodes	| result |	result := Array new: 3.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	self add: ((nodes at: 1) at: 1) to: (result at: 1).	self add: ((nodes at: 1) at: 2) to: (result at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForsetter_clause1: nodes	| result |	result := Array new: 14.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	result at: 13 put: (nodes at: 2).	self add: ((nodes at: 3) at: 1) to: (result at: 3).	self add: ((nodes at: 3) at: 2) to: (result at: 2).	self add: ((nodes at: 3) at: 3) to: (result at: 4).	result at: 14 put: (nodes at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_initializer1: nodes	| result |	result := Array new: 2.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordictionary_literal_item1: nodes	| result |	result := Array new: 3.	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	result at: 3 put: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForcase_label1: nodes	| result |	result := Array new: 31.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).	self addAll: ((nodes at: 2) at: 7) to: (result at: 8).	self addAll: ((nodes at: 2) at: 8) to: (result at: 26).	self addAll: ((nodes at: 2) at: 9) to: (result at: 27).	self addAll: ((nodes at: 2) at: 10) to: (result at: 28).	self addAll: ((nodes at: 2) at: 11) to: (result at: 29).	self addAll: ((nodes at: 2) at: 12) to: (result at: 30).	self addAll: ((nodes at: 2) at: 13) to: (result at: 31).	self addAll: ((nodes at: 2) at: 14) to: (result at: 9).	self addAll: ((nodes at: 2) at: 15) to: (result at: 10).	self addAll: ((nodes at: 2) at: 16) to: (result at: 11).	self addAll: ((nodes at: 2) at: 17) to: (result at: 12).	self addAll: ((nodes at: 2) at: 18) to: (result at: 13).	self addAll: ((nodes at: 2) at: 19) to: (result at: 14).	self addAll: ((nodes at: 2) at: 20) to: (result at: 15).	self addAll: ((nodes at: 2) at: 21) to: (result at: 16).	self addAll: ((nodes at: 2) at: 22) to: (result at: 17).	self addAll: ((nodes at: 2) at: 23) to: (result at: 19).	self addAll: ((nodes at: 2) at: 24) to: (result at: 18).	self addAll: ((nodes at: 2) at: 25) to: (result at: 20).	self addAll: ((nodes at: 2) at: 26) to: (result at: 21).	self addAll: ((nodes at: 2) at: 27) to: (result at: 22).	self addAll: ((nodes at: 2) at: 28) to: (result at: 23).	self addAll: ((nodes at: 2) at: 29) to: (result at: 24).	self addAll: ((nodes at: 2) at: 30) to: (result at: 25).	self add: (nodes at: 3) to: (result at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordeclaration_specifiers1: nodes	| result |	result := Array new: 9.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForbinary_expression1: nodes	| result |	result := SwiftBinaryOperatorNode new.	result addToken: (nodes at: 1) to: result operatorTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForcode_block1: nodes	| result |	result := SwiftBlockNode new.	result leftBraceToken: (nodes at: 1).	result addNodes: (nodes at: 2) to: result statements.	result rightBraceToken: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForparameter_clauses2: nodes	| result |	result := nodes at: 1.	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).	self addAll: ((nodes at: 2) at: 3) to: (result at: 6).	self addAll: ((nodes at: 2) at: 4) to: (result at: 7).	self addAll: ((nodes at: 2) at: 5) to: (result at: 8).	self addAll: ((nodes at: 2) at: 6) to: (result at: 9).	self addAll: ((nodes at: 2) at: 7) to: (result at: 10).	self addAll: ((nodes at: 2) at: 8) to: (result at: 13).	self addAll: ((nodes at: 2) at: 9) to: (result at: 14).	self addAll: ((nodes at: 2) at: 10) to: (result at: 15).	self addAll: ((nodes at: 2) at: 11) to: (result at: 16).	self addAll: ((nodes at: 2) at: 12) to: (result at: 17).	self addAll: ((nodes at: 2) at: 13) to: (result at: 18).	self addAll: ((nodes at: 2) at: 14) to: (result at: 19).	self addAll: ((nodes at: 2) at: 15) to: (result at: 20).	self addAll: ((nodes at: 2) at: 16) to: (result at: 21).	self addAll: ((nodes at: 2) at: 17) to: (result at: 22).	self addAll: ((nodes at: 2) at: 18) to: (result at: 3).	self addAll: ((nodes at: 2) at: 19) to: (result at: 4).	self addAll: ((nodes at: 2) at: 20) to: (result at: 11).	self addAll: ((nodes at: 2) at: 21) to: (result at: 12).	self addAll: ((nodes at: 2) at: 22) to: (result at: 5).	self addAll: ((nodes at: 2) at: 23) to: (result at: 23).	self addAll: ((nodes at: 2) at: 24) to: (result at: 24).	self addAll: ((nodes at: 2) at: 25) to: (result at: 25).	self addAll: ((nodes at: 2) at: 26) to: (result at: 26).	self addAll: ((nodes at: 2) at: 27) to: (result at: 27).	self addAll: ((nodes at: 2) at: 28) to: (result at: 28).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForcapture_specifier4: nodes	| result |	result := Array new: 4.	result at: 4 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForarray_literal_items1: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self add: (nodes at: 2) to: (result at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForstatement2: nodes	| result |	result := SwiftDeclarationStatementNode new.	result declaration: (nodes at: 1).	result semicolonToken: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForparameter_clauses1: nodes	| result |	result := Array new: 28.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_setter_name1: nodes	| result |	result := Array new: 3.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForimplicit_member_expression1: nodes	| result |	result := SwiftImplicitMemberExpressionNode new.	result periodToken: (nodes at: 1).	result identifierToken: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForparameter_list2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 18).	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).	self add: ((nodes at: 3) at: 2) to: (result at: 2).	self addAll: ((nodes at: 3) at: 3) to: (result at: 3).	self addAll: ((nodes at: 3) at: 4) to: (result at: 4).	self addAll: ((nodes at: 3) at: 5) to: (result at: 5).	self addAll: ((nodes at: 3) at: 6) to: (result at: 6).	self addAll: ((nodes at: 3) at: 7) to: (result at: 7).	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).	self addAll: ((nodes at: 3) at: 10) to: (result at: 23).	self addAll: ((nodes at: 3) at: 11) to: (result at: 24).	self addAll: ((nodes at: 3) at: 12) to: (result at: 25).	self addAll: ((nodes at: 3) at: 13) to: (result at: 26).	self addAll: ((nodes at: 3) at: 14) to: (result at: 27).	self addAll: ((nodes at: 3) at: 15) to: (result at: 28).	self addAll: ((nodes at: 3) at: 16) to: (result at: 10).	self addAll: ((nodes at: 3) at: 17) to: (result at: 11).	self addAll: ((nodes at: 3) at: 18) to: (result at: 12).	self addAll: ((nodes at: 3) at: 19) to: (result at: 13).	self addAll: ((nodes at: 3) at: 20) to: (result at: 14).	self addAll: ((nodes at: 3) at: 21) to: (result at: 15).	self addAll: ((nodes at: 3) at: 22) to: (result at: 16).	self addAll: ((nodes at: 3) at: 23) to: (result at: 17).	self addAll: ((nodes at: 3) at: 24) to: (result at: 18).	self addAll: ((nodes at: 3) at: 25) to: (result at: 19).	self add: ((nodes at: 3) at: 26) to: (result at: 20).	self add: ((nodes at: 3) at: 27) to: (result at: 21).	self add: ((nodes at: 3) at: 28) to: (result at: 22).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForstatement1: nodes	| result |	result := SwiftExpressionStatementNode new.	result expression: (nodes at: 1).	result semicolonToken: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForvariable_declaration1: nodes	| result |	result := SwiftVariableDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result addTokens: ((nodes at: 1) at: 13) to: result classTokens.	result addTokens: ((nodes at: 1) at: 14) to: result mutatingTokens.	result addTokens: ((nodes at: 1) at: 15) to: result nonmutatingTokens.	result addTokens: ((nodes at: 1) at: 16) to: result overrideTokens.	result addTokens: ((nodes at: 1) at: 17) to: result staticTokens.	result addTokens: ((nodes at: 1) at: 18) to: result unownedTokens.	result		addTokens: ((nodes at: 1) at: 19)		to: result unownedLeftParensafeRightParenTokens.	result		addTokens: ((nodes at: 1) at: 20)		to: result unownedLeftParenunsafeRightParenTokens.	result addTokens: ((nodes at: 1) at: 21) to: result weakTokens.	result varToken: ((nodes at: 1) at: 22).	result addNodes: ((nodes at: 2) at: 1) to: result inializers.	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_switch_cases2: nodes	| result |	result := Array new: 34.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 33 put: (OrderedCollection new: 2).	result at: 34 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	self addAll: ((nodes at: 1) at: 13) to: (result at: 13).	self addAll: ((nodes at: 1) at: 14) to: (result at: 14).	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).	self addAll: ((nodes at: 1) at: 16) to: (result at: 16).	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).	self addAll: ((nodes at: 1) at: 18) to: (result at: 24).	self addAll: ((nodes at: 1) at: 19) to: (result at: 18).	self addAll: ((nodes at: 1) at: 20) to: (result at: 19).	self addAll: ((nodes at: 1) at: 21) to: (result at: 20).	self addAll: ((nodes at: 1) at: 22) to: (result at: 21).	self addAll: ((nodes at: 1) at: 23) to: (result at: 22).	self addAll: ((nodes at: 1) at: 24) to: (result at: 23).	self addAll: ((nodes at: 1) at: 25) to: (result at: 25).	self addAll: ((nodes at: 1) at: 26) to: (result at: 29).	self addAll: ((nodes at: 1) at: 27) to: (result at: 30).	self addAll: ((nodes at: 1) at: 28) to: (result at: 31).	self addAll: ((nodes at: 1) at: 29) to: (result at: 32).	self addAll: ((nodes at: 1) at: 30) to: (result at: 33).	self addAll: ((nodes at: 1) at: 31) to: (result at: 34).	self addAll: ((nodes at: 1) at: 32) to: (result at: 26).	self addAll: ((nodes at: 1) at: 33) to: (result at: 27).	self addAll: ((nodes at: 1) at: 34) to: (result at: 28).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForraw_value_style_enum1: nodes	| result |	result := Array new: 57.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 33 put: (OrderedCollection new: 2).	result at: 34 put: (OrderedCollection new: 2).	result at: 35 put: (OrderedCollection new: 2).	result at: 36 put: (OrderedCollection new: 2).	result at: 37 put: (OrderedCollection new: 2).	result at: 38 put: (OrderedCollection new: 2).	result at: 39 put: (OrderedCollection new: 2).	result at: 40 put: (OrderedCollection new: 2).	result at: 41 put: (OrderedCollection new: 2).	result at: 42 put: (OrderedCollection new: 2).	result at: 43 put: (OrderedCollection new: 2).	result at: 44 put: (OrderedCollection new: 2).	result at: 45 put: (OrderedCollection new: 2).	result at: 46 put: (OrderedCollection new: 2).	result at: 47 put: (OrderedCollection new: 2).	result at: 48 put: (OrderedCollection new: 2).	result at: 49 put: (OrderedCollection new: 2).	result at: 50 put: (OrderedCollection new: 2).	result at: 51 put: (OrderedCollection new: 2).	result at: 52 put: (OrderedCollection new: 2).	result at: 53 put: (OrderedCollection new: 2).	result at: 54 put: (OrderedCollection new: 2).	result at: 55 put: (OrderedCollection new: 2).	result at: 56 put: (OrderedCollection new: 2).	result at: 57 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).	self add: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self add: (nodes at: 3) to: (result at: 3).	self add: (nodes at: 5) to: (result at: 10).	self addAll: ((nodes at: 6) at: 1) to: (result at: 11).	self addAll: ((nodes at: 6) at: 2) to: (result at: 1).	self addAll: ((nodes at: 6) at: 3) to: (result at: 12).	self addAll: ((nodes at: 6) at: 4) to: (result at: 13).	self addAll: ((nodes at: 6) at: 5) to: (result at: 32).	self addAll: ((nodes at: 6) at: 6) to: (result at: 33).	self addAll: ((nodes at: 6) at: 7) to: (result at: 10).	self addAll: ((nodes at: 6) at: 8) to: (result at: 41).	self addAll: ((nodes at: 6) at: 9) to: (result at: 55).	self addAll: ((nodes at: 6) at: 10) to: (result at: 56).	self addAll: ((nodes at: 6) at: 11) to: (result at: 57).	self addAll: ((nodes at: 6) at: 12) to: (result at: 21).	self addAll: ((nodes at: 6) at: 13) to: (result at: 14).	self addAll: ((nodes at: 6) at: 14) to: (result at: 15).	self addAll: ((nodes at: 6) at: 15) to: (result at: 16).	self addAll: ((nodes at: 6) at: 16) to: (result at: 17).	self addAll: ((nodes at: 6) at: 17) to: (result at: 18).	self addAll: ((nodes at: 6) at: 18) to: (result at: 7).	self addAll: ((nodes at: 6) at: 19) to: (result at: 19).	self addAll: ((nodes at: 6) at: 20) to: (result at: 20).	self addAll: ((nodes at: 6) at: 21) to: (result at: 6).	self addAll: ((nodes at: 6) at: 22) to: (result at: 22).	self addAll: ((nodes at: 6) at: 23) to: (result at: 23).	self addAll: ((nodes at: 6) at: 24) to: (result at: 24).	self addAll: ((nodes at: 6) at: 25) to: (result at: 25).	self addAll: ((nodes at: 6) at: 26) to: (result at: 26).	self addAll: ((nodes at: 6) at: 27) to: (result at: 27).	self addAll: ((nodes at: 6) at: 28) to: (result at: 28).	self addAll: ((nodes at: 6) at: 29) to: (result at: 29).	self addAll: ((nodes at: 6) at: 30) to: (result at: 30).	self addAll: ((nodes at: 6) at: 31) to: (result at: 31).	self addAll: ((nodes at: 6) at: 32) to: (result at: 4).	self addAll: ((nodes at: 6) at: 33) to: (result at: 3).	self addAll: ((nodes at: 6) at: 34) to: (result at: 34).	self addAll: ((nodes at: 6) at: 35) to: (result at: 35).	self addAll: ((nodes at: 6) at: 36) to: (result at: 36).	self addAll: ((nodes at: 6) at: 37) to: (result at: 2).	self addAll: ((nodes at: 6) at: 38) to: (result at: 5).	self addAll: ((nodes at: 6) at: 39) to: (result at: 37).	self addAll: ((nodes at: 6) at: 40) to: (result at: 46).	self addAll: ((nodes at: 6) at: 41) to: (result at: 53).	self addAll: ((nodes at: 6) at: 42) to: (result at: 38).	self addAll: ((nodes at: 6) at: 43) to: (result at: 39).	self addAll: ((nodes at: 6) at: 44) to: (result at: 40).	self addAll: ((nodes at: 6) at: 45) to: (result at: 42).	self addAll: ((nodes at: 6) at: 46) to: (result at: 43).	self addAll: ((nodes at: 6) at: 47) to: (result at: 44).	self addAll: ((nodes at: 6) at: 48) to: (result at: 45).	self addAll: ((nodes at: 6) at: 49) to: (result at: 8).	self addAll: ((nodes at: 6) at: 50) to: (result at: 9).	self addAll: ((nodes at: 6) at: 51) to: (result at: 50).	self addAll: ((nodes at: 6) at: 52) to: (result at: 51).	self addAll: ((nodes at: 6) at: 53) to: (result at: 52).	self addAll: ((nodes at: 6) at: 54) to: (result at: 47).	self addAll: ((nodes at: 6) at: 55) to: (result at: 48).	self addAll: ((nodes at: 6) at: 56) to: (result at: 54).	self addAll: ((nodes at: 6) at: 57) to: (result at: 49).	self add: (nodes at: 7) to: (result at: 41).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForsubscript_head1: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	result at: 13 put: (nodes at: 2).	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).	self addAll: ((nodes at: 3) at: 3) to: (result at: 14).	self addAll: ((nodes at: 3) at: 4) to: (result at: 15).	self addAll: ((nodes at: 3) at: 5) to: (result at: 1).	self addAll: ((nodes at: 3) at: 6) to: (result at: 2).	self addAll: ((nodes at: 3) at: 7) to: (result at: 16).	self addAll: ((nodes at: 3) at: 8) to: (result at: 5).	self addAll: ((nodes at: 3) at: 9) to: (result at: 6).	self addAll: ((nodes at: 3) at: 10) to: (result at: 17).	self addAll: ((nodes at: 3) at: 11) to: (result at: 18).	self addAll: ((nodes at: 3) at: 12) to: (result at: 19).	self addAll: ((nodes at: 3) at: 13) to: (result at: 20).	self addAll: ((nodes at: 3) at: 14) to: (result at: 21).	self addAll: ((nodes at: 3) at: 15) to: (result at: 22).	self addAll: ((nodes at: 3) at: 16) to: (result at: 23).	self addAll: ((nodes at: 3) at: 17) to: (result at: 24).	self addAll: ((nodes at: 3) at: 18) to: (result at: 25).	self addAll: ((nodes at: 3) at: 19) to: (result at: 29).	self addAll: ((nodes at: 3) at: 20) to: (result at: 26).	self addAll: ((nodes at: 3) at: 21) to: (result at: 27).	self addAll: ((nodes at: 3) at: 22) to: (result at: 28).	self addAll: ((nodes at: 3) at: 23) to: (result at: 7).	self addAll: ((nodes at: 3) at: 24) to: (result at: 8).	self addAll: ((nodes at: 3) at: 25) to: (result at: 9).	self addAll: ((nodes at: 3) at: 26) to: (result at: 10).	self addAll: ((nodes at: 3) at: 27) to: (result at: 11).	self addAll: ((nodes at: 3) at: 28) to: (result at: 12).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForunion_style_enum_case_list2: nodes	| result |	result := nodes at: 3.	self addAllFirst: ((nodes at: 1) at: 1) to: (result at: 1).	self addAllFirst: ((nodes at: 1) at: 2) to: (result at: 2).	self addAllFirst: ((nodes at: 1) at: 3) to: (result at: 3).	self addAllFirst: ((nodes at: 1) at: 4) to: (result at: 4).	self addAllFirst: ((nodes at: 1) at: 5) to: (result at: 5).	self addAllFirst: ((nodes at: 1) at: 6) to: (result at: 6).	self addAllFirst: ((nodes at: 1) at: 7) to: (result at: 7).	self addAllFirst: ((nodes at: 1) at: 8) to: (result at: 8).	self addAllFirst: ((nodes at: 1) at: 9) to: (result at: 9).	self addAllFirst: ((nodes at: 1) at: 10) to: (result at: 10).	self addAllFirst: ((nodes at: 1) at: 11) to: (result at: 11).	self addAllFirst: ((nodes at: 1) at: 12) to: (result at: 12).	self addAllFirst: ((nodes at: 1) at: 13) to: (result at: 13).	self addAllFirst: ((nodes at: 1) at: 14) to: (result at: 14).	self addAllFirst: ((nodes at: 1) at: 15) to: (result at: 15).	self addAllFirst: ((nodes at: 1) at: 16) to: (result at: 16).	self addAllFirst: ((nodes at: 1) at: 17) to: (result at: 17).	self addAllFirst: ((nodes at: 1) at: 18) to: (result at: 18).	self addAllFirst: ((nodes at: 1) at: 19) to: (result at: 19).	self addAllFirst: ((nodes at: 1) at: 20) to: (result at: 20).	self addAllFirst: ((nodes at: 1) at: 21) to: (result at: 21).	self addAllFirst: ((nodes at: 1) at: 22) to: (result at: 22).	self addAllFirst: ((nodes at: 1) at: 23) to: (result at: 23).	self addAllFirst: ((nodes at: 1) at: 24) to: (result at: 24).	self addFirst: (nodes at: 2) to: (result at: 17).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForvariable_declaration3: nodes	| result |	result := SwiftVariableDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result addTokens: ((nodes at: 1) at: 13) to: result classTokens.	result addTokens: ((nodes at: 1) at: 14) to: result mutatingTokens.	result addTokens: ((nodes at: 1) at: 15) to: result nonmutatingTokens.	result addTokens: ((nodes at: 1) at: 16) to: result overrideTokens.	result addTokens: ((nodes at: 1) at: 17) to: result staticTokens.	result addTokens: ((nodes at: 1) at: 18) to: result unownedTokens.	result		addTokens: ((nodes at: 1) at: 19)		to: result unownedLeftParensafeRightParenTokens.	result		addTokens: ((nodes at: 1) at: 20)		to: result unownedLeftParenunsafeRightParenTokens.	result addTokens: ((nodes at: 1) at: 21) to: result weakTokens.	result varToken: ((nodes at: 1) at: 22).	result addToken: (nodes at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 1) to: result colonTokens.	result addTokens: ((nodes at: 3) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 3) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 3) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 3) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 3) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 3) at: 8) to: result leftBraceTokens.	result addTokens: ((nodes at: 3) at: 9) to: result rightBraceTokens.	result		addTokens: ((nodes at: 3) at: 10)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 3) at: 11)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 3) at: 12)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 3) at: 13) to: result operatorTokens.	result		addTokens: ((nodes at: 3) at: 14)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 3) at: 15) to: result periodTokens.	result		addTokens: ((nodes at: 3) at: 16)		to: result questionMarkTokens.	result addTokens: ((nodes at: 3) at: 17) to: result bangTokens.	result addTokens: ((nodes at: 3) at: 18) to: result protocolTokens.	result addTokens: ((nodes at: 3) at: 19) to: result lessThanTokens.	result addTokens: ((nodes at: 3) at: 20) to: result greaterThanTokens.	result addTokens: ((nodes at: 3) at: 21) to: result typeTokens.	result addTokens: ((nodes at: 3) at: 22) to: result commaTokens.	result		addTokens: ((nodes at: 3) at: 23)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 3) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 4) at: 1) to: result leftBraceTokens.	result addTokens: ((nodes at: 4) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 4) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 4) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 4) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 4) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 4) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 4) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 4) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 4) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 4) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 4) at: 12) to: result operatorTokens.	result getToken: ((nodes at: 4) at: 13).	result addNodes: ((nodes at: 4) at: 14) to: result blocks.	result setToken: ((nodes at: 4) at: 15).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForexpression2: nodes	| result |	result := SwiftBinaryExpressionNode new.	result addNodes: (nodes at: 2) to: result operators.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_typealias_assignment1: nodes	| result |	result := Array new: 25.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForfor_statement2: nodes	| result |	result := SwiftForStatementNode new.	result forToken: (nodes at: 1).	result leftParenToken: (nodes at: 2).	result addObjects: ((nodes at: 3) at: 1) to: result expressions.	result addTokens: ((nodes at: 3) at: 2) to: result commaTokens.	result semicolonToken: (nodes at: 4).	result testExpression: (nodes at: 5).	result semicolonToken: (nodes at: 6).	result incrementExpression: (nodes at: 7).	result rightParenToken: (nodes at: 8).	result block: (nodes at: 9).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForliteral_expression1: nodes	| result |	result := SwiftLiteralExpressionNode new.	result integer_literalToken: ((nodes at: 1) at: 1).	result floating_point_literalToken: ((nodes at: 1) at: 2).	result full_string_literalToken: ((nodes at: 1) at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForparameter1: nodes	| result |	result := Array new: 28.	result at: 1 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	result at: 2 put: (nodes at: 2).	self add: (nodes at: 3) to: (result at: 3).	self add: ((nodes at: 4) at: 1) to: (result at: 4).	self add: ((nodes at: 4) at: 2) to: (result at: 3).	self add: ((nodes at: 5) at: 1) to: (result at: 4).	self add: ((nodes at: 5) at: 2) to: (result at: 3).	self addAll: ((nodes at: 6) at: 1) to: (result at: 5).	self addAll: ((nodes at: 6) at: 2) to: (result at: 3).	self addAll: ((nodes at: 6) at: 3) to: (result at: 4).	self addAll: ((nodes at: 6) at: 4) to: (result at: 6).	self addAll: ((nodes at: 6) at: 5) to: (result at: 7).	self addAll: ((nodes at: 6) at: 6) to: (result at: 8).	self addAll: ((nodes at: 6) at: 7) to: (result at: 9).	self addAll: ((nodes at: 6) at: 8) to: (result at: 10).	self addAll: ((nodes at: 6) at: 9) to: (result at: 11).	self addAll: ((nodes at: 6) at: 10) to: (result at: 12).	self addAll: ((nodes at: 6) at: 11) to: (result at: 13).	self addAll: ((nodes at: 6) at: 12) to: (result at: 14).	self addAll: ((nodes at: 6) at: 13) to: (result at: 15).	self addAll: ((nodes at: 6) at: 14) to: (result at: 16).	self addAll: ((nodes at: 6) at: 15) to: (result at: 17).	self addAll: ((nodes at: 6) at: 16) to: (result at: 18).	self addAll: ((nodes at: 6) at: 17) to: (result at: 19).	self addAll: ((nodes at: 6) at: 18) to: (result at: 20).	self addAll: ((nodes at: 6) at: 19) to: (result at: 21).	self addAll: ((nodes at: 6) at: 20) to: (result at: 22).	self addAll: ((nodes at: 6) at: 21) to: (result at: 23).	self addAll: ((nodes at: 6) at: 22) to: (result at: 24).	self addAll: ((nodes at: 6) at: 23) to: (result at: 25).	self addAll: ((nodes at: 6) at: 24) to: (result at: 1).	result at: 26 put: ((nodes at: 7) at: 1).	result at: 27 put: ((nodes at: 7) at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForraw_value_style_enum_case_list2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 6).	self add: ((nodes at: 3) at: 1) to: (result at: 1).	self add: ((nodes at: 3) at: 2) to: (result at: 2).	self add: ((nodes at: 3) at: 3) to: (result at: 3).	self add: ((nodes at: 3) at: 4) to: (result at: 4).	self add: ((nodes at: 3) at: 5) to: (result at: 5).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForrequirement_clause1: nodes	| result |	result := Array new: 9.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 8).	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).	self addAll: ((nodes at: 2) at: 8) to: (result at: 9).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForrequirement_list2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 3).	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).	self addAll: ((nodes at: 3) at: 2) to: (result at: 2).	self addAll: ((nodes at: 3) at: 3) to: (result at: 3).	self addAll: ((nodes at: 3) at: 4) to: (result at: 4).	self addAll: ((nodes at: 3) at: 5) to: (result at: 5).	self add: ((nodes at: 3) at: 6) to: (result at: 6).	self add: ((nodes at: 3) at: 7) to: (result at: 7).	self add: ((nodes at: 3) at: 8) to: (result at: 8).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForattributes2: nodes	| result |	result := nodes at: 1.	self add: ((nodes at: 2) at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortuple_pattern_element_list2: nodes	| result |	result := nodes at: 3.	self addAllFirst: ((nodes at: 1) at: 1) to: (result at: 1).	self addAllFirst: ((nodes at: 1) at: 2) to: (result at: 2).	self addAllFirst: ((nodes at: 1) at: 3) to: (result at: 3).	self addAllFirst: ((nodes at: 1) at: 4) to: (result at: 4).	self addAllFirst: ((nodes at: 1) at: 5) to: (result at: 5).	self addAllFirst: ((nodes at: 1) at: 6) to: (result at: 6).	self addAllFirst: ((nodes at: 1) at: 7) to: (result at: 7).	self addAllFirst: ((nodes at: 1) at: 8) to: (result at: 8).	self addAllFirst: ((nodes at: 1) at: 9) to: (result at: 9).	self addAllFirst: ((nodes at: 1) at: 10) to: (result at: 10).	self addAllFirst: ((nodes at: 1) at: 11) to: (result at: 11).	self addAllFirst: ((nodes at: 1) at: 12) to: (result at: 12).	self addAllFirst: ((nodes at: 1) at: 13) to: (result at: 13).	self addAllFirst: ((nodes at: 1) at: 14) to: (result at: 14).	self addAllFirst: ((nodes at: 1) at: 15) to: (result at: 15).	self addAllFirst: ((nodes at: 1) at: 16) to: (result at: 16).	self addAllFirst: ((nodes at: 1) at: 17) to: (result at: 17).	self addAllFirst: ((nodes at: 1) at: 18) to: (result at: 18).	self addAllFirst: ((nodes at: 1) at: 19) to: (result at: 19).	self addAllFirst: ((nodes at: 1) at: 20) to: (result at: 20).	self addAllFirst: ((nodes at: 1) at: 21) to: (result at: 21).	self addAllFirst: ((nodes at: 1) at: 22) to: (result at: 22).	self addAllFirst: ((nodes at: 1) at: 23) to: (result at: 23).	self addAllFirst: ((nodes at: 1) at: 24) to: (result at: 24).	self addAllFirst: ((nodes at: 1) at: 25) to: (result at: 25).	self addAllFirst: ((nodes at: 1) at: 26) to: (result at: 26).	self addAllFirst: ((nodes at: 1) at: 27) to: (result at: 27).	self addAllFirst: ((nodes at: 1) at: 28) to: (result at: 28).	self addAllFirst: ((nodes at: 1) at: 29) to: (result at: 29).	self addFirst: (nodes at: 2) to: (result at: 22).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortype_casting_operator2: nodes	| result |	result := Array new: 4.	result at: 3 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForvariable_declaration5: nodes	| result |	result := SwiftVariableDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result addTokens: ((nodes at: 1) at: 13) to: result classTokens.	result addTokens: ((nodes at: 1) at: 14) to: result mutatingTokens.	result addTokens: ((nodes at: 1) at: 15) to: result nonmutatingTokens.	result addTokens: ((nodes at: 1) at: 16) to: result overrideTokens.	result addTokens: ((nodes at: 1) at: 17) to: result staticTokens.	result addTokens: ((nodes at: 1) at: 18) to: result unownedTokens.	result		addTokens: ((nodes at: 1) at: 19)		to: result unownedLeftParensafeRightParenTokens.	result		addTokens: ((nodes at: 1) at: 20)		to: result unownedLeftParenunsafeRightParenTokens.	result addTokens: ((nodes at: 1) at: 21) to: result weakTokens.	result varToken: ((nodes at: 1) at: 22).	result addToken: (nodes at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 1) to: result colonTokens.	result addTokens: ((nodes at: 3) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 3) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 3) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 3) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 3) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 3) at: 8) to: result leftBraceTokens.	result addTokens: ((nodes at: 3) at: 9) to: result rightBraceTokens.	result		addTokens: ((nodes at: 3) at: 10)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 3) at: 11)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 3) at: 12)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 3) at: 13) to: result operatorTokens.	result		addTokens: ((nodes at: 3) at: 14)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 3) at: 15) to: result periodTokens.	result		addTokens: ((nodes at: 3) at: 16)		to: result questionMarkTokens.	result addTokens: ((nodes at: 3) at: 17) to: result bangTokens.	result addTokens: ((nodes at: 3) at: 18) to: result protocolTokens.	result addTokens: ((nodes at: 3) at: 19) to: result lessThanTokens.	result addTokens: ((nodes at: 3) at: 20) to: result greaterThanTokens.	result addTokens: ((nodes at: 3) at: 21) to: result typeTokens.	result addTokens: ((nodes at: 3) at: 22) to: result commaTokens.	result		addTokens: ((nodes at: 3) at: 23)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 3) at: 24) to: result inoutTokens.	result equalToken: ((nodes at: 4) at: 1).	result expression: ((nodes at: 4) at: 2).	result addTokens: ((nodes at: 5) at: 1) to: result leftBraceTokens.	result addTokens: ((nodes at: 5) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 5) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 5) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 5) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 5) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 5) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 5) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 5) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 5) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 5) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 5) at: 12) to: result operatorTokens.	result willSetToken: ((nodes at: 5) at: 13).	result addNodes: ((nodes at: 5) at: 14) to: result blocks.	result didSetToken: ((nodes at: 5) at: 15).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForvariable_declaration2: nodes	| result |	result := SwiftVariableDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result addTokens: ((nodes at: 1) at: 13) to: result classTokens.	result addTokens: ((nodes at: 1) at: 14) to: result mutatingTokens.	result addTokens: ((nodes at: 1) at: 15) to: result nonmutatingTokens.	result addTokens: ((nodes at: 1) at: 16) to: result overrideTokens.	result addTokens: ((nodes at: 1) at: 17) to: result staticTokens.	result addTokens: ((nodes at: 1) at: 18) to: result unownedTokens.	result		addTokens: ((nodes at: 1) at: 19)		to: result unownedLeftParensafeRightParenTokens.	result		addTokens: ((nodes at: 1) at: 20)		to: result unownedLeftParenunsafeRightParenTokens.	result addTokens: ((nodes at: 1) at: 21) to: result weakTokens.	result varToken: ((nodes at: 1) at: 22).	result addToken: (nodes at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 1) to: result colonTokens.	result addTokens: ((nodes at: 3) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 3) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 3) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 3) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 3) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 3) at: 8) to: result leftBraceTokens.	result addTokens: ((nodes at: 3) at: 9) to: result rightBraceTokens.	result		addTokens: ((nodes at: 3) at: 10)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 3) at: 11)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 3) at: 12)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 3) at: 13) to: result operatorTokens.	result		addTokens: ((nodes at: 3) at: 14)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 3) at: 15) to: result periodTokens.	result		addTokens: ((nodes at: 3) at: 16)		to: result questionMarkTokens.	result addTokens: ((nodes at: 3) at: 17) to: result bangTokens.	result addTokens: ((nodes at: 3) at: 18) to: result protocolTokens.	result addTokens: ((nodes at: 3) at: 19) to: result lessThanTokens.	result addTokens: ((nodes at: 3) at: 20) to: result greaterThanTokens.	result addTokens: ((nodes at: 3) at: 21) to: result typeTokens.	result addTokens: ((nodes at: 3) at: 22) to: result commaTokens.	result		addTokens: ((nodes at: 3) at: 23)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 3) at: 24) to: result inoutTokens.	result addNode: (nodes at: 4) to: result blocks.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForattributes1: nodes	| result |	result := Array new: 12.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	self add: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForprotocol_declaration1: nodes	| result |	result := SwiftProtocolDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result protocolToken: (nodes at: 2).	result addToken: (nodes at: 3) to: result identifierTokens.	result colonToken: ((nodes at: 4) at: 1).	result addTokens: ((nodes at: 4) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 4) at: 3) to: result lessThanTokens.	result addTokens: ((nodes at: 4) at: 4) to: result greaterThanTokens.	result addTokens: ((nodes at: 4) at: 5) to: result periodTokens.	result addTokens: ((nodes at: 4) at: 6) to: result commaTokens.	result addToken: ((nodes at: 5) at: 1) to: result leftBraceTokens.	result addNodes: ((nodes at: 5) at: 2) to: result declarations.	result addToken: ((nodes at: 5) at: 3) to: result rightBraceTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForparenthesized_expression1: nodes	| result |	result := SwiftParenthesizedExpressionNode new.	result leftParenToken: (nodes at: 1).	result addObjects: ((nodes at: 2) at: 1) to: result expressions.	result addTokens: ((nodes at: 2) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 3) to: result colonTokens.	result addTokens: ((nodes at: 2) at: 4) to: result commaTokens.	result rightParenToken: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForpattern1: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).	self addAll: ((nodes at: 2) at: 13) to: (result at: 13).	self addAll: ((nodes at: 2) at: 14) to: (result at: 14).	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).	self addAll: ((nodes at: 2) at: 20) to: (result at: 20).	self addAll: ((nodes at: 2) at: 21) to: (result at: 21).	self addAll: ((nodes at: 2) at: 22) to: (result at: 22).	self addAll: ((nodes at: 2) at: 23) to: (result at: 23).	self addAll: ((nodes at: 2) at: 24) to: (result at: 24).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForunion_style_enum_member2: nodes	| result |	result := Array new: 57.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 33 put: (OrderedCollection new: 2).	result at: 34 put: (OrderedCollection new: 2).	result at: 35 put: (OrderedCollection new: 2).	result at: 36 put: (OrderedCollection new: 2).	result at: 37 put: (OrderedCollection new: 2).	result at: 38 put: (OrderedCollection new: 2).	result at: 39 put: (OrderedCollection new: 2).	result at: 40 put: (OrderedCollection new: 2).	result at: 41 put: (OrderedCollection new: 2).	result at: 42 put: (OrderedCollection new: 2).	result at: 43 put: (OrderedCollection new: 2).	result at: 44 put: (OrderedCollection new: 2).	result at: 45 put: (OrderedCollection new: 2).	result at: 46 put: (OrderedCollection new: 2).	result at: 47 put: (OrderedCollection new: 2).	result at: 48 put: (OrderedCollection new: 2).	result at: 49 put: (OrderedCollection new: 2).	result at: 50 put: (OrderedCollection new: 2).	result at: 51 put: (OrderedCollection new: 2).	result at: 52 put: (OrderedCollection new: 2).	result at: 53 put: (OrderedCollection new: 2).	result at: 54 put: (OrderedCollection new: 2).	result at: 55 put: (OrderedCollection new: 2).	result at: 56 put: (OrderedCollection new: 2).	result at: 57 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	self add: ((nodes at: 1) at: 13) to: (result at: 57).	self addAll: ((nodes at: 1) at: 14) to: (result at: 41).	self addAll: ((nodes at: 1) at: 15) to: (result at: 33).	self addAll: ((nodes at: 1) at: 16) to: (result at: 34).	self addAll: ((nodes at: 1) at: 17) to: (result at: 21).	self addAll: ((nodes at: 1) at: 18) to: (result at: 35).	self addAll: ((nodes at: 1) at: 19) to: (result at: 36).	self addAll: ((nodes at: 1) at: 20) to: (result at: 18).	self addAll: ((nodes at: 1) at: 21) to: (result at: 37).	self addAll: ((nodes at: 1) at: 22) to: (result at: 38).	self addAll: ((nodes at: 1) at: 23) to: (result at: 39).	self addAll: ((nodes at: 1) at: 24) to: (result at: 32).	self addAll: ((nodes at: 1) at: 25) to: (result at: 40).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordeclaration_specifier5: nodes	| result |	result := Array new: 9.	result at: 5 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForattribute1: nodes	| result |	result := Array new: 12.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self add: (nodes at: 2) to: (result at: 2).	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).	self addAll: ((nodes at: 3) at: 3) to: (result at: 5).	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).	self addAll: ((nodes at: 3) at: 5) to: (result at: 7).	self addAll: ((nodes at: 3) at: 6) to: (result at: 8).	self addAll: ((nodes at: 3) at: 7) to: (result at: 2).	self addAll: ((nodes at: 3) at: 8) to: (result at: 9).	self addAll: ((nodes at: 3) at: 9) to: (result at: 10).	self addAll: ((nodes at: 3) at: 10) to: (result at: 11).	self addAll: ((nodes at: 3) at: 11) to: (result at: 12).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForliteral2: nodes	| result |	result := Array new: 3.	result at: 2 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_generic_argument_clause1: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForpattern6: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 28).	self addAll: ((nodes at: 1) at: 2) to: (result at: 6).	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).	self addAll: ((nodes at: 1) at: 4) to: (result at: 2).	self addAll: ((nodes at: 1) at: 5) to: (result at: 14).	self addAll: ((nodes at: 1) at: 6) to: (result at: 15).	self addAll: ((nodes at: 1) at: 7) to: (result at: 4).	self addAll: ((nodes at: 1) at: 8) to: (result at: 5).	self addAll: ((nodes at: 1) at: 9) to: (result at: 16).	self addAll: ((nodes at: 1) at: 10) to: (result at: 17).	self addAll: ((nodes at: 1) at: 11) to: (result at: 18).	self addAll: ((nodes at: 1) at: 12) to: (result at: 19).	self addAll: ((nodes at: 1) at: 13) to: (result at: 20).	self addAll: ((nodes at: 1) at: 14) to: (result at: 21).	self addAll: ((nodes at: 1) at: 15) to: (result at: 3).	self addAll: ((nodes at: 1) at: 16) to: (result at: 22).	self addAll: ((nodes at: 1) at: 17) to: (result at: 23).	self addAll: ((nodes at: 1) at: 18) to: (result at: 1).	self addAll: ((nodes at: 1) at: 19) to: (result at: 24).	self addAll: ((nodes at: 1) at: 20) to: (result at: 8).	self addAll: ((nodes at: 1) at: 21) to: (result at: 9).	self addAll: ((nodes at: 1) at: 22) to: (result at: 10).	self addAll: ((nodes at: 1) at: 23) to: (result at: 11).	self addAll: ((nodes at: 1) at: 24) to: (result at: 12).	self addAll: ((nodes at: 1) at: 25) to: (result at: 13).	self addAll: ((nodes at: 1) at: 26) to: (result at: 25).	self addAll: ((nodes at: 1) at: 27) to: (result at: 26).	self addAll: ((nodes at: 1) at: 28) to: (result at: 27).	self addAll: ((nodes at: 1) at: 29) to: (result at: 29).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_protocol_identifier_list2: nodes	| result |	result := Array new: 5.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 5).	self addAll: ((nodes at: 1) at: 4) to: (result at: 3).	self addAll: ((nodes at: 1) at: 5) to: (result at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortuple_type_body1: nodes	| result |	result := Array new: 24.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 6).	self addAll: ((nodes at: 1) at: 6) to: (result at: 7).	self addAll: ((nodes at: 1) at: 7) to: (result at: 19).	self addAll: ((nodes at: 1) at: 8) to: (result at: 20).	self addAll: ((nodes at: 1) at: 9) to: (result at: 21).	self addAll: ((nodes at: 1) at: 10) to: (result at: 22).	self addAll: ((nodes at: 1) at: 11) to: (result at: 23).	self addAll: ((nodes at: 1) at: 12) to: (result at: 24).	self addAll: ((nodes at: 1) at: 13) to: (result at: 5).	self addAll: ((nodes at: 1) at: 14) to: (result at: 8).	self addAll: ((nodes at: 1) at: 15) to: (result at: 9).	self addAll: ((nodes at: 1) at: 16) to: (result at: 10).	self addAll: ((nodes at: 1) at: 17) to: (result at: 11).	self addAll: ((nodes at: 1) at: 18) to: (result at: 12).	self addAll: ((nodes at: 1) at: 19) to: (result at: 13).	self addAll: ((nodes at: 1) at: 20) to: (result at: 14).	self addAll: ((nodes at: 1) at: 21) to: (result at: 15).	self addAll: ((nodes at: 1) at: 22) to: (result at: 16).	self addAll: ((nodes at: 1) at: 23) to: (result at: 17).	self addAll: ((nodes at: 1) at: 24) to: (result at: 18).	self add: (nodes at: 2) to: (result at: 18).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForconstant_declaration1: nodes	| result |	result := SwiftConstantDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result addTokens: ((nodes at: 2) at: 1) to: result classTokens.	result addTokens: ((nodes at: 2) at: 2) to: result mutatingTokens.	result addTokens: ((nodes at: 2) at: 3) to: result nonmutatingTokens.	result addTokens: ((nodes at: 2) at: 4) to: result overrideTokens.	result addTokens: ((nodes at: 2) at: 5) to: result staticTokens.	result addTokens: ((nodes at: 2) at: 6) to: result unownedTokens.	result		addTokens: ((nodes at: 2) at: 7)		to: result unownedLeftParensafeRightParenTokens.	result		addTokens: ((nodes at: 2) at: 8)		to: result unownedLeftParenunsafeRightParenTokens.	result addTokens: ((nodes at: 2) at: 9) to: result weakTokens.	result letToken: (nodes at: 3).	result addNodes: ((nodes at: 4) at: 1) to: result inializers.	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForclass_declaration1: nodes	| result |	result := SwiftClassDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result classToken: (nodes at: 2).	result addToken: (nodes at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 4) at: 1) to: result lessThanTokens.	result addTokens: ((nodes at: 4) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 4) at: 3) to: result colonTokens.	result addTokens: ((nodes at: 4) at: 4) to: result commaTokens.	result addTokens: ((nodes at: 4) at: 5) to: result greaterThanTokens.	result addTokens: ((nodes at: 4) at: 6) to: result periodTokens.	result addTokens: ((nodes at: 4) at: 7) to: result protocolTokens.	result whereToken: ((nodes at: 4) at: 8).	result addTokens: ((nodes at: 4) at: 9) to: result equalEqualTokens.	result addToken: ((nodes at: 5) at: 1) to: result colonTokens.	result addTokens: ((nodes at: 5) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 5) at: 3) to: result lessThanTokens.	result addTokens: ((nodes at: 5) at: 4) to: result greaterThanTokens.	result addTokens: ((nodes at: 5) at: 5) to: result periodTokens.	result addTokens: ((nodes at: 5) at: 6) to: result commaTokens.	result addToken: ((nodes at: 6) at: 1) to: result leftBraceTokens.	result addNodes: ((nodes at: 6) at: 2) to: result declarations.	result addToken: ((nodes at: 6) at: 3) to: result rightBraceTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_statements1: nodes	| result |	result := OrderedCollection new: 2.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForis_pattern1: nodes	| result |	result := Array new: 25.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortype_inheritance_list1: nodes	| result |	result := Array new: 5.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForvalue_binding_pattern2: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 26).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).	self addAll: ((nodes at: 2) at: 7) to: (result at: 8).	self addAll: ((nodes at: 2) at: 8) to: (result at: 9).	self addAll: ((nodes at: 2) at: 9) to: (result at: 10).	self addAll: ((nodes at: 2) at: 10) to: (result at: 11).	self addAll: ((nodes at: 2) at: 11) to: (result at: 12).	self addAll: ((nodes at: 2) at: 12) to: (result at: 13).	self addAll: ((nodes at: 2) at: 13) to: (result at: 14).	self addAll: ((nodes at: 2) at: 14) to: (result at: 15).	self addAll: ((nodes at: 2) at: 15) to: (result at: 16).	self addAll: ((nodes at: 2) at: 16) to: (result at: 17).	self addAll: ((nodes at: 2) at: 17) to: (result at: 18).	self addAll: ((nodes at: 2) at: 18) to: (result at: 19).	self addAll: ((nodes at: 2) at: 19) to: (result at: 20).	self addAll: ((nodes at: 2) at: 20) to: (result at: 21).	self addAll: ((nodes at: 2) at: 21) to: (result at: 22).	self addAll: ((nodes at: 2) at: 22) to: (result at: 23).	self addAll: ((nodes at: 2) at: 23) to: (result at: 24).	self addAll: ((nodes at: 2) at: 24) to: (result at: 25).	self addAll: ((nodes at: 2) at: 25) to: (result at: 1).	self addAll: ((nodes at: 2) at: 26) to: (result at: 26).	self addAll: ((nodes at: 2) at: 27) to: (result at: 27).	self addAll: ((nodes at: 2) at: 28) to: (result at: 28).	self addAll: ((nodes at: 2) at: 29) to: (result at: 29).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForprefix_operator_declaration1: nodes	| result |	result := SwiftPrefixOperatorDeclarationNode new.	result addToken: (nodes at: 1) to: result operatorTokens.	result prefixToken: (nodes at: 2).	result addToken: (nodes at: 3) to: result operatorTokens.	result leftBraceToken: (nodes at: 4).	result rightBraceToken: (nodes at: 5).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordeclaration_specifier8: nodes	| result |	result := Array new: 9.	result at: 8 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForfor_init1: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForliteral_expression4: nodes	| result |	result := SwiftLiteralExpressionNode new.	result __FILE__Token: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForparameter_list1: nodes	| result |	result := Array new: 28.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self add: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 23).	self addAll: ((nodes at: 1) at: 11) to: (result at: 24).	self addAll: ((nodes at: 1) at: 12) to: (result at: 25).	self addAll: ((nodes at: 1) at: 13) to: (result at: 26).	self addAll: ((nodes at: 1) at: 14) to: (result at: 27).	self addAll: ((nodes at: 1) at: 15) to: (result at: 28).	self addAll: ((nodes at: 1) at: 16) to: (result at: 10).	self addAll: ((nodes at: 1) at: 17) to: (result at: 11).	self addAll: ((nodes at: 1) at: 18) to: (result at: 12).	self addAll: ((nodes at: 1) at: 19) to: (result at: 13).	self addAll: ((nodes at: 1) at: 20) to: (result at: 14).	self addAll: ((nodes at: 1) at: 21) to: (result at: 15).	self addAll: ((nodes at: 1) at: 22) to: (result at: 16).	self addAll: ((nodes at: 1) at: 23) to: (result at: 17).	self addAll: ((nodes at: 1) at: 24) to: (result at: 18).	self addAll: ((nodes at: 1) at: 25) to: (result at: 19).	self add: ((nodes at: 1) at: 26) to: (result at: 20).	self add: ((nodes at: 1) at: 27) to: (result at: 21).	self add: ((nodes at: 1) at: 28) to: (result at: 22).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForcapture_specifier1: nodes	| result |	result := Array new: 4.	result at: 1 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_type_inheritance_clause1: nodes	| result |	result := Array new: 6.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForexpression_element_list2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForimport_kind1: nodes	| result |	result := Array new: 7.	result at: 1 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForstatement3: nodes	| result |	result := nodes at: 1.	result semicolonToken: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForswitch_statement1: nodes	| result |	result := SwiftSwitchStatementNode new.	result switchToken: (nodes at: 1).	result addObject: (nodes at: 2) to: result expressions.	result addToken: (nodes at: 3) to: result leftBraceTokens.	result addTokens: ((nodes at: 4) at: 1) to: result caseTokens.	result addTokens: ((nodes at: 4) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 4) at: 3) to: result colonTokens.	result addTokens: ((nodes at: 4) at: 4) to: result identifierTokens.	result addTokens: ((nodes at: 4) at: 5) to: result leftParenTokens.	result addTokens: ((nodes at: 4) at: 6) to: result rightParenTokens.	result addTokens: ((nodes at: 4) at: 7) to: result leftBracketTokens.	result addTokens: ((nodes at: 4) at: 8) to: result rightBracketTokens.	result		addTokens: ((nodes at: 4) at: 9)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 4) at: 10) to: result periodTokens.	result		addTokens: ((nodes at: 4) at: 11)		to: result questionMarkTokens.	result addTokens: ((nodes at: 4) at: 12) to: result bangTokens.	result addTokens: ((nodes at: 4) at: 13) to: result protocolTokens.	result addTokens: ((nodes at: 4) at: 14) to: result lessThanTokens.	result addTokens: ((nodes at: 4) at: 15) to: result greaterThanTokens.	result addTokens: ((nodes at: 4) at: 16) to: result typeTokens.	result addTokens: ((nodes at: 4) at: 17) to: result commaTokens.	result		addTokens: ((nodes at: 4) at: 18)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 4) at: 19) to: result varTokens.	result addTokens: ((nodes at: 4) at: 20) to: result letTokens.	result addObjects: ((nodes at: 4) at: 21) to: result expressions.	result addTokens: ((nodes at: 4) at: 22) to: result isTokens.	result addTokens: ((nodes at: 4) at: 23) to: result asTokens.	result addTokens: ((nodes at: 4) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 4) at: 25) to: result whereTokens.	result addNodes: ((nodes at: 4) at: 26) to: result statements.	result addTokens: ((nodes at: 4) at: 27) to: result semicolonToken.	result addTokens: ((nodes at: 4) at: 28) to: result defaultTokens.	result addTokens: ((nodes at: 4) at: 29) to: result leftBraceTokens.	result addTokens: ((nodes at: 4) at: 30) to: result rightBraceTokens.	result		addTokens: ((nodes at: 4) at: 31)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 4) at: 32)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 4) at: 33)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 4) at: 34) to: result operatorTokens.	result addToken: (nodes at: 5) to: result rightBraceTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortypealias_head1: nodes	| result |	result := Array new: 2.	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForpostfix_operator_declaration1: nodes	| result |	result := SwiftPostfixOperatorDeclarationNode new.	result addToken: (nodes at: 1) to: result operatorTokens.	result postfixToken: (nodes at: 2).	result addToken: (nodes at: 3) to: result operatorTokens.	result leftBraceToken: (nodes at: 4).	result rightBraceToken: (nodes at: 5).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForunion_style_enum_members2: nodes	| result |	result := nodes at: 2.	self addAllFirst: ((nodes at: 1) at: 1) to: (result at: 1).	self addAllFirst: ((nodes at: 1) at: 2) to: (result at: 2).	self addAllFirst: ((nodes at: 1) at: 3) to: (result at: 3).	self addAllFirst: ((nodes at: 1) at: 4) to: (result at: 4).	self addAllFirst: ((nodes at: 1) at: 5) to: (result at: 5).	self addAllFirst: ((nodes at: 1) at: 6) to: (result at: 6).	self addAllFirst: ((nodes at: 1) at: 7) to: (result at: 7).	self addAllFirst: ((nodes at: 1) at: 8) to: (result at: 8).	self addAllFirst: ((nodes at: 1) at: 9) to: (result at: 9).	self addAllFirst: ((nodes at: 1) at: 10) to: (result at: 10).	self addAllFirst: ((nodes at: 1) at: 11) to: (result at: 11).	self addAllFirst: ((nodes at: 1) at: 12) to: (result at: 12).	self addAllFirst: ((nodes at: 1) at: 13) to: (result at: 13).	self addAllFirst: ((nodes at: 1) at: 14) to: (result at: 14).	self addAllFirst: ((nodes at: 1) at: 15) to: (result at: 15).	self addAllFirst: ((nodes at: 1) at: 16) to: (result at: 16).	self addAllFirst: ((nodes at: 1) at: 17) to: (result at: 17).	self addAllFirst: ((nodes at: 1) at: 18) to: (result at: 18).	self addAllFirst: ((nodes at: 1) at: 19) to: (result at: 19).	self addAllFirst: ((nodes at: 1) at: 20) to: (result at: 20).	self addAllFirst: ((nodes at: 1) at: 21) to: (result at: 21).	self addAllFirst: ((nodes at: 1) at: 22) to: (result at: 22).	self addAllFirst: ((nodes at: 1) at: 23) to: (result at: 23).	self addAllFirst: ((nodes at: 1) at: 24) to: (result at: 24).	self addAllFirst: ((nodes at: 1) at: 25) to: (result at: 25).	self addAllFirst: ((nodes at: 1) at: 26) to: (result at: 26).	self addAllFirst: ((nodes at: 1) at: 27) to: (result at: 27).	self addAllFirst: ((nodes at: 1) at: 28) to: (result at: 28).	self addAllFirst: ((nodes at: 1) at: 29) to: (result at: 29).	self addAllFirst: ((nodes at: 1) at: 30) to: (result at: 30).	self addAllFirst: ((nodes at: 1) at: 31) to: (result at: 31).	self addAllFirst: ((nodes at: 1) at: 32) to: (result at: 32).	self addAllFirst: ((nodes at: 1) at: 33) to: (result at: 33).	self addAllFirst: ((nodes at: 1) at: 34) to: (result at: 34).	self addAllFirst: ((nodes at: 1) at: 35) to: (result at: 35).	self addAllFirst: ((nodes at: 1) at: 36) to: (result at: 36).	self addAllFirst: ((nodes at: 1) at: 37) to: (result at: 37).	self addAllFirst: ((nodes at: 1) at: 38) to: (result at: 38).	self addAllFirst: ((nodes at: 1) at: 39) to: (result at: 39).	self addAllFirst: ((nodes at: 1) at: 40) to: (result at: 40).	self addAllFirst: ((nodes at: 1) at: 41) to: (result at: 41).	self addAllFirst: ((nodes at: 1) at: 42) to: (result at: 42).	self addAllFirst: ((nodes at: 1) at: 43) to: (result at: 43).	self addAllFirst: ((nodes at: 1) at: 44) to: (result at: 44).	self addAllFirst: ((nodes at: 1) at: 45) to: (result at: 45).	self addAllFirst: ((nodes at: 1) at: 46) to: (result at: 46).	self addAllFirst: ((nodes at: 1) at: 47) to: (result at: 47).	self addAllFirst: ((nodes at: 1) at: 48) to: (result at: 48).	self addAllFirst: ((nodes at: 1) at: 49) to: (result at: 49).	self addAllFirst: ((nodes at: 1) at: 50) to: (result at: 50).	self addAllFirst: ((nodes at: 1) at: 51) to: (result at: 51).	self addAllFirst: ((nodes at: 1) at: 52) to: (result at: 52).	self addAllFirst: ((nodes at: 1) at: 53) to: (result at: 53).	self addAllFirst: ((nodes at: 1) at: 54) to: (result at: 54).	self addAllFirst: ((nodes at: 1) at: 55) to: (result at: 55).	self addAllFirst: ((nodes at: 1) at: 56) to: (result at: 56).	self addAllFirst: ((nodes at: 1) at: 57) to: (result at: 57).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForimport_kind3: nodes	| result |	result := Array new: 7.	result at: 3 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForliteral1: nodes	| result |	result := Array new: 3.	result at: 1 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForgetter_setter_keyword_block1: nodes	| result |	result := Array new: 14.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).	self addAll: ((nodes at: 2) at: 7) to: (result at: 1).	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).	result at: 13 put: ((nodes at: 2) at: 13).	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).	self addAll: ((nodes at: 3) at: 3) to: (result at: 4).	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).	self addAll: ((nodes at: 3) at: 7) to: (result at: 1).	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).	result at: 14 put: ((nodes at: 3) at: 13).	self add: (nodes at: 4) to: (result at: 8).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForsuperclass_initializer_expression1: nodes	| result |	result := SwiftSuperclassInitializerExpressionNode new.	result superToken: (nodes at: 1).	result periodToken: (nodes at: 2).	result initToken: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordeclaration_specifier2: nodes	| result |	result := Array new: 9.	result at: 2 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFormetatype_type1: nodes	| result |	result := SwiftMetatypeTypeNode new.	result addToken: (nodes at: 2) to: result periodTokens.	result addToken: (nodes at: 3) to: result typeTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_array_literal_items1: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForattribute_argument_clause1: nodes	| result |	result := nodes at: 2.	self addFirst: (nodes at: 1) to: (result at: 1).	self add: (nodes at: 3) to: (result at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForpostfix_expression1: nodes	| result |	result := Array new: 43.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 33 put: (OrderedCollection new: 2).	result at: 34 put: (OrderedCollection new: 2).	result at: 35 put: (OrderedCollection new: 2).	result at: 36 put: (OrderedCollection new: 2).	result at: 42 put: (OrderedCollection new: 2).	result at: 43 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForenum_declaration2: nodes	| result |	result := SwiftEnumDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result addTokens: ((nodes at: 2) at: 1) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 2) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 3) to: result colonTokens.	result addTokens: ((nodes at: 2) at: 4) to: result commaTokens.	result addTokens: ((nodes at: 2) at: 5) to: result greaterThanTokens.	result addTokens: ((nodes at: 2) at: 6) to: result periodTokens.	result addTokens: ((nodes at: 2) at: 7) to: result protocolTokens.	result addTokens: ((nodes at: 2) at: 8) to: result whereTokens.	result addTokens: ((nodes at: 2) at: 9) to: result equalEqualTokens.	result addTokens: ((nodes at: 2) at: 10) to: result leftBraceTokens.	result addTokens: ((nodes at: 2) at: 11) to: result _Tokens.	result addTokens: ((nodes at: 2) at: 12) to: result leftParenTokens.	result addTokens: ((nodes at: 2) at: 13) to: result rightParenTokens.	result addTokens: ((nodes at: 2) at: 14) to: result importTokens.	result addTokens: ((nodes at: 2) at: 15) to: result typealiasTokens.	result addTokens: ((nodes at: 2) at: 16) to: result structTokens.	result addTokens: ((nodes at: 2) at: 17) to: result classTokens.	result addTokens: ((nodes at: 2) at: 18) to: result enumTokens.	result addTokens: ((nodes at: 2) at: 19) to: result varTokens.	result addTokens: ((nodes at: 2) at: 20) to: result funcTokens.	result addTokens: ((nodes at: 2) at: 21) to: result operatorTokens.	result addTokens: ((nodes at: 2) at: 22) to: result mutatingTokens.	result addTokens: ((nodes at: 2) at: 23) to: result nonmutatingTokens.	result addTokens: ((nodes at: 2) at: 24) to: result overrideTokens.	result addTokens: ((nodes at: 2) at: 25) to: result staticTokens.	result addTokens: ((nodes at: 2) at: 26) to: result unownedTokens.	result		addTokens: ((nodes at: 2) at: 27)		to: result unownedLeftParensafeRightParenTokens.	result		addTokens: ((nodes at: 2) at: 28)		to: result unownedLeftParenunsafeRightParenTokens.	result addTokens: ((nodes at: 2) at: 29) to: result weakTokens.	result addTokens: ((nodes at: 2) at: 30) to: result letTokens.	result addNodes: ((nodes at: 2) at: 31) to: result inializers.	result addTokens: ((nodes at: 2) at: 32) to: result leftBracketTokens.	result		addTokens: ((nodes at: 2) at: 33)		to: result rightBracketTokens.	result		addTokens: ((nodes at: 2) at: 34)		to: result minusGreaterThanTokens.	result		addTokens: ((nodes at: 2) at: 35)		to: result questionMarkTokens.	result addTokens: ((nodes at: 2) at: 36) to: result bangTokens.	result addTokens: ((nodes at: 2) at: 37) to: result typeTokens.	result addNodes: ((nodes at: 2) at: 38) to: result blocks.	result addTokens: ((nodes at: 2) at: 39) to: result getTokens.	result addTokens: ((nodes at: 2) at: 40) to: result setTokens.	result addTokens: ((nodes at: 2) at: 41) to: result rightBraceTokens.	result addTokens: ((nodes at: 2) at: 42) to: result equalTokens.	result addObjects: ((nodes at: 2) at: 43) to: result expressions.	result addTokens: ((nodes at: 2) at: 44) to: result willSetTokens.	result addTokens: ((nodes at: 2) at: 45) to: result didSetTokens.	result		addTokens: ((nodes at: 2) at: 46)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 2) at: 47) to: result deinitTokens.	result addTokens: ((nodes at: 2) at: 48) to: result extensionTokens.	result addTokens: ((nodes at: 2) at: 49) to: result caseTokens.	result addNodes: ((nodes at: 2) at: 50) to: result declarations.	result addTokens: ((nodes at: 2) at: 51) to: result convenienceTokens.	result addTokens: ((nodes at: 2) at: 52) to: result initTokens.	result addTokens: ((nodes at: 2) at: 53) to: result inoutTokens.	result addTokens: ((nodes at: 2) at: 54) to: result subscriptTokens.	result		addTokens: ((nodes at: 2) at: 55)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 2) at: 56)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 2) at: 57)		to: result full_string_literalTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForinitializer_declaration1: nodes	| result |	result := SwiftInitializerDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result convenienceToken: ((nodes at: 1) at: 13).	result initToken: ((nodes at: 1) at: 14).	result addTokens: ((nodes at: 2) at: 1) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 3) to: result colonTokens.	result addTokens: ((nodes at: 2) at: 4) to: result commaTokens.	result addTokens: ((nodes at: 2) at: 5) to: result greaterThanTokens.	result addTokens: ((nodes at: 2) at: 6) to: result periodTokens.	result addTokens: ((nodes at: 2) at: 7) to: result protocolTokens.	result whereToken: ((nodes at: 2) at: 8).	result addTokens: ((nodes at: 2) at: 9) to: result equalEqualTokens.	result addTokens: ((nodes at: 3) at: 1) to: result leftParenTokens.	result addTokens: ((nodes at: 3) at: 2) to: result rightParenTokens.	result addTokens: ((nodes at: 3) at: 3) to: result inoutTokens.	result addTokens: ((nodes at: 3) at: 4) to: result letTokens.	result addTokens: ((nodes at: 3) at: 5) to: result _Tokens.	result addTokens: ((nodes at: 3) at: 6) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 7) to: result colonTokens.	result addTokens: ((nodes at: 3) at: 8) to: result leftBracketTokens.	result addTokens: ((nodes at: 3) at: 9) to: result rightBracketTokens.	result		addTokens: ((nodes at: 3) at: 10)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 3) at: 11) to: result periodTokens.	result		addTokens: ((nodes at: 3) at: 12)		to: result questionMarkTokens.	result addTokens: ((nodes at: 3) at: 13) to: result bangTokens.	result addTokens: ((nodes at: 3) at: 14) to: result protocolTokens.	result addTokens: ((nodes at: 3) at: 15) to: result lessThanTokens.	result addTokens: ((nodes at: 3) at: 16) to: result greaterThanTokens.	result addTokens: ((nodes at: 3) at: 17) to: result typeTokens.	result addTokens: ((nodes at: 3) at: 18) to: result commaTokens.	result		addTokens: ((nodes at: 3) at: 19)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 3) at: 20) to: result equalTokens.	result addObjects: ((nodes at: 3) at: 21) to: result expressions.	result addTokens: ((nodes at: 3) at: 22) to: result varTokens.	result addTokens: ((nodes at: 3) at: 23) to: result leftBraceTokens.	result addTokens: ((nodes at: 3) at: 24) to: result rightBraceTokens.	result		addTokens: ((nodes at: 3) at: 25)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 3) at: 26)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 3) at: 27)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 3) at: 28) to: result operatorTokens.	result block: (nodes at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForraw_value_style_enum_member2: nodes	| result |	result := Array new: 57.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 33 put: (OrderedCollection new: 2).	result at: 34 put: (OrderedCollection new: 2).	result at: 35 put: (OrderedCollection new: 2).	result at: 36 put: (OrderedCollection new: 2).	result at: 37 put: (OrderedCollection new: 2).	result at: 38 put: (OrderedCollection new: 2).	result at: 39 put: (OrderedCollection new: 2).	result at: 40 put: (OrderedCollection new: 2).	result at: 41 put: (OrderedCollection new: 2).	result at: 42 put: (OrderedCollection new: 2).	result at: 43 put: (OrderedCollection new: 2).	result at: 44 put: (OrderedCollection new: 2).	result at: 45 put: (OrderedCollection new: 2).	result at: 46 put: (OrderedCollection new: 2).	result at: 47 put: (OrderedCollection new: 2).	result at: 48 put: (OrderedCollection new: 2).	result at: 49 put: (OrderedCollection new: 2).	result at: 50 put: (OrderedCollection new: 2).	result at: 51 put: (OrderedCollection new: 2).	result at: 52 put: (OrderedCollection new: 2).	result at: 53 put: (OrderedCollection new: 2).	result at: 54 put: (OrderedCollection new: 2).	result at: 55 put: (OrderedCollection new: 2).	result at: 56 put: (OrderedCollection new: 2).	result at: 57 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	self add: ((nodes at: 1) at: 13) to: (result at: 57).	self addAll: ((nodes at: 1) at: 14) to: (result at: 45).	self addAll: ((nodes at: 1) at: 15) to: (result at: 32).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForwhile_statement1: nodes	| result |	result := SwiftWhileStatementNode new.	result whileToken: (nodes at: 1).	result expression: (nodes at: 2).	result block: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordeinitializer_declaration1: nodes	| result |	result := SwiftDeinitializerDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result deinitToken: (nodes at: 2).	result block: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForswitch_case4: nodes	| result |	result := Array new: 34.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 34 put: ((nodes at: 1) at: 1).	self add: ((nodes at: 1) at: 2) to: (result at: 3).	result at: 33 put: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForparameter_clause2: nodes	| result |	result := Array new: 28.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).	self addAll: ((nodes at: 2) at: 3) to: (result at: 5).	self addAll: ((nodes at: 2) at: 4) to: (result at: 6).	self addAll: ((nodes at: 2) at: 5) to: (result at: 7).	self addAll: ((nodes at: 2) at: 6) to: (result at: 1).	self addAll: ((nodes at: 2) at: 7) to: (result at: 2).	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).	self addAll: ((nodes at: 2) at: 13) to: (result at: 13).	self addAll: ((nodes at: 2) at: 14) to: (result at: 14).	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).	self addAll: ((nodes at: 2) at: 20) to: (result at: 20).	self addAll: ((nodes at: 2) at: 21) to: (result at: 21).	self addAll: ((nodes at: 2) at: 22) to: (result at: 22).	self addAll: ((nodes at: 2) at: 23) to: (result at: 23).	self addAll: ((nodes at: 2) at: 24) to: (result at: 24).	self addAll: ((nodes at: 2) at: 25) to: (result at: 25).	self addAll: ((nodes at: 2) at: 26) to: (result at: 26).	self addAll: ((nodes at: 2) at: 27) to: (result at: 27).	self addAll: ((nodes at: 2) at: 28) to: (result at: 28).	self add: (nodes at: 3) to: (result at: 19).	self add: (nodes at: 4) to: (result at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForswitch_case2: nodes	| result |	result := Array new: 34.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 1 put: ((nodes at: 1) at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	self addAll: ((nodes at: 1) at: 13) to: (result at: 13).	self addAll: ((nodes at: 1) at: 14) to: (result at: 14).	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).	self addAll: ((nodes at: 1) at: 16) to: (result at: 16).	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).	self addAll: ((nodes at: 1) at: 20) to: (result at: 20).	self addAll: ((nodes at: 1) at: 21) to: (result at: 21).	self addAll: ((nodes at: 1) at: 22) to: (result at: 22).	self addAll: ((nodes at: 1) at: 23) to: (result at: 23).	self addAll: ((nodes at: 1) at: 24) to: (result at: 24).	self addAll: ((nodes at: 1) at: 25) to: (result at: 25).	self addAll: ((nodes at: 1) at: 26) to: (result at: 26).	self addAll: ((nodes at: 1) at: 27) to: (result at: 27).	self addAll: ((nodes at: 1) at: 28) to: (result at: 28).	self addAll: ((nodes at: 1) at: 29) to: (result at: 29).	self addAll: ((nodes at: 1) at: 30) to: (result at: 30).	self addAll: ((nodes at: 1) at: 31) to: (result at: 31).	result at: 33 put: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordictionary_literal1: nodes	| result |	result := Array new: 6.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).	result at: 6 put: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForprotocol_subscript_declaration1: nodes	| result |	result := SwiftProtocolSubscriptDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result subscriptToken: ((nodes at: 1) at: 13).	result addTokens: ((nodes at: 1) at: 14) to: result inoutTokens.	result addTokens: ((nodes at: 1) at: 15) to: result letTokens.	result addTokens: ((nodes at: 1) at: 16) to: result colonTokens.	result		addTokens: ((nodes at: 1) at: 17)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 1) at: 18) to: result periodTokens.	result		addTokens: ((nodes at: 1) at: 19)		to: result questionMarkTokens.	result addTokens: ((nodes at: 1) at: 20) to: result bangTokens.	result addTokens: ((nodes at: 1) at: 21) to: result protocolTokens.	result addTokens: ((nodes at: 1) at: 22) to: result lessThanTokens.	result addTokens: ((nodes at: 1) at: 23) to: result greaterThanTokens.	result addTokens: ((nodes at: 1) at: 24) to: result typeTokens.	result addTokens: ((nodes at: 1) at: 25) to: result commaTokens.	result addTokens: ((nodes at: 1) at: 26) to: result equalTokens.	result addObjects: ((nodes at: 1) at: 27) to: result expressions.	result addTokens: ((nodes at: 1) at: 28) to: result varTokens.	result		addTokens: ((nodes at: 1) at: 29)		to: result periodPeriodPeriodTokens.	result		addTokens: ((nodes at: 2) at: 1)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 2) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 2) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 2) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 2) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 2) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 2) at: 8) to: result leftBraceTokens.	result addTokens: ((nodes at: 2) at: 9) to: result rightBraceTokens.	result		addTokens: ((nodes at: 2) at: 10)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 2) at: 11)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 2) at: 12)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 2) at: 13) to: result operatorTokens.	result addTokens: ((nodes at: 2) at: 14) to: result colonTokens.	result addTokens: ((nodes at: 2) at: 15) to: result periodTokens.	result		addTokens: ((nodes at: 2) at: 16)		to: result questionMarkTokens.	result addTokens: ((nodes at: 2) at: 17) to: result bangTokens.	result addTokens: ((nodes at: 2) at: 18) to: result protocolTokens.	result addTokens: ((nodes at: 2) at: 19) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 20) to: result greaterThanTokens.	result addTokens: ((nodes at: 2) at: 21) to: result typeTokens.	result addTokens: ((nodes at: 2) at: 22) to: result commaTokens.	result		addTokens: ((nodes at: 2) at: 23)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 2) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 3) at: 1) to: result leftBraceTokens.	result addTokens: ((nodes at: 3) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 3) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 3) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 3) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 3) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 3) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 3) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 3) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 3) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 3) at: 12) to: result operatorTokens.	result getToken: ((nodes at: 3) at: 13).	result setToken: ((nodes at: 3) at: 14).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordictionary_literal2: nodes	| result |	result := Array new: 6.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self add: (nodes at: 2) to: (result at: 3).	result at: 6 put: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForfunction_name1: nodes	| result |	result := Array new: 2.	result at: 1 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortuple_type_element1: nodes	| result |	result := Array new: 24.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	self add: (nodes at: 2) to: (result at: 13).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForinfix_operator_attributes1: nodes	| result |	result := Array new: 6.	result at: 1 put: ((nodes at: 1) at: 1).	result at: 2 put: ((nodes at: 1) at: 2).	result at: 3 put: ((nodes at: 2) at: 1).	result at: 4 put: ((nodes at: 2) at: 2).	result at: 5 put: ((nodes at: 2) at: 3).	result at: 6 put: ((nodes at: 2) at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_attributes1: nodes	| result |	result := Array new: 12.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordeclaration_specifier6: nodes	| result |	result := Array new: 9.	result at: 6 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordo_while_statement1: nodes	| result |	result := SwiftDoWhileStatementNode new.	result doToken: (nodes at: 1).	result block: (nodes at: 2).	result whileToken: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForsubscript_declaration1: nodes	| result |	result := SwiftSubscriptDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result subscriptToken: ((nodes at: 1) at: 13).	result addTokens: ((nodes at: 1) at: 14) to: result inoutTokens.	result addTokens: ((nodes at: 1) at: 15) to: result letTokens.	result addTokens: ((nodes at: 1) at: 16) to: result colonTokens.	result		addTokens: ((nodes at: 1) at: 17)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 1) at: 18) to: result periodTokens.	result		addTokens: ((nodes at: 1) at: 19)		to: result questionMarkTokens.	result addTokens: ((nodes at: 1) at: 20) to: result bangTokens.	result addTokens: ((nodes at: 1) at: 21) to: result protocolTokens.	result addTokens: ((nodes at: 1) at: 22) to: result lessThanTokens.	result addTokens: ((nodes at: 1) at: 23) to: result greaterThanTokens.	result addTokens: ((nodes at: 1) at: 24) to: result typeTokens.	result addTokens: ((nodes at: 1) at: 25) to: result commaTokens.	result addTokens: ((nodes at: 1) at: 26) to: result equalTokens.	result addObjects: ((nodes at: 1) at: 27) to: result expressions.	result addTokens: ((nodes at: 1) at: 28) to: result varTokens.	result		addTokens: ((nodes at: 1) at: 29)		to: result periodPeriodPeriodTokens.	result		addTokens: ((nodes at: 2) at: 1)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 2) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 2) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 2) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 2) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 2) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 2) at: 8) to: result leftBraceTokens.	result addTokens: ((nodes at: 2) at: 9) to: result rightBraceTokens.	result		addTokens: ((nodes at: 2) at: 10)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 2) at: 11)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 2) at: 12)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 2) at: 13) to: result operatorTokens.	result addTokens: ((nodes at: 2) at: 14) to: result colonTokens.	result addTokens: ((nodes at: 2) at: 15) to: result periodTokens.	result		addTokens: ((nodes at: 2) at: 16)		to: result questionMarkTokens.	result addTokens: ((nodes at: 2) at: 17) to: result bangTokens.	result addTokens: ((nodes at: 2) at: 18) to: result protocolTokens.	result addTokens: ((nodes at: 2) at: 19) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 20) to: result greaterThanTokens.	result addTokens: ((nodes at: 2) at: 21) to: result typeTokens.	result addTokens: ((nodes at: 2) at: 22) to: result commaTokens.	result		addTokens: ((nodes at: 2) at: 23)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 2) at: 24) to: result inoutTokens.	result addNode: (nodes at: 3) to: result blocks.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForvariable_declaration4: nodes	| result |	result := SwiftVariableDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result addTokens: ((nodes at: 1) at: 13) to: result classTokens.	result addTokens: ((nodes at: 1) at: 14) to: result mutatingTokens.	result addTokens: ((nodes at: 1) at: 15) to: result nonmutatingTokens.	result addTokens: ((nodes at: 1) at: 16) to: result overrideTokens.	result addTokens: ((nodes at: 1) at: 17) to: result staticTokens.	result addTokens: ((nodes at: 1) at: 18) to: result unownedTokens.	result		addTokens: ((nodes at: 1) at: 19)		to: result unownedLeftParensafeRightParenTokens.	result		addTokens: ((nodes at: 1) at: 20)		to: result unownedLeftParenunsafeRightParenTokens.	result addTokens: ((nodes at: 1) at: 21) to: result weakTokens.	result varToken: ((nodes at: 1) at: 22).	result addToken: (nodes at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 1) to: result colonTokens.	result addTokens: ((nodes at: 3) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 3) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 3) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 3) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 3) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 3) at: 8) to: result leftBraceTokens.	result addTokens: ((nodes at: 3) at: 9) to: result rightBraceTokens.	result		addTokens: ((nodes at: 3) at: 10)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 3) at: 11)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 3) at: 12)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 3) at: 13) to: result operatorTokens.	result		addTokens: ((nodes at: 3) at: 14)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 3) at: 15) to: result periodTokens.	result		addTokens: ((nodes at: 3) at: 16)		to: result questionMarkTokens.	result addTokens: ((nodes at: 3) at: 17) to: result bangTokens.	result addTokens: ((nodes at: 3) at: 18) to: result protocolTokens.	result addTokens: ((nodes at: 3) at: 19) to: result lessThanTokens.	result addTokens: ((nodes at: 3) at: 20) to: result greaterThanTokens.	result addTokens: ((nodes at: 3) at: 21) to: result typeTokens.	result addTokens: ((nodes at: 3) at: 22) to: result commaTokens.	result		addTokens: ((nodes at: 3) at: 23)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 3) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 4) at: 1) to: result leftBraceTokens.	result addTokens: ((nodes at: 4) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 4) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 4) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 4) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 4) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 4) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 4) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 4) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 4) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 4) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 4) at: 12) to: result operatorTokens.	result getToken: ((nodes at: 4) at: 13).	result setToken: ((nodes at: 4) at: 14).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForcase_item_list2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 22).	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).	self addAll: ((nodes at: 3) at: 2) to: (result at: 2).	self addAll: ((nodes at: 3) at: 3) to: (result at: 3).	self addAll: ((nodes at: 3) at: 4) to: (result at: 4).	self addAll: ((nodes at: 3) at: 5) to: (result at: 5).	self addAll: ((nodes at: 3) at: 6) to: (result at: 6).	self addAll: ((nodes at: 3) at: 7) to: (result at: 7).	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).	self addAll: ((nodes at: 3) at: 25) to: (result at: 25).	self addAll: ((nodes at: 3) at: 26) to: (result at: 26).	self addAll: ((nodes at: 3) at: 27) to: (result at: 27).	self addAll: ((nodes at: 3) at: 28) to: (result at: 28).	self addAll: ((nodes at: 3) at: 29) to: (result at: 29).	self add: ((nodes at: 4) at: 1) to: (result at: 30).	self add: ((nodes at: 4) at: 2) to: (result at: 27).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortype_casting_operator3: nodes	| result |	result := Array new: 4.	result at: 3 put: (nodes at: 1).	result at: 4 put: (nodes at: 2).	result at: 2 put: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_union_style_enum_members1: nodes	| result |	result := Array new: 57.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 33 put: (OrderedCollection new: 2).	result at: 34 put: (OrderedCollection new: 2).	result at: 35 put: (OrderedCollection new: 2).	result at: 36 put: (OrderedCollection new: 2).	result at: 37 put: (OrderedCollection new: 2).	result at: 38 put: (OrderedCollection new: 2).	result at: 39 put: (OrderedCollection new: 2).	result at: 40 put: (OrderedCollection new: 2).	result at: 41 put: (OrderedCollection new: 2).	result at: 42 put: (OrderedCollection new: 2).	result at: 43 put: (OrderedCollection new: 2).	result at: 44 put: (OrderedCollection new: 2).	result at: 45 put: (OrderedCollection new: 2).	result at: 46 put: (OrderedCollection new: 2).	result at: 47 put: (OrderedCollection new: 2).	result at: 48 put: (OrderedCollection new: 2).	result at: 49 put: (OrderedCollection new: 2).	result at: 50 put: (OrderedCollection new: 2).	result at: 51 put: (OrderedCollection new: 2).	result at: 52 put: (OrderedCollection new: 2).	result at: 53 put: (OrderedCollection new: 2).	result at: 54 put: (OrderedCollection new: 2).	result at: 55 put: (OrderedCollection new: 2).	result at: 56 put: (OrderedCollection new: 2).	result at: 57 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForprotocol_association_type_declaration1: nodes	| result |	result := SwiftProtocolAssociationTypeDeclarationNode new.	result typealiasToken: ((nodes at: 1) at: 1).	result addToken: ((nodes at: 1) at: 2) to: result identifierTokens.	result addToken: ((nodes at: 2) at: 1) to: result colonTokens.	result addTokens: ((nodes at: 2) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 3) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 4) to: result greaterThanTokens.	result addTokens: ((nodes at: 2) at: 5) to: result periodTokens.	result addTokens: ((nodes at: 2) at: 6) to: result commaTokens.	result equalToken: ((nodes at: 3) at: 1).	result addTokens: ((nodes at: 3) at: 2) to: result leftBracketTokens.	result addTokens: ((nodes at: 3) at: 3) to: result rightBracketTokens.	result addTokens: ((nodes at: 3) at: 4) to: result colonTokens.	result		addTokens: ((nodes at: 3) at: 5)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 3) at: 6) to: result periodTokens.	result addTokens: ((nodes at: 3) at: 7) to: result leftParenTokens.	result addTokens: ((nodes at: 3) at: 8) to: result rightParenTokens.	result addTokens: ((nodes at: 3) at: 9) to: result questionMarkTokens.	result addTokens: ((nodes at: 3) at: 10) to: result bangTokens.	result addTokens: ((nodes at: 3) at: 11) to: result protocolTokens.	result addTokens: ((nodes at: 3) at: 12) to: result lessThanTokens.	result addTokens: ((nodes at: 3) at: 13) to: result greaterThanTokens.	result addTokens: ((nodes at: 3) at: 14) to: result typeTokens.	result addTokens: ((nodes at: 3) at: 15) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 16) to: result commaTokens.	result		addTokens: ((nodes at: 3) at: 17)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 3) at: 18) to: result _Tokens.	result addTokens: ((nodes at: 3) at: 19) to: result inoutTokens.	result addTokens: ((nodes at: 3) at: 20) to: result leftBraceTokens.	result addTokens: ((nodes at: 3) at: 21) to: result rightBraceTokens.	result		addTokens: ((nodes at: 3) at: 22)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 3) at: 23)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 3) at: 24)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 3) at: 25) to: result operatorTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForstatements2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: result.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForimport_kind7: nodes	| result |	result := Array new: 7.	result at: 7 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForinitializer_expression1: nodes	| result |	result := SwiftInitializerExpressionNode new.	result addTokens: ((nodes at: 1) at: 1) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 2) to: result lessThanTokens.	result addTokens: ((nodes at: 1) at: 3) to: result commaTokens.	result addTokens: ((nodes at: 1) at: 4) to: result greaterThanTokens.	result		addTokens: ((nodes at: 1) at: 5)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 6)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 7)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 8) to: result leftBracketTokens.	result addObjects: ((nodes at: 1) at: 9) to: result expressions.	result		addTokens: ((nodes at: 1) at: 10)		to: result rightBracketTokens.	result addObjects: ((nodes at: 1) at: 11) to: result keyExpressions.	result addTokens: ((nodes at: 1) at: 12) to: result colonTokens.	result addObjects: ((nodes at: 1) at: 13) to: result valueExpressions.	result __FILE__Token: ((nodes at: 1) at: 14).	result __LINE__Token: ((nodes at: 1) at: 15).	result __COLUMN__Token: ((nodes at: 1) at: 16).	result __FUNCTION__Token: ((nodes at: 1) at: 17).	result addTokens: ((nodes at: 1) at: 18) to: result selfTokens.	result addTokens: ((nodes at: 1) at: 19) to: result periodTokens.	result addTokens: ((nodes at: 1) at: 20) to: result initTokens.	result addTokens: ((nodes at: 1) at: 21) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 22) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 23) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 1) at: 25) to: result letTokens.	result addTokens: ((nodes at: 1) at: 26) to: result _Tokens.	result		addTokens: ((nodes at: 1) at: 27)		to: result minusGreaterThanTokens.	result		addTokens: ((nodes at: 1) at: 28)		to: result questionMarkTokens.	result addTokens: ((nodes at: 1) at: 29) to: result bangTokens.	result addTokens: ((nodes at: 1) at: 30) to: result protocolTokens.	result addTokens: ((nodes at: 1) at: 31) to: result typeTokens.	result		addTokens: ((nodes at: 1) at: 32)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 1) at: 33) to: result equalTokens.	result addTokens: ((nodes at: 1) at: 34) to: result varTokens.	result addTokens: ((nodes at: 1) at: 35) to: result rightBraceTokens.	result addTokens: ((nodes at: 1) at: 36) to: result operatorTokens.	result inToken: ((nodes at: 1) at: 37).	result weakToken: ((nodes at: 1) at: 38).	result unownedToken: ((nodes at: 1) at: 39).	result unownedLeftParensafeRightParenToken: ((nodes at: 1) at: 40).	result unownedLeftParenunsafeRightParenToken: ((nodes at: 1) at: 41).	result addNodes: ((nodes at: 1) at: 42) to: result statements.	result addTokens: ((nodes at: 1) at: 43) to: result dynamicTypeTokens.	result addToken: (nodes at: 2) to: result periodTokens.	result addToken: (nodes at: 3) to: result initTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForpattern4: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 4).	self addAll: ((nodes at: 1) at: 2) to: (result at: 1).	self addAll: ((nodes at: 1) at: 3) to: (result at: 2).	self addAll: ((nodes at: 1) at: 4) to: (result at: 3).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 14).	self addAll: ((nodes at: 1) at: 9) to: (result at: 15).	self addAll: ((nodes at: 1) at: 10) to: (result at: 16).	self addAll: ((nodes at: 1) at: 11) to: (result at: 17).	self addAll: ((nodes at: 1) at: 12) to: (result at: 18).	self addAll: ((nodes at: 1) at: 13) to: (result at: 19).	self addAll: ((nodes at: 1) at: 14) to: (result at: 20).	self addAll: ((nodes at: 1) at: 15) to: (result at: 21).	self addAll: ((nodes at: 1) at: 16) to: (result at: 22).	self addAll: ((nodes at: 1) at: 17) to: (result at: 24).	self addAll: ((nodes at: 1) at: 18) to: (result at: 23).	self addAll: ((nodes at: 1) at: 19) to: (result at: 25).	self addAll: ((nodes at: 1) at: 20) to: (result at: 26).	self addAll: ((nodes at: 1) at: 21) to: (result at: 27).	self addAll: ((nodes at: 1) at: 22) to: (result at: 28).	self addAll: ((nodes at: 1) at: 23) to: (result at: 29).	self addAll: ((nodes at: 1) at: 24) to: (result at: 8).	self addAll: ((nodes at: 1) at: 25) to: (result at: 9).	self addAll: ((nodes at: 1) at: 26) to: (result at: 10).	self addAll: ((nodes at: 1) at: 27) to: (result at: 11).	self addAll: ((nodes at: 1) at: 28) to: (result at: 12).	self addAll: ((nodes at: 1) at: 29) to: (result at: 13).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).	self addAll: ((nodes at: 2) at: 13) to: (result at: 13).	self addAll: ((nodes at: 2) at: 14) to: (result at: 14).	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).	self addAll: ((nodes at: 2) at: 20) to: (result at: 20).	self addAll: ((nodes at: 2) at: 21) to: (result at: 21).	self addAll: ((nodes at: 2) at: 22) to: (result at: 22).	self addAll: ((nodes at: 2) at: 23) to: (result at: 23).	self addAll: ((nodes at: 2) at: 24) to: (result at: 24).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForrequirement2: nodes	| result |	result := Array new: 8.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	result at: 8 put: ((nodes at: 1) at: 6).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortype_inheritance_list2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForraw_value_style_enum_case_clause1: nodes	| result |	result := Array new: 15.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	result at: 13 put: (nodes at: 2).	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).	self addAll: ((nodes at: 3) at: 2) to: (result at: 14).	self addAll: ((nodes at: 3) at: 3) to: (result at: 9).	self addAll: ((nodes at: 3) at: 4) to: (result at: 10).	self addAll: ((nodes at: 3) at: 5) to: (result at: 11).	self addAll: ((nodes at: 3) at: 6) to: (result at: 15).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForgetter_keyword_clause1: nodes	| result |	result := Array new: 13.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	result at: 13 put: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForliteral_expression6: nodes	| result |	result := SwiftLiteralExpressionNode new.	result __COLUMN__Token: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForsame_type_requirement1: nodes	| result |	result := Array new: 6.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForprotocol_composition_type1: nodes	| result |	result := SwiftProtocolCompositionTypeNode new.	result protocolToken: (nodes at: 1).	result addToken: (nodes at: 2) to: result lessThanTokens.	result addTokens: ((nodes at: 3) at: 1) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 2) to: result lessThanTokens.	result addTokens: ((nodes at: 3) at: 3) to: result greaterThanTokens.	result addTokens: ((nodes at: 3) at: 4) to: result periodTokens.	result addTokens: ((nodes at: 3) at: 5) to: result commaTokens.	result addToken: (nodes at: 4) to: result greaterThanTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForswitch_cases1: nodes	| result |	result := Array new: 34.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 33 put: (OrderedCollection new: 2).	result at: 34 put: (OrderedCollection new: 2).	self add: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	self addAll: ((nodes at: 1) at: 13) to: (result at: 13).	self addAll: ((nodes at: 1) at: 14) to: (result at: 14).	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).	self addAll: ((nodes at: 1) at: 16) to: (result at: 16).	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).	self addAll: ((nodes at: 1) at: 20) to: (result at: 20).	self addAll: ((nodes at: 1) at: 21) to: (result at: 21).	self addAll: ((nodes at: 1) at: 22) to: (result at: 22).	self addAll: ((nodes at: 1) at: 23) to: (result at: 23).	self addAll: ((nodes at: 1) at: 24) to: (result at: 24).	self addAll: ((nodes at: 1) at: 25) to: (result at: 25).	self addAll: ((nodes at: 1) at: 26) to: (result at: 26).	self addAll: ((nodes at: 1) at: 27) to: (result at: 27).	self addAll: ((nodes at: 1) at: 28) to: (result at: 28).	self addAll: ((nodes at: 1) at: 29) to: (result at: 29).	self addAll: ((nodes at: 1) at: 30) to: (result at: 30).	self addAll: ((nodes at: 1) at: 31) to: (result at: 31).	self addAll: ((nodes at: 1) at: 32) to: (result at: 32).	self add: ((nodes at: 1) at: 33) to: (result at: 33).	self add: ((nodes at: 1) at: 34) to: (result at: 34).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForsuperclass_subscript_expression1: nodes	| result |	result := SwiftSuperclassSubscriptExpressionNode new.	result superToken: (nodes at: 1).	result leftBracketToken: (nodes at: 2).	result expression: (nodes at: 3).	result rightBracketToken: (nodes at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForrequirement1: nodes	| result |	result := Array new: 8.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	result at: 6 put: ((nodes at: 1) at: 6).	result at: 7 put: ((nodes at: 1) at: 7).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForbalanced_token3: nodes	| result |	result := nodes at: 2.	self addFirst: (nodes at: 1) to: (result at: 5).	self add: (nodes at: 3) to: (result at: 6).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordeclaration_specifier4: nodes	| result |	result := Array new: 9.	result at: 4 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForliteral_expression2: nodes	| result |	result := SwiftLiteralExpressionNode new.	result leftBracketToken: ((nodes at: 1) at: 1).	result addObjects: ((nodes at: 1) at: 2) to: result expressions.	result addTokens: ((nodes at: 1) at: 3) to: result commaTokens.	result rightBracketToken: ((nodes at: 1) at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForassociativity_clause1: nodes	| result |	result := Array new: 4.	result at: 1 put: (nodes at: 1).	result at: 2 put: ((nodes at: 2) at: 1).	result at: 3 put: ((nodes at: 2) at: 2).	result at: 4 put: ((nodes at: 2) at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForliteral_expression5: nodes	| result |	result := SwiftLiteralExpressionNode new.	result __LINE__Token: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForsubscript_declaration2: nodes	| result |	result := SwiftSubscriptDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result subscriptToken: ((nodes at: 1) at: 13).	result addTokens: ((nodes at: 1) at: 14) to: result inoutTokens.	result addTokens: ((nodes at: 1) at: 15) to: result letTokens.	result addTokens: ((nodes at: 1) at: 16) to: result colonTokens.	result		addTokens: ((nodes at: 1) at: 17)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 1) at: 18) to: result periodTokens.	result		addTokens: ((nodes at: 1) at: 19)		to: result questionMarkTokens.	result addTokens: ((nodes at: 1) at: 20) to: result bangTokens.	result addTokens: ((nodes at: 1) at: 21) to: result protocolTokens.	result addTokens: ((nodes at: 1) at: 22) to: result lessThanTokens.	result addTokens: ((nodes at: 1) at: 23) to: result greaterThanTokens.	result addTokens: ((nodes at: 1) at: 24) to: result typeTokens.	result addTokens: ((nodes at: 1) at: 25) to: result commaTokens.	result addTokens: ((nodes at: 1) at: 26) to: result equalTokens.	result addObjects: ((nodes at: 1) at: 27) to: result expressions.	result addTokens: ((nodes at: 1) at: 28) to: result varTokens.	result		addTokens: ((nodes at: 1) at: 29)		to: result periodPeriodPeriodTokens.	result		addTokens: ((nodes at: 2) at: 1)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 2) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 2) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 2) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 2) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 2) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 2) at: 8) to: result leftBraceTokens.	result addTokens: ((nodes at: 2) at: 9) to: result rightBraceTokens.	result		addTokens: ((nodes at: 2) at: 10)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 2) at: 11)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 2) at: 12)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 2) at: 13) to: result operatorTokens.	result addTokens: ((nodes at: 2) at: 14) to: result colonTokens.	result addTokens: ((nodes at: 2) at: 15) to: result periodTokens.	result		addTokens: ((nodes at: 2) at: 16)		to: result questionMarkTokens.	result addTokens: ((nodes at: 2) at: 17) to: result bangTokens.	result addTokens: ((nodes at: 2) at: 18) to: result protocolTokens.	result addTokens: ((nodes at: 2) at: 19) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 20) to: result greaterThanTokens.	result addTokens: ((nodes at: 2) at: 21) to: result typeTokens.	result addTokens: ((nodes at: 2) at: 22) to: result commaTokens.	result		addTokens: ((nodes at: 2) at: 23)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 2) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 3) at: 1) to: result leftBraceTokens.	result addTokens: ((nodes at: 3) at: 2) to: result _Tokens.	result addTokens: ((nodes at: 3) at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 3) at: 4) to: result leftParenTokens.	result addTokens: ((nodes at: 3) at: 5) to: result rightParenTokens.	result addTokens: ((nodes at: 3) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 3) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 3) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 3) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 3) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 3) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 3) at: 12) to: result operatorTokens.	result getToken: ((nodes at: 3) at: 13).	result addNodes: ((nodes at: 3) at: 14) to: result blocks.	result setToken: ((nodes at: 3) at: 15).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortype_casting_pattern1: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self add: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	self addAll: ((nodes at: 1) at: 13) to: (result at: 13).	self addAll: ((nodes at: 1) at: 14) to: (result at: 14).	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).	self addAll: ((nodes at: 1) at: 16) to: (result at: 16).	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).	self addAll: ((nodes at: 1) at: 20) to: (result at: 20).	self addAll: ((nodes at: 1) at: 21) to: (result at: 21).	self addAll: ((nodes at: 1) at: 22) to: (result at: 22).	self addAll: ((nodes at: 1) at: 23) to: (result at: 23).	self addAll: ((nodes at: 1) at: 24) to: (result at: 24).	self addAll: ((nodes at: 1) at: 25) to: (result at: 25).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForas_pattern1: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 29).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_setter_clause1: nodes	| result |	result := Array new: 14.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForself_expression3: nodes	| result |	result := SwiftSelfExpressionNode new.	result selfToken: (nodes at: 1).	result leftBracketToken: (nodes at: 2).	result expression: (nodes at: 3).	result rightBracketToken: (nodes at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForgetter_setter_block1: nodes	| result |	result := Array new: 15.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).	self addAll: ((nodes at: 2) at: 7) to: (result at: 1).	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).	result at: 13 put: ((nodes at: 2) at: 13).	self add: ((nodes at: 2) at: 14) to: (result at: 14).	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).	self addAll: ((nodes at: 3) at: 3) to: (result at: 4).	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).	self addAll: ((nodes at: 3) at: 7) to: (result at: 1).	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).	result at: 15 put: ((nodes at: 3) at: 13).	self add: ((nodes at: 3) at: 14) to: (result at: 14).	self add: (nodes at: 4) to: (result at: 8).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFormetatype_type2: nodes	| result |	result := SwiftMetatypeTypeNode new.	result addToken: (nodes at: 2) to: result periodTokens.	result addToken: (nodes at: 3) to: result protocolTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForexplicit_member_expression1: nodes	| result |	result := SwiftExplicitMemberExpressionNode new.	result addTokens: ((nodes at: 1) at: 1) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 2) to: result lessThanTokens.	result addTokens: ((nodes at: 1) at: 3) to: result commaTokens.	result addTokens: ((nodes at: 1) at: 4) to: result greaterThanTokens.	result		addTokens: ((nodes at: 1) at: 5)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 6)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 7)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 8) to: result leftBracketTokens.	result addObjects: ((nodes at: 1) at: 9) to: result expressions.	result		addTokens: ((nodes at: 1) at: 10)		to: result rightBracketTokens.	result addObjects: ((nodes at: 1) at: 11) to: result keyExpressions.	result addTokens: ((nodes at: 1) at: 12) to: result colonTokens.	result addObjects: ((nodes at: 1) at: 13) to: result valueExpressions.	result __FILE__Token: ((nodes at: 1) at: 14).	result __LINE__Token: ((nodes at: 1) at: 15).	result __COLUMN__Token: ((nodes at: 1) at: 16).	result __FUNCTION__Token: ((nodes at: 1) at: 17).	result addTokens: ((nodes at: 1) at: 18) to: result selfTokens.	result addTokens: ((nodes at: 1) at: 19) to: result periodTokens.	result addTokens: ((nodes at: 1) at: 20) to: result initTokens.	result addTokens: ((nodes at: 1) at: 21) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 22) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 23) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 1) at: 25) to: result letTokens.	result addTokens: ((nodes at: 1) at: 26) to: result _Tokens.	result		addTokens: ((nodes at: 1) at: 27)		to: result minusGreaterThanTokens.	result		addTokens: ((nodes at: 1) at: 28)		to: result questionMarkTokens.	result addTokens: ((nodes at: 1) at: 29) to: result bangTokens.	result addTokens: ((nodes at: 1) at: 30) to: result protocolTokens.	result addTokens: ((nodes at: 1) at: 31) to: result typeTokens.	result		addTokens: ((nodes at: 1) at: 32)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 1) at: 33) to: result equalTokens.	result addTokens: ((nodes at: 1) at: 34) to: result varTokens.	result addTokens: ((nodes at: 1) at: 35) to: result rightBraceTokens.	result addTokens: ((nodes at: 1) at: 36) to: result operatorTokens.	result inToken: ((nodes at: 1) at: 37).	result weakToken: ((nodes at: 1) at: 38).	result unownedToken: ((nodes at: 1) at: 39).	result unownedLeftParensafeRightParenToken: ((nodes at: 1) at: 40).	result unownedLeftParenunsafeRightParenToken: ((nodes at: 1) at: 41).	result addNodes: ((nodes at: 1) at: 42) to: result statements.	result addTokens: ((nodes at: 1) at: 43) to: result dynamicTypeTokens.	result addToken: (nodes at: 2) to: result periodTokens.	result addToken: (nodes at: 3) to: result integer_literalTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForwildcard_expression1: nodes	| result |	result := SwiftWildcardExpressionNode new.	result _Token: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForbinary_expression2: nodes	| result |	result := SwiftAssignmentOperatorNode new.	result addToken: (nodes at: 1) to: result equalTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForoptional_chaining_expression1: nodes	| result |	result := SwiftOptionalChainingExpressionNode new.	result expression: (nodes at: 1).	result questionMarkToken: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForself_expression2: nodes	| result |	result := SwiftSelfExpressionNode new.	result selfToken: (nodes at: 1).	result periodToken: (nodes at: 2).	result identifierToken: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForcase_item_list1: nodes	| result |	result := Array new: 30.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	self addAll: ((nodes at: 1) at: 13) to: (result at: 13).	self addAll: ((nodes at: 1) at: 14) to: (result at: 14).	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).	self addAll: ((nodes at: 1) at: 16) to: (result at: 16).	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).	self addAll: ((nodes at: 1) at: 20) to: (result at: 20).	self addAll: ((nodes at: 1) at: 21) to: (result at: 21).	self addAll: ((nodes at: 1) at: 22) to: (result at: 22).	self addAll: ((nodes at: 1) at: 23) to: (result at: 23).	self addAll: ((nodes at: 1) at: 24) to: (result at: 24).	self addAll: ((nodes at: 1) at: 25) to: (result at: 25).	self addAll: ((nodes at: 1) at: 26) to: (result at: 26).	self addAll: ((nodes at: 1) at: 27) to: (result at: 27).	self addAll: ((nodes at: 1) at: 28) to: (result at: 28).	self addAll: ((nodes at: 1) at: 29) to: (result at: 29).	self add: ((nodes at: 2) at: 1) to: (result at: 30).	self add: ((nodes at: 2) at: 2) to: (result at: 27).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForimport_kind2: nodes	| result |	result := Array new: 7.	result at: 2 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordictionary_type1: nodes	| result |	result := SwiftDictionaryTypeNode new.	result addToken: (nodes at: 1) to: result leftBracketTokens.	result addToken: (nodes at: 3) to: result colonTokens.	result addToken: (nodes at: 5) to: result rightBracketTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForforced_value_expression1: nodes	| result |	result := SwiftForcedValueExpressionNode new.	result expression: (nodes at: 1).	result bangToken: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForgeneric_argument_list1: nodes	| result |	result := Array new: 1.	result at: 1 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForextension_body1: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: (nodes at: 2) to: (result at: 2).	result at: 3 put: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForgeneric_parameter_list2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 4).	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).	self add: ((nodes at: 3) at: 2) to: (result at: 2).	self addAll: ((nodes at: 3) at: 3) to: (result at: 3).	self addAll: ((nodes at: 3) at: 4) to: (result at: 4).	self addAll: ((nodes at: 3) at: 5) to: (result at: 5).	self addAll: ((nodes at: 3) at: 6) to: (result at: 6).	self add: ((nodes at: 3) at: 7) to: (result at: 7).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForreturn_statement1: nodes	| result |	result := SwiftReturnStatementNode new.	result returnToken: (nodes at: 1).	result expression: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForself_expression1: nodes	| result |	result := SwiftSelfExpressionNode new.	result selfToken: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForsuperclass_method_expression1: nodes	| result |	result := SwiftSuperclassMethodExpressionNode new.	result superToken: (nodes at: 1).	result periodToken: (nodes at: 2).	result identifierToken: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_statements2: nodes	| result |	result := nodes at: 1.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_setter_keyword_clause1: nodes	| result |	result := Array new: 13.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForswitch_case3: nodes	| result |	result := Array new: 34.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	result at: 30 put: (OrderedCollection new: 2).	result at: 31 put: (OrderedCollection new: 2).	result at: 32 put: (OrderedCollection new: 2).	result at: 34 put: ((nodes at: 1) at: 1).	self add: ((nodes at: 1) at: 2) to: (result at: 3).	self addAll: (nodes at: 2) to: (result at: 32).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForimplicitly_unwrapped_optional_type1: nodes	| result |	result := SwiftImplicitlyUnwrappedOptionalTypeNode new.	result addToken: (nodes at: 2) to: result bangTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForexpression_element2: nodes	| result |	result := SwiftNamedExpressionNode new.	result identifierToken: (nodes at: 1).	result colonToken: (nodes at: 2).	result expression: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordictionary_literal_items1: nodes	| result |	result := Array new: 4.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	self add: ((nodes at: 1) at: 1) to: (result at: 1).	self add: ((nodes at: 1) at: 2) to: (result at: 2).	self add: ((nodes at: 1) at: 3) to: (result at: 3).	self add: (nodes at: 2) to: (result at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForcapture_list1: nodes	| result |	result := Array new: 7.	result at: 1 put: (nodes at: 1).	result at: 2 put: ((nodes at: 2) at: 1).	result at: 3 put: ((nodes at: 2) at: 2).	result at: 4 put: ((nodes at: 2) at: 3).	result at: 5 put: ((nodes at: 2) at: 4).	result at: 6 put: (nodes at: 3).	result at: 7 put: (nodes at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_tuple_pattern_element_list2: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 24).	self addAll: ((nodes at: 1) at: 9) to: (result at: 25).	self addAll: ((nodes at: 1) at: 10) to: (result at: 26).	self addAll: ((nodes at: 1) at: 11) to: (result at: 27).	self addAll: ((nodes at: 1) at: 12) to: (result at: 28).	self addAll: ((nodes at: 1) at: 13) to: (result at: 29).	self addAll: ((nodes at: 1) at: 14) to: (result at: 8).	self addAll: ((nodes at: 1) at: 15) to: (result at: 9).	self addAll: ((nodes at: 1) at: 16) to: (result at: 10).	self addAll: ((nodes at: 1) at: 17) to: (result at: 11).	self addAll: ((nodes at: 1) at: 18) to: (result at: 12).	self addAll: ((nodes at: 1) at: 19) to: (result at: 13).	self addAll: ((nodes at: 1) at: 20) to: (result at: 14).	self addAll: ((nodes at: 1) at: 21) to: (result at: 15).	self addAll: ((nodes at: 1) at: 22) to: (result at: 16).	self addAll: ((nodes at: 1) at: 23) to: (result at: 18).	self addAll: ((nodes at: 1) at: 24) to: (result at: 17).	self addAll: ((nodes at: 1) at: 25) to: (result at: 19).	self addAll: ((nodes at: 1) at: 26) to: (result at: 20).	self addAll: ((nodes at: 1) at: 27) to: (result at: 21).	self addAll: ((nodes at: 1) at: 28) to: (result at: 22).	self addAll: ((nodes at: 1) at: 29) to: (result at: 23).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_expression_element_list1: nodes	| result |	result := Array new: 4.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForin_out_expression1: nodes	| result |	result := SwiftInOutExpressionNode new.	result andToken: (nodes at: 1).	result identifierToken: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForsubscript_expression1: nodes	| result |	result := SwiftSubscriptExpressionNode new.	result addTokens: ((nodes at: 1) at: 1) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 2) to: result lessThanTokens.	result addTokens: ((nodes at: 1) at: 3) to: result commaTokens.	result addTokens: ((nodes at: 1) at: 4) to: result greaterThanTokens.	result		addTokens: ((nodes at: 1) at: 5)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 6)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 7)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 8) to: result leftBracketTokens.	result addObjects: ((nodes at: 1) at: 9) to: result expressions.	result		addTokens: ((nodes at: 1) at: 10)		to: result rightBracketTokens.	result addObjects: ((nodes at: 1) at: 11) to: result keyExpressions.	result addTokens: ((nodes at: 1) at: 12) to: result colonTokens.	result addObjects: ((nodes at: 1) at: 13) to: result valueExpressions.	result __FILE__Token: ((nodes at: 1) at: 14).	result __LINE__Token: ((nodes at: 1) at: 15).	result __COLUMN__Token: ((nodes at: 1) at: 16).	result __FUNCTION__Token: ((nodes at: 1) at: 17).	result addTokens: ((nodes at: 1) at: 18) to: result selfTokens.	result addTokens: ((nodes at: 1) at: 19) to: result periodTokens.	result addTokens: ((nodes at: 1) at: 20) to: result initTokens.	result addTokens: ((nodes at: 1) at: 21) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 22) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 23) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 1) at: 25) to: result letTokens.	result addTokens: ((nodes at: 1) at: 26) to: result _Tokens.	result		addTokens: ((nodes at: 1) at: 27)		to: result minusGreaterThanTokens.	result		addTokens: ((nodes at: 1) at: 28)		to: result questionMarkTokens.	result addTokens: ((nodes at: 1) at: 29) to: result bangTokens.	result addTokens: ((nodes at: 1) at: 30) to: result protocolTokens.	result addTokens: ((nodes at: 1) at: 31) to: result typeTokens.	result		addTokens: ((nodes at: 1) at: 32)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 1) at: 33) to: result equalTokens.	result addTokens: ((nodes at: 1) at: 34) to: result varTokens.	result addTokens: ((nodes at: 1) at: 35) to: result rightBraceTokens.	result addTokens: ((nodes at: 1) at: 36) to: result operatorTokens.	result inToken: ((nodes at: 1) at: 37).	result weakToken: ((nodes at: 1) at: 38).	result unownedToken: ((nodes at: 1) at: 39).	result unownedLeftParensafeRightParenToken: ((nodes at: 1) at: 40).	result unownedLeftParenunsafeRightParenToken: ((nodes at: 1) at: 41).	result addNodes: ((nodes at: 1) at: 42) to: result statements.	result addTokens: ((nodes at: 1) at: 43) to: result dynamicTypeTokens.	result addToken: (nodes at: 2) to: result leftBracketTokens.	result addObjects: ((nodes at: 3) at: 1) to: result expressions.	result addTokens: ((nodes at: 3) at: 2) to: result commaTokens.	result addToken: (nodes at: 4) to: result rightBracketTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortuple_type_element_list2: nodes	| result |	result := nodes at: 3.	self addAllFirst: ((nodes at: 1) at: 1) to: (result at: 1).	self addAllFirst: ((nodes at: 1) at: 2) to: (result at: 2).	self addAllFirst: ((nodes at: 1) at: 3) to: (result at: 3).	self addAllFirst: ((nodes at: 1) at: 4) to: (result at: 4).	self addAllFirst: ((nodes at: 1) at: 5) to: (result at: 5).	self addAllFirst: ((nodes at: 1) at: 6) to: (result at: 6).	self addAllFirst: ((nodes at: 1) at: 7) to: (result at: 7).	self addAllFirst: ((nodes at: 1) at: 8) to: (result at: 8).	self addAllFirst: ((nodes at: 1) at: 9) to: (result at: 9).	self addAllFirst: ((nodes at: 1) at: 10) to: (result at: 10).	self addAllFirst: ((nodes at: 1) at: 11) to: (result at: 11).	self addAllFirst: ((nodes at: 1) at: 12) to: (result at: 12).	self addAllFirst: ((nodes at: 1) at: 13) to: (result at: 13).	self addAllFirst: ((nodes at: 1) at: 14) to: (result at: 14).	self addAllFirst: ((nodes at: 1) at: 15) to: (result at: 15).	self addAllFirst: ((nodes at: 1) at: 16) to: (result at: 16).	self addAllFirst: ((nodes at: 1) at: 17) to: (result at: 17).	self addAllFirst: ((nodes at: 1) at: 18) to: (result at: 18).	self addAllFirst: ((nodes at: 1) at: 19) to: (result at: 19).	self addAllFirst: ((nodes at: 1) at: 20) to: (result at: 20).	self addAllFirst: ((nodes at: 1) at: 21) to: (result at: 21).	self addAllFirst: ((nodes at: 1) at: 22) to: (result at: 22).	self addAllFirst: ((nodes at: 1) at: 23) to: (result at: 23).	self addAllFirst: ((nodes at: 1) at: 24) to: (result at: 24).	self addFirst: (nodes at: 2) to: (result at: 23).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForconformance_requirement1: nodes	| result |	result := Array new: 7.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForfunction_call_expression1: nodes	| result |	result := SwiftFunctionCallExpressionNode new.	result addObject: (nodes at: 1) to: result expressions.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForparameter3: nodes	| result |	result := Array new: 28.	result at: 1 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 3).	self addAll: ((nodes at: 1) at: 2) to: (result at: 4).	self addAll: ((nodes at: 1) at: 3) to: (result at: 6).	self addAll: ((nodes at: 1) at: 4) to: (result at: 7).	self addAll: ((nodes at: 1) at: 5) to: (result at: 8).	self addAll: ((nodes at: 1) at: 6) to: (result at: 9).	self addAll: ((nodes at: 1) at: 7) to: (result at: 10).	self addAll: ((nodes at: 1) at: 8) to: (result at: 11).	self addAll: ((nodes at: 1) at: 9) to: (result at: 12).	self addAll: ((nodes at: 1) at: 10) to: (result at: 13).	self addAll: ((nodes at: 1) at: 11) to: (result at: 14).	self addAll: ((nodes at: 1) at: 12) to: (result at: 15).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForfunction_head1: nodes	| result |	result := Array new: 22.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	self addAll: ((nodes at: 2) at: 1) to: (result at: 13).	self addAll: ((nodes at: 2) at: 2) to: (result at: 14).	self addAll: ((nodes at: 2) at: 3) to: (result at: 15).	self addAll: ((nodes at: 2) at: 4) to: (result at: 16).	self addAll: ((nodes at: 2) at: 5) to: (result at: 17).	self addAll: ((nodes at: 2) at: 6) to: (result at: 18).	self addAll: ((nodes at: 2) at: 7) to: (result at: 19).	self addAll: ((nodes at: 2) at: 8) to: (result at: 20).	self addAll: ((nodes at: 2) at: 9) to: (result at: 21).	result at: 22 put: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForraw_value_style_enum_case1: nodes	| result |	result := Array new: 5.	result at: 1 put: (nodes at: 1).	result at: 2 put: ((nodes at: 2) at: 1).	result at: 3 put: ((nodes at: 2) at: 2).	result at: 4 put: ((nodes at: 2) at: 3).	result at: 5 put: ((nodes at: 2) at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForprefix_expression2: nodes	| result |	result := SwiftPrefixExpressionNode new.	result addToken: (nodes at: 1) to: result operatorTokens.	result addTokens: ((nodes at: 2) at: 1) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 2) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 3) to: result commaTokens.	result addTokens: ((nodes at: 2) at: 4) to: result greaterThanTokens.	result		addTokens: ((nodes at: 2) at: 5)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 2) at: 6)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 2) at: 7)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 2) at: 8) to: result leftBracketTokens.	result addObjects: ((nodes at: 2) at: 9) to: result expressions.	result		addTokens: ((nodes at: 2) at: 10)		to: result rightBracketTokens.	result addObjects: ((nodes at: 2) at: 11) to: result keyExpressions.	result addTokens: ((nodes at: 2) at: 12) to: result colonTokens.	result addObjects: ((nodes at: 2) at: 13) to: result valueExpressions.	result __FILE__Token: ((nodes at: 2) at: 14).	result __LINE__Token: ((nodes at: 2) at: 15).	result __COLUMN__Token: ((nodes at: 2) at: 16).	result __FUNCTION__Token: ((nodes at: 2) at: 17).	result addTokens: ((nodes at: 2) at: 18) to: result selfTokens.	result addTokens: ((nodes at: 2) at: 19) to: result periodTokens.	result addTokens: ((nodes at: 2) at: 20) to: result initTokens.	result addTokens: ((nodes at: 2) at: 21) to: result leftBraceTokens.	result addTokens: ((nodes at: 2) at: 22) to: result leftParenTokens.	result addTokens: ((nodes at: 2) at: 23) to: result rightParenTokens.	result addTokens: ((nodes at: 2) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 2) at: 25) to: result letTokens.	result addTokens: ((nodes at: 2) at: 26) to: result _Tokens.	result		addTokens: ((nodes at: 2) at: 27)		to: result minusGreaterThanTokens.	result		addTokens: ((nodes at: 2) at: 28)		to: result questionMarkTokens.	result addTokens: ((nodes at: 2) at: 29) to: result bangTokens.	result addTokens: ((nodes at: 2) at: 30) to: result protocolTokens.	result addTokens: ((nodes at: 2) at: 31) to: result typeTokens.	result		addTokens: ((nodes at: 2) at: 32)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 2) at: 33) to: result equalTokens.	result addTokens: ((nodes at: 2) at: 34) to: result varTokens.	result addTokens: ((nodes at: 2) at: 35) to: result rightBraceTokens.	result addTokens: ((nodes at: 2) at: 36) to: result operatorTokens.	result inToken: ((nodes at: 2) at: 37).	result weakToken: ((nodes at: 2) at: 38).	result unownedToken: ((nodes at: 2) at: 39).	result unownedLeftParensafeRightParenToken: ((nodes at: 2) at: 40).	result unownedLeftParenunsafeRightParenToken: ((nodes at: 2) at: 41).	result addNodes: ((nodes at: 2) at: 42) to: result statements.	result addTokens: ((nodes at: 2) at: 43) to: result dynamicTypeTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForenum_declaration1: nodes	| result |	result := SwiftEnumDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result addTokens: ((nodes at: 2) at: 1) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 2) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 3) to: result colonTokens.	result addTokens: ((nodes at: 2) at: 4) to: result commaTokens.	result addTokens: ((nodes at: 2) at: 5) to: result greaterThanTokens.	result addTokens: ((nodes at: 2) at: 6) to: result periodTokens.	result addTokens: ((nodes at: 2) at: 7) to: result protocolTokens.	result addTokens: ((nodes at: 2) at: 8) to: result whereTokens.	result addTokens: ((nodes at: 2) at: 9) to: result equalEqualTokens.	result addTokens: ((nodes at: 2) at: 10) to: result leftBraceTokens.	result addTokens: ((nodes at: 2) at: 11) to: result _Tokens.	result addTokens: ((nodes at: 2) at: 12) to: result leftParenTokens.	result addTokens: ((nodes at: 2) at: 13) to: result rightParenTokens.	result addTokens: ((nodes at: 2) at: 14) to: result importTokens.	result addTokens: ((nodes at: 2) at: 15) to: result typealiasTokens.	result addTokens: ((nodes at: 2) at: 16) to: result structTokens.	result addTokens: ((nodes at: 2) at: 17) to: result classTokens.	result addTokens: ((nodes at: 2) at: 18) to: result enumTokens.	result addTokens: ((nodes at: 2) at: 19) to: result varTokens.	result addTokens: ((nodes at: 2) at: 20) to: result funcTokens.	result addTokens: ((nodes at: 2) at: 21) to: result operatorTokens.	result addTokens: ((nodes at: 2) at: 22) to: result mutatingTokens.	result addTokens: ((nodes at: 2) at: 23) to: result nonmutatingTokens.	result addTokens: ((nodes at: 2) at: 24) to: result overrideTokens.	result addTokens: ((nodes at: 2) at: 25) to: result staticTokens.	result addTokens: ((nodes at: 2) at: 26) to: result unownedTokens.	result		addTokens: ((nodes at: 2) at: 27)		to: result unownedLeftParensafeRightParenTokens.	result		addTokens: ((nodes at: 2) at: 28)		to: result unownedLeftParenunsafeRightParenTokens.	result addTokens: ((nodes at: 2) at: 29) to: result weakTokens.	result addTokens: ((nodes at: 2) at: 30) to: result letTokens.	result addNodes: ((nodes at: 2) at: 31) to: result inializers.	result addTokens: ((nodes at: 2) at: 32) to: result leftBracketTokens.	result		addTokens: ((nodes at: 2) at: 33)		to: result rightBracketTokens.	result		addTokens: ((nodes at: 2) at: 34)		to: result minusGreaterThanTokens.	result		addTokens: ((nodes at: 2) at: 35)		to: result questionMarkTokens.	result addTokens: ((nodes at: 2) at: 36) to: result bangTokens.	result addTokens: ((nodes at: 2) at: 37) to: result typeTokens.	result addTokens: ((nodes at: 2) at: 38) to: result inoutTokens.	result		addTokens: ((nodes at: 2) at: 39)		to: result periodPeriodPeriodTokens.	result addNodes: ((nodes at: 2) at: 40) to: result blocks.	result addTokens: ((nodes at: 2) at: 41) to: result getTokens.	result addTokens: ((nodes at: 2) at: 42) to: result setTokens.	result addTokens: ((nodes at: 2) at: 43) to: result rightBraceTokens.	result addTokens: ((nodes at: 2) at: 44) to: result equalTokens.	result addObjects: ((nodes at: 2) at: 45) to: result expressions.	result addTokens: ((nodes at: 2) at: 46) to: result willSetTokens.	result addTokens: ((nodes at: 2) at: 47) to: result didSetTokens.	result addNodes: ((nodes at: 2) at: 48) to: result declarations.	result addTokens: ((nodes at: 2) at: 49) to: result convenienceTokens.	result addTokens: ((nodes at: 2) at: 50) to: result initTokens.	result addTokens: ((nodes at: 2) at: 51) to: result deinitTokens.	result addTokens: ((nodes at: 2) at: 52) to: result extensionTokens.	result addTokens: ((nodes at: 2) at: 53) to: result subscriptTokens.	result addTokens: ((nodes at: 2) at: 54) to: result caseTokens.	result		addTokens: ((nodes at: 2) at: 55)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 2) at: 56)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 2) at: 57)		to: result full_string_literalTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForpostfix_self_expression1: nodes	| result |	result := SwiftPostfixSelfExpressionNode new.	result addTokens: ((nodes at: 1) at: 1) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 2) to: result lessThanTokens.	result addTokens: ((nodes at: 1) at: 3) to: result commaTokens.	result addTokens: ((nodes at: 1) at: 4) to: result greaterThanTokens.	result		addTokens: ((nodes at: 1) at: 5)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 6)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 7)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 8) to: result leftBracketTokens.	result addObjects: ((nodes at: 1) at: 9) to: result expressions.	result		addTokens: ((nodes at: 1) at: 10)		to: result rightBracketTokens.	result addObjects: ((nodes at: 1) at: 11) to: result keyExpressions.	result addTokens: ((nodes at: 1) at: 12) to: result colonTokens.	result addObjects: ((nodes at: 1) at: 13) to: result valueExpressions.	result __FILE__Token: ((nodes at: 1) at: 14).	result __LINE__Token: ((nodes at: 1) at: 15).	result __COLUMN__Token: ((nodes at: 1) at: 16).	result __FUNCTION__Token: ((nodes at: 1) at: 17).	result addTokens: ((nodes at: 1) at: 18) to: result selfTokens.	result addTokens: ((nodes at: 1) at: 19) to: result periodTokens.	result addTokens: ((nodes at: 1) at: 20) to: result initTokens.	result addTokens: ((nodes at: 1) at: 21) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 22) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 23) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 24) to: result inoutTokens.	result addTokens: ((nodes at: 1) at: 25) to: result letTokens.	result addTokens: ((nodes at: 1) at: 26) to: result _Tokens.	result		addTokens: ((nodes at: 1) at: 27)		to: result minusGreaterThanTokens.	result		addTokens: ((nodes at: 1) at: 28)		to: result questionMarkTokens.	result addTokens: ((nodes at: 1) at: 29) to: result bangTokens.	result addTokens: ((nodes at: 1) at: 30) to: result protocolTokens.	result addTokens: ((nodes at: 1) at: 31) to: result typeTokens.	result		addTokens: ((nodes at: 1) at: 32)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 1) at: 33) to: result equalTokens.	result addTokens: ((nodes at: 1) at: 34) to: result varTokens.	result addTokens: ((nodes at: 1) at: 35) to: result rightBraceTokens.	result addTokens: ((nodes at: 1) at: 36) to: result operatorTokens.	result inToken: ((nodes at: 1) at: 37).	result weakToken: ((nodes at: 1) at: 38).	result unownedToken: ((nodes at: 1) at: 39).	result unownedLeftParensafeRightParenToken: ((nodes at: 1) at: 40).	result unownedLeftParenunsafeRightParenToken: ((nodes at: 1) at: 41).	result addNodes: ((nodes at: 1) at: 42) to: result statements.	result addTokens: ((nodes at: 1) at: 43) to: result dynamicTypeTokens.	result addToken: (nodes at: 2) to: result periodTokens.	result addToken: (nodes at: 3) to: result selfTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortypealias_declaration1: nodes	| result |	result := SwiftTypealiasDeclarationNode new.	result typealiasToken: ((nodes at: 1) at: 1).	result addToken: ((nodes at: 1) at: 2) to: result identifierTokens.	result equalToken: ((nodes at: 2) at: 1).	result addTokens: ((nodes at: 2) at: 2) to: result leftBracketTokens.	result addTokens: ((nodes at: 2) at: 3) to: result rightBracketTokens.	result addTokens: ((nodes at: 2) at: 4) to: result colonTokens.	result		addTokens: ((nodes at: 2) at: 5)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 2) at: 6) to: result periodTokens.	result addTokens: ((nodes at: 2) at: 7) to: result leftParenTokens.	result addTokens: ((nodes at: 2) at: 8) to: result rightParenTokens.	result addTokens: ((nodes at: 2) at: 9) to: result questionMarkTokens.	result addTokens: ((nodes at: 2) at: 10) to: result bangTokens.	result addTokens: ((nodes at: 2) at: 11) to: result protocolTokens.	result addTokens: ((nodes at: 2) at: 12) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 13) to: result greaterThanTokens.	result addTokens: ((nodes at: 2) at: 14) to: result typeTokens.	result addTokens: ((nodes at: 2) at: 15) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 16) to: result commaTokens.	result		addTokens: ((nodes at: 2) at: 17)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 2) at: 18) to: result _Tokens.	result addTokens: ((nodes at: 2) at: 19) to: result inoutTokens.	result addTokens: ((nodes at: 2) at: 20) to: result leftBraceTokens.	result addTokens: ((nodes at: 2) at: 21) to: result rightBraceTokens.	result		addTokens: ((nodes at: 2) at: 22)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 2) at: 23)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 2) at: 24)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 2) at: 25) to: result operatorTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForfunction_type1: nodes	| result |	result := SwiftFunctionTypeNode new.	result addToken: (nodes at: 2) to: result minusGreaterThanTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForbalanced_token6: nodes	| result |	result := Array new: 11.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 11).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_infix_operator_attributes1: nodes	| result |	result := Array new: 6.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortuple_type_element2: nodes	| result |	result := Array new: 24.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 13).	self add: (nodes at: 2) to: (result at: 2).	self addAll: ((nodes at: 3) at: 1) to: (result at: 14).	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).	self addAll: ((nodes at: 3) at: 4) to: (result at: 3).	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).	self addAll: ((nodes at: 3) at: 8) to: (result at: 7).	self addAll: ((nodes at: 3) at: 9) to: (result at: 8).	self addAll: ((nodes at: 3) at: 10) to: (result at: 9).	self addAll: ((nodes at: 3) at: 11) to: (result at: 10).	self addAll: ((nodes at: 3) at: 12) to: (result at: 11).	self addAll: ((nodes at: 3) at: 13) to: (result at: 12).	self addAll: ((nodes at: 3) at: 14) to: (result at: 15).	self addAll: ((nodes at: 3) at: 15) to: (result at: 16).	self addAll: ((nodes at: 3) at: 16) to: (result at: 17).	self addAll: ((nodes at: 3) at: 17) to: (result at: 18).	self addAll: ((nodes at: 3) at: 18) to: (result at: 19).	self addAll: ((nodes at: 3) at: 19) to: (result at: 20).	self addAll: ((nodes at: 3) at: 20) to: (result at: 21).	self addAll: ((nodes at: 3) at: 21) to: (result at: 22).	self addAll: ((nodes at: 3) at: 22) to: (result at: 23).	self addAll: ((nodes at: 3) at: 23) to: (result at: 24).	self addAll: ((nodes at: 3) at: 24) to: (result at: 13).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForclosure_signature4: nodes	| result |	result := Array new: 33.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	self add: ((nodes at: 1) at: 1) to: (result at: 8).	result at: 30 put: ((nodes at: 1) at: 2).	result at: 31 put: ((nodes at: 1) at: 3).	result at: 32 put: ((nodes at: 1) at: 4).	result at: 33 put: ((nodes at: 1) at: 5).	self add: ((nodes at: 1) at: 6) to: (result at: 21).	self add: ((nodes at: 1) at: 7) to: (result at: 9).	self addAll: ((nodes at: 2) at: 1) to: (result at: 6).	self addAll: ((nodes at: 2) at: 2) to: (result at: 18).	self addAll: ((nodes at: 3) at: 1) to: (result at: 10).	self addAll: ((nodes at: 3) at: 2) to: (result at: 5).	self addAll: ((nodes at: 3) at: 3) to: (result at: 6).	self addAll: ((nodes at: 3) at: 4) to: (result at: 1).	self addAll: ((nodes at: 3) at: 5) to: (result at: 2).	self addAll: ((nodes at: 3) at: 6) to: (result at: 8).	self addAll: ((nodes at: 3) at: 7) to: (result at: 9).	self addAll: ((nodes at: 3) at: 8) to: (result at: 23).	self addAll: ((nodes at: 3) at: 9) to: (result at: 24).	self addAll: ((nodes at: 3) at: 10) to: (result at: 25).	self addAll: ((nodes at: 3) at: 11) to: (result at: 26).	self addAll: ((nodes at: 3) at: 12) to: (result at: 27).	self addAll: ((nodes at: 3) at: 13) to: (result at: 28).	self addAll: ((nodes at: 3) at: 14) to: (result at: 7).	self addAll: ((nodes at: 3) at: 15) to: (result at: 11).	self addAll: ((nodes at: 3) at: 16) to: (result at: 12).	self addAll: ((nodes at: 3) at: 17) to: (result at: 13).	self addAll: ((nodes at: 3) at: 18) to: (result at: 14).	self addAll: ((nodes at: 3) at: 19) to: (result at: 15).	self addAll: ((nodes at: 3) at: 20) to: (result at: 16).	self addAll: ((nodes at: 3) at: 21) to: (result at: 17).	self addAll: ((nodes at: 3) at: 22) to: (result at: 18).	self addAll: ((nodes at: 3) at: 23) to: (result at: 19).	self addAll: ((nodes at: 3) at: 24) to: (result at: 3).	result at: 29 put: (nodes at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForunion_style_enum_case1: nodes	| result |	result := Array new: 24.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForbinary_expression3: nodes	| result |	result := SwiftCondionalOperatorNode new.	result addToken: ((nodes at: 1) at: 1) to: result questionMarkTokens.	result trueExpression: ((nodes at: 1) at: 2).	result addToken: ((nodes at: 1) at: 3) to: result colonTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForstatements1: nodes	| result |	result := OrderedCollection new: 2.	self add: (nodes at: 1) to: result.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForbalanced_token5: nodes	| result |	result := Array new: 11.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	self add: ((nodes at: 1) at: 1) to: (result at: 8).	self add: ((nodes at: 1) at: 2) to: (result at: 9).	self add: ((nodes at: 1) at: 3) to: (result at: 10).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortype_inheritance_clause1: nodes	| result |	result := Array new: 6.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 6).	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForarray_literal1: nodes	| result |	result := Array new: 4.	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	result at: 4 put: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForfunction_signature1: nodes	| result |	result := nodes at: 1.	self addAll: ((nodes at: 2) at: 1) to: (result at: 15).	self addAll: ((nodes at: 2) at: 2) to: (result at: 8).	self addAll: ((nodes at: 2) at: 3) to: (result at: 9).	self addAll: ((nodes at: 2) at: 4) to: (result at: 1).	self addAll: ((nodes at: 2) at: 5) to: (result at: 2).	self addAll: ((nodes at: 2) at: 6) to: (result at: 13).	self addAll: ((nodes at: 2) at: 7) to: (result at: 14).	self addAll: ((nodes at: 2) at: 8) to: (result at: 23).	self addAll: ((nodes at: 2) at: 9) to: (result at: 24).	self addAll: ((nodes at: 2) at: 10) to: (result at: 25).	self addAll: ((nodes at: 2) at: 11) to: (result at: 26).	self addAll: ((nodes at: 2) at: 12) to: (result at: 27).	self addAll: ((nodes at: 2) at: 13) to: (result at: 28).	self addAll: ((nodes at: 2) at: 14) to: (result at: 10).	self addAll: ((nodes at: 2) at: 15) to: (result at: 16).	self addAll: ((nodes at: 2) at: 16) to: (result at: 17).	self addAll: ((nodes at: 2) at: 17) to: (result at: 18).	self addAll: ((nodes at: 2) at: 18) to: (result at: 19).	self addAll: ((nodes at: 2) at: 19) to: (result at: 20).	self addAll: ((nodes at: 2) at: 20) to: (result at: 21).	self addAll: ((nodes at: 2) at: 21) to: (result at: 22).	self addAll: ((nodes at: 2) at: 22) to: (result at: 3).	self addAll: ((nodes at: 2) at: 23) to: (result at: 4).	self addAll: ((nodes at: 2) at: 24) to: (result at: 6).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordeclaration_specifier7: nodes	| result |	result := Array new: 9.	result at: 7 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForinitializer_head1: nodes	| result |	result := Array new: 14.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	result at: 13 put: (nodes at: 2).	result at: 14 put: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForstruct_declaration1: nodes	| result |	result := SwiftStructDeclarationNode new.	result addTokens: ((nodes at: 1) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 1) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 1) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 1) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 1) at: 5) to: result leftBracketTokens.	result addTokens: ((nodes at: 1) at: 6) to: result rightBracketTokens.	result addTokens: ((nodes at: 1) at: 7) to: result leftBraceTokens.	result addTokens: ((nodes at: 1) at: 8) to: result rightBraceTokens.	result		addTokens: ((nodes at: 1) at: 9)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 1) at: 10)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 1) at: 11)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 1) at: 12) to: result operatorTokens.	result structToken: (nodes at: 2).	result addToken: (nodes at: 3) to: result identifierTokens.	result addTokens: ((nodes at: 4) at: 1) to: result lessThanTokens.	result addTokens: ((nodes at: 4) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 4) at: 3) to: result colonTokens.	result addTokens: ((nodes at: 4) at: 4) to: result commaTokens.	result addTokens: ((nodes at: 4) at: 5) to: result greaterThanTokens.	result addTokens: ((nodes at: 4) at: 6) to: result periodTokens.	result addTokens: ((nodes at: 4) at: 7) to: result protocolTokens.	result whereToken: ((nodes at: 4) at: 8).	result addTokens: ((nodes at: 4) at: 9) to: result equalEqualTokens.	result addToken: ((nodes at: 5) at: 1) to: result colonTokens.	result addTokens: ((nodes at: 5) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 5) at: 3) to: result lessThanTokens.	result addTokens: ((nodes at: 5) at: 4) to: result greaterThanTokens.	result addTokens: ((nodes at: 5) at: 5) to: result periodTokens.	result addTokens: ((nodes at: 5) at: 6) to: result commaTokens.	result addToken: ((nodes at: 6) at: 1) to: result leftBraceTokens.	result addNodes: ((nodes at: 6) at: 2) to: result declarations.	result addToken: ((nodes at: 6) at: 3) to: result rightBraceTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFordeclaration_specifier1: nodes	| result |	result := Array new: 9.	result at: 1 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForclosure_signature1: nodes	| result |	result := Array new: 33.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).	self addAll: ((nodes at: 1) at: 13) to: (result at: 13).	self addAll: ((nodes at: 1) at: 14) to: (result at: 14).	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).	self addAll: ((nodes at: 1) at: 16) to: (result at: 16).	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).	self addAll: ((nodes at: 1) at: 20) to: (result at: 20).	self addAll: ((nodes at: 1) at: 21) to: (result at: 21).	self addAll: ((nodes at: 1) at: 22) to: (result at: 22).	self addAll: ((nodes at: 1) at: 23) to: (result at: 23).	self addAll: ((nodes at: 1) at: 24) to: (result at: 24).	self addAll: ((nodes at: 1) at: 25) to: (result at: 25).	self addAll: ((nodes at: 1) at: 26) to: (result at: 26).	self addAll: ((nodes at: 1) at: 27) to: (result at: 27).	self addAll: ((nodes at: 1) at: 28) to: (result at: 28).	self addAll: ((nodes at: 2) at: 1) to: (result at: 10).	self addAll: ((nodes at: 2) at: 2) to: (result at: 5).	self addAll: ((nodes at: 2) at: 3) to: (result at: 6).	self addAll: ((nodes at: 2) at: 4) to: (result at: 1).	self addAll: ((nodes at: 2) at: 5) to: (result at: 2).	self addAll: ((nodes at: 2) at: 6) to: (result at: 8).	self addAll: ((nodes at: 2) at: 7) to: (result at: 9).	self addAll: ((nodes at: 2) at: 8) to: (result at: 23).	self addAll: ((nodes at: 2) at: 9) to: (result at: 24).	self addAll: ((nodes at: 2) at: 10) to: (result at: 25).	self addAll: ((nodes at: 2) at: 11) to: (result at: 26).	self addAll: ((nodes at: 2) at: 12) to: (result at: 27).	self addAll: ((nodes at: 2) at: 13) to: (result at: 28).	self addAll: ((nodes at: 2) at: 14) to: (result at: 7).	self addAll: ((nodes at: 2) at: 15) to: (result at: 11).	self addAll: ((nodes at: 2) at: 16) to: (result at: 12).	self addAll: ((nodes at: 2) at: 17) to: (result at: 13).	self addAll: ((nodes at: 2) at: 18) to: (result at: 14).	self addAll: ((nodes at: 2) at: 19) to: (result at: 15).	self addAll: ((nodes at: 2) at: 20) to: (result at: 16).	self addAll: ((nodes at: 2) at: 21) to: (result at: 17).	self addAll: ((nodes at: 2) at: 22) to: (result at: 18).	self addAll: ((nodes at: 2) at: 23) to: (result at: 19).	self addAll: ((nodes at: 2) at: 24) to: (result at: 3).	result at: 29 put: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForpattern3: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 25).	self addAll: ((nodes at: 1) at: 2) to: (result at: 1).	self addAll: ((nodes at: 1) at: 3) to: (result at: 2).	self addAll: ((nodes at: 1) at: 4) to: (result at: 3).	self addAll: ((nodes at: 1) at: 5) to: (result at: 4).	self addAll: ((nodes at: 1) at: 6) to: (result at: 5).	self addAll: ((nodes at: 1) at: 7) to: (result at: 6).	self addAll: ((nodes at: 1) at: 8) to: (result at: 7).	self addAll: ((nodes at: 1) at: 9) to: (result at: 8).	self addAll: ((nodes at: 1) at: 10) to: (result at: 9).	self addAll: ((nodes at: 1) at: 11) to: (result at: 10).	self addAll: ((nodes at: 1) at: 12) to: (result at: 11).	self addAll: ((nodes at: 1) at: 13) to: (result at: 12).	self addAll: ((nodes at: 1) at: 14) to: (result at: 13).	self addAll: ((nodes at: 1) at: 15) to: (result at: 14).	self addAll: ((nodes at: 1) at: 16) to: (result at: 15).	self addAll: ((nodes at: 1) at: 17) to: (result at: 16).	self addAll: ((nodes at: 1) at: 18) to: (result at: 17).	self addAll: ((nodes at: 1) at: 19) to: (result at: 18).	self addAll: ((nodes at: 1) at: 20) to: (result at: 19).	self addAll: ((nodes at: 1) at: 21) to: (result at: 20).	self addAll: ((nodes at: 1) at: 22) to: (result at: 21).	self addAll: ((nodes at: 1) at: 23) to: (result at: 22).	self addAll: ((nodes at: 1) at: 24) to: (result at: 23).	self addAll: ((nodes at: 1) at: 25) to: (result at: 24).	self addAll: ((nodes at: 1) at: 26) to: (result at: 26).	self addAll: ((nodes at: 1) at: 27) to: (result at: 27).	self addAll: ((nodes at: 1) at: 28) to: (result at: 28).	self addAll: ((nodes at: 1) at: 29) to: (result at: 29).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForenum_case_pattern1: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self add: (nodes at: 2) to: (result at: 5).	self add: (nodes at: 3) to: (result at: 1).	self addAll: ((nodes at: 4) at: 1) to: (result at: 6).	self addAll: ((nodes at: 4) at: 2) to: (result at: 7).	self addAll: ((nodes at: 4) at: 3) to: (result at: 8).	self addAll: ((nodes at: 4) at: 4) to: (result at: 1).	self addAll: ((nodes at: 4) at: 5) to: (result at: 9).	self addAll: ((nodes at: 4) at: 6) to: (result at: 10).	self addAll: ((nodes at: 4) at: 7) to: (result at: 11).	self addAll: ((nodes at: 4) at: 8) to: (result at: 12).	self addAll: ((nodes at: 4) at: 9) to: (result at: 5).	self addAll: ((nodes at: 4) at: 10) to: (result at: 13).	self addAll: ((nodes at: 4) at: 11) to: (result at: 14).	self addAll: ((nodes at: 4) at: 12) to: (result at: 15).	self addAll: ((nodes at: 4) at: 13) to: (result at: 2).	self addAll: ((nodes at: 4) at: 14) to: (result at: 4).	self addAll: ((nodes at: 4) at: 15) to: (result at: 16).	self addAll: ((nodes at: 4) at: 16) to: (result at: 3).	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).	self addAll: ((nodes at: 4) at: 20) to: (result at: 20).	self addAll: ((nodes at: 4) at: 21) to: (result at: 21).	self addAll: ((nodes at: 4) at: 22) to: (result at: 22).	self addAll: ((nodes at: 4) at: 23) to: (result at: 23).	self addAll: ((nodes at: 4) at: 24) to: (result at: 24).	self addAll: ((nodes at: 4) at: 25) to: (result at: 25).	self addAll: ((nodes at: 4) at: 26) to: (result at: 26).	self addAll: ((nodes at: 4) at: 27) to: (result at: 27).	self addAll: ((nodes at: 4) at: 28) to: (result at: 28).	self addAll: ((nodes at: 4) at: 29) to: (result at: 29).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForgetter_setter_block2: nodes	| result |	result := Array new: 15.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).	self addAll: ((nodes at: 2) at: 7) to: (result at: 1).	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).	result at: 15 put: ((nodes at: 2) at: 13).	self add: ((nodes at: 2) at: 14) to: (result at: 14).	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).	self addAll: ((nodes at: 3) at: 3) to: (result at: 4).	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).	self addAll: ((nodes at: 3) at: 7) to: (result at: 1).	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).	result at: 13 put: ((nodes at: 3) at: 13).	self add: ((nodes at: 3) at: 14) to: (result at: 14).	self add: (nodes at: 4) to: (result at: 8).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFor_import_kind1: nodes	| result |	result := Array new: 7.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForliteral_expression3: nodes	| result |	result := SwiftLiteralExpressionNode new.	result leftBracketToken: ((nodes at: 1) at: 1).	result addObjects: ((nodes at: 1) at: 2) to: result keyExpressions.	result addTokens: ((nodes at: 1) at: 3) to: result colonTokens.	result addObjects: ((nodes at: 1) at: 4) to: result valueExpressions.	result addTokens: ((nodes at: 1) at: 5) to: result commaTokens.	result rightBracketToken: ((nodes at: 1) at: 6).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForparameter2: nodes	| result |	result := Array new: 28.	result at: 1 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	result at: 28 put: (nodes at: 2).	self add: (nodes at: 3) to: (result at: 3).	self add: ((nodes at: 4) at: 1) to: (result at: 4).	self add: ((nodes at: 4) at: 2) to: (result at: 3).	self add: ((nodes at: 5) at: 1) to: (result at: 4).	self add: ((nodes at: 5) at: 2) to: (result at: 3).	self addAll: ((nodes at: 6) at: 1) to: (result at: 5).	self addAll: ((nodes at: 6) at: 2) to: (result at: 3).	self addAll: ((nodes at: 6) at: 3) to: (result at: 4).	self addAll: ((nodes at: 6) at: 4) to: (result at: 6).	self addAll: ((nodes at: 6) at: 5) to: (result at: 7).	self addAll: ((nodes at: 6) at: 6) to: (result at: 8).	self addAll: ((nodes at: 6) at: 7) to: (result at: 9).	self addAll: ((nodes at: 6) at: 8) to: (result at: 10).	self addAll: ((nodes at: 6) at: 9) to: (result at: 11).	self addAll: ((nodes at: 6) at: 10) to: (result at: 12).	self addAll: ((nodes at: 6) at: 11) to: (result at: 13).	self addAll: ((nodes at: 6) at: 12) to: (result at: 14).	self addAll: ((nodes at: 6) at: 13) to: (result at: 15).	self addAll: ((nodes at: 6) at: 14) to: (result at: 16).	self addAll: ((nodes at: 6) at: 15) to: (result at: 17).	self addAll: ((nodes at: 6) at: 16) to: (result at: 18).	self addAll: ((nodes at: 6) at: 17) to: (result at: 19).	self addAll: ((nodes at: 6) at: 18) to: (result at: 20).	self addAll: ((nodes at: 6) at: 19) to: (result at: 21).	self addAll: ((nodes at: 6) at: 20) to: (result at: 22).	self addAll: ((nodes at: 6) at: 21) to: (result at: 23).	self addAll: ((nodes at: 6) at: 22) to: (result at: 24).	self addAll: ((nodes at: 6) at: 23) to: (result at: 25).	self addAll: ((nodes at: 6) at: 24) to: (result at: 1).	result at: 26 put: ((nodes at: 7) at: 1).	result at: 27 put: ((nodes at: 7) at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForpattern7: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 27).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForliteral3: nodes	| result |	result := Array new: 3.	result at: 3 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortuple_type1: nodes	| result |	result := SwiftTupleTypeNode new.	result addToken: (nodes at: 1) to: result leftParenTokens.	result addTokens: ((nodes at: 2) at: 1) to: result _Tokens.	result addTokens: ((nodes at: 2) at: 2) to: result identifierTokens.	result addTokens: ((nodes at: 2) at: 3) to: result leftParenTokens.	result addTokens: ((nodes at: 2) at: 4) to: result rightParenTokens.	result addTokens: ((nodes at: 2) at: 5) to: result inoutTokens.	result addTokens: ((nodes at: 2) at: 6) to: result leftBracketTokens.	result addTokens: ((nodes at: 2) at: 7) to: result rightBracketTokens.	result addTokens: ((nodes at: 2) at: 8) to: result colonTokens.	result		addTokens: ((nodes at: 2) at: 9)		to: result minusGreaterThanTokens.	result addTokens: ((nodes at: 2) at: 10) to: result periodTokens.	result		addTokens: ((nodes at: 2) at: 11)		to: result questionMarkTokens.	result addTokens: ((nodes at: 2) at: 12) to: result bangTokens.	result addTokens: ((nodes at: 2) at: 13) to: result protocolTokens.	result addTokens: ((nodes at: 2) at: 14) to: result lessThanTokens.	result addTokens: ((nodes at: 2) at: 15) to: result greaterThanTokens.	result addTokens: ((nodes at: 2) at: 16) to: result typeTokens.	result addTokens: ((nodes at: 2) at: 17) to: result commaTokens.	result		addTokens: ((nodes at: 2) at: 18)		to: result periodPeriodPeriodTokens.	result addTokens: ((nodes at: 2) at: 19) to: result leftBraceTokens.	result addTokens: ((nodes at: 2) at: 20) to: result rightBraceTokens.	result		addTokens: ((nodes at: 2) at: 21)		to: result integer_literalTokens.	result		addTokens: ((nodes at: 2) at: 22)		to: result floating_point_literalTokens.	result		addTokens: ((nodes at: 2) at: 23)		to: result full_string_literalTokens.	result addTokens: ((nodes at: 2) at: 24) to: result operatorTokens.	result addToken: (nodes at: 3) to: result rightParenTokens.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForclosure_signature2: nodes	| result |	result := Array new: 33.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 6).	self addAll: ((nodes at: 1) at: 2) to: (result at: 18).	self addAll: ((nodes at: 2) at: 1) to: (result at: 10).	self addAll: ((nodes at: 2) at: 2) to: (result at: 5).	self addAll: ((nodes at: 2) at: 3) to: (result at: 6).	self addAll: ((nodes at: 2) at: 4) to: (result at: 1).	self addAll: ((nodes at: 2) at: 5) to: (result at: 2).	self addAll: ((nodes at: 2) at: 6) to: (result at: 8).	self addAll: ((nodes at: 2) at: 7) to: (result at: 9).	self addAll: ((nodes at: 2) at: 8) to: (result at: 23).	self addAll: ((nodes at: 2) at: 9) to: (result at: 24).	self addAll: ((nodes at: 2) at: 10) to: (result at: 25).	self addAll: ((nodes at: 2) at: 11) to: (result at: 26).	self addAll: ((nodes at: 2) at: 12) to: (result at: 27).	self addAll: ((nodes at: 2) at: 13) to: (result at: 28).	self addAll: ((nodes at: 2) at: 14) to: (result at: 7).	self addAll: ((nodes at: 2) at: 15) to: (result at: 11).	self addAll: ((nodes at: 2) at: 16) to: (result at: 12).	self addAll: ((nodes at: 2) at: 17) to: (result at: 13).	self addAll: ((nodes at: 2) at: 18) to: (result at: 14).	self addAll: ((nodes at: 2) at: 19) to: (result at: 15).	self addAll: ((nodes at: 2) at: 20) to: (result at: 16).	self addAll: ((nodes at: 2) at: 21) to: (result at: 17).	self addAll: ((nodes at: 2) at: 22) to: (result at: 18).	self addAll: ((nodes at: 2) at: 23) to: (result at: 19).	self addAll: ((nodes at: 2) at: 24) to: (result at: 3).	result at: 29 put: (nodes at: 3).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForbreak_statement1: nodes	| result |	result := SwiftBreakStatementNode new.	result breakToken: (nodes at: 1).	result name: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForfile1: nodes	| result |	result := SwiftFileNode new.	result addNodes: (nodes at: 1) to: result statements.	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForgeneric_parameter_list1: nodes	| result |	result := Array new: 7.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self add: ((nodes at: 1) at: 2) to: (result at: 2).	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).	self add: ((nodes at: 1) at: 7) to: (result at: 7).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionFortype_casting_operator1: nodes	| result |	result := Array new: 4.	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForclosure_signature3: nodes	| result |	result := Array new: 33.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	self add: ((nodes at: 1) at: 1) to: (result at: 8).	result at: 30 put: ((nodes at: 1) at: 2).	result at: 31 put: ((nodes at: 1) at: 3).	result at: 32 put: ((nodes at: 1) at: 4).	result at: 33 put: ((nodes at: 1) at: 5).	self add: ((nodes at: 1) at: 6) to: (result at: 21).	self add: ((nodes at: 1) at: 7) to: (result at: 9).	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).	self addAll: ((nodes at: 2) at: 13) to: (result at: 13).	self addAll: ((nodes at: 2) at: 14) to: (result at: 14).	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).	self addAll: ((nodes at: 2) at: 20) to: (result at: 20).	self addAll: ((nodes at: 2) at: 21) to: (result at: 21).	self addAll: ((nodes at: 2) at: 22) to: (result at: 22).	self addAll: ((nodes at: 2) at: 23) to: (result at: 23).	self addAll: ((nodes at: 2) at: 24) to: (result at: 24).	self addAll: ((nodes at: 2) at: 25) to: (result at: 25).	self addAll: ((nodes at: 2) at: 26) to: (result at: 26).	self addAll: ((nodes at: 2) at: 27) to: (result at: 27).	self addAll: ((nodes at: 2) at: 28) to: (result at: 28).	self addAll: ((nodes at: 3) at: 1) to: (result at: 10).	self addAll: ((nodes at: 3) at: 2) to: (result at: 5).	self addAll: ((nodes at: 3) at: 3) to: (result at: 6).	self addAll: ((nodes at: 3) at: 4) to: (result at: 1).	self addAll: ((nodes at: 3) at: 5) to: (result at: 2).	self addAll: ((nodes at: 3) at: 6) to: (result at: 8).	self addAll: ((nodes at: 3) at: 7) to: (result at: 9).	self addAll: ((nodes at: 3) at: 8) to: (result at: 23).	self addAll: ((nodes at: 3) at: 9) to: (result at: 24).	self addAll: ((nodes at: 3) at: 10) to: (result at: 25).	self addAll: ((nodes at: 3) at: 11) to: (result at: 26).	self addAll: ((nodes at: 3) at: 12) to: (result at: 27).	self addAll: ((nodes at: 3) at: 13) to: (result at: 28).	self addAll: ((nodes at: 3) at: 14) to: (result at: 7).	self addAll: ((nodes at: 3) at: 15) to: (result at: 11).	self addAll: ((nodes at: 3) at: 16) to: (result at: 12).	self addAll: ((nodes at: 3) at: 17) to: (result at: 13).	self addAll: ((nodes at: 3) at: 18) to: (result at: 14).	self addAll: ((nodes at: 3) at: 19) to: (result at: 15).	self addAll: ((nodes at: 3) at: 20) to: (result at: 16).	self addAll: ((nodes at: 3) at: 21) to: (result at: 17).	self addAll: ((nodes at: 3) at: 22) to: (result at: 18).	self addAll: ((nodes at: 3) at: 23) to: (result at: 19).	self addAll: ((nodes at: 3) at: 24) to: (result at: 3).	result at: 29 put: (nodes at: 4).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForcapture_specifier2: nodes	| result |	result := Array new: 4.	result at: 2 put: (nodes at: 1).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForlabeled_statement1: nodes	| result |	result := SwiftLabeledStatementNode new.	result name: ((nodes at: 1) at: 1).	result colonToken: ((nodes at: 1) at: 2).	result statement: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForgeneric_parameter2: nodes	| result |	result := Array new: 7.	result at: 1 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	result at: 2 put: (nodes at: 2).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForvalue_binding_pattern1: nodes	| result |	result := Array new: 29.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	result at: 3 put: (OrderedCollection new: 2).	result at: 4 put: (OrderedCollection new: 2).	result at: 5 put: (OrderedCollection new: 2).	result at: 6 put: (OrderedCollection new: 2).	result at: 7 put: (OrderedCollection new: 2).	result at: 8 put: (OrderedCollection new: 2).	result at: 9 put: (OrderedCollection new: 2).	result at: 10 put: (OrderedCollection new: 2).	result at: 11 put: (OrderedCollection new: 2).	result at: 12 put: (OrderedCollection new: 2).	result at: 13 put: (OrderedCollection new: 2).	result at: 14 put: (OrderedCollection new: 2).	result at: 15 put: (OrderedCollection new: 2).	result at: 16 put: (OrderedCollection new: 2).	result at: 17 put: (OrderedCollection new: 2).	result at: 18 put: (OrderedCollection new: 2).	result at: 19 put: (OrderedCollection new: 2).	result at: 20 put: (OrderedCollection new: 2).	result at: 21 put: (OrderedCollection new: 2).	result at: 22 put: (OrderedCollection new: 2).	result at: 23 put: (OrderedCollection new: 2).	result at: 24 put: (OrderedCollection new: 2).	result at: 25 put: (OrderedCollection new: 2).	result at: 26 put: (OrderedCollection new: 2).	result at: 27 put: (OrderedCollection new: 2).	result at: 28 put: (OrderedCollection new: 2).	result at: 29 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).	self addAll: ((nodes at: 2) at: 7) to: (result at: 8).	self addAll: ((nodes at: 2) at: 8) to: (result at: 9).	self addAll: ((nodes at: 2) at: 9) to: (result at: 10).	self addAll: ((nodes at: 2) at: 10) to: (result at: 11).	self addAll: ((nodes at: 2) at: 11) to: (result at: 12).	self addAll: ((nodes at: 2) at: 12) to: (result at: 13).	self addAll: ((nodes at: 2) at: 13) to: (result at: 14).	self addAll: ((nodes at: 2) at: 14) to: (result at: 15).	self addAll: ((nodes at: 2) at: 15) to: (result at: 16).	self addAll: ((nodes at: 2) at: 16) to: (result at: 17).	self addAll: ((nodes at: 2) at: 17) to: (result at: 18).	self addAll: ((nodes at: 2) at: 18) to: (result at: 19).	self addAll: ((nodes at: 2) at: 19) to: (result at: 20).	self addAll: ((nodes at: 2) at: 20) to: (result at: 21).	self addAll: ((nodes at: 2) at: 21) to: (result at: 22).	self addAll: ((nodes at: 2) at: 22) to: (result at: 23).	self addAll: ((nodes at: 2) at: 23) to: (result at: 24).	self addAll: ((nodes at: 2) at: 24) to: (result at: 25).	self addAll: ((nodes at: 2) at: 25) to: (result at: 1).	self addAll: ((nodes at: 2) at: 26) to: (result at: 26).	self addAll: ((nodes at: 2) at: 27) to: (result at: 27).	self addAll: ((nodes at: 2) at: 28) to: (result at: 28).	self addAll: ((nodes at: 2) at: 29) to: (result at: 29).	^ result! !!SwiftParser methodsFor: 'generated-reduction actions'!reduceActionForif_statement1: nodes	| result |	result := SwiftIfStatementNode new.	result ifToken: (nodes at: 1).	result expression: (nodes at: 2).	result then: (nodes at: 3).	result elseToken: ((nodes at: 4) at: 1).	result else: ((nodes at: 4) at: 2).	^ result! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SwiftParser class	instanceVariableNames: ''!!SwiftParser class methodsFor: 'generated'!ambiguousTransitions^#(#[ 0 6 0 109] #[ 0 42 1 241] #[ 0 17 0 50] #[ 0 6 2 37] #[ 0 6 1 213] #[ 0 9 0 58] #[ 0 13 0 58] #[ 0 17 0 58] #[ 0 25 0 58] #[ 0 29 0 58] #[ 0 33 0 58] #[ 0 37 0 58] #[ 0 41 0 58] #[ 0 45 0 58] #[ 0 58 0 85] #[ 0 58 0 89] #[ 0 58 0 105] #[ 0 58 1 213] #[ 0 58 0 113] #[ 0 58 0 117] #[ 0 58 0 121] #[ 0 58 0 125] #[ 0 62 2 149] #[ 0 62 2 153] #[ 0 66 2 189] #[ 0 66 2 193] #[ 0 66 2 197] #[ 0 238 3 97] #[ 0 238 3 105] #[ 0 238 3 113] #[ 0 13 1 42] #[ 1 42 3 145] #[ 1 42 3 149] #[ 1 42 3 153] #[ 1 42 1 46] #[ 1 42 3 157] #[ 1 82 3 173] #[ 1 82 1 86] #[ 1 122 3 241] #[ 0 14 1 158] #[ 0 22 1 162] #[ 0 70 1 166] #[ 0 70 1 150 1 166] #[ 1 150 2 221] #[ 1 178 4 149] #[ 0 6 1 254] #[ 0 13 2 22] #[ 2 22 3 145] #[ 2 22 3 149] #[ 2 22 3 153] #[ 1 46 2 22] #[ 2 22 3 157] #[ 1 166 2 66] #[ 2 118 3 97] #[ 2 118 3 105] #[ 2 118 3 113] #[ 2 142 2 146] #[ 2 218 6 165] #[ 0 70 1 150] #[ 1 166 3 229] #[ 1 102 1 210] #[ 1 102 1 206 1 210] #[ 0 6 4 237] #[ 2 238 6 221] #[ 3 22 4 141] #[ 3 26 4 141] #[ 2 78 5 121] #[ 3 134 6 221] #[ 3 166 6 221] #[ 3 166 6 225] #[ 3 170 6 221] #[ 3 170 6 225] #[ 4 118 4 122] #[ 4 154 6 221] #[ 4 166 8 129] #[ 4 178 4 182] #[ 5 30 6 221] #[ 5 30 6 225] #[ 5 50 9 109] #[ 5 114 6 213] #[ 5 114 6 217] #[ 5 114 6 221] #[ 5 114 6 225] #[ 5 130 6 221]	).! !!SwiftParser class methodsFor: 'generated'!definitionComment"%glr;%root Parse;%prefix Swift;%suffix Node;%annotate_tokens;%hierarchy Statement (	BranchStatement	ControlTransferStatement	DeclarationStatement	ExpressionStatement	LabeledStatement	LoopStatement);%hierarchy BranchStatement (	IfStatement	SwitchStatement);%hierarchy LoopStatement (	DoWhileStatement	ForStatement	ForInStatement	WhileStatement);%hierarchy ControlTransferStatement (	BreakStatement	ContinueStatement	FallThroughStatement	ReturnStatement);<whitespace>	: \s+	;<comment>	: \/\/ [^\r\n]*	| (\/\* [^\*]* \*+ ([^\/\*] [^\*]* \*+)* \/)	;file	: top_level_declaration {{}}	;############### Lexical Structure##############<id>	: ([a-zA-Z_]) ([a-zA-Z_0-9])*	;<integer>	: \d+	;<implicit_parameter_name>	: $ <integer>	;<identifier>	: <id>	| ` <id> `	| <implicit_parameter_name>	;identifier_list	: <identifier>	| identifier_list "","" <identifier>	;<binary_literal>	: 0b[01][01_]* 	;<octal_literal>	: 0o[0-7][0-7_]*	;<decimal_literal>	: <integer> (<integer>|_)*	;<hexadecimal_literal>	: 0x[0-9a-fA-F][0-9a-fA-F_]*	;<integer_literal>	: <binary_literal>	| <octal_literal>	| <decimal_literal>	| <hexadecimal_literal>	;<decimal_fraction>	: \. <decimal_literal>	;<decimal_exponent>	: [eE] [-+]? <decimal_literal>	;<hexadecimal_digit>	: [0-9a-fA-F]	;<hexadecimal_fraction>	: \. (<hexadecimal_digit> | _)*	;<hexadecimal_exponent>	: [pP] [-+]? <decimal_literal>	;<floating_point_literal>	: <decimal_literal> <decimal_fraction>? <decimal_exponent>?	| <hexadecimal_literal> <hexadecimal_fraction>? <hexadecimal_exponent>	;<string_character>	: \\([0\\tnr\""\(] | x <hexadecimal_digit>{2,2} | u <hexadecimal_digit>{4,4} | U <hexadecimal_digit>{8,8}) | [^\\\""\r\n]	;<full_string_literal>	: \"" <string_character> * \""	;<start_string_literal>	: \"" <string_character>* \\ \(	;<end_string_literal>	: \\ \) <string_character>* \""	;<middle_string_literal>	: \) <string_character>* \\ \(	;string_literal	: <full_string_literal>#	| <start_string_literal> string_expression_literals <end_string_literal>	;#string_expression_literals#	: expression#	| string_expression_literals <middle_string_literal> expression#	;literal	: <integer_literal>	| <floating_point_literal>	| string_literal	;<operator>	: [\/\=\-\+\!!\*\%\<\>\&\|\^\~\.] +	;binary_operator	: <operator>	;prefix_operator	: <operator>	;postfix_operator	: <operator>	;################ Statements###############statement	: expression 'expression' _semicolon {{ExpressionStatement}}	| declaration 'declaration' _semicolon {{DeclarationStatement}}	| loop_statement _semicolon {{LoopStatement}}	| branch_statement _semicolon {{BranchStatement}}	| labeled_statement _semicolon {{LabeledStatement}}	| control_transfer_statement _semicolon {{ControlTransferStatement}}	;statements	: statement 'statement'	| statements statement 'statement'	;loop_statement	: for_statement	| for_in_statement	| while_statement	| do_while_statement	;for_statement	: ""for"" _for_init "";"" _expression 'testExpression' "";"" _expression 'incrementExpression' code_block 'block' {{ForStatement}}	| ""for"" ""("" _for_init "";"" _expression 'testExpression' "";"" _expression 'incrementExpression' "")"" code_block 'block' {{ForStatement}}	;for_init	: variable_declaration 'expression'	| expression_list	;for_in_statement	: ""for"" pattern ""in"" expression 'expression' code_block 'block' {{ForInStatement}}	;while_statement	: ""while"" while_condition 'expression' code_block 'block' {{WhileStatement}}	;while_condition	: expression	| declaration	;do_while_statement	: ""do"" code_block 'block' ""while"" while_condition {{DoWhileStatement}}	;branch_statement	: if_statement	| switch_statement	;if_statement	: ""if"" if_condition code_block 'then' _else_clause {{IfStatement}}	;if_condition	: expression 'expression'	| declaration 'expression'	;else_clause	: ""else"" code_block 'else'	| ""else"" if_statement 'else'	;switch_statement	: ""switch"" expression 'expression' ""{"" _switch_cases ""}"" {{SwitchStatement}}	;switch_cases	: switch_case	| switch_cases switch_case	;switch_case	: case_label statements	| case_label "";""	| default_label statements	| default_label "";""	;case_label	: ""case"" case_item_list "":""	;case_item_list	: pattern _guard_clause	| case_item_list "","" pattern _guard_clause	;default_label	: ""default"" "":""	;guard_clause	: ""where"" guard_expression 'expression'	;guard_expression	: expression	;labeled_statement	: statement_label  loop_statement 'statement' {{LabeledStatement}}	| statement_label switch_statement 'statement' {{LabeledStatement}}	;statement_label	: label_name "":""	;label_name	: <identifier> 'name'	;control_transfer_statement	: break_statement	| continue_statement	| fallthrough_statement	| return_statement	;break_statement	: ""break"" _label_name {{BreakStatement}}	;continue_statement	: ""continue"" _label_name {{ContinueStatement}}	;fallthrough_statement	: ""fallthrough"" {{FallThroughStatement}}	;return_statement	: ""return"" _expression {{ReturnStatement}}	;############### Generic Parameters and Arguments##############generic_parameter_clause	: ""<"" generic_parameter_list _requirement_clause "">""	;generic_parameter_list	: generic_parameter	| generic_parameter_list "","" generic_parameter	;generic_parameter	: type_name	| type_name "":"" type_identifier	| type_name "":"" protocol_composition_type	;requirement_clause	: ""where"" requirement_list	;requirement_list	: requirement	| requirement_list "","" requirement	;requirement	: conformance_requirement	| same_type_requirement	;conformance_requirement	: type_identifier "":"" type_identifier	| type_identifier "":"" protocol_composition_type	;same_type_requirement	: type_identifier ""=="" type_identifier	;generic_argument_clause	: ""<"" generic_argument_list "">""	;generic_argument_list	: generic_argument	| generic_argument_list "","" generic_argument	;generic_argument	: type	;################## Declarations#################declaration	: import_declaration	| constant_declaration	| variable_declaration	| typealias_declaration	| function_declaration	| enum_declaration	| struct_declaration	| class_declaration	| protocol_declaration	| initializer_declaration	| deinitializer_declaration	| extension_declaration	| subscript_declaration	| operator_declaration	;declarations	: 	| declarations declaration 'declaration'	;declaration_specifiers	: 	| declaration_specifiers  declaration_specifier	;declaration_specifier	: ""class""	| ""mutating""	| ""nonmutating""	| ""override""	| ""static""	| ""unowned""	| ""unowned(safe)""	| ""unowned(unsafe)""	| ""weak""	;top_level_declaration	: _statements	;code_block	: ""{"" _statements ""}"" {{Block}}	;import_declaration	: _attributes ""import"" _import_kind import_path {{}}	;import_kind	: ""typealias""	| ""struct""	| ""class""	| ""enum""	| ""protocol""	| ""var""	| ""func""	;import_path	: import_path_identifier	| import_path ""."" import_path_identifier	;import_path_identifier	: <identifier>	| <operator>	;constant_declaration	: _attributes _declaration_specifiers ""let"" pattern_initializer_list {{}}	;pattern_initializer_list	: pattern_initializer 'inializer'	| pattern_initializer_list "","" pattern_initializer 'inializer'	;pattern_initializer	: pattern _initializer {{}}	;initializer	: ""="" expression 'expression'	;variable_declaration	: variable_declaration_head pattern_initializer_list {{}}	| variable_declaration_head variable_name type_annotation code_block 'block' {{}}	| variable_declaration_head variable_name type_annotation getter_setter_block {{}}	| variable_declaration_head variable_name type_annotation getter_setter_keyword_block {{}}	| variable_declaration_head variable_name type_annotation _initializer willSet_didSet_block {{}}	;variable_declaration_head	: _attributes _declaration_specifiers ""var""	;variable_name	: <identifier>	;getter_setter_block	: ""{"" getter_clause _setter_clause ""}""	| ""{"" setter_clause getter_clause ""}""	;getter_clause	: _attributes ""get"" code_block 'block'	;setter_clause	: _attributes ""set"" _setter_name code_block 'block'	;setter_name	: ""("" <identifier> "")""	;getter_setter_keyword_block	: ""{"" getter_keyword_clause _setter_keyword_clause ""}""	| ""{"" setter_keyword_clause getter_keyword_clause ""}""	;getter_keyword_clause	: _attributes ""get""	;setter_keyword_clause	: _attributes ""set""	;willSet_didSet_block	: ""{"" willSet_clause _didSet_clause ""}""	| ""{"" didSet_clause willSet_clause ""}""	;willSet_clause	: _attributes ""willSet"" _setter_name code_block 'block' 	;didSet_clause	: _attributes ""didSet"" _setter_name code_block 'block'	;typealias_declaration	: typealias_head typealias_assignment {{}}	;typealias_head	: ""typealias"" typealias_name	;typealias_name	: <identifier>	;typealias_assignment	: ""="" type	;function_declaration	: function_head function_name _generic_parameter_clause function_signature function_body 'block' {{}}	;function_head	: _attributes _declaration_specifiers ""func"" 	;function_name	: <identifier>	| <operator>	;function_signature	: parameter_clauses _function_result	;function_result	: ""->"" _attributes type	;function_body	: code_block	;parameter_clauses	:	| parameter_clauses parameter_clause	;parameter_clause	: ""("" "")""	| ""("" parameter_list _ellipsis "")""	;parameter_list	: parameter	| parameter_list "","" parameter	;parameter	: _inout _let _hash parameter_name _local_parameter_name type_annotation _default_argument_clause	| _inout ""var"" _hash parameter_name _local_parameter_name type_annotation _default_argument_clause	| _attributes type	;parameter_name	: <identifier>	| ""_""	;local_parameter_name	: <identifier>	| ""_""	;default_argument_clause	: ""="" expression 'expression'	;enum_declaration	: _attributes union_style_enum {{}}	| _attributes raw_value_style_enum {{}}	;union_style_enum	: enum_name _generic_parameter_clause ""{"" _union_style_enum_members ""}""	;union_style_enum_members	: union_style_enum_member	| union_style_enum_members union_style_enum_member	;union_style_enum_member	: declaration	| union_style_enum_case_clause	;union_style_enum_case_clause	: _attributes ""case"" union_style_enum_case_list	;union_style_enum_case_list	: union_style_enum_case	| union_style_enum_case_list "","" union_style_enum_case	;union_style_enum_case	: enum_case_name _tuple_type	;enum_name	: <identifier>	;enum_case_name	: <identifier>	;raw_value_style_enum	: enum_name _generic_parameter_clause "":"" type_identifier ""{"" _raw_value_style_enum_members ""}""	;raw_value_style_enum_members	: raw_value_style_enum_member	| raw_value_style_enum_members raw_value_style_enum_member	;raw_value_style_enum_member	: declaration	| raw_value_style_enum_case_clause	;raw_value_style_enum_case_clause	: _attributes ""case"" raw_value_style_enum_case_list	;raw_value_style_enum_case_list	: raw_value_style_enum_case	| raw_value_style_enum_case_list "","" raw_value_style_enum_case	;raw_value_style_enum_case	: enum_case_name _raw_value_assignment	;raw_value_assignment	: ""="" literal	;struct_declaration	: _attributes ""struct"" struct_name _generic_parameter_clause _type_inheritance_clause struct_body {{}}	;struct_name	: <identifier>	;struct_body	: ""{"" _declarations ""}""	;class_declaration	: _attributes ""class"" class_name _generic_parameter_clause _type_inheritance_clause class_body {{}}	;class_name	: <identifier>	;class_body	: ""{"" _declarations ""}""	;protocol_declaration	: _attributes ""protocol"" protocol_name _type_inheritance_clause protocol_body {{}}	;protocol_name	: <identifier>	;protocol_body	: ""{"" _protocol_member_declarations ""}""	;protocol_member_declaration	: protocol_property_declaration	| protocol_method_declaration	| protocol_initializer_declaration	| protocol_subscript_declaration	| protocol_association_type_declaration	;protocol_member_declarations	: protocol_member_declaration 'declaration'	| protocol_member_declarations protocol_member_declaration 'declaration'	;protocol_property_declaration	: variable_declaration_head variable_name type_annotation getter_setter_keyword_block {{}}	;protocol_method_declaration	: function_head function_name _generic_parameter_clause function_signature {{}}	;protocol_initializer_declaration	: initializer_head _generic_parameter_clause parameter_clause {{}}	;protocol_subscript_declaration	: subscript_head subscript_result getter_setter_keyword_block {{}}	;protocol_association_type_declaration	: typealias_head _type_inheritance_clause _typealias_assignment {{}}	;initializer_declaration	: initializer_head _generic_parameter_clause parameter_clause initializer_body 'block' {{}}	;initializer_head	: _attributes _convenience ""init""	;initializer_body	: code_block	;deinitializer_declaration	: _attributes ""deinit"" code_block 'block' {{}}	;extension_declaration	: ""extension"" type_identifier _type_inheritance_clause extension_body {{}}	;extension_body	: ""{"" _declarations ""}""	;subscript_declaration	: subscript_head subscript_result code_block 'block' {{}}	| subscript_head subscript_result getter_setter_block {{}}	| subscript_head subscript_result getter_setter_keyword_block {{}}	;subscript_head	: _attributes ""subscript"" parameter_clause	;subscript_result	: ""->"" _attributes type	;operator_declaration	: prefix_operator_declaration	| postfix_operator_declaration	| infix_operator_declaration	;prefix_operator_declaration	: ""operator"" ""prefix"" <operator> ""{"" ""}"" {{}}	;postfix_operator_declaration	: ""operator"" ""postfix""  <operator> ""{"" ""}"" {{}}	;infix_operator_declaration	: ""operator"" ""infix"" <operator> ""{"" _infix_operator_attributes ""}"" {{}}	;infix_operator_attributes	: _precedence_clause _associativity_clause	;precedence_clause	: ""precedence"" precedence_level	;precedence_level	: <integer_literal>	;associativity_clause	: ""associativity"" associativity	;associativity	: ""left""	| ""right""	| ""none""	;####################### Patterns######################pattern	: wildcard_pattern _type_annotation	| identifier_pattern _type_annotation	| value_binding_pattern	| tuple_pattern _type_annotation	| enum_case_pattern	| type_casting_pattern	| expression_pattern	;wildcard_pattern	: ""_""	;identifier_pattern	: <identifier>	;value_binding_pattern	: ""var"" pattern	| ""let"" pattern	;tuple_pattern	: ""("" _tuple_pattern_element_list "")""	;tuple_pattern_element_list	: tuple_pattern_element	| tuple_pattern_element_list "","" tuple_pattern_element	;tuple_pattern_element	: pattern	;enum_case_pattern	: _type_identifier ""."" enum_case_name _tuple_pattern	;type_casting_pattern	: is_pattern	| as_pattern	;is_pattern	: ""is"" type	;as_pattern	: pattern ""as"" type	;expression_pattern	: expression 'expression'	;####################### Attributes######################attribute	: ""@"" attribute_name _attribute_argument_clause	;attribute_name	: <identifier>	;attribute_argument_clause	: ""("" _balanced_tokens "")""	;attributes	: attribute	| attributes attribute	;balanced_tokens	: balanced_token	| balanced_tokens balanced_token	;balanced_token	: ""("" _balanced_tokens "")""	| ""["" _balanced_tokens ""]""	| ""{"" _balanced_tokens ""}""	| <identifier>	| literal	| <operator>	# “Any punctuation except (, ), [, ], {, or }”	;expression	: prefix_expression 	| prefix_expression binary_expressions {{BinaryExpression}}	;expression_list	: expression 'expression'	| expression_list "","" expression 'expression'	;prefix_expression	: postfix_expression	| prefix_operator postfix_expression {{}}	| in_out_expression	;in_out_expression	: ""&"" <identifier> {{}}	;binary_expression	: binary_operator prefix_expression {{BinaryOperator}}	| assignment_operator prefix_expression {{AssignmentOperator}}	| conditional_operator prefix_expression {{CondionalOperator}}	| type_casting_operator {{TypeCastOperator}}	;binary_expressions	: binary_expression 'operator'	| binary_expressions binary_expression 'operator'	;assignment_operator	: ""=""	;conditional_operator	: ""?"" expression 'trueExpression' "":""	;type_casting_operator	: ""is"" type 'type'	| ""as"" type 'type'	| ""as"" ""?"" type 'type'	;primary_expression	: <identifier> _generic_argument_clause {{}}	| literal_expression	| self_expression	| superclass_expression	| closure_expression	| parenthesized_expression	| implicit_member_expression	| wildcard_expression	;literal_expression	: literal {{}}	| array_literal {{}}	| dictionary_literal {{}}	| ""__FILE__"" {{}}	| ""__LINE__"" {{}}	| ""__COLUMN__"" {{}}	| ""__FUNCTION__"" {{}}	;array_literal	: ""["" _array_literal_items ""]""	;array_literal_items	: array_literal_item _comma	| array_literal_item "","" array_literal_items	;array_literal_item	: expression 'expression'	;dictionary_literal	: ""["" dictionary_literal_items ""]""		| ""["" "":"" ""]""	;dictionary_literal_items	: dictionary_literal_item _comma	| dictionary_literal_item "","" dictionary_literal_items	;dictionary_literal_item	: expression 'keyExpression' "":"" expression 'valueExpression'	;self_expression	: ""self"" {{}}	| ""self"" ""."" <identifier> {{}}	| ""self"" ""["" expression 'expression' ""]"" {{}}	| ""self"" ""."" ""init"" {{}}	;superclass_expression	: superclass_method_expression	| superclass_subscript_expression	| superclass_initializer_expression	;superclass_method_expression	: ""super"" ""."" <identifier> {{}}	;superclass_subscript_expression	: ""super"" ""["" expression 'expression' ""]"" {{}}	;superclass_initializer_expression	: ""super"" ""."" ""init"" {{}}	;closure_expression	: ""{"" _closure_signature statements ""}"" {{}}	;closure_signature	: parameter_clause _function_result ""in""	| identifier_list _function_result ""in""	| capture_list parameter_clause _function_result ""in""	| capture_list identifier_list _function_result ""in""	| capture_list ""in""	;capture_list	: ""["" capture_specifier expression 'expression' ""]""	;capture_specifier	: ""weak""	| ""unowned""	| ""unowned(safe)""	| ""unowned(unsafe)""	;implicit_member_expression	: ""."" <identifier> {{}}	;parenthesized_expression	: ""("" _expression_element_list "")""  {{}}	;expression_element_list	: expression_element	| expression_element_list "","" expression_element	;expression_element	: expression 'expression'	| <identifier> "":"" expression 'expression' {{NamedExpression}}	;wildcard_expression	: ""_"" {{}}	;postfix_expression	: primary_expression	| postfix_expression postfix_operator	| function_call_expression	| initializer_expression	| explicit_member_expression	| postfix_self_expression	| dynamic_type_expression	| subscript_expression	| forced_value_expression	| optional_chaining_expression	;function_call_expression	: postfix_expression 'expression' parenthesized_expression {{}}	| postfix_expression 'expression' _parenthesized_expression trailing_closure {{}}	;trailing_closure	: closure_expression	;initializer_expression	: postfix_expression ""."" ""init"" {{}}	;explicit_member_expression	: postfix_expression ""."" <integer_literal> {{}}	| postfix_expression ""."" <identifier> _generic_argument_clause {{}}	;postfix_self_expression	: postfix_expression ""."" ""self"" {{}}	;dynamic_type_expression	: postfix_expression ""."" ""dynamicType"" {{}}	;subscript_expression	: postfix_expression ""["" expression_list ""]"" {{}}	;forced_value_expression	: postfix_expression 'expression' ""!!"" {{}}	;optional_chaining_expression	: postfix_expression 'expression' ""?"" {{}}	;####################### Types######################type	: array_type	| dictionary_type	| function_type	| type_identifier	| tuple_type	| optional_type	| implicitly_unwrapped_optional_type	| protocol_composition_type	| metatype_type	;type_annotation	: "":"" _attributes type	;type_identifier	: type_name _generic_argument_clause {{}}	| type_name _generic_argument_clause ""."" type_identifier {{}}	;type_name	: <identifier>	;tuple_type	: ""("" _tuple_type_body "")"" {{}}	;tuple_type_body	: tuple_type_element_list _ellipsis	;tuple_type_element_list	: tuple_type_element	| tuple_type_element_list "","" tuple_type_element	;tuple_type_element	: _attributes _inout type	| _inout element_name type_annotation	;element_name	: <identifier>	;function_type	: type ""->"" type {{}}	;array_type	: ""["" type ""]"" {{}}	;dictionary_type	: ""["" type "":"" type ""]"" {{}}	;optional_type	: type ""?"" {{}}	;implicitly_unwrapped_optional_type	: type ""!!"" {{}}	;protocol_composition_type	: ""protocol"" ""<"" _protocol_identifier_list "">"" {{}}	;protocol_identifier_list	: protocol_identifier	| protocol_identifier_list "","" protocol_identifier	;protocol_identifier	: type_identifier	;metatype_type	: type ""."" ""Type"" {{}}	| type ""."" ""Protocol"" {{}}	;type_inheritance_clause	: "":"" type_inheritance_list	;type_inheritance_list	: type_identifier	| type_inheritance_list "","" type_identifier	;####################### Optional items######################_array_literal_items	:	| array_literal_items	;_associativity_clause	:	| associativity_clause	;_attribute_argument_clause	:	| attribute_argument_clause	;_attributes	:	| attributes	;_balanced_tokens	:	| balanced_tokens	;_binary_expressions	:	| binary_expressions	;_closure_signature	:	| closure_signature	;_comma	:	| "",""	;_convenience	:	| ""convenience""	;_declaration_specifiers	:	| declaration_specifiers	;_declarations	: 	| declarations	;_default_argument_clause	: 	| default_argument_clause	;_didSet_clause	:	| didSet_clause	;_ellipsis	:	| ""...""	;_else_clause	: 	| else_clause	;_expression	:	| expression 'expression'	;_expression_element_list	:	| expression_element_list	;_generic_argument_clause	:	| generic_argument_clause	;_generic_parameter_clause	: 	| generic_parameter_clause	;_guard_clause	:	| guard_clause	;_for_init	:	| for_init	;_function_result	:	| function_result	;_hash	:	| ""#""	;_import_kind	: 	| import_kind	;_infix_operator_attributes	:	| infix_operator_attributes	;_initializer	: 	| initializer	;_inout	: 	| ""inout""	;_label_name	: 	| label_name	;_let	:	| ""let""	;_local_parameter_name	:	| local_parameter_name	;_parenthesized_expression	:	| parenthesized_expression	;_precedence_clause	:	| precedence_clause	;_prefix_operator	:	| prefix_operator	;_protocol_identifier_list	: 	| protocol_identifier_list	;_protocol_member_declarations	:	| protocol_member_declarations	;_raw_value_assignment	: 	| raw_value_assignment	;_raw_value_style_enum_members	: 	| raw_value_style_enum_members	;_requirement_clause	:	| requirement_clause	;_semicolon	:	| "";""	;_setter_clause	: 	| setter_clause	;_setter_keyword_clause	:	| setter_keyword_clause	;_setter_name	: 	| setter_name	;_statements	:	| statements	;_switch_cases	: 	| switch_cases	;_tuple_pattern	:	| tuple_pattern	;_tuple_pattern_element_list	: 	| tuple_pattern_element_list	;_tuple_type	:	| tuple_type	;_tuple_type_body	:	| tuple_type_body	;_typealias_assignment	:	| typealias_assignment	;_type_annotation	:	| type_annotation	;_type_identifier	:	| type_identifier	;_type_inheritance_clause	:	| type_inheritance_clause	;_union_style_enum_members	:	| union_style_enum_members	;"! !!SwiftParser class methodsFor: 'generated'!startingStateForfile	^ 1! !!SwiftParser class methodsFor: 'generated'!symbolTypes	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SwiftFileNode #SwiftFileNode #OrderedCollection #SmaCCToken #OrderedCollection #SmaCCToken #SmaCCToken #SmaCCToken #SwiftStatementNode #OrderedCollection #SwiftLoopStatementNode #SwiftForStatementNode #OrderedCollection #SwiftForInStatementNode #SwiftWhileStatementNode #Object #SwiftDoWhileStatementNode #SwiftBranchStatementNode #SwiftIfStatementNode #Object #OrderedCollection #SwiftSwitchStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #Object #SwiftLabeledStatementNode #OrderedCollection #SmaCCToken #SwiftControlTransferStatementNode #SwiftBreakStatementNode #SwiftContinueStatementNode #SwiftFallThroughStatementNode #SwiftReturnStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SwiftParseNode #SwiftParseNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SwiftBlockNode #SwiftImportDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #SwiftConstantDeclarationNode #OrderedCollection #SwiftPatternInitializerNode #OrderedCollection #SwiftVariableDeclarationNode #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SwiftTypealiasDeclarationNode #OrderedCollection #SmaCCToken #OrderedCollection #SwiftFunctionDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SwiftBlockNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SwiftEnumDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SwiftStructDeclarationNode #SmaCCToken #OrderedCollection #SwiftClassDeclarationNode #SmaCCToken #OrderedCollection #SwiftProtocolDeclarationNode #SmaCCToken #OrderedCollection #SwiftParseNode #OrderedCollection #SwiftProtocolPropertyDeclarationNode #SwiftProtocolMethodDeclarationNode #SwiftProtocolInitializerDeclarationNode #SwiftProtocolSubscriptDeclarationNode #SwiftProtocolAssociationTypeDeclarationNode #SwiftInitializerDeclarationNode #OrderedCollection #SwiftBlockNode #SwiftDeinitializerDeclarationNode #SwiftExtensionDeclarationNode #OrderedCollection #SwiftSubscriptDeclarationNode #OrderedCollection #OrderedCollection #SwiftParseNode #SwiftPrefixOperatorDeclarationNode #SwiftPostfixOperatorDeclarationNode #SwiftInfixOperatorDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #Object #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #Object #OrderedCollection #Object #SwiftInOutExpressionNode #SwiftParseNode #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #SwiftParseNode #SwiftLiteralExpressionNode #OrderedCollection #OrderedCollection #Object #OrderedCollection #OrderedCollection #OrderedCollection #SwiftSelfExpressionNode #SwiftParseNode #SwiftSuperclassMethodExpressionNode #SwiftSuperclassSubscriptExpressionNode #SwiftSuperclassInitializerExpressionNode #SwiftClosureExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #SwiftImplicitMemberExpressionNode #SwiftParenthesizedExpressionNode #OrderedCollection #Object #SwiftWildcardExpressionNode #OrderedCollection #SwiftFunctionCallExpressionNode #SwiftClosureExpressionNode #SwiftInitializerExpressionNode #SwiftExplicitMemberExpressionNode #SwiftPostfixSelfExpressionNode #SwiftDynamicTypeExpressionNode #SwiftSubscriptExpressionNode #SwiftForcedValueExpressionNode #SwiftOptionalChainingExpressionNode #SwiftParseNode #OrderedCollection #SwiftTypeIdentifierNode #SmaCCToken #SwiftTupleTypeNode #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SwiftFunctionTypeNode #SwiftArrayTypeNode #SwiftDictionaryTypeNode #SwiftOptionalTypeNode #SwiftImplicitlyUnwrappedOptionalTypeNode #SwiftProtocolCompositionTypeNode #OrderedCollection #SwiftTypeIdentifierNode #SwiftMetatypeTypeNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #Object #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #SmaCCToken #OrderedCollection #SwiftParenthesizedExpressionNode #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SwiftTupleTypeNode #OrderedCollection #OrderedCollection #OrderedCollection #SwiftTypeIdentifierNode #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCErrorNode)! !!SwiftParser class methodsFor: 'generated'!reduceTable^#(	#(315 0 #reduceActionFor_attributes1: 21786625 false ) 	#(354 0 #reduceActionFor_statements1: 23508993 false ) 	#(328 0 #reduceActionFor_expression_element_list1: 22318081 false ) 	#(312 0 #reduceActionFor_array_literal_items1: 21618689 false ) 	#(281 1 #reduceActionForwildcard_expression1: 18946049 false ) 	#(261 1 #reduceActionForliteral_expression6: 16980998 false ) 	#(261 1 #reduceActionForliteral_expression4: 16980996 false ) 	#(261 1 #reduceActionForliteral_expression7: 16980999 false ) 	#(261 1 #reduceActionForliteral_expression5: 16980997 false ) 	#(339 0 #nil 22788097 false ) 	#(126 1 #reduceActionForfallthrough_statement1: 5109761 false ) 	#(362 0 #nil 23857153 false ) 	#(332 0 #reduceActionFor_array_literal_items1: 22536193 false ) 	#(327 0 #nil 22272001 false ) 	#(268 1 #reduceActionForself_expression1: 17643521 false ) 	#(318 0 #reduceActionFor_closure_signature1: 21911553 false ) 	#(329 0 #reduceActionFor_generic_argument_clause1: 22377473 false ) 	#(122 1 #liftFirstValue: 4818945 false ) 	#(95 1 #reduceActionForliteral1: 2267137 false ) 	#(95 1 #reduceActionForliteral2: 2267138 false ) 	#(94 1 #liftFirstValue: 2030593 false ) 	#(97 1 #liftFirstValue: 2433025 false ) 	#(95 1 #reduceActionForliteral3: 2267139 false ) 	#(261 1 #reduceActionForliteral_expression1: 16980993 false ) 	#(100 1 #reduceActionForstatements1: 2917377 false ) 	#(354 1 #reduceActionFor_statements2: 23508994 false ) 	#(350 0 #nil 23353345 false ) 	#(101 1 #liftFirstValue: 2994177 false ) 	#(101 1 #liftFirstValue: 2994178 false ) 	#(101 1 #liftFirstValue: 2994179 false ) 	#(101 1 #liftFirstValue: 2994180 false ) 	#(108 1 #liftFirstValue: 3796993 false ) 	#(108 1 #liftFirstValue: 3796994 false ) 	#(123 1 #liftFirstValue: 4856833 false ) 	#(123 1 #liftFirstValue: 4856834 false ) 	#(123 1 #liftFirstValue: 4856835 false ) 	#(123 1 #liftFirstValue: 4856836 false ) 	#(92 1 #reduceActionForfile1: 599041 false ) 	#(139 1 #liftFirstValue: 6216705 false ) 	#(139 1 #liftFirstValue: 6216706 false ) 	#(139 1 #liftFirstValue: 6216707 false ) 	#(139 1 #liftFirstValue: 6216708 false ) 	#(139 1 #liftFirstValue: 6216709 false ) 	#(139 1 #liftFirstValue: 6216710 false ) 	#(139 1 #liftFirstValue: 6216711 false ) 	#(139 1 #liftFirstValue: 6216712 false ) 	#(139 1 #liftFirstValue: 6216713 false ) 	#(139 1 #liftFirstValue: 6216714 false ) 	#(330 0 #reduceActionFor_generic_parameter_clause1: 22436865 false ) 	#(139 1 #liftFirstValue: 6216715 false ) 	#(139 1 #liftFirstValue: 6216716 false ) 	#(139 1 #liftFirstValue: 6216717 false ) 	#(139 1 #liftFirstValue: 6216718 false ) 	#(224 1 #liftFirstValue: 13775873 false ) 	#(224 1 #liftFirstValue: 13775874 false ) 	#(224 1 #liftFirstValue: 13775875 false ) 	#(248 1 #reduceActionForattributes1: 15515649 false ) 	#(315 1 #reduceActionFor_statements2: 21786626 false ) 	#(251 1 #liftFirstValue: 15836161 false ) 	#(253 1 #liftFirstValue: 16030723 false ) 	#(282 1 #reduceActionForpostfix_expression1: 18981889 false ) 	#(260 1 #liftFirstValue: 16738306 false ) 	#(261 1 #reduceActionForliteral_expression2: 16980994 false ) 	#(261 1 #reduceActionForliteral_expression3: 16980995 false ) 	#(260 1 #liftFirstValue: 16738307 false ) 	#(260 1 #liftFirstValue: 16738308 false ) 	#(269 1 #liftFirstValue: 17785857 false ) 	#(269 1 #liftFirstValue: 17785858 false ) 	#(269 1 #liftFirstValue: 17785859 false ) 	#(260 1 #liftFirstValue: 16738309 false ) 	#(260 1 #liftFirstValue: 16738311 false ) 	#(260 1 #liftFirstValue: 16738310 false ) 	#(260 1 #liftFirstValue: 16738312 false ) 	#(253 1 #liftFirstValue: 16030721 false ) 	#(342 0 #nil 22895617 false ) 	#(282 1 #reduceActionForpostfix_expression1: 18981891 false ) 	#(282 1 #reduceActionForpostfix_expression1: 18981892 false ) 	#(282 1 #reduceActionForpostfix_expression1: 18981893 false ) 	#(282 1 #reduceActionForpostfix_expression1: 18981894 false ) 	#(282 1 #reduceActionForpostfix_expression1: 18981895 false ) 	#(282 1 #reduceActionForpostfix_expression1: 18981896 false ) 	#(282 1 #reduceActionForpostfix_expression1: 18981897 false ) 	#(282 1 #reduceActionForpostfix_expression1: 18981898 false ) 	#(141 0 #reduceActionFordeclaration_specifiers1: 6639617 false ) 	#(321 0 #reduceActionFordeclaration_specifiers1: 22016001 false ) 	#(320 0 #nil 21979137 false ) 	#(143 1 #reduceActionFor_statements2: 6880257 false ) 	#(254 2 #reduceActionForin_out_expression1: 16140289 false ) 	#(280 1 #liftFirstValue: 18830337 false ) 	#(328 1 #reduceActionFor_statements2: 22318082 false ) 	#(279 1 #reduceActionFor_expression_element_list1: 18728961 false ) 	#(277 2 #reduceActionForimplicit_member_expression1: 18600961 false ) 	#(246 1 #liftFirstValue: 15422465 false ) 	#(314 0 #reduceActionFor_attribute_argument_clause1: 21723137 false ) 	#(264 1 #liftFirstValue: 17304577 false ) 	#(312 1 #reduceActionFor_statements2: 21618690 false ) 	#(319 0 #nil 21958657 false ) 	#(339 1 #liftFirstValue: 22788098 false ) 	#(124 2 #reduceActionForbreak_statement1: 4975617 false ) 	#(125 2 #reduceActionForcontinue_statement1: 5038081 false ) 	#(295 1 #liftFirstValue: 20525057 false ) 	#(363 0 #reduceActionFor_type_inheritance_clause1: 23900161 false ) 	#(357 0 #reduceActionFor_tuple_pattern_element_list1: 23618561 false ) 	#(234 1 #liftFirstValue: 14720001 false ) 	#(235 1 #liftFirstValue: 14747649 false ) 	#(332 1 #reduceActionFor_statements2: 22536194 false ) 	#(103 1 #reduceActionForfor_init1: 3376129 false ) 	#(361 0 #reduceActionFor_type_annotation1: 23814145 false ) 	#(233 1 #reduceActionForpattern3: 14501891 false ) 	#(233 1 #reduceActionForpattern5: 14501893 false ) 	#(233 1 #reduceActionForpattern6: 14501894 false ) 	#(241 1 #reduceActionFortype_casting_pattern1: 15131649 false ) 	#(241 1 #reduceActionFortype_casting_pattern2: 15131650 false ) 	#(233 1 #reduceActionForpattern7: 14501895 false ) 	#(252 1 #reduceActionForfor_init1: 15935489 false ) 	#(244 1 #liftFirstValue: 15248385 false ) 	#(103 1 #reduceActionFor_statements2: 3376130 false ) 	#(362 1 #liftFirstValue: 23857154 false ) 	#(110 1 #liftFirstValue: 3940354 false ) 	#(110 1 #liftFirstValue: 3940353 false ) 	#(327 1 #liftFirstValue: 22272002 false ) 	#(127 2 #reduceActionForreturn_statement1: 5178369 false ) 	#(168 1 #liftFirstValue: 9073665 false ) 	#(167 2 #reduceActionFortypealias_head1: 9024513 false ) 	#(106 1 #liftFirstValue: 3651586 false ) 	#(106 1 #liftFirstValue: 3651585 false ) 	#(338 0 #nil 22762497 false ) 	#(93 1 #reduceActionForfor_init1: 861185 false ) 	#(333 0 #reduceActionFor_type_annotation1: 22564865 false ) 	#(318 1 #reduceActionFor_statements2: 21911554 false ) 	#(329 1 #reduceActionFor_statements2: 22377474 false ) 	#(260 2 #reduceActionForprimary_expression1: 16738305 false ) 	#(253 2 #reduceActionForprefix_expression2: 16030722 false ) 	#(100 2 #reduceActionForstatements2: 2917378 false ) 	#(350 1 #liftFirstValue: 23353346 false ) 	#(99 2 #reduceActionForstatement3: 2547715 false ) 	#(99 2 #reduceActionForstatement3: 2547716 false ) 	#(99 2 #reduceActionForstatement3: 2547717 false ) 	#(120 2 #reduceActionForlabeled_statement1: 4619265 false ) 	#(120 2 #reduceActionForlabeled_statement1: 4619266 false ) 	#(121 2 #reduceActionFortypealias_head1: 4781057 false ) 	#(99 2 #reduceActionForstatement3: 2547718 false ) 	#(99 2 #reduceActionForstatement2: 2547714 false ) 	#(155 1 #liftFirstValue: 8145921 false ) 	#(153 2 #reduceActionForvariable_declaration1: 7619585 false ) 	#(150 1 #reduceActionForfor_init1: 7389185 false ) 	#(337 0 #reduceActionFor_initializer1: 22726657 false ) 	#(166 2 #reduceActionFortypealias_declaration1: 8953857 false ) 	#(172 1 #reduceActionForfunction_name1: 9340929 false ) 	#(172 1 #reduceActionForfunction_name2: 9340930 false ) 	#(330 1 #reduceActionFor_statements2: 22436866 false ) 	#(248 2 #reduceActionForattributes2: 15515650 false ) 	#(99 2 #reduceActionForstatement1: 2547713 false ) 	#(257 1 #liftFirstValue: 16551937 false ) 	#(96 1 #liftFirstValue: 2399233 false ) 	#(256 1 #reduceActionForstatements1: 16444417 false ) 	#(251 2 #reduceActionForexpression2: 15836162 false ) 	#(255 1 #reduceActionForbinary_expression4: 16187396 false ) 	#(290 2 #reduceActionForforced_value_expression1: 19950593 false ) 	#(291 2 #reduceActionForoptional_chaining_expression1: 20023297 false ) 	#(98 1 #liftFirstValue: 2466817 false ) 	#(282 2 #reduceActionForpostfix_expression2: 18981890 false ) 	#(283 2 #reduceActionForfunction_call_expression1: 19293185 false ) 	#(342 1 #liftFirstValue: 22895618 false ) 	#(320 1 #liftFirstValue: 21979138 false ) 	#(335 0 #reduceActionFor_import_kind1: 22627329 false ) 	#(190 1 #liftFirstValue: 10744833 false ) 	#(321 1 #reduceActionFor_statements2: 22016002 false ) 	#(183 2 #reduceActionForenum_declaration1: 10110977 false ) 	#(183 2 #reduceActionForenum_declaration2: 10110978 false ) 	#(278 3 #reduceActionForparenthesized_expression1: 18657281 false ) 	#(316 0 #reduceActionFor_attribute_argument_clause1: 21819393 false ) 	#(314 1 #reduceActionFor_statements2: 21723138 false ) 	#(245 3 #reduceActionForattribute1: 15358977 false ) 	#(265 3 #reduceActionFordictionary_literal2: 17354754 false ) 	#(319 1 #liftFirstValue: 21958658 false ) 	#(263 2 #reduceActionForarray_literal_items1: 17204225 false ) 	#(265 3 #reduceActionFordictionary_literal1: 17354753 false ) 	#(266 2 #reduceActionFordictionary_literal_items1: 17430529 false ) 	#(262 3 #reduceActionForarray_literal1: 17154049 false ) 	#(363 1 #reduceActionFor_statements2: 23900162 false ) 	#(294 2 #reduceActionFortype_identifier1: 20397057 false ) 	#(239 1 #reduceActionFor_statements2: 15017985 false ) 	#(357 1 #reduceActionFor_tuple_pattern_element_list2: 23618562 false ) 	#(238 1 #reduceActionFor_statements2: 14904321 false ) 	#(359 0 #reduceActionFor_type_annotation1: 23717889 false ) 	#(242 2 #reduceActionForis_pattern1: 15184897 false ) 	#(292 1 #liftFirstValue: 20156420 false ) 	#(292 1 #liftFirstValue: 20156421 false ) 	#(292 1 #liftFirstValue: 20156419 false ) 	#(292 1 #liftFirstValue: 20156417 false ) 	#(292 1 #liftFirstValue: 20156418 false ) 	#(292 1 #liftFirstValue: 20156422 false ) 	#(292 1 #liftFirstValue: 20156423 false ) 	#(292 1 #liftFirstValue: 20156424 false ) 	#(292 1 #liftFirstValue: 20156425 false ) 	#(236 2 #reduceActionForvalue_binding_pattern2: 14786562 false ) 	#(236 2 #reduceActionForvalue_binding_pattern1: 14786561 false ) 	#(361 1 #reduceActionFor_statements2: 23814146 false ) 	#(233 2 #reduceActionForpattern1: 14501889 false ) 	#(233 2 #reduceActionForpattern2: 14501890 false ) 	#(233 2 #reduceActionForpattern4: 14501892 false ) 	#(326 0 #reduceActionFor_initializer1: 22236161 false ) 	#(268 3 #reduceActionForself_expression4: 17643524 false ) 	#(268 3 #reduceActionForself_expression2: 17643522 false ) 	#(272 3 #reduceActionForsuperclass_initializer_expression1: 18069505 false ) 	#(270 3 #reduceActionForsuperclass_method_expression1: 17917953 false ) 	#(355 0 #reduceActionFor_switch_cases1: 23541761 false ) 	#(105 3 #reduceActionForwhile_statement1: 3552257 false ) 	#(177 2 #reduceActionForparameter_clause1: 9590785 false ) 	#(338 1 #liftFirstValue: 22762498 false ) 	#(325 0 #nil 22210561 false ) 	#(178 1 #reduceActionForparameter_list1: 9659393 false ) 	#(340 0 #nil 22821889 false ) 	#(276 1 #reduceActionForcapture_specifier2: 18514946 false ) 	#(276 1 #reduceActionForcapture_specifier3: 18514947 false ) 	#(276 1 #reduceActionForcapture_specifier4: 18514948 false ) 	#(276 1 #reduceActionForcapture_specifier1: 18514945 false ) 	#(333 1 #reduceActionFor_statements2: 22564866 false ) 	#(274 2 #reduceActionForclosure_signature5: 18204677 false ) 	#(137 1 #reduceActionForgeneric_argument_list1: 6042625 false ) 	#(138 1 #liftFirstValue: 6135809 false ) 	#(337 1 #reduceActionFor_statements2: 22726658 false ) 	#(151 2 #reduceActionForpattern_initializer1: 7519233 false ) 	#(169 2 #reduceActionForis_pattern1: 9108481 false ) 	#(176 0 #reduceActionForparameter_clauses1: 9527297 false ) 	#(349 0 #reduceActionFor_requirement_clause1: 23304193 false ) 	#(129 1 #reduceActionForgeneric_parameter_list1: 5394433 false ) 	#(130 1 #reduceActionForgeneric_parameter1: 5491713 false ) 	#(221 3 #reduceActionForsubscript_declaration1: 13449217 false ) 	#(221 3 #reduceActionForsubscript_declaration2: 13449218 false ) 	#(221 3 #reduceActionForsubscript_declaration3: 13449219 false ) 	#(259 2 #reduceActionFortype_casting_operator2: 16647170 false ) 	#(259 2 #reduceActionFortype_casting_operator1: 16647169 false ) 	#(255 2 #reduceActionForbinary_expression1: 16187393 false ) 	#(256 2 #reduceActionForstatements2: 16444418 false ) 	#(255 2 #reduceActionForbinary_expression2: 16187394 false ) 	#(255 2 #reduceActionForbinary_expression3: 16187395 false ) 	#(288 3 #reduceActionFordynamic_type_expression1: 19800065 false ) 	#(285 3 #reduceActionForinitializer_expression1: 19516417 false ) 	#(287 3 #reduceActionForpostfix_self_expression1: 19733505 false ) 	#(286 3 #reduceActionForexplicit_member_expression1: 19581953 false ) 	#(284 1 #liftFirstValue: 19473409 false ) 	#(283 3 #reduceActionForfunction_call_expression1: 19293186 false ) 	#(203 1 #liftFirstValue: 11801601 false ) 	#(218 3 #reduceActionFordeinitializer_declaration1: 13222913 false ) 	#(146 1 #reduceActionForimport_kind3: 7047171 false ) 	#(146 1 #reduceActionForimport_kind4: 7047172 false ) 	#(146 1 #reduceActionForimport_kind7: 7047175 false ) 	#(146 1 #reduceActionForimport_kind5: 7047173 false ) 	#(146 1 #reduceActionForimport_kind2: 7047170 false ) 	#(146 1 #reduceActionForimport_kind1: 7047169 false ) 	#(146 1 #reduceActionForimport_kind6: 7047174 false ) 	#(335 1 #reduceActionFor_statements2: 22627330 false ) 	#(206 1 #liftFirstValue: 11982849 false ) 	#(200 1 #liftFirstValue: 11603969 false ) 	#(222 3 #reduceActionForsubscript_head1: 13666305 false ) 	#(142 1 #reduceActionFordeclaration_specifier1: 6720513 false ) 	#(142 1 #reduceActionFordeclaration_specifier2: 6720514 false ) 	#(142 1 #reduceActionFordeclaration_specifier3: 6720515 false ) 	#(142 1 #reduceActionFordeclaration_specifier4: 6720516 false ) 	#(142 1 #reduceActionFordeclaration_specifier5: 6720517 false ) 	#(142 1 #reduceActionFordeclaration_specifier6: 6720518 false ) 	#(142 1 #reduceActionFordeclaration_specifier7: 6720519 false ) 	#(142 1 #reduceActionFordeclaration_specifier8: 6720520 false ) 	#(142 1 #reduceActionFordeclaration_specifier9: 6720521 false ) 	#(141 2 #reduceActionFordeclaration_specifiers2: 6639618 false ) 	#(216 3 #reduceActionForinitializer_head1: 13131777 false ) 	#(171 3 #reduceActionForfunction_head1: 9275393 false ) 	#(154 3 #reduceActionForfunction_head1: 8070145 false ) 	#(280 3 #reduceActionForexpression_element2: 18830338 false ) 	#(279 3 #reduceActionForexpression_element_list2: 18728962 false ) 	#(250 1 #reduceActionForbalanced_token4: 15640580 false ) 	#(250 1 #reduceActionForbalanced_token6: 15640582 false ) 	#(250 1 #reduceActionForbalanced_token5: 15640581 false ) 	#(316 1 #reduceActionFor_statements2: 21819394 false ) 	#(249 1 #reduceActionFor_statements2: 15567873 false ) 	#(267 3 #reduceActionFordictionary_literal_item1: 17551361 false ) 	#(263 3 #reduceActionForarray_literal_items2: 17204226 false ) 	#(266 3 #reduceActionFordictionary_literal_items2: 17430530 false ) 	#(144 3 #reduceActionForcode_block1: 6921217 false ) 	#(107 4 #reduceActionFordo_while_statement1: 3700737 false ) 	#(311 1 #reduceActionFortype_inheritance_list1: 21463041 false ) 	#(310 2 #reduceActionFortype_inheritance_clause1: 21405697 false ) 	#(140 0 #reduceActionFor_statements1: 6576129 false ) 	#(322 0 #reduceActionFor_statements1: 22073345 false ) 	#(219 4 #reduceActionForextension_declaration1: 13301761 false ) 	#(237 3 #reduceActionFortuple_pattern1: 14846977 false ) 	#(359 1 #reduceActionFor_statements2: 23717890 false ) 	#(298 1 #reduceActionFor_statements2: 20660225 false ) 	#(345 0 #reduceActionFortype_inheritance_list1: 23047169 false ) 	#(305 2 #reduceActionForimplicitly_unwrapped_optional_type1: 21046273 false ) 	#(304 2 #reduceActionForoptional_type1: 21011457 false ) 	#(243 3 #reduceActionForas_pattern1: 15212545 false ) 	#(252 3 #reduceActionForexpression_list2: 15935490 false ) 	#(191 1 #liftFirstValue: 10774529 false ) 	#(356 0 #reduceActionFor_tuple_pattern_element_list1: 23579649 false ) 	#(326 1 #reduceActionFor_statements2: 22236162 false ) 	#(109 4 #reduceActionForif_statement1: 3854337 false ) 	#(343 0 #reduceActionFor_initializer1: 22957057 false ) 	#(336 0 #reduceActionFor_infix_operator_attributes1: 22663169 false ) 	#(268 4 #reduceActionForself_expression3: 17643523 false ) 	#(271 4 #reduceActionForsuperclass_subscript_expression1: 17984513 false ) 	#(355 1 #reduceActionFor_switch_cases2: 23541762 false ) 	#(113 1 #reduceActionForswitch_cases1: 4188161 false ) 	#(325 1 #liftFirstValue: 22210562 false ) 	#(179 2 #reduceActionForparameter3: 9723907 false ) 	#(340 1 #liftFirstValue: 22821890 false ) 	#(334 0 #nil 22607873 false ) 	#(93 3 #reduceActionForexpression_list2: 861186 false ) 	#(274 3 #reduceActionForclosure_signature2: 18204674 false ) 	#(274 3 #reduceActionForclosure_signature1: 18204673 false ) 	#(273 4 #reduceActionForclosure_expression1: 18135041 false ) 	#(136 3 #reduceActionForgeneric_argument_clause1: 5981185 false ) 	#(150 3 #reduceActionForexpression_list2: 7389186 false ) 	#(153 4 #reduceActionForvariable_declaration2: 7619586 false ) 	#(153 4 #reduceActionForvariable_declaration3: 7619587 false ) 	#(153 4 #reduceActionForvariable_declaration4: 7619588 false ) 	#(152 2 #reduceActionFortypealias_head1: 7572481 false ) 	#(349 1 #reduceActionFor_statements2: 23304194 false ) 	#(217 1 #liftFirstValue: 13188097 false ) 	#(215 4 #reduceActionForinitializer_declaration1: 13008897 false ) 	#(223 3 #reduceActionForsubscript_result1: 13729793 false ) 	#(351 0 #reduceActionFor_setter_clause1: 23377921 false ) 	#(352 0 #reduceActionFor_setter_keyword_clause1: 23417857 false ) 	#(258 3 #reduceActionFordictionary_literal_item1: 16582657 false ) 	#(259 3 #reduceActionFortype_casting_operator3: 16647171 false ) 	#(286 4 #reduceActionForexplicit_member_expression2: 19581954 false ) 	#(289 4 #reduceActionForsubscript_expression1: 19873793 false ) 	#(148 1 #reduceActionForfunction_name1: 7230465 false ) 	#(148 1 #reduceActionForfunction_name2: 7230466 false ) 	#(145 4 #reduceActionForimport_declaration1: 6969345 false ) 	#(147 1 #reduceActionForimport_path1: 7145473 false ) 	#(364 0 #reduceActionFor_union_style_enum_members1: 23959553 false ) 	#(149 4 #reduceActionForconstant_declaration1: 7287809 false ) 	#(249 2 #reduceActionForbalanced_tokens2: 15567874 false ) 	#(247 3 #reduceActionForattribute_argument_clause1: 15457281 false ) 	#(322 1 #reduceActionFor_statements2: 22073346 false ) 	#(294 4 #reduceActionFortype_identifier2: 20397058 false ) 	#(238 3 #reduceActionFortuple_pattern_element_list2: 14904322 false ) 	#(297 2 #reduceActionFortuple_type_body1: 20602881 false ) 	#(300 1 #liftFirstValue: 20851713 false ) 	#(296 3 #reduceActionFortuple_type1: 20554753 false ) 	#(302 3 #reduceActionForarray_type1: 20925441 false ) 	#(308 1 #liftFirstValue: 21292033 false ) 	#(345 1 #reduceActionFor_protocol_identifier_list2: 23047170 false ) 	#(307 1 #reduceActionFortype_inheritance_list1: 21186561 false ) 	#(301 3 #reduceActionForfunction_type1: 20884481 false ) 	#(309 3 #reduceActionFormetatype_type2: 21335042 false ) 	#(309 3 #reduceActionFormetatype_type1: 21335041 false ) 	#(104 5 #reduceActionForfor_in_statement1: 3445761 false ) 	#(293 3 #reduceActionForsubscript_result1: 20353025 false ) 	#(356 1 #reduceActionFor_statements2: 23579650 false ) 	#(240 4 #reduceActionForenum_case_pattern1: 15054849 false ) 	#(111 2 #reduceActionFortypealias_head1: 4013058 false ) 	#(111 2 #reduceActionFortypealias_head1: 4013057 false ) 	#(336 1 #reduceActionFor_statements2: 22663170 false ) 	#(343 1 #reduceActionFor_statements2: 22957058 false ) 	#(313 0 #reduceActionFor_associativity_clause1: 21669889 false ) 	#(226 5 #reduceActionForpostfix_operator_declaration1: 13975553 false ) 	#(225 5 #reduceActionForprefix_operator_declaration1: 13895681 false ) 	#(331 0 #reduceActionFor_initializer1: 22499329 false ) 	#(117 2 #reduceActionFortypealias_head1: 4491265 false ) 	#(113 2 #reduceActionForswitch_cases2: 4188162 false ) 	#(114 2 #reduceActionForswitch_case2: 4248578 false ) 	#(114 2 #reduceActionForswitch_case1: 4248577 false ) 	#(114 2 #reduceActionForswitch_case4: 4248580 false ) 	#(114 2 #reduceActionForswitch_case3: 4248579 false ) 	#(112 5 #reduceActionForswitch_statement1: 4087809 false ) 	#(178 3 #reduceActionForparameter_list2: 9659394 false ) 	#(177 4 #reduceActionForparameter_clause2: 9590786 false ) 	#(334 1 #liftFirstValue: 22607874 false ) 	#(275 4 #reduceActionForcapture_list1: 18444289 false ) 	#(174 3 #reduceActionForsubscript_result1: 9450497 false ) 	#(274 4 #reduceActionForclosure_signature4: 18204676 false ) 	#(274 4 #reduceActionForclosure_signature3: 18204675 false ) 	#(137 3 #reduceActionForgeneric_argument_list2: 6042626 false ) 	#(153 5 #reduceActionForvariable_declaration5: 7619589 false ) 	#(175 1 #liftFirstValue: 9495553 false ) 	#(170 5 #reduceActionForfunction_declaration1: 9145345 false ) 	#(176 2 #reduceActionForparameter_clauses2: 9527298 false ) 	#(173 2 #reduceActionForfunction_signature1: 9389057 false ) 	#(129 3 #reduceActionForgeneric_parameter_list2: 5394434 false ) 	#(131 2 #reduceActionForrequirement_clause1: 5604353 false ) 	#(132 1 #reduceActionForrequirement_list1: 5655553 false ) 	#(133 1 #reduceActionForrequirement1: 5728257 false ) 	#(133 1 #reduceActionForrequirement2: 5728258 false ) 	#(128 4 #reduceActionForgeneric_parameter_clause1: 5310465 false ) 	#(130 3 #reduceActionForgeneric_parameter2: 5491714 false ) 	#(130 3 #reduceActionForgeneric_parameter2: 5491715 false ) 	#(351 1 #reduceActionFor_statements2: 23377922 false ) 	#(352 1 #reduceActionFor_statements2: 23417858 false ) 	#(161 2 #reduceActionForgetter_keyword_clause1: 8599553 false ) 	#(162 2 #reduceActionForgetter_keyword_clause1: 8646657 false ) 	#(353 0 #reduceActionFor_setter_name1: 23473153 false ) 	#(346 0 #reduceActionFor_statements1: 23109633 false ) 	#(205 5 #reduceActionForprotocol_declaration1: 11872257 false ) 	#(186 1 #reduceActionFor_union_style_enum_members1: 10416129 false ) 	#(364 1 #reduceActionFor_union_style_enum_members2: 23959554 false ) 	#(185 1 #reduceActionFor_statements2: 10306561 false ) 	#(186 1 #reduceActionForunion_style_enum_member2: 10416130 false ) 	#(250 3 #reduceActionForattribute_argument_clause1: 15640577 false ) 	#(250 3 #reduceActionForbalanced_token2: 15640578 false ) 	#(250 3 #reduceActionForbalanced_token3: 15640579 false ) 	#(311 3 #reduceActionFortype_inheritance_list2: 21463042 false ) 	#(140 2 #reduceActionForstatements2: 6576130 false ) 	#(220 3 #reduceActionForextension_body1: 13405185 false ) 	#(298 3 #reduceActionFortuple_type_element_list2: 20660226 false ) 	#(299 3 #reduceActionFortuple_type_element1: 20761601 false ) 	#(299 3 #reduceActionFortuple_type_element2: 20761602 false ) 	#(306 4 #reduceActionForprotocol_composition_type1: 21102593 false ) 	#(230 1 #liftFirstValue: 14294017 false ) 	#(229 2 #reduceActionFortypealias_head1: 14238721 false ) 	#(227 6 #reduceActionForinfix_operator_declaration1: 14058497 false ) 	#(313 1 #reduceActionFor_statements2: 21669890 false ) 	#(228 2 #reduceActionForinfix_operator_attributes1: 14163969 false ) 	#(115 3 #reduceActionForcase_label1: 4358145 false ) 	#(331 1 #reduceActionFor_statements2: 22499330 false ) 	#(116 2 #reduceActionForcase_item_list1: 4402177 false ) 	#(180 1 #reduceActionForfunction_name2: 9961474 false ) 	#(180 1 #reduceActionForfunction_name1: 9961473 false ) 	#(341 0 #reduceActionFor_initializer1: 22842369 false ) 	#(324 0 #reduceActionFor_setter_clause1: 22171649 false ) 	#(156 4 #reduceActionForgetter_setter_block1: 8179713 false ) 	#(156 4 #reduceActionForgetter_setter_block2: 8179714 false ) 	#(160 4 #reduceActionForgetter_setter_keyword_block1: 8454145 false ) 	#(160 4 #reduceActionForgetter_setter_keyword_block2: 8454146 false ) 	#(157 3 #reduceActionForinitializer_head1: 8284161 false ) 	#(353 1 #reduceActionFor_statements2: 23473154 false ) 	#(202 6 #reduceActionForclass_declaration1: 11676673 false ) 	#(147 3 #reduceActionForimport_path2: 7145474 false ) 	#(209 1 #reduceActionForstatements1: 12286977 false ) 	#(346 1 #reduceActionFor_statements2: 23109634 false ) 	#(208 1 #liftFirstValue: 12076033 false ) 	#(208 1 #liftFirstValue: 12076034 false ) 	#(208 1 #liftFirstValue: 12076035 false ) 	#(208 1 #liftFirstValue: 12076036 false ) 	#(208 1 #liftFirstValue: 12076037 false ) 	#(199 6 #reduceActionForstruct_declaration1: 11474945 false ) 	#(348 0 #reduceActionFor_union_style_enum_members1: 23233537 false ) 	#(185 2 #reduceActionForunion_style_enum_members2: 10306562 false ) 	#(184 5 #reduceActionForunion_style_enum1: 10211329 false ) 	#(303 5 #reduceActionFordictionary_type1: 20961281 false ) 	#(307 3 #reduceActionFortype_inheritance_list2: 21186562 false ) 	#(102 7 #reduceActionForfor_statement1: 3092481 false ) 	#(232 1 #reduceActionForliteral1: 14394369 false ) 	#(232 1 #reduceActionForliteral3: 14394371 false ) 	#(232 1 #reduceActionForliteral2: 14394370 false ) 	#(231 2 #reduceActionForassociativity_clause1: 14336001 false ) 	#(118 2 #reduceActionFortypealias_head1: 4526081 false ) 	#(119 1 #liftFirstValue: 4584449 false ) 	#(181 1 #reduceActionForfunction_name2: 10003458 false ) 	#(181 1 #reduceActionForfunction_name1: 10003457 false ) 	#(341 1 #reduceActionFor_statements2: 22842370 false ) 	#(324 1 #reduceActionFor_statements2: 22171650 false ) 	#(132 3 #reduceActionForrequirement_list2: 5655554 false ) 	#(134 3 #reduceActionForconformance_requirement1: 5796865 false ) 	#(134 3 #reduceActionForconformance_requirement1: 5796866 false ) 	#(135 3 #reduceActionForsame_type_requirement1: 5914625 false ) 	#(158 4 #reduceActionForsetter_clause1: 8342529 false ) 	#(360 0 #reduceActionFor_typealias_assignment1: 23760897 false ) 	#(209 2 #reduceActionForstatements2: 12286978 false ) 	#(207 3 #reduceActionForextension_body1: 12016641 false ) 	#(194 1 #reduceActionFor_union_style_enum_members1: 11059201 false ) 	#(348 1 #reduceActionFor_statements2: 23233538 false ) 	#(193 1 #reduceActionFor_statements2: 10933249 false ) 	#(194 1 #reduceActionForraw_value_style_enum_member2: 11059202 false ) 	#(187 3 #reduceActionForunion_style_enum_case_clause1: 10491905 false ) 	#(188 1 #reduceActionFor_statements2: 10574849 false ) 	#(358 0 #nil 23685121 false ) 	#(116 4 #reduceActionForcase_item_list2: 4402178 false ) 	#(323 0 #reduceActionFor_initializer1: 22111233 false ) 	#(163 4 #reduceActionForgetter_setter_block1: 8693761 false ) 	#(163 4 #reduceActionForgetter_setter_block2: 8693762 false ) 	#(159 3 #reduceActionFordictionary_literal_item1: 8414209 false ) 	#(204 3 #reduceActionForextension_body1: 11832321 false ) 	#(360 1 #reduceActionFor_statements2: 23760898 false ) 	#(214 3 #reduceActionForprotocol_association_type_declaration1: 12895233 false ) 	#(212 3 #reduceActionForprotocol_initializer_declaration1: 12684289 false ) 	#(213 3 #reduceActionForprotocol_subscript_declaration1: 12790785 false ) 	#(201 3 #reduceActionForextension_body1: 11635713 false ) 	#(193 2 #reduceActionForunion_style_enum_members2: 10933250 false ) 	#(192 7 #reduceActionForraw_value_style_enum1: 10809345 false ) 	#(358 1 #liftFirstValue: 23685122 false ) 	#(189 2 #reduceActionForunion_style_enum_case1: 10688513 false ) 	#(102 9 #reduceActionForfor_statement2: 3092482 false ) 	#(323 1 #reduceActionFor_statements2: 22111234 false ) 	#(179 7 #reduceActionForparameter2: 9723906 false ) 	#(179 7 #reduceActionForparameter1: 9723905 false ) 	#(165 4 #reduceActionForsetter_clause1: 8879105 false ) 	#(164 4 #reduceActionForsetter_clause1: 8801281 false ) 	#(210 4 #reduceActionForprotocol_property_declaration1: 12441601 false ) 	#(211 4 #reduceActionForprotocol_method_declaration1: 12569601 false ) 	#(347 0 #reduceActionFor_associativity_clause1: 23179265 false ) 	#(195 3 #reduceActionForraw_value_style_enum_case_clause1: 11143169 false ) 	#(196 1 #reduceActionForraw_value_style_enum_case_list1: 11234305 false ) 	#(188 3 #reduceActionForunion_style_enum_case_list2: 10574850 false ) 	#(182 2 #reduceActionFortypealias_head1: 10051585 false ) 	#(347 1 #reduceActionFor_statements2: 23179266 false ) 	#(197 2 #reduceActionForraw_value_style_enum_case1: 11364353 false ) 	#(198 2 #reduceActionForassociativity_clause1: 11435009 false ) 	#(196 3 #reduceActionForraw_value_style_enum_case_list2: 11234306 false )	).! !!SwiftParser class methodsFor: 'generated'!symbolNames	^ #('"!!"' '"#"' '"&"' '"("' '")"' '","' '"->"' '"."' '"..."' '":"' '";"' '"<"' '"="' '"=="' '">"' '"?"' '"@"' '"Protocol"' '"Type"' '"["' '"]"' '"_"' '"__COLUMN__"' '"__FILE__"' '"__FUNCTION__"' '"__LINE__"' '"as"' '"associativity"' '"break"' '"case"' '"class"' '"continue"' '"convenience"' '"default"' '"deinit"' '"didSet"' '"do"' '"dynamicType"' '"else"' '"enum"' '"extension"' '"fallthrough"' '"for"' '"func"' '"get"' '"if"' '"import"' '"in"' '"infix"' '"init"' '"inout"' '"is"' '"left"' '"let"' '"mutating"' '"none"' '"nonmutating"' '"operator"' '"override"' '"postfix"' '"precedence"' '"prefix"' '"protocol"' '"return"' '"right"' '"self"' '"set"' '"static"' '"struct"' '"subscript"' '"super"' '"switch"' '"typealias"' '"unowned"' '"unowned(safe)"' '"unowned(unsafe)"' '"var"' '"weak"' '"where"' '"while"' '"willSet"' '"{"' '"}"' '<whitespace>' '<comment>' '<identifier>' '<integer_literal>' '<floating_point_literal>' '<full_string_literal>' '<operator>' 'B e g i n' 'file' 'identifier_list' 'string_literal' 'literal' 'binary_operator' 'prefix_operator' 'postfix_operator' 'statement' 'statements' 'loop_statement' 'for_statement' 'for_init' 'for_in_statement' 'while_statement' 'while_condition' 'do_while_statement' 'branch_statement' 'if_statement' 'if_condition' 'else_clause' 'switch_statement' 'switch_cases' 'switch_case' 'case_label' 'case_item_list' 'default_label' 'guard_clause' 'guard_expression' 'labeled_statement' 'statement_label' 'label_name' 'control_transfer_statement' 'break_statement' 'continue_statement' 'fallthrough_statement' 'return_statement' 'generic_parameter_clause' 'generic_parameter_list' 'generic_parameter' 'requirement_clause' 'requirement_list' 'requirement' 'conformance_requirement' 'same_type_requirement' 'generic_argument_clause' 'generic_argument_list' 'generic_argument' 'declaration' 'declarations' 'declaration_specifiers' 'declaration_specifier' 'top_level_declaration' 'code_block' 'import_declaration' 'import_kind' 'import_path' 'import_path_identifier' 'constant_declaration' 'pattern_initializer_list' 'pattern_initializer' 'initializer' 'variable_declaration' 'variable_declaration_head' 'variable_name' 'getter_setter_block' 'getter_clause' 'setter_clause' 'setter_name' 'getter_setter_keyword_block' 'getter_keyword_clause' 'setter_keyword_clause' 'willSet_didSet_block' 'willSet_clause' 'didSet_clause' 'typealias_declaration' 'typealias_head' 'typealias_name' 'typealias_assignment' 'function_declaration' 'function_head' 'function_name' 'function_signature' 'function_result' 'function_body' 'parameter_clauses' 'parameter_clause' 'parameter_list' 'parameter' 'parameter_name' 'local_parameter_name' 'default_argument_clause' 'enum_declaration' 'union_style_enum' 'union_style_enum_members' 'union_style_enum_member' 'union_style_enum_case_clause' 'union_style_enum_case_list' 'union_style_enum_case' 'enum_name' 'enum_case_name' 'raw_value_style_enum' 'raw_value_style_enum_members' 'raw_value_style_enum_member' 'raw_value_style_enum_case_clause' 'raw_value_style_enum_case_list' 'raw_value_style_enum_case' 'raw_value_assignment' 'struct_declaration' 'struct_name' 'struct_body' 'class_declaration' 'class_name' 'class_body' 'protocol_declaration' 'protocol_name' 'protocol_body' 'protocol_member_declaration' 'protocol_member_declarations' 'protocol_property_declaration' 'protocol_method_declaration' 'protocol_initializer_declaration' 'protocol_subscript_declaration' 'protocol_association_type_declaration' 'initializer_declaration' 'initializer_head' 'initializer_body' 'deinitializer_declaration' 'extension_declaration' 'extension_body' 'subscript_declaration' 'subscript_head' 'subscript_result' 'operator_declaration' 'prefix_operator_declaration' 'postfix_operator_declaration' 'infix_operator_declaration' 'infix_operator_attributes' 'precedence_clause' 'precedence_level' 'associativity_clause' 'associativity' 'pattern' 'wildcard_pattern' 'identifier_pattern' 'value_binding_pattern' 'tuple_pattern' 'tuple_pattern_element_list' 'tuple_pattern_element' 'enum_case_pattern' 'type_casting_pattern' 'is_pattern' 'as_pattern' 'expression_pattern' 'attribute' 'attribute_name' 'attribute_argument_clause' 'attributes' 'balanced_tokens' 'balanced_token' 'expression' 'expression_list' 'prefix_expression' 'in_out_expression' 'binary_expression' 'binary_expressions' 'assignment_operator' 'conditional_operator' 'type_casting_operator' 'primary_expression' 'literal_expression' 'array_literal' 'array_literal_items' 'array_literal_item' 'dictionary_literal' 'dictionary_literal_items' 'dictionary_literal_item' 'self_expression' 'superclass_expression' 'superclass_method_expression' 'superclass_subscript_expression' 'superclass_initializer_expression' 'closure_expression' 'closure_signature' 'capture_list' 'capture_specifier' 'implicit_member_expression' 'parenthesized_expression' 'expression_element_list' 'expression_element' 'wildcard_expression' 'postfix_expression' 'function_call_expression' 'trailing_closure' 'initializer_expression' 'explicit_member_expression' 'postfix_self_expression' 'dynamic_type_expression' 'subscript_expression' 'forced_value_expression' 'optional_chaining_expression' 'type' 'type_annotation' 'type_identifier' 'type_name' 'tuple_type' 'tuple_type_body' 'tuple_type_element_list' 'tuple_type_element' 'element_name' 'function_type' 'array_type' 'dictionary_type' 'optional_type' 'implicitly_unwrapped_optional_type' 'protocol_composition_type' 'protocol_identifier_list' 'protocol_identifier' 'metatype_type' 'type_inheritance_clause' 'type_inheritance_list' '_array_literal_items' '_associativity_clause' '_attribute_argument_clause' '_attributes' '_balanced_tokens' '_binary_expressions' '_closure_signature' '_comma' '_convenience' '_declaration_specifiers' '_declarations' '_default_argument_clause' '_didSet_clause' '_ellipsis' '_else_clause' '_expression' '_expression_element_list' '_generic_argument_clause' '_generic_parameter_clause' '_guard_clause' '_for_init' '_function_result' '_hash' '_import_kind' '_infix_operator_attributes' '_initializer' '_inout' '_label_name' '_let' '_local_parameter_name' '_parenthesized_expression' '_precedence_clause' '_prefix_operator' '_protocol_identifier_list' '_protocol_member_declarations' '_raw_value_assignment' '_raw_value_style_enum_members' '_requirement_clause' '_semicolon' '_setter_clause' '_setter_keyword_clause' '_setter_name' '_statements' '_switch_cases' '_tuple_pattern' '_tuple_pattern_element_list' '_tuple_type' '_tuple_type_body' '_typealias_assignment' '_type_annotation' '_type_identifier' '_type_inheritance_clause' '_union_style_enum_members' 'E O F' 'error')! !!SwiftParser class methodsFor: 'generated'!transitionTable^#(#[1 0 9 0 3 0 13 0 4 0 17 0 8 0 21 0 17 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 49 0 29 0 6 0 31 0 53 0 32 0 6 0 33 0 6 0 35 0 57 0 37 0 61 0 41 0 65 0 42 0 69 0 43 0 6 0 44 0 73 0 46 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 81 0 64 0 85 0 66 0 6 0 68 0 6 0 69 0 6 0 70 0 89 0 71 0 93 0 72 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 0 101 0 80 0 105 0 82 0 7 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 129 0 92 0 133 0 94 0 137 0 95 0 141 0 97 0 145 0 99 0 149 0 100 0 153 0 101 0 153 0 102 0 153 0 104 0 153 0 105 0 153 0 107 0 173 0 108 0 173 0 109 0 173 0 112 0 185 0 120 0 189 0 121 0 193 0 122 0 197 0 123 0 197 0 124 0 197 0 125 0 197 0 126 0 197 0 127 0 217 0 139 0 221 0 143 0 217 0 145 0 217 0 149 0 217 0 153 0 237 0 154 0 217 0 166 0 245 0 167 0 217 0 170 0 253 0 171 0 217 0 183 0 217 0 199 0 217 0 202 0 217 0 205 0 217 0 215 1 21 0 216 0 217 0 218 0 217 0 219 0 217 0 221 1 37 0 222 0 217 0 224 0 217 0 225 0 217 0 226 0 217 0 227 1 57 0 245 1 61 0 248 1 65 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 165 1 59 1 169 1 98 0 10 1 109] #[0 1 173 0 86] #[1 0 9 0 3 0 13 0 4 0 14 0 5 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 177 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 1 189 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 185 1 23 1 189 1 24 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 193 1 72] #[0 1 197 0 86] #[0 1 205 0 86 0 246] #[1 0 9 0 3 0 13 0 4 0 17 0 8 1 209 0 10 0 25 0 20 0 18 0 21 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 1 217 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 221 1 7 1 225 1 8 1 89 1 9 1 229 1 10 1 233 1 11 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 237 1 56] #[0 0 22 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 26 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 30 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 34 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 38 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 42 0 3 0 42 0 4 0 42 0 8 0 42 0 11 0 42 0 17 0 42 0 20 0 42 0 22 0 42 0 23 0 42 0 24 0 42 0 25 0 42 0 26 0 42 0 29 0 42 0 30 0 42 0 31 0 42 0 32 0 42 0 33 0 42 0 34 0 42 0 35 0 42 0 37 0 42 0 41 0 42 0 42 0 42 0 43 0 42 0 44 0 42 0 46 0 42 0 47 0 42 0 50 0 42 0 54 0 42 0 55 0 42 0 57 0 42 0 58 0 42 0 59 0 42 0 63 0 42 0 64 0 42 0 66 0 42 0 68 0 42 0 69 0 42 0 70 0 42 0 71 0 42 0 72 0 42 0 73 0 42 0 74 0 42 0 75 0 42 0 76 0 42 0 77 0 42 0 78 0 42 0 80 0 42 0 82 0 42 0 83 0 11 0 86 0 42 0 87 0 42 0 88 0 42 0 89 0 42 0 90 1 249 0 122 1 249 1 83 0 42 1 109] #[1 0 42 0 3 0 42 0 4 0 42 0 8 0 42 0 11 0 42 0 17 0 42 0 20 0 42 0 22 0 42 0 23 0 42 0 24 0 42 0 25 0 42 0 26 0 42 0 29 0 42 0 30 0 42 0 31 0 42 0 32 0 42 0 33 0 42 0 34 0 42 0 35 0 42 0 37 0 42 0 41 0 42 0 42 0 42 0 43 0 42 0 44 0 42 0 46 0 42 0 47 0 42 0 50 0 42 0 54 0 42 0 55 0 42 0 57 0 42 0 58 0 42 0 59 0 42 0 63 0 42 0 64 0 42 0 66 0 42 0 68 0 42 0 69 0 42 0 70 0 42 0 71 0 42 0 72 0 42 0 73 0 42 0 74 0 42 0 75 0 42 0 76 0 42 0 77 0 42 0 78 0 42 0 80 0 42 0 82 0 42 0 83 0 11 0 86 0 42 0 87 0 42 0 88 0 42 0 89 0 42 0 90 1 253 0 122 1 253 1 83 0 42 1 109] #[1 2 1 0 82 2 5 0 144] #[1 2 17 0 86 2 13 1 38 2 17 1 39] #[0 0 46 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 9 0 3 2 21 0 4 0 15 0 8 0 54 0 11 0 21 0 17 0 25 0 20 2 25 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 6 0 31 2 29 0 52 2 33 0 54 0 6 0 55 0 6 0 57 0 6 0 59 0 85 0 66 0 6 0 68 0 89 0 71 0 6 0 74 0 6 0 75 0 6 0 76 0 19 0 77 0 6 0 78 0 105 0 82 2 41 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 2 45 0 103 2 49 0 153 0 237 0 154 2 53 0 233 2 57 0 234 2 61 0 235 2 65 0 236 2 69 0 237 2 73 0 240 2 77 0 241 2 81 0 242 2 85 0 243 2 89 0 244 1 57 0 245 1 61 0 248 2 93 0 251 2 97 0 252 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 2 113 1 38 2 17 1 39 2 105 1 59 2 109 1 76 2 113 1 106] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 21 0 17 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 6 0 31 0 6 0 33 0 6 0 35 0 61 0 41 0 6 0 44 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 85 0 66 0 6 0 68 0 6 0 69 0 6 0 70 0 89 0 71 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 0 105 0 82 0 23 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 2 117 0 110 2 117 0 139 2 117 0 145 2 117 0 149 2 117 0 153 0 237 0 154 2 117 0 166 0 245 0 167 2 117 0 170 0 253 0 171 2 117 0 183 2 117 0 199 2 117 0 202 2 117 0 205 2 117 0 215 1 21 0 216 2 117 0 218 2 117 0 219 2 117 0 221 1 37 0 222 2 117 0 224 2 117 0 225 2 117 0 226 2 117 0 227 1 57 0 245 1 61 0 248 2 117 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 165 1 59] #[1 2 129 0 49 2 133 0 60 2 137 0 62] #[1 0 27 0 3 0 31 0 4 0 35 0 8 0 58 0 11 0 58 0 17 0 39 0 20 0 43 0 22 0 47 0 23 0 51 0 24 0 55 0 25 0 59 0 26 0 58 0 29 0 58 0 30 0 58 0 31 0 58 0 32 0 58 0 33 0 58 0 34 0 58 0 35 0 58 0 37 0 58 0 41 0 58 0 42 0 58 0 43 0 58 0 44 0 58 0 46 0 58 0 47 0 58 0 50 0 58 0 54 0 58 0 55 0 58 0 57 0 58 0 58 0 58 0 59 0 58 0 63 0 58 0 64 0 63 0 66 0 58 0 68 0 58 0 69 0 58 0 70 0 67 0 71 0 58 0 72 0 58 0 73 0 58 0 74 0 58 0 75 0 58 0 76 0 58 0 77 0 58 0 78 0 58 0 80 0 71 0 82 0 58 0 83 0 75 0 86 0 79 0 87 0 83 0 88 0 87 0 89 0 91 0 90 0 133 0 94 0 137 0 95 0 141 0 97 2 145 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 2 145 1 71 0 58 1 109] #[1 0 62 0 1 0 62 0 3 0 62 0 4 0 62 0 5 0 62 0 6 0 95 0 8 0 62 0 9 0 62 0 10 0 62 0 11 0 62 0 13 0 62 0 16 0 62 0 17 0 99 0 20 0 62 0 21 0 62 0 22 0 62 0 23 0 62 0 24 0 62 0 25 0 62 0 26 0 62 0 27 0 62 0 29 0 62 0 30 0 62 0 31 0 62 0 32 0 62 0 33 0 62 0 34 0 62 0 35 0 62 0 37 0 62 0 41 0 62 0 42 0 62 0 43 0 62 0 44 0 62 0 46 0 62 0 47 0 62 0 48 0 62 0 50 0 62 0 52 0 62 0 54 0 62 0 55 0 62 0 57 0 62 0 58 0 62 0 59 0 62 0 63 0 62 0 64 0 62 0 66 0 62 0 68 0 62 0 69 0 62 0 70 0 62 0 71 0 62 0 72 0 62 0 73 0 62 0 74 0 62 0 75 0 62 0 76 0 62 0 77 0 62 0 78 0 62 0 79 0 62 0 80 0 62 0 82 0 62 0 83 0 62 0 86 0 62 0 87 0 62 0 88 0 62 0 89 0 62 0 90 0 62 1 109] #[1 2 157 0 8 2 161 0 20] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 2 165 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 2 173 0 86 0 168] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 21 0 17 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 6 0 31 0 6 0 33 0 6 0 35 0 61 0 41 0 6 0 44 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 85 0 66 0 6 0 68 0 6 0 69 0 6 0 70 0 89 0 71 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 0 105 0 82 0 23 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 2 177 0 106 2 177 0 139 2 177 0 145 2 177 0 149 2 177 0 153 0 237 0 154 2 177 0 166 0 245 0 167 2 177 0 170 0 253 0 171 2 177 0 183 2 177 0 199 2 177 0 202 2 177 0 205 2 177 0 215 1 21 0 216 2 177 0 218 2 177 0 219 2 177 0 221 1 37 0 222 2 177 0 224 2 177 0 225 2 177 0 226 2 177 0 227 1 57 0 245 1 61 0 248 2 177 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 165 1 59] #[1 0 66 0 3 0 103 0 4 0 66 0 8 0 66 0 17 0 107 0 20 0 66 0 22 0 66 0 23 0 66 0 24 0 66 0 25 0 66 0 26 0 66 0 29 0 66 0 31 0 66 0 32 0 66 0 33 0 66 0 35 0 66 0 37 0 66 0 41 0 66 0 42 0 66 0 43 0 66 0 44 0 66 0 46 0 66 0 47 0 66 0 50 0 66 0 54 0 66 0 55 0 66 0 57 0 66 0 58 0 66 0 59 0 66 0 63 0 66 0 64 0 66 0 66 0 66 0 68 0 66 0 69 0 66 0 70 0 66 0 71 0 66 0 72 0 66 0 73 0 66 0 74 0 66 0 75 0 66 0 76 0 66 0 77 0 66 0 78 0 66 0 80 0 66 0 82 0 111 0 86 0 66 0 87 0 66 0 88 0 66 0 89 0 66 0 90 2 201 0 93 2 205 0 177 2 209 1 18 2 213 1 19 2 217 1 62] #[1 0 70 0 1 0 70 0 3 0 70 0 4 0 70 0 8 0 74 0 10 0 70 0 11 2 221 0 12 0 70 0 13 0 70 0 16 0 70 0 17 0 70 0 20 0 70 0 22 0 70 0 23 0 70 0 24 0 70 0 25 0 70 0 26 0 70 0 27 0 70 0 29 0 70 0 30 0 70 0 31 0 70 0 32 0 70 0 33 0 70 0 34 0 70 0 35 0 70 0 37 0 70 0 41 0 70 0 42 0 70 0 43 0 70 0 44 0 70 0 46 0 70 0 47 0 70 0 50 0 70 0 52 0 70 0 54 0 70 0 55 0 70 0 57 0 70 0 58 0 70 0 59 0 70 0 63 0 70 0 64 0 70 0 66 0 70 0 68 0 70 0 69 0 70 0 70 0 70 0 71 0 70 0 72 0 70 0 73 0 70 0 74 0 70 0 75 0 70 0 76 0 70 0 77 0 70 0 78 0 70 0 80 0 70 0 82 0 70 0 83 0 70 0 86 0 70 0 87 0 70 0 88 0 70 0 89 0 70 0 90 2 225 0 136 2 229 1 73 0 70 1 109] #[0 0 78 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 82 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 86 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 90 0 4 0 8 0 20 0 22 0 23 0 24 0 25 0 26 0 66 0 71 0 82 0 86 0 87 0 88 0 89] #[0 0 0 1 109] #[0 0 94 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 98 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 133 0 94 0 137 0 95 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 2 233 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 0 102 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 21 0 17 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 49 0 29 0 6 0 31 0 53 0 32 0 6 0 33 0 6 0 35 0 57 0 37 0 61 0 41 0 65 0 42 0 69 0 43 0 6 0 44 0 73 0 46 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 81 0 64 0 85 0 66 0 6 0 68 0 6 0 69 0 6 0 70 0 89 0 71 0 93 0 72 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 0 101 0 80 0 105 0 82 0 106 0 83 0 7 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 2 237 0 99 0 153 0 101 0 153 0 102 0 153 0 104 0 153 0 105 0 153 0 107 0 173 0 108 0 173 0 109 0 173 0 112 0 185 0 120 0 189 0 121 0 193 0 122 0 197 0 123 0 197 0 124 0 197 0 125 0 197 0 126 0 197 0 127 0 217 0 139 0 217 0 145 0 217 0 149 0 217 0 153 0 237 0 154 0 217 0 166 0 245 0 167 0 217 0 170 0 253 0 171 0 217 0 183 0 217 0 199 0 217 0 202 0 217 0 205 0 217 0 215 1 21 0 216 0 217 0 218 0 217 0 219 0 217 0 221 1 37 0 222 0 217 0 224 0 217 0 225 0 217 0 226 0 217 0 227 1 57 0 245 1 61 0 248 1 65 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 165 1 59 0 106 1 109] #[1 0 110 0 3 0 110 0 4 0 110 0 8 2 245 0 11 0 110 0 17 0 110 0 20 0 110 0 22 0 110 0 23 0 110 0 24 0 110 0 25 0 110 0 26 0 110 0 29 0 110 0 30 0 110 0 31 0 110 0 32 0 110 0 33 0 110 0 34 0 110 0 35 0 110 0 37 0 110 0 41 0 110 0 42 0 110 0 43 0 110 0 44 0 110 0 46 0 110 0 47 0 110 0 50 0 110 0 54 0 110 0 55 0 110 0 57 0 110 0 58 0 110 0 59 0 110 0 63 0 110 0 64 0 110 0 66 0 110 0 68 0 110 0 69 0 110 0 70 0 110 0 71 0 110 0 72 0 110 0 73 0 110 0 74 0 110 0 75 0 110 0 76 0 110 0 77 0 110 0 78 0 110 0 80 0 110 0 82 0 110 0 83 0 110 0 86 0 110 0 87 0 110 0 88 0 110 0 89 0 110 0 90 2 245 1 94 0 110 1 109] #[0 0 114 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 118 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 122 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 126 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 110 0 3 0 110 0 4 0 110 0 8 2 249 0 11 0 110 0 17 0 110 0 20 0 110 0 22 0 110 0 23 0 110 0 24 0 110 0 25 0 110 0 26 0 110 0 29 0 110 0 30 0 110 0 31 0 110 0 32 0 110 0 33 0 110 0 34 0 110 0 35 0 110 0 37 0 110 0 41 0 110 0 42 0 110 0 43 0 110 0 44 0 110 0 46 0 110 0 47 0 110 0 50 0 110 0 54 0 110 0 55 0 110 0 57 0 110 0 58 0 110 0 59 0 110 0 63 0 110 0 64 0 110 0 66 0 110 0 68 0 110 0 69 0 110 0 70 0 110 0 71 0 110 0 72 0 110 0 73 0 110 0 74 0 110 0 75 0 110 0 76 0 110 0 77 0 110 0 78 0 110 0 80 0 110 0 82 0 110 0 83 0 110 0 86 0 110 0 87 0 110 0 88 0 110 0 89 0 110 0 90 2 249 1 94 0 110 1 109] #[0 0 130 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 134 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 110 0 3 0 110 0 4 0 110 0 8 2 253 0 11 0 110 0 17 0 110 0 20 0 110 0 22 0 110 0 23 0 110 0 24 0 110 0 25 0 110 0 26 0 110 0 29 0 110 0 30 0 110 0 31 0 110 0 32 0 110 0 33 0 110 0 34 0 110 0 35 0 110 0 37 0 110 0 41 0 110 0 42 0 110 0 43 0 110 0 44 0 110 0 46 0 110 0 47 0 110 0 50 0 110 0 54 0 110 0 55 0 110 0 57 0 110 0 58 0 110 0 59 0 110 0 63 0 110 0 64 0 110 0 66 0 110 0 68 0 110 0 69 0 110 0 70 0 110 0 71 0 110 0 72 0 110 0 73 0 110 0 74 0 110 0 75 0 110 0 76 0 110 0 77 0 110 0 78 0 110 0 80 0 110 0 82 0 110 0 83 0 110 0 86 0 110 0 87 0 110 0 88 0 110 0 89 0 110 0 90 2 253 1 94 0 110 1 109] #[1 0 57 0 37 0 69 0 43 0 93 0 72 0 101 0 80 3 1 0 101 3 1 0 102 3 1 0 104 3 1 0 105 3 1 0 107 3 5 0 112] #[0 3 9 0 10] #[1 0 110 0 3 0 110 0 4 0 110 0 8 3 13 0 11 0 110 0 17 0 110 0 20 0 110 0 22 0 110 0 23 0 110 0 24 0 110 0 25 0 110 0 26 0 110 0 29 0 110 0 30 0 110 0 31 0 110 0 32 0 110 0 33 0 110 0 34 0 110 0 35 0 110 0 37 0 110 0 41 0 110 0 42 0 110 0 43 0 110 0 44 0 110 0 46 0 110 0 47 0 110 0 50 0 110 0 54 0 110 0 55 0 110 0 57 0 110 0 58 0 110 0 59 0 110 0 63 0 110 0 64 0 110 0 66 0 110 0 68 0 110 0 69 0 110 0 70 0 110 0 71 0 110 0 72 0 110 0 73 0 110 0 74 0 110 0 75 0 110 0 76 0 110 0 77 0 110 0 78 0 110 0 80 0 110 0 82 0 110 0 83 0 110 0 86 0 110 0 87 0 110 0 88 0 110 0 89 0 110 0 90 3 13 1 94 0 110 1 109] #[0 0 138 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 142 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 146 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 150 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 110 0 3 0 110 0 4 0 110 0 8 3 17 0 11 0 110 0 17 0 110 0 20 0 110 0 22 0 110 0 23 0 110 0 24 0 110 0 25 0 110 0 26 0 110 0 29 0 110 0 30 0 110 0 31 0 110 0 32 0 110 0 33 0 110 0 34 0 110 0 35 0 110 0 37 0 110 0 41 0 110 0 42 0 110 0 43 0 110 0 44 0 110 0 46 0 110 0 47 0 110 0 50 0 110 0 54 0 110 0 55 0 110 0 57 0 110 0 58 0 110 0 59 0 110 0 63 0 110 0 64 0 110 0 66 0 110 0 68 0 110 0 69 0 110 0 70 0 110 0 71 0 110 0 72 0 110 0 73 0 110 0 74 0 110 0 75 0 110 0 76 0 110 0 77 0 110 0 78 0 110 0 80 0 110 0 82 0 110 0 83 0 110 0 86 0 110 0 87 0 110 0 88 0 110 0 89 0 110 0 90 3 17 1 94 0 110 1 109] #[0 0 154 1 109] #[0 0 158 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 162 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 166 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 9 0 3 3 21 0 4 0 15 0 8 0 25 0 20 2 25 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 2 29 0 52 2 33 0 54 0 85 0 66 0 89 0 71 2 37 0 77 0 105 0 82 3 25 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 3 29 0 150 3 33 0 151 3 37 0 155 3 41 0 233 2 57 0 234 2 61 0 235 2 65 0 236 2 69 0 237 2 73 0 240 2 77 0 241 2 81 0 242 2 85 0 243 2 89 0 244 2 89 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 2 113 1 38 2 17 1 39 2 113 1 106] #[0 0 170 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 3 49 0 13 3 53 0 169] #[0 0 174 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 3 57 0 86 3 61 0 90 3 65 0 172] #[0 0 178 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 182 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 186 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 190 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 194 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 198 0 4 3 69 0 12 3 73 0 128 3 77 1 74] #[0 0 202 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 206 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 210 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 3 81 0 7 3 85 0 223] #[0 0 214 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 218 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 222 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 226 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 230 0 4 0 17 0 20 0 30 0 31 0 33 0 35 0 36 0 44 0 45 0 47 0 50 0 51 0 54 0 55 0 57 0 59 0 63 0 67 0 68 0 69 0 70 0 74 0 75 0 76 0 77 0 78 0 81 0 86] #[1 0 234 0 4 0 21 0 17 0 234 0 20 0 234 0 30 0 234 0 31 0 234 0 33 0 234 0 35 0 234 0 36 0 234 0 44 0 234 0 45 0 234 0 47 0 234 0 50 0 234 0 51 0 234 0 54 0 234 0 55 0 234 0 57 0 234 0 59 0 234 0 63 0 234 0 67 0 234 0 68 0 234 0 69 0 234 0 70 0 234 0 74 0 234 0 75 0 234 0 76 0 234 0 77 0 234 0 78 0 234 0 81 0 234 0 86 3 89 0 245] #[1 0 110 0 3 0 110 0 4 0 110 0 8 3 93 0 11 0 110 0 17 0 110 0 20 0 110 0 22 0 110 0 23 0 110 0 24 0 110 0 25 0 110 0 26 0 110 0 29 0 110 0 30 0 110 0 31 0 110 0 32 0 110 0 33 0 110 0 34 0 110 0 35 0 110 0 37 0 110 0 41 0 110 0 42 0 110 0 43 0 110 0 44 0 110 0 46 0 110 0 47 0 110 0 50 0 110 0 54 0 110 0 55 0 110 0 57 0 110 0 58 0 110 0 59 0 110 0 63 0 110 0 64 0 110 0 66 0 110 0 68 0 110 0 69 0 110 0 70 0 110 0 71 0 110 0 72 0 110 0 73 0 110 0 74 0 110 0 75 0 110 0 76 0 110 0 77 0 110 0 78 0 110 0 80 0 110 0 82 0 110 0 83 0 110 0 86 0 110 0 87 0 110 0 88 0 110 0 89 0 110 0 90 3 93 1 94 0 110 1 109] #[1 0 238 0 3 0 238 0 4 0 238 0 5 0 238 0 6 0 238 0 8 0 238 0 9 0 238 0 10 0 238 0 11 0 115 0 13 3 101 0 16 0 238 0 17 0 238 0 20 0 238 0 21 0 238 0 22 0 238 0 23 0 238 0 24 0 238 0 25 0 238 0 26 0 119 0 27 0 238 0 29 0 238 0 30 0 238 0 31 0 238 0 32 0 238 0 33 0 238 0 34 0 238 0 35 0 238 0 37 0 238 0 41 0 238 0 42 0 238 0 43 0 238 0 44 0 238 0 46 0 238 0 47 0 238 0 48 0 238 0 50 3 109 0 52 0 238 0 54 0 238 0 55 0 238 0 57 0 238 0 58 0 238 0 59 0 238 0 63 0 238 0 64 0 238 0 66 0 238 0 68 0 238 0 69 0 238 0 70 0 238 0 71 0 238 0 72 0 238 0 73 0 238 0 74 0 238 0 75 0 238 0 76 0 238 0 77 0 238 0 78 0 238 0 79 0 238 0 80 0 238 0 82 0 238 0 83 0 238 0 86 0 238 0 87 0 238 0 88 0 238 0 89 0 123 0 90 3 117 0 96 3 121 0 255 3 125 1 0 3 129 1 1 3 133 1 2 3 137 1 3 0 238 1 109] #[0 0 242 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 246 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 250 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 0 254 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 2 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 6 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 10 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 14 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 18 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 22 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 26 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 30 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 34 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 38 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 3 141 0 1 1 42 0 3 0 127 0 4 1 42 0 5 1 42 0 6 0 131 0 8 1 42 0 9 1 42 0 10 1 42 0 11 1 42 0 13 0 135 0 16 1 42 0 17 0 139 0 20 1 42 0 21 1 42 0 22 1 42 0 23 1 42 0 24 1 42 0 25 1 42 0 26 1 42 0 27 1 42 0 29 1 42 0 30 1 42 0 31 1 42 0 32 1 42 0 33 1 42 0 34 1 42 0 35 1 42 0 37 1 42 0 41 1 42 0 42 1 42 0 43 1 42 0 44 1 42 0 46 1 42 0 47 1 42 0 48 1 42 0 50 1 42 0 52 1 42 0 54 1 42 0 55 1 42 0 57 1 42 0 58 1 42 0 59 1 42 0 63 1 42 0 64 1 42 0 66 1 42 0 68 1 42 0 69 1 42 0 70 1 42 0 71 1 42 0 72 1 42 0 73 1 42 0 74 1 42 0 75 1 42 0 76 1 42 0 77 1 42 0 78 1 42 0 79 1 42 0 80 0 143 0 82 1 42 0 83 1 42 0 86 1 42 0 87 1 42 0 88 1 42 0 89 0 147 0 90 3 161 0 98 3 165 1 22 3 169 1 86 1 42 1 109] #[0 1 50 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 54 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 58 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 62 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 66 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 70 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 74 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 78 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 151 0 31 3 221 0 33 3 181 0 35 0 155 0 44 3 185 0 47 1 90 0 50 0 155 0 54 1 82 0 55 1 82 0 57 1 82 0 59 3 189 0 63 1 82 0 68 3 193 0 69 3 197 0 70 1 82 0 74 1 82 0 75 1 82 0 76 0 155 0 77 1 82 0 78 3 213 0 86 3 205 0 141 3 209 0 184 3 213 0 190 3 217 0 192 3 221 1 64 3 225 1 65] #[0 1 94 1 109] #[0 1 98 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 70 0 1 0 70 0 4 0 70 0 5 0 70 0 6 0 70 0 8 3 229 0 10 2 221 0 12 0 70 0 13 0 70 0 16 0 70 0 20 0 70 0 27 0 70 0 52 0 70 0 82 0 70 0 90 2 225 0 136 2 229 1 73] #[0 1 102 0 5 0 6] #[1 1 106 0 5 3 233 0 6] #[0 1 110 0 5 0 6] #[0 3 237 0 5] #[0 1 114 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 118 0 4 0 17 0 20 0 30 0 31 0 33 0 35 0 36 0 44 0 45 0 47 0 50 0 51 0 54 0 55 0 57 0 59 0 63 0 67 0 68 0 69 0 70 0 74 0 75 0 76 0 77 0 78 0 81 0 86] #[1 0 159 0 4 1 122 0 17 1 122 0 20 1 122 0 30 1 122 0 31 1 122 0 33 1 122 0 35 1 122 0 36 1 122 0 44 1 122 0 45 1 122 0 47 1 122 0 50 1 122 0 51 1 122 0 54 1 122 0 55 1 122 0 57 1 122 0 59 1 122 0 63 1 122 0 67 1 122 0 68 1 122 0 69 1 122 0 70 1 122 0 74 1 122 0 75 1 122 0 76 1 122 0 77 1 122 0 78 1 122 0 81 1 122 0 86 3 245 0 247 3 249 1 58] #[0 3 253 0 21] #[1 0 70 0 1 0 70 0 3 0 70 0 4 0 70 0 5 0 70 0 6 0 70 0 8 0 70 0 9 0 70 0 10 0 70 0 11 2 221 0 12 0 70 0 13 0 70 0 16 0 70 0 17 0 70 0 20 0 70 0 21 0 70 0 22 0 70 0 23 0 70 0 24 0 70 0 25 0 70 0 26 0 70 0 27 0 70 0 29 0 70 0 30 0 70 0 31 0 70 0 32 0 70 0 33 0 70 0 34 0 70 0 35 0 70 0 37 0 70 0 41 0 70 0 42 0 70 0 43 0 70 0 44 0 70 0 46 0 70 0 47 0 70 0 48 0 70 0 50 0 70 0 52 0 70 0 54 0 70 0 55 0 70 0 57 0 70 0 58 0 70 0 59 0 70 0 63 0 70 0 64 0 70 0 66 0 70 0 68 0 70 0 69 0 70 0 70 0 70 0 71 0 70 0 72 0 70 0 73 0 70 0 74 0 70 0 75 0 70 0 76 0 70 0 77 0 70 0 78 0 70 0 79 0 70 0 80 0 70 0 82 0 70 0 83 0 70 0 86 0 70 0 87 0 70 0 88 0 70 0 89 0 70 0 90 2 225 0 136 2 229 1 73 0 70 1 109] #[1 1 126 0 6 4 1 0 10 1 126 0 21] #[0 1 130 0 21] #[1 4 5 0 6 1 134 0 21 4 9 1 63] #[0 4 13 0 21] #[1 4 17 0 6 1 134 0 21 4 21 1 63] #[0 4 25 0 21] #[0 0 74 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 138 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 142 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 146 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 21 0 17 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 49 0 29 0 6 0 31 0 53 0 32 0 6 0 33 0 6 0 35 0 57 0 37 0 61 0 41 0 65 0 42 0 69 0 43 0 6 0 44 0 73 0 46 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 81 0 64 0 85 0 66 0 6 0 68 0 6 0 69 0 6 0 70 0 89 0 71 0 93 0 72 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 0 101 0 80 0 105 0 82 0 10 0 83 0 7 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 0 145 0 99 0 149 0 100 0 153 0 101 0 153 0 102 0 153 0 104 0 153 0 105 0 153 0 107 0 173 0 108 0 173 0 109 0 173 0 112 0 185 0 120 0 189 0 121 0 193 0 122 0 197 0 123 0 197 0 124 0 197 0 125 0 197 0 126 0 197 0 127 0 217 0 139 0 217 0 145 0 217 0 149 0 217 0 153 0 237 0 154 0 217 0 166 0 245 0 167 0 217 0 170 0 253 0 171 0 217 0 183 0 217 0 199 0 217 0 202 0 217 0 205 0 217 0 215 1 21 0 216 0 217 0 218 0 217 0 219 0 217 0 221 1 37 0 222 0 217 0 224 0 217 0 225 0 217 0 226 0 217 0 227 1 57 0 245 1 61 0 248 1 65 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 165 1 59 4 29 1 98] #[0 4 33 0 80] #[0 1 150 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 4 37 0 10 1 154 0 82 4 41 1 54 4 45 1 107] #[1 0 70 0 1 0 70 0 3 0 70 0 4 0 70 0 5 0 70 0 6 0 70 0 7 0 70 0 8 0 70 0 9 0 70 0 10 0 70 0 11 2 221 0 12 0 70 0 13 0 70 0 14 0 70 0 15 0 70 0 16 0 70 0 17 0 70 0 20 0 70 0 21 0 70 0 22 0 70 0 23 0 70 0 24 0 70 0 25 0 70 0 26 0 70 0 27 0 70 0 29 0 70 0 30 0 70 0 31 0 70 0 32 0 70 0 33 0 70 0 34 0 70 0 35 0 70 0 37 0 70 0 41 0 70 0 42 0 70 0 43 0 70 0 44 0 70 0 46 0 70 0 47 0 70 0 48 0 70 0 50 0 70 0 52 0 70 0 54 0 70 0 55 0 70 0 57 0 70 0 58 0 70 0 59 0 70 0 63 0 70 0 64 0 70 0 66 0 70 0 68 0 70 0 69 0 70 0 70 0 70 0 71 0 70 0 72 0 70 0 73 0 70 0 74 0 70 0 75 0 70 0 76 0 70 0 77 0 70 0 78 0 70 0 79 0 70 0 80 0 70 0 82 0 70 0 83 0 70 0 86 0 70 0 87 0 70 0 88 0 70 0 89 0 70 0 90 2 225 0 136 4 49 1 73 0 70 1 109] #[1 0 9 0 3 3 21 0 4 0 163 0 5 0 15 0 8 0 54 0 11 0 21 0 17 0 25 0 20 2 25 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 6 0 31 2 29 0 52 2 33 0 54 0 6 0 55 0 6 0 57 0 6 0 59 0 85 0 66 0 6 0 68 0 89 0 71 0 6 0 74 0 6 0 75 0 6 0 76 0 19 0 77 0 6 0 78 0 105 0 82 4 53 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 2 45 0 103 2 49 0 153 0 237 0 154 4 57 0 233 2 57 0 234 2 61 0 235 2 65 0 236 2 69 0 237 4 61 0 238 4 65 0 239 2 73 0 240 2 77 0 241 2 81 0 242 2 85 0 243 2 89 0 244 1 57 0 245 1 61 0 248 4 69 0 251 2 97 0 252 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 185 1 23 1 189 1 24 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 2 113 1 38 2 17 1 39 2 105 1 59 1 193 1 72 4 73 1 76 4 77 1 101 2 113 1 106] #[1 0 22 0 1 0 167 0 3 0 167 0 4 0 167 0 5 0 167 0 6 0 167 0 8 0 167 0 10 0 167 0 11 0 167 0 13 0 22 0 16 0 167 0 17 0 167 0 20 0 167 0 22 0 167 0 23 0 167 0 24 0 167 0 25 0 167 0 26 0 167 0 27 0 167 0 29 0 167 0 30 0 167 0 31 0 167 0 32 0 167 0 33 0 167 0 34 0 167 0 35 0 167 0 37 0 167 0 41 0 167 0 42 0 167 0 43 0 167 0 44 0 167 0 46 0 167 0 47 0 167 0 48 0 167 0 50 0 22 0 52 0 167 0 54 0 167 0 55 0 167 0 57 0 167 0 58 0 167 0 59 0 167 0 63 0 167 0 64 0 167 0 66 0 167 0 68 0 167 0 69 0 167 0 70 0 167 0 71 0 167 0 72 0 167 0 73 0 167 0 74 0 167 0 75 0 167 0 76 0 167 0 77 0 167 0 78 0 167 0 79 0 167 0 80 0 167 0 82 0 167 0 83 0 167 0 86 0 167 0 87 0 167 0 88 0 167 0 89 0 167 0 90 0 167 1 109] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 4 93 1 36 4 93 1 38 2 17 1 39 4 93 1 40 4 93 1 45 4 93 1 46 4 93 1 47 4 93 1 48 4 93 1 49 4 93 1 50 4 93 1 53] #[1 0 9 0 3 3 21 0 4 0 15 0 8 0 25 0 20 2 25 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 2 29 0 52 2 33 0 54 0 85 0 66 0 89 0 71 2 37 0 77 0 105 0 82 2 41 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 4 133 0 233 2 57 0 234 2 61 0 235 2 65 0 236 2 69 0 237 2 73 0 240 2 77 0 241 2 81 0 242 2 85 0 243 2 89 0 244 2 89 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 2 113 1 38 2 17 1 39 2 113 1 106] #[1 0 9 0 3 3 21 0 4 0 15 0 8 0 25 0 20 2 25 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 2 29 0 52 2 33 0 54 0 85 0 66 0 89 0 71 2 37 0 77 0 105 0 82 2 41 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 4 137 0 233 2 57 0 234 2 61 0 235 2 65 0 236 2 69 0 237 2 73 0 240 2 77 0 241 2 81 0 242 2 85 0 243 2 89 0 244 2 89 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 2 113 1 38 2 17 1 39 2 113 1 106] #[1 0 70 0 1 0 171 0 3 0 171 0 4 0 171 0 5 0 171 0 6 0 175 0 8 0 171 0 10 0 171 0 11 0 179 0 12 0 171 0 13 0 70 0 16 0 171 0 17 0 171 0 20 0 171 0 22 0 171 0 23 0 171 0 24 0 171 0 25 0 171 0 26 0 171 0 27 0 171 0 29 0 171 0 30 0 171 0 31 0 171 0 32 0 171 0 33 0 171 0 34 0 171 0 35 0 171 0 37 0 171 0 41 0 171 0 42 0 171 0 43 0 171 0 44 0 171 0 46 0 171 0 47 0 171 0 48 0 171 0 50 0 70 0 52 0 171 0 54 0 171 0 55 0 171 0 57 0 171 0 58 0 171 0 59 0 171 0 63 0 171 0 64 0 171 0 66 0 171 0 68 0 171 0 69 0 171 0 70 0 171 0 71 0 171 0 72 0 171 0 73 0 171 0 74 0 171 0 75 0 171 0 76 0 171 0 77 0 171 0 78 0 171 0 79 0 171 0 80 0 171 0 82 0 171 0 83 0 171 0 86 0 171 0 87 0 171 0 88 0 171 0 89 0 171 0 90 2 225 0 136 2 229 1 73 0 171 1 109] #[0 1 170 0 11] #[0 1 174 0 11] #[1 4 141 0 27 4 145 0 48] #[1 1 178 0 3 1 178 0 4 1 178 0 5 1 178 0 6 1 178 0 8 0 183 0 10 1 178 0 11 1 178 0 13 1 178 0 17 1 178 0 20 1 178 0 22 1 178 0 23 1 178 0 24 1 178 0 25 1 178 0 26 1 178 0 27 1 178 0 29 1 178 0 30 1 178 0 31 1 178 0 32 1 178 0 33 1 178 0 34 1 178 0 35 1 178 0 37 1 178 0 41 1 178 0 42 1 178 0 43 1 178 0 44 1 178 0 46 1 178 0 47 1 178 0 48 1 178 0 50 1 178 0 54 1 178 0 55 1 178 0 57 1 178 0 58 1 178 0 59 1 178 0 63 1 178 0 64 1 178 0 66 1 178 0 68 1 178 0 69 1 178 0 70 1 178 0 71 1 178 0 72 1 178 0 73 1 178 0 74 1 178 0 75 1 178 0 76 1 178 0 77 1 178 0 78 1 178 0 79 1 178 0 80 1 178 0 82 1 178 0 83 1 178 0 86 1 178 0 87 1 178 0 88 1 178 0 89 1 178 0 90 4 153 1 37 4 157 1 105 1 178 1 109] #[1 1 178 0 3 1 178 0 4 1 178 0 5 1 178 0 6 1 178 0 8 0 183 0 10 1 178 0 11 1 178 0 13 1 178 0 17 1 178 0 20 1 178 0 22 1 178 0 23 1 178 0 24 1 178 0 25 1 178 0 26 1 178 0 27 1 178 0 29 1 178 0 30 1 178 0 31 1 178 0 32 1 178 0 33 1 178 0 34 1 178 0 35 1 178 0 37 1 178 0 41 1 178 0 42 1 178 0 43 1 178 0 44 1 178 0 46 1 178 0 47 1 178 0 48 1 178 0 50 1 178 0 54 1 178 0 55 1 178 0 57 1 178 0 58 1 178 0 59 1 178 0 63 1 178 0 64 1 178 0 66 1 178 0 68 1 178 0 69 1 178 0 70 1 178 0 71 1 178 0 72 1 178 0 73 1 178 0 74 1 178 0 75 1 178 0 76 1 178 0 77 1 178 0 78 1 178 0 79 1 178 0 80 1 178 0 82 1 178 0 83 1 178 0 86 1 178 0 87 1 178 0 88 1 178 0 89 1 178 0 90 4 153 1 37 4 161 1 105 1 178 1 109] #[0 1 182 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 1 178 0 3 1 178 0 4 1 178 0 5 1 178 0 6 1 178 0 8 0 183 0 10 1 178 0 11 1 178 0 13 1 178 0 17 1 178 0 20 1 178 0 22 1 178 0 23 1 178 0 24 1 178 0 25 1 178 0 26 1 178 0 27 1 178 0 29 1 178 0 30 1 178 0 31 1 178 0 32 1 178 0 33 1 178 0 34 1 178 0 35 1 178 0 37 1 178 0 41 1 178 0 42 1 178 0 43 1 178 0 44 1 178 0 46 1 178 0 47 1 178 0 48 1 178 0 50 1 178 0 54 1 178 0 55 1 178 0 57 1 178 0 58 1 178 0 59 1 178 0 63 1 178 0 64 1 178 0 66 1 178 0 68 1 178 0 69 1 178 0 70 1 178 0 71 1 178 0 72 1 178 0 73 1 178 0 74 1 178 0 75 1 178 0 76 1 178 0 77 1 178 0 78 1 178 0 79 1 178 0 80 1 178 0 82 1 178 0 83 1 178 0 86 1 178 0 87 1 178 0 88 1 178 0 89 1 178 0 90 4 153 1 37 4 165 1 105 1 178 1 109] #[0 1 186 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 190 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 194 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 198 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 202 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 1 206 0 6 1 206 0 11 1 210 0 27 1 210 0 48] #[1 4 169 0 6 1 214 0 11] #[0 1 218 0 8] #[1 1 82 0 31 1 82 0 55 1 82 0 57 1 82 0 59 1 82 0 68 1 82 0 74 1 82 0 75 1 82 0 76 0 155 0 77 1 82 0 78 3 205 0 141 4 173 1 65] #[0 4 177 0 11] #[0 4 181 0 8] #[1 2 1 0 82 4 185 0 144] #[0 1 222 0 82] #[0 1 226 0 82] #[0 4 189 0 90] #[0 4 193 0 90] #[0 4 197 0 90] #[0 1 230 0 3 0 4 0 5 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 234 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 4 201 0 50 4 205 0 86] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 4 209 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[1 4 213 0 50 4 217 0 86] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 4 221 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 4 225 0 82] #[0 1 238 0 10 0 13 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[0 1 242 0 10 0 13 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[1 2 1 0 82 4 229 0 144] #[0 1 246 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 250 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 1 254 0 2 0 6 0 4 4 233 0 5 0 21 0 17 0 6 0 20 1 254 0 22 4 253 0 51 1 254 0 54 0 6 0 63 1 254 0 77 0 187 0 86 4 241 0 178 4 245 0 179 1 57 0 245 1 61 0 248 4 249 1 59 4 253 1 82] #[1 5 1 0 74 5 5 0 75 5 9 0 76 5 13 0 78 5 17 1 20] #[0 2 2 0 6 0 7 0 48] #[1 5 21 0 6 5 25 0 7 2 6 0 48 5 29 0 174 5 33 1 77] #[1 5 25 0 7 2 6 0 48 5 29 0 174 5 37 1 77] #[0 2 10 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 86 0 87 0 88 0 89 0 90] #[1 2 189 0 4 5 41 0 48 2 197 0 86 5 45 0 93 5 49 0 177] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 21 0 17 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 49 0 29 0 6 0 31 0 53 0 32 0 6 0 33 0 6 0 35 0 57 0 37 0 61 0 41 0 65 0 42 0 69 0 43 0 6 0 44 0 73 0 46 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 81 0 64 0 85 0 66 0 6 0 68 0 6 0 69 0 6 0 70 0 89 0 71 0 93 0 72 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 0 101 0 80 0 105 0 82 0 7 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 0 145 0 99 5 53 0 100 0 153 0 101 0 153 0 102 0 153 0 104 0 153 0 105 0 153 0 107 0 173 0 108 0 173 0 109 0 173 0 112 0 185 0 120 0 189 0 121 0 193 0 122 0 197 0 123 0 197 0 124 0 197 0 125 0 197 0 126 0 197 0 127 0 217 0 139 0 217 0 145 0 217 0 149 0 217 0 153 0 237 0 154 0 217 0 166 0 245 0 167 0 217 0 170 0 253 0 171 0 217 0 183 0 217 0 199 0 217 0 202 0 217 0 205 0 217 0 215 1 21 0 216 0 217 0 218 0 217 0 219 0 217 0 221 1 37 0 222 0 217 0 224 0 217 0 225 0 217 0 226 0 217 0 227 1 57 0 245 1 61 0 248 1 65 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 165 1 59] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 5 57 0 137 5 61 0 138 5 65 1 36 5 65 1 38 2 17 1 39 5 65 1 40 5 65 1 45 5 65 1 46 5 65 1 47 5 65 1 48 5 65 1 49 5 65 1 50 5 65 1 53] #[0 2 14 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 18 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 3 141 0 1 2 22 0 3 0 191 0 4 2 22 0 5 2 22 0 6 0 195 0 8 2 22 0 9 2 22 0 10 2 22 0 11 2 22 0 13 0 199 0 16 2 22 0 17 0 203 0 20 2 22 0 21 2 22 0 22 2 22 0 23 2 22 0 24 2 22 0 25 2 22 0 26 2 22 0 27 2 22 0 29 2 22 0 30 2 22 0 31 2 22 0 32 2 22 0 33 2 22 0 34 2 22 0 35 2 22 0 37 2 22 0 41 2 22 0 42 2 22 0 43 2 22 0 44 2 22 0 46 2 22 0 47 2 22 0 48 2 22 0 50 2 22 0 52 2 22 0 54 2 22 0 55 2 22 0 57 2 22 0 58 2 22 0 59 2 22 0 63 2 22 0 64 2 22 0 66 2 22 0 68 2 22 0 69 2 22 0 70 2 22 0 71 2 22 0 72 2 22 0 73 2 22 0 74 2 22 0 75 2 22 0 76 2 22 0 77 2 22 0 78 2 22 0 79 2 22 0 80 0 207 0 82 2 22 0 83 2 22 0 86 2 22 0 87 2 22 0 88 2 22 0 89 0 211 0 90 3 161 0 98 3 165 1 22 3 169 1 86 2 22 1 109] #[0 2 26 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 30 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 34 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 38 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 42 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 46 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 50 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 54 0 37 0 43 0 72 0 80] #[0 2 58 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 62 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 9 0 3 3 21 0 4 0 163 0 5 0 15 0 8 0 25 0 20 2 25 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 2 29 0 52 2 33 0 54 0 85 0 66 0 89 0 71 2 37 0 77 0 105 0 82 4 53 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 4 57 0 233 2 57 0 234 2 61 0 235 2 65 0 236 2 69 0 237 4 61 0 238 4 65 0 239 2 73 0 240 2 77 0 241 2 81 0 242 2 85 0 243 2 89 0 244 5 69 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 185 1 23 1 189 1 24 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 2 113 1 38 2 17 1 39 1 193 1 72 4 77 1 101 2 113 1 106] #[1 0 70 0 1 0 171 0 3 0 171 0 4 0 171 0 6 0 175 0 8 0 215 0 10 0 171 0 11 0 179 0 12 0 171 0 13 0 70 0 16 0 171 0 17 0 171 0 20 0 171 0 22 0 171 0 23 0 171 0 24 0 171 0 25 0 171 0 26 0 171 0 27 0 171 0 29 0 171 0 30 0 171 0 31 0 171 0 32 0 171 0 33 0 171 0 34 0 171 0 35 0 171 0 37 0 171 0 41 0 171 0 42 0 171 0 43 0 171 0 44 0 171 0 46 0 171 0 47 0 171 0 50 0 70 0 52 0 171 0 54 0 171 0 55 0 171 0 57 0 171 0 58 0 171 0 59 0 171 0 63 0 171 0 64 0 171 0 66 0 171 0 68 0 171 0 69 0 171 0 70 0 171 0 71 0 171 0 72 0 171 0 73 0 171 0 74 0 171 0 75 0 171 0 76 0 171 0 77 0 171 0 78 0 171 0 80 0 171 0 82 0 171 0 83 0 171 0 86 0 171 0 87 0 171 0 88 0 171 0 89 0 171 0 90 2 225 0 136 2 229 1 73 0 171 1 109] #[1 2 70 0 3 2 70 0 4 5 73 0 6 2 70 0 8 2 70 0 11 2 70 0 17 2 70 0 20 2 70 0 22 2 70 0 23 2 70 0 24 2 70 0 25 2 70 0 26 2 70 0 29 2 70 0 30 2 70 0 31 2 70 0 32 2 70 0 33 2 70 0 34 2 70 0 35 2 70 0 37 2 70 0 41 2 70 0 42 2 70 0 43 2 70 0 44 2 70 0 46 2 70 0 47 2 70 0 50 2 70 0 54 2 70 0 55 2 70 0 57 2 70 0 58 2 70 0 59 2 70 0 63 2 70 0 64 2 70 0 66 2 70 0 68 2 70 0 69 2 70 0 70 2 70 0 71 2 70 0 72 2 70 0 73 2 70 0 74 2 70 0 75 2 70 0 76 2 70 0 77 2 70 0 78 2 70 0 80 2 70 0 82 2 70 0 83 2 70 0 86 2 70 0 87 2 70 0 88 2 70 0 89 2 70 0 90 2 70 1 109] #[0 2 74 0 3 0 4 0 6 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 4 149 0 10 5 77 1 37] #[1 2 78 0 3 2 78 0 4 2 78 0 6 2 78 0 8 2 78 0 11 5 81 0 13 2 78 0 17 2 78 0 20 2 78 0 22 2 78 0 23 2 78 0 24 2 78 0 25 2 78 0 26 4 141 0 27 2 78 0 29 2 78 0 30 2 78 0 31 2 78 0 32 2 78 0 33 2 78 0 34 2 78 0 35 2 78 0 37 2 78 0 41 2 78 0 42 2 78 0 43 2 78 0 44 2 78 0 46 2 78 0 47 2 78 0 50 2 78 0 54 2 78 0 55 2 78 0 57 2 78 0 58 2 78 0 59 2 78 0 63 2 78 0 64 2 78 0 66 2 78 0 68 2 78 0 69 2 78 0 70 2 78 0 71 2 78 0 72 2 78 0 73 2 78 0 74 2 78 0 75 2 78 0 76 2 78 0 77 2 78 0 78 2 78 0 80 2 78 0 82 2 78 0 83 2 78 0 86 2 78 0 87 2 78 0 88 2 78 0 89 2 78 0 90 5 85 0 152 5 89 1 81 2 78 1 109] #[0 1 210 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 5 93 1 36 5 93 1 38 2 17 1 39 5 93 1 40 5 93 1 45 5 93 1 46 5 93 1 47 5 93 1 48 5 93 1 49 5 93 1 50 5 93 1 53] #[0 2 82 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 86 0 4 0 7 0 12 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 82 0 83] #[0 2 90 0 4 0 7 0 12 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 82 0 83] #[1 0 198 0 4 0 198 0 7 3 69 0 12 0 198 0 82 3 73 0 128 5 97 1 74] #[1 5 109 0 86 5 101 0 129 5 105 0 130 5 109 1 39] #[0 2 94 0 4 0 7 0 10 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 82 0 83] #[1 2 189 0 4 5 113 0 177] #[1 0 6 0 4 0 21 0 17 0 6 0 20 0 6 0 63 0 6 0 86 1 57 0 245 1 61 0 248 5 117 1 59] #[1 5 121 0 82 5 125 0 144 5 129 0 156 5 133 0 160] #[0 2 98 0 4 0 17 0 20 0 30 0 31 0 33 0 35 0 36 0 44 0 45 0 47 0 50 0 51 0 54 0 55 0 57 0 59 0 63 0 67 0 68 0 69 0 70 0 74 0 75 0 76 0 77 0 78 0 81 0 86] #[0 2 102 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 106 0 3 0 4 0 8 0 20 0 22 0 23 0 24 0 25 0 26 0 66 0 71 0 82 0 86 0 87 0 88 0 89 0 90] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 5 137 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[1 4 81 0 4 5 141 0 16 4 85 0 20 4 89 0 63 2 17 0 86 5 145 1 36 5 145 1 38 2 17 1 39 5 145 1 40 5 145 1 45 5 145 1 46 5 145 1 47 5 145 1 48 5 145 1 49 5 145 1 50 5 145 1 53] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 5 149 1 36 5 149 1 38 2 17 1 39 5 149 1 40 5 149 1 45 5 149 1 46 5 149 1 47 5 149 1 48 5 149 1 49 5 149 1 50 5 149 1 53] #[0 2 110 0 3 0 4 0 8 0 20 0 22 0 23 0 24 0 25 0 26 0 66 0 71 0 82 0 86 0 87 0 88 0 89 0 90] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 5 153 0 253 5 153 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 2 114 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 2 118 0 3 2 118 0 4 2 118 0 5 2 118 0 6 2 118 0 8 2 118 0 9 2 118 0 10 2 118 0 11 0 219 0 13 3 101 0 16 2 118 0 17 2 118 0 20 2 118 0 21 2 118 0 22 2 118 0 23 2 118 0 24 2 118 0 25 2 118 0 26 0 223 0 27 2 118 0 29 2 118 0 30 2 118 0 31 2 118 0 32 2 118 0 33 2 118 0 34 2 118 0 35 2 118 0 37 2 118 0 41 2 118 0 42 2 118 0 43 2 118 0 44 2 118 0 46 2 118 0 47 2 118 0 48 2 118 0 50 3 109 0 52 2 118 0 54 2 118 0 55 2 118 0 57 2 118 0 58 2 118 0 59 2 118 0 63 2 118 0 64 2 118 0 66 2 118 0 68 2 118 0 69 2 118 0 70 2 118 0 71 2 118 0 72 2 118 0 73 2 118 0 74 2 118 0 75 2 118 0 76 2 118 0 77 2 118 0 78 2 118 0 79 2 118 0 80 2 118 0 82 2 118 0 83 2 118 0 86 2 118 0 87 2 118 0 88 2 118 0 89 0 227 0 90 3 117 0 96 5 157 0 255 3 129 1 1 3 133 1 2 3 137 1 3 2 118 1 109] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 5 161 0 253 5 161 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 5 165 0 253 5 165 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 2 122 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 126 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 5 169 0 38 5 173 0 50 5 177 0 66 5 181 0 86 5 185 0 87] #[0 2 130 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 5 189 0 251 5 193 0 252 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 2 134 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 138 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 2 142 0 1 2 142 0 3 2 142 0 4 2 142 0 5 2 142 0 6 2 142 0 8 2 142 0 9 2 142 0 10 2 142 0 11 2 142 0 13 2 142 0 16 2 142 0 17 2 142 0 20 2 142 0 21 2 142 0 22 2 142 0 23 2 142 0 24 2 142 0 25 2 142 0 26 2 142 0 27 2 142 0 29 2 142 0 30 2 142 0 31 2 142 0 32 2 142 0 33 2 142 0 34 2 142 0 35 2 142 0 37 2 142 0 41 2 142 0 42 2 142 0 43 2 142 0 44 2 142 0 46 2 142 0 47 2 142 0 48 2 142 0 50 2 142 0 52 2 142 0 54 2 142 0 55 2 142 0 57 2 142 0 58 2 142 0 59 2 142 0 63 2 142 0 64 2 142 0 66 2 142 0 68 2 142 0 69 2 142 0 70 2 142 0 71 2 142 0 72 2 142 0 73 2 142 0 74 2 142 0 75 2 142 0 76 2 142 0 77 2 142 0 78 2 142 0 79 2 142 0 80 0 231 0 82 2 142 0 83 2 142 0 86 2 142 0 87 2 142 0 88 2 142 0 89 2 142 0 90 2 142 1 109] #[1 0 105 0 82 5 201 1 17 5 201 1 28] #[0 5 209 0 86 0 203] #[0 2 150 0 50] #[1 2 1 0 82 5 213 0 144] #[1 5 217 0 31 5 221 0 40 5 225 0 44 5 229 0 63 5 233 0 69 5 237 0 73 5 241 0 77 2 154 0 86 2 154 0 90 5 245 0 146 5 249 1 79] #[0 6 1 0 86 0 206] #[0 6 9 0 86 0 200] #[1 2 189 0 4 6 13 0 177] #[0 2 158 0 10 0 12 0 82] #[1 6 17 0 31 2 162 0 44 2 162 0 54 6 21 0 55 6 25 0 57 6 29 0 59 6 33 0 68 6 37 0 74 6 41 0 75 6 45 0 76 2 162 0 77 6 49 0 78 6 53 0 142] #[0 2 166 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 198 0 10 3 69 0 12 0 198 0 82 3 73 0 128 6 57 1 74] #[0 2 170 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 6 61 0 50] #[1 6 65 0 44 6 69 0 54 6 73 0 77] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 6 77 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 177 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 6 81 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 6 81 1 24 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 2 174 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 6 85 0 4 2 178 0 5 6 89 0 20 6 93 0 82 6 97 0 86 0 113 0 87 0 117 0 88 0 133 0 89 6 101 0 90 0 133 0 94 6 105 0 95 6 109 0 249 6 113 0 250 6 117 1 60] #[0 2 182 0 4 0 17 0 20 0 30 0 31 0 33 0 35 0 36 0 44 0 45 0 47 0 50 0 51 0 54 0 55 0 57 0 59 0 63 0 67 0 68 0 69 0 70 0 74 0 75 0 76 0 77 0 78 0 81 0 86] #[0 2 186 0 4 0 17 0 20 0 30 0 31 0 33 0 35 0 36 0 44 0 45 0 47 0 50 0 51 0 54 0 55 0 57 0 59 0 63 0 67 0 68 0 69 0 70 0 74 0 75 0 76 0 77 0 78 0 81 0 86] #[0 2 190 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 6 121 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 2 194 0 21 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 1 225 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 6 129 1 7 1 225 1 8 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 2 198 0 21] #[0 2 202 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 2 194 0 21 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 6 133 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 6 137 1 10 1 233 1 11 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 2 206 0 21] #[0 2 210 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 6 141 0 83] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 21 0 17 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 6 0 31 0 6 0 33 0 6 0 35 0 61 0 41 0 6 0 44 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 85 0 66 0 6 0 68 0 6 0 69 0 6 0 70 0 89 0 71 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 0 105 0 82 0 23 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 6 145 0 106 6 145 0 139 6 145 0 145 6 145 0 149 6 145 0 153 0 237 0 154 6 145 0 166 0 245 0 167 6 145 0 170 0 253 0 171 6 145 0 183 6 145 0 199 6 145 0 202 6 145 0 205 6 145 0 215 1 21 0 216 6 145 0 218 6 145 0 219 6 145 0 221 1 37 0 222 6 145 0 224 6 145 0 225 6 145 0 226 6 145 0 227 1 57 0 245 1 61 0 248 6 145 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 165 1 59] #[1 2 17 0 86 6 149 1 38 2 17 1 39 6 153 1 55] #[0 2 214 0 13 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 82 0 83] #[1 6 157 0 82 6 161 0 220] #[1 2 218 0 1 2 218 0 3 2 218 0 4 2 218 0 5 2 218 0 6 2 218 0 7 0 235 0 8 2 218 0 9 2 218 0 10 2 218 0 11 2 218 0 13 2 218 0 14 2 218 0 15 2 218 0 16 2 218 0 17 2 218 0 20 2 218 0 21 2 218 0 22 2 218 0 23 2 218 0 24 2 218 0 25 2 218 0 26 2 218 0 27 2 218 0 29 2 218 0 30 2 218 0 31 2 218 0 32 2 218 0 33 2 218 0 34 2 218 0 35 2 218 0 37 2 218 0 41 2 218 0 42 2 218 0 43 2 218 0 44 2 218 0 46 2 218 0 47 2 218 0 48 2 218 0 50 2 218 0 52 2 218 0 54 2 218 0 55 2 218 0 57 2 218 0 58 2 218 0 59 2 218 0 63 2 218 0 64 2 218 0 66 2 218 0 68 2 218 0 69 2 218 0 70 2 218 0 71 2 218 0 72 2 218 0 73 2 218 0 74 2 218 0 75 2 218 0 76 2 218 0 77 2 218 0 78 2 218 0 79 2 218 0 80 2 218 0 82 2 218 0 83 2 218 0 86 2 218 0 87 2 218 0 88 2 218 0 89 2 218 0 90 2 218 1 109] #[1 0 70 0 1 0 70 0 4 0 171 0 5 0 171 0 6 0 239 0 8 0 243 0 10 0 70 0 11 0 179 0 12 0 70 0 13 0 70 0 16 0 70 0 20 0 171 0 27 0 70 0 52 0 70 0 82 0 70 0 90 2 225 0 136 2 229 1 73] #[1 2 222 0 5 2 222 0 6 4 141 0 27] #[1 2 226 0 5 6 169 0 6] #[0 2 230 0 5 0 6] #[1 0 247 0 5 0 251 0 6 1 206 0 11 1 210 0 27] #[0 6 173 0 11] #[0 6 177 0 5] #[1 0 6 0 4 2 234 0 5 0 21 0 17 0 6 0 20 0 255 0 51 0 6 0 63 0 187 0 86 1 57 0 245 1 61 0 248 6 181 1 41 6 185 1 42 6 189 1 43 6 193 1 59 6 197 1 82 6 201 1 103] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 6 205 1 36 6 205 1 38 2 17 1 39 6 205 1 40 6 205 1 45 6 205 1 46 6 205 1 47 6 205 1 48 6 205 1 49 6 205 1 50 6 205 1 53] #[0 6 209 0 12] #[1 6 213 0 1 2 238 0 3 2 238 0 4 2 238 0 5 2 238 0 6 6 217 0 7 1 3 0 8 2 238 0 10 2 238 0 11 2 238 0 13 6 225 0 16 2 238 0 17 2 238 0 20 2 238 0 22 2 238 0 23 2 238 0 24 2 238 0 25 2 238 0 26 2 238 0 27 2 238 0 29 2 238 0 30 2 238 0 31 2 238 0 32 2 238 0 33 2 238 0 34 2 238 0 35 2 238 0 37 2 238 0 41 2 238 0 42 2 238 0 43 2 238 0 44 2 238 0 46 2 238 0 47 2 238 0 48 2 238 0 50 2 238 0 54 2 238 0 55 2 238 0 57 2 238 0 58 2 238 0 59 2 238 0 63 2 238 0 64 2 238 0 66 2 238 0 68 2 238 0 69 2 238 0 70 2 238 0 71 2 238 0 72 2 238 0 73 2 238 0 74 2 238 0 75 2 238 0 76 2 238 0 77 2 238 0 78 2 238 0 79 2 238 0 80 2 238 0 82 2 238 0 83 2 238 0 86 2 238 0 87 2 238 0 88 2 238 0 89 2 238 0 90 2 238 1 109] #[0 2 242 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 246 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 250 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 2 254 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 2 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 6 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 10 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 14 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 18 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 3 22 0 3 3 22 0 4 3 22 0 5 3 22 0 6 3 22 0 8 3 22 0 10 3 22 0 11 3 22 0 13 3 22 0 17 3 22 0 20 3 22 0 22 3 22 0 23 3 22 0 24 3 22 0 25 3 22 0 26 1 7 0 27 3 22 0 29 3 22 0 30 3 22 0 31 3 22 0 32 3 22 0 33 3 22 0 34 3 22 0 35 3 22 0 37 3 22 0 41 3 22 0 42 3 22 0 43 3 22 0 44 3 22 0 46 3 22 0 47 3 22 0 48 3 22 0 50 3 22 0 54 3 22 0 55 3 22 0 57 3 22 0 58 3 22 0 59 3 22 0 63 3 22 0 64 3 22 0 66 3 22 0 68 3 22 0 69 3 22 0 70 3 22 0 71 3 22 0 72 3 22 0 73 3 22 0 74 3 22 0 75 3 22 0 76 3 22 0 77 3 22 0 78 3 22 0 79 3 22 0 80 3 22 0 82 3 22 0 83 3 22 0 86 3 22 0 87 3 22 0 88 3 22 0 89 3 22 0 90 3 22 1 109] #[1 3 26 0 3 3 26 0 4 3 26 0 5 3 26 0 6 3 26 0 8 3 26 0 10 3 26 0 11 3 26 0 13 3 26 0 17 3 26 0 20 3 26 0 22 3 26 0 23 3 26 0 24 3 26 0 25 3 26 0 26 1 11 0 27 3 26 0 29 3 26 0 30 3 26 0 31 3 26 0 32 3 26 0 33 3 26 0 34 3 26 0 35 3 26 0 37 3 26 0 41 3 26 0 42 3 26 0 43 3 26 0 44 3 26 0 46 3 26 0 47 3 26 0 48 3 26 0 50 3 26 0 54 3 26 0 55 3 26 0 57 3 26 0 58 3 26 0 59 3 26 0 63 3 26 0 64 3 26 0 66 3 26 0 68 3 26 0 69 3 26 0 70 3 26 0 71 3 26 0 72 3 26 0 73 3 26 0 74 3 26 0 75 3 26 0 76 3 26 0 77 3 26 0 78 3 26 0 79 3 26 0 80 3 26 0 82 3 26 0 83 3 26 0 86 3 26 0 87 3 26 0 88 3 26 0 89 3 26 0 90 3 26 1 109] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 6 229 1 36 6 229 1 38 2 17 1 39 6 229 1 40 6 229 1 45 6 229 1 46 6 229 1 47 6 229 1 48 6 229 1 49 6 229 1 50 6 229 1 53] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 6 233 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[1 0 6 0 4 0 21 0 17 0 6 0 20 0 6 0 63 0 6 0 86 1 57 0 245 1 61 0 248 6 237 1 59] #[0 3 30 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 34 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 38 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 42 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 6 241 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 6 73 0 77] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 58 0 11 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 6 245 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 6 245 1 71] #[0 6 253 0 86 0 191] #[1 3 46 0 3 3 46 0 4 3 46 0 8 3 46 0 11 3 46 0 17 3 46 0 20 3 46 0 22 3 46 0 23 3 46 0 24 3 46 0 25 3 46 0 26 3 46 0 29 3 46 0 30 3 46 0 31 3 46 0 32 3 46 0 33 3 46 0 34 3 46 0 35 3 46 0 37 7 1 0 39 3 46 0 41 3 46 0 42 3 46 0 43 3 46 0 44 3 46 0 46 3 46 0 47 3 46 0 50 3 46 0 54 3 46 0 55 3 46 0 57 3 46 0 58 3 46 0 59 3 46 0 63 3 46 0 64 3 46 0 66 3 46 0 68 3 46 0 69 3 46 0 70 3 46 0 71 3 46 0 72 3 46 0 73 3 46 0 74 3 46 0 75 3 46 0 76 3 46 0 77 3 46 0 78 3 46 0 80 3 46 0 82 3 46 0 83 3 46 0 86 3 46 0 87 3 46 0 88 3 46 0 89 3 46 0 90 7 5 0 111 7 9 1 70 3 46 1 109] #[0 7 13 0 82] #[0 7 17 0 82] #[0 7 21 0 82] #[0 3 50 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 54 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 7 25 0 21] #[0 3 58 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 62 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 7 29 0 21] #[1 7 33 0 30 7 37 0 34 3 66 0 83 7 41 0 113 7 45 0 114 7 49 0 115 7 53 0 117 7 57 1 99] #[0 3 70 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 74 0 4 0 7 0 17 0 31 0 33 0 44 0 48 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 82 0 83] #[0 3 78 0 2 0 4 0 20 0 22 0 54 0 63 0 77 0 86] #[1 3 82 0 5 7 61 0 6 7 69 0 9 7 69 1 69] #[0 3 86 0 5 0 6 0 9] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 7 73 1 36 7 73 1 38 2 17 1 39 7 73 1 40 7 73 1 45 7 73 1 46 7 73 1 47 7 73 1 48 7 73 1 49 7 73 1 50 7 73 1 53] #[1 3 90 0 2 3 90 0 22 7 85 0 54 7 81 0 77 3 90 0 86 7 85 1 84] #[0 3 94 0 3 0 4 0 8 0 20 0 22 0 23 0 24 0 25 0 26 0 66 0 71 0 82 0 86 0 87 0 88 0 89 0 90] #[0 3 98 0 3 0 4 0 8 0 20 0 22 0 23 0 24 0 25 0 26 0 66 0 71 0 82 0 86 0 87 0 88 0 89 0 90] #[0 3 102 0 3 0 4 0 8 0 20 0 22 0 23 0 24 0 25 0 26 0 66 0 71 0 82 0 86 0 87 0 88 0 89 0 90] #[0 3 106 0 3 0 4 0 8 0 20 0 22 0 23 0 24 0 25 0 26 0 66 0 71 0 82 0 86 0 87 0 88 0 89 0 90] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 7 89 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 7 93 0 86] #[1 0 6 0 4 0 21 0 17 0 6 0 20 0 6 0 63 0 6 0 86 1 57 0 245 1 61 0 248 7 97 1 59] #[0 3 110 0 17 0 31 0 33 0 44 0 48 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 82 0 83] #[0 7 101 0 48] #[0 7 105 0 48] #[0 3 114 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 86 0 87 0 88 0 89 0 90] #[1 5 21 0 6 5 25 0 7 2 6 0 48 5 29 0 174 7 109 1 77] #[1 5 25 0 7 2 6 0 48 5 29 0 174 7 113 1 77] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 21 0 17 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 49 0 29 0 6 0 31 0 53 0 32 0 6 0 33 0 6 0 35 0 57 0 37 0 61 0 41 0 65 0 42 0 69 0 43 0 6 0 44 0 73 0 46 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 81 0 64 0 85 0 66 0 6 0 68 0 6 0 69 0 6 0 70 0 89 0 71 0 93 0 72 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 0 101 0 80 0 105 0 82 7 117 0 83 0 7 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 2 237 0 99 0 153 0 101 0 153 0 102 0 153 0 104 0 153 0 105 0 153 0 107 0 173 0 108 0 173 0 109 0 173 0 112 0 185 0 120 0 189 0 121 0 193 0 122 0 197 0 123 0 197 0 124 0 197 0 125 0 197 0 126 0 197 0 127 0 217 0 139 0 217 0 145 0 217 0 149 0 217 0 153 0 237 0 154 0 217 0 166 0 245 0 167 0 217 0 170 0 253 0 171 0 217 0 183 0 217 0 199 0 217 0 202 0 217 0 205 0 217 0 215 1 21 0 216 0 217 0 218 0 217 0 219 0 217 0 221 1 37 0 222 0 217 0 224 0 217 0 225 0 217 0 226 0 217 0 227 1 57 0 245 1 61 0 248 1 65 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 165 1 59] #[1 7 121 0 6 7 125 0 15] #[0 3 118 0 6 0 15] #[1 6 213 0 1 3 122 0 6 6 217 0 7 6 221 0 8 3 122 0 15 6 225 0 16] #[1 0 247 0 5 0 247 0 6 1 210 0 27] #[1 0 9 0 3 3 21 0 4 0 15 0 8 0 25 0 20 2 25 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 2 29 0 52 2 33 0 54 0 85 0 66 0 89 0 71 2 37 0 77 0 105 0 82 2 41 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 7 129 0 151 3 41 0 233 2 57 0 234 2 61 0 235 2 65 0 236 2 69 0 237 2 73 0 240 2 77 0 241 2 81 0 242 2 85 0 243 2 89 0 244 2 89 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 2 113 1 38 2 17 1 39 2 113 1 106] #[1 5 81 0 13 1 15 0 82 7 133 0 144 5 85 0 152 7 137 0 156 7 141 0 160 7 145 1 81] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 7 149 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 3 126 0 3 0 4 0 6 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 130 0 3 0 4 0 6 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 6 213 0 1 3 134 0 3 3 134 0 4 6 217 0 7 1 19 0 8 3 134 0 11 6 225 0 16 3 134 0 17 3 134 0 20 3 134 0 22 3 134 0 23 3 134 0 24 3 134 0 25 3 134 0 26 3 134 0 29 3 134 0 30 3 134 0 31 3 134 0 32 3 134 0 33 3 134 0 34 3 134 0 35 3 134 0 37 3 134 0 41 3 134 0 42 3 134 0 43 3 134 0 44 3 134 0 46 3 134 0 47 3 134 0 50 3 134 0 54 3 134 0 55 3 134 0 57 3 134 0 58 3 134 0 59 3 134 0 63 3 134 0 64 3 134 0 66 3 134 0 68 3 134 0 69 3 134 0 70 3 134 0 71 3 134 0 72 3 134 0 73 3 134 0 74 3 134 0 75 3 134 0 76 3 134 0 77 3 134 0 78 3 134 0 80 3 134 0 82 3 134 0 83 3 134 0 86 3 134 0 87 3 134 0 88 3 134 0 89 3 134 0 90 3 134 1 109] #[1 3 138 0 4 3 138 0 7 3 138 0 82 7 153 0 173 7 157 0 176] #[1 7 161 0 6 3 142 0 15 7 165 0 79 7 169 0 131 7 173 1 93] #[0 3 146 0 6 0 15 0 79] #[1 3 150 0 6 7 177 0 10 3 150 0 15 3 150 0 79] #[1 2 1 0 82 7 185 0 144 7 185 0 217] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 7 189 1 36 7 189 1 38 2 17 1 39 7 189 1 40 7 189 1 45 7 189 1 46 7 189 1 47 7 189 1 48 7 189 1 49 7 189 1 50 7 189 1 53] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 21 0 17 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 49 0 29 0 6 0 31 0 53 0 32 0 6 0 33 0 6 0 35 0 57 0 37 0 61 0 41 0 65 0 42 0 69 0 43 0 6 0 44 0 6 0 45 0 73 0 46 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 81 0 64 0 85 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 70 0 89 0 71 0 93 0 72 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 0 101 0 80 0 105 0 82 0 10 0 83 0 7 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 0 145 0 99 0 149 0 100 0 153 0 101 0 153 0 102 0 153 0 104 0 153 0 105 0 153 0 107 0 173 0 108 0 173 0 109 0 173 0 112 0 185 0 120 0 189 0 121 0 193 0 122 0 197 0 123 0 197 0 124 0 197 0 125 0 197 0 126 0 197 0 127 0 217 0 139 0 217 0 145 0 217 0 149 0 217 0 153 0 237 0 154 7 193 0 157 7 197 0 158 7 201 0 161 7 205 0 162 0 217 0 166 0 245 0 167 0 217 0 170 0 253 0 171 0 217 0 183 0 217 0 199 0 217 0 202 0 217 0 205 0 217 0 215 1 21 0 216 0 217 0 218 0 217 0 219 0 217 0 221 1 37 0 222 0 217 0 224 0 217 0 225 0 217 0 226 0 217 0 227 1 57 0 245 1 61 0 248 1 65 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 7 209 1 59 4 29 1 98] #[0 3 154 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 158 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 162 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 7 213 0 10] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 7 217 1 36 7 217 1 38 2 17 1 39 7 217 1 40 7 217 1 45 7 217 1 46 7 217 1 47 7 217 1 48 7 217 1 49 7 217 1 50 7 217 1 53] #[1 6 213 0 1 3 166 0 3 3 166 0 4 3 166 0 5 3 166 0 6 6 217 0 7 1 23 0 8 3 166 0 9 3 166 0 10 3 166 0 11 3 166 0 13 1 27 0 16 3 166 0 17 3 166 0 20 3 166 0 21 3 166 0 22 3 166 0 23 3 166 0 24 3 166 0 25 3 166 0 26 3 166 0 27 3 166 0 29 3 166 0 30 3 166 0 31 3 166 0 32 3 166 0 33 3 166 0 34 3 166 0 35 3 166 0 37 3 166 0 41 3 166 0 42 3 166 0 43 3 166 0 44 3 166 0 46 3 166 0 47 3 166 0 48 3 166 0 50 3 166 0 52 3 166 0 54 3 166 0 55 3 166 0 57 3 166 0 58 3 166 0 59 3 166 0 63 3 166 0 64 3 166 0 66 3 166 0 68 3 166 0 69 3 166 0 70 3 166 0 71 3 166 0 72 3 166 0 73 3 166 0 74 3 166 0 75 3 166 0 76 3 166 0 77 3 166 0 78 3 166 0 79 3 166 0 80 3 166 0 82 3 166 0 83 3 166 0 86 3 166 0 87 3 166 0 88 3 166 0 89 3 166 0 90 3 166 1 109] #[1 6 213 0 1 3 170 0 3 3 170 0 4 3 170 0 5 3 170 0 6 6 217 0 7 1 31 0 8 3 170 0 9 3 170 0 10 3 170 0 11 3 170 0 13 1 35 0 16 3 170 0 17 3 170 0 20 3 170 0 21 3 170 0 22 3 170 0 23 3 170 0 24 3 170 0 25 3 170 0 26 3 170 0 27 3 170 0 29 3 170 0 30 3 170 0 31 3 170 0 32 3 170 0 33 3 170 0 34 3 170 0 35 3 170 0 37 3 170 0 41 3 170 0 42 3 170 0 43 3 170 0 44 3 170 0 46 3 170 0 47 3 170 0 48 3 170 0 50 3 170 0 52 3 170 0 54 3 170 0 55 3 170 0 57 3 170 0 58 3 170 0 59 3 170 0 63 3 170 0 64 3 170 0 66 3 170 0 68 3 170 0 69 3 170 0 70 3 170 0 71 3 170 0 72 3 170 0 73 3 170 0 74 3 170 0 75 3 170 0 76 3 170 0 77 3 170 0 78 3 170 0 79 3 170 0 80 3 170 0 82 3 170 0 83 3 170 0 86 3 170 0 87 3 170 0 88 3 170 0 89 3 170 0 90 3 170 1 109] #[0 3 174 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 178 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 182 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 186 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 190 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 194 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 198 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 70 0 1 0 70 0 3 0 70 0 4 0 70 0 5 0 70 0 6 0 70 0 8 0 70 0 9 0 70 0 10 0 70 0 11 2 221 0 12 0 70 0 13 0 70 0 16 0 70 0 17 0 70 0 20 0 70 0 21 0 70 0 22 0 70 0 23 0 70 0 24 0 70 0 25 0 70 0 26 0 70 0 27 0 70 0 29 0 70 0 30 0 70 0 31 0 70 0 32 0 70 0 33 0 70 0 34 0 70 0 35 0 70 0 37 0 70 0 41 0 70 0 42 0 70 0 43 0 70 0 44 0 70 0 46 0 70 0 47 0 70 0 48 0 70 0 50 0 70 0 52 0 70 0 54 0 70 0 55 0 70 0 57 0 70 0 58 0 70 0 59 0 70 0 63 0 70 0 64 0 70 0 66 0 70 0 68 0 70 0 69 0 70 0 70 0 70 0 71 0 70 0 72 0 70 0 73 0 70 0 74 0 70 0 75 0 70 0 76 0 70 0 77 0 70 0 78 0 70 0 79 0 70 0 80 0 70 0 82 0 70 0 83 0 70 0 86 0 70 0 87 0 70 0 88 0 70 0 89 0 70 0 90 2 225 0 136 7 221 1 73 0 70 1 109] #[0 3 202 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 1 206 0 6 0 21] #[1 4 169 0 6 7 225 0 21] #[0 3 206 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 210 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 214 0 10 0 12 0 82] #[1 0 198 0 10 3 69 0 12 0 198 0 82 3 73 0 128 7 229 1 74] #[0 3 218 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 3 222 0 86 0 90] #[0 3 226 0 86 0 90] #[0 3 230 0 86 0 90] #[0 3 234 0 86 0 90] #[0 3 238 0 86 0 90] #[0 3 242 0 86 0 90] #[0 3 246 0 86 0 90] #[0 3 250 0 86 0 90] #[1 7 233 0 86 7 237 0 90 7 241 0 147 7 245 0 148] #[0 3 254 0 10 0 82] #[1 4 37 0 10 1 154 0 82 4 41 1 54 7 249 1 107] #[0 4 2 0 10 0 12 0 82] #[1 0 198 0 10 3 69 0 12 0 198 0 82 3 73 0 128 7 253 1 74] #[0 4 6 0 7] #[0 4 10 0 31 0 44 0 54 0 55 0 57 0 59 0 68 0 74 0 75 0 76 0 77 0 78] #[0 4 14 0 31 0 44 0 54 0 55 0 57 0 59 0 68 0 74 0 75 0 76 0 77 0 78] #[0 4 18 0 31 0 44 0 54 0 55 0 57 0 59 0 68 0 74 0 75 0 76 0 77 0 78] #[0 4 22 0 31 0 44 0 54 0 55 0 57 0 59 0 68 0 74 0 75 0 76 0 77 0 78] #[0 4 26 0 31 0 44 0 54 0 55 0 57 0 59 0 68 0 74 0 75 0 76 0 77 0 78] #[0 4 30 0 31 0 44 0 54 0 55 0 57 0 59 0 68 0 74 0 75 0 76 0 77 0 78] #[0 4 34 0 31 0 44 0 54 0 55 0 57 0 59 0 68 0 74 0 75 0 76 0 77 0 78] #[0 4 38 0 31 0 44 0 54 0 55 0 57 0 59 0 68 0 74 0 75 0 76 0 77 0 78] #[0 4 42 0 31 0 44 0 54 0 55 0 57 0 59 0 68 0 74 0 75 0 76 0 77 0 78] #[0 4 46 0 31 0 44 0 54 0 55 0 57 0 59 0 68 0 74 0 75 0 76 0 77 0 78] #[1 8 1 0 10 8 5 0 82] #[0 4 50 0 4 0 12] #[0 4 54 0 86 0 90] #[1 0 9 0 3 3 21 0 4 0 15 0 8 0 25 0 20 2 25 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 2 29 0 52 2 33 0 54 0 85 0 66 0 89 0 71 2 37 0 77 0 105 0 82 2 41 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 8 9 0 150 3 33 0 151 3 41 0 233 2 57 0 234 2 61 0 235 2 65 0 236 2 69 0 237 2 73 0 240 2 77 0 241 2 81 0 242 2 85 0 243 2 89 0 244 2 89 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 2 113 1 38 2 17 1 39 2 113 1 106] #[0 4 58 0 3 0 4 0 8 0 20 0 22 0 23 0 24 0 25 0 26 0 52 0 54 0 66 0 71 0 77 0 82 0 86 0 87 0 88 0 89 0 90] #[0 4 62 0 5 0 6] #[0 4 66 0 5 0 6] #[1 6 85 0 4 2 178 0 5 6 89 0 20 6 93 0 82 6 97 0 86 0 113 0 87 0 117 0 88 0 133 0 89 6 101 0 90 0 133 0 94 6 105 0 95 6 109 0 249 6 113 0 250 8 13 1 60] #[1 6 85 0 4 6 89 0 20 2 178 0 21 6 93 0 82 6 97 0 86 0 113 0 87 0 117 0 88 0 133 0 89 6 101 0 90 0 133 0 94 6 105 0 95 6 109 0 249 6 113 0 250 8 17 1 60] #[1 6 85 0 4 6 89 0 20 6 93 0 82 2 178 0 83 6 97 0 86 0 113 0 87 0 117 0 88 0 133 0 89 6 101 0 90 0 133 0 94 6 105 0 95 6 109 0 249 6 113 0 250 8 21 1 60] #[0 4 70 0 4 0 5 0 20 0 21 0 82 0 83 0 86 0 87 0 88 0 89 0 90] #[0 4 74 0 4 0 5 0 20 0 21 0 82 0 83 0 86 0 87 0 88 0 89 0 90] #[0 4 78 0 4 0 5 0 20 0 21 0 82 0 83 0 86 0 87 0 88 0 89 0 90] #[1 6 85 0 4 4 82 0 5 6 89 0 20 4 82 0 21 6 93 0 82 4 82 0 83 6 97 0 86 0 113 0 87 0 117 0 88 0 133 0 89 6 101 0 90 0 133 0 94 6 105 0 95 8 25 0 250] #[0 4 86 0 4 0 5 0 20 0 21 0 82 0 83 0 86 0 87 0 88 0 89 0 90] #[0 8 29 0 5] #[0 4 90 0 6 0 21] #[0 1 126 0 6 0 21] #[0 4 94 0 21] #[0 4 1 0 10] #[0 4 98 0 21] #[0 4 102 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 39 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 81 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 4 106 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 4 110 0 6 0 13 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 82 0 83] #[1 8 33 0 6 4 114 0 13 4 114 0 17 4 114 0 31 4 114 0 33 4 114 0 44 4 114 0 50 4 114 0 55 4 114 0 57 4 114 0 59 4 114 0 68 4 114 0 70 4 114 0 73 4 114 0 74 4 114 0 75 4 114 0 76 4 114 0 77 4 114 0 78 4 114 0 82 4 114 0 83] #[1 4 118 0 17 4 118 0 31 4 118 0 33 4 118 0 35 4 118 0 41 4 118 0 44 4 118 0 47 4 118 0 50 4 118 0 54 4 118 0 55 4 118 0 57 4 118 0 58 4 118 0 59 4 118 0 63 4 118 0 68 4 118 0 69 4 118 0 70 4 118 0 73 4 118 0 74 4 118 0 75 4 118 0 76 4 118 0 77 4 118 0 78 1 39 0 83 4 118 0 86 8 37 0 140 8 41 1 66] #[0 4 126 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 2 17 0 86 8 45 1 38 2 17 1 39] #[1 0 9 0 3 3 21 0 4 0 15 0 8 0 25 0 20 2 25 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 2 29 0 52 2 33 0 54 0 85 0 66 0 89 0 71 2 37 0 77 0 105 0 82 2 41 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 4 57 0 233 2 57 0 234 2 61 0 235 2 65 0 236 2 69 0 237 8 49 0 239 2 73 0 240 2 77 0 241 2 81 0 242 2 85 0 243 2 89 0 244 2 89 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 2 113 1 38 2 17 1 39 2 113 1 106] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 58 0 11 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 8 53 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 8 53 1 71] #[0 4 130 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 4 134 0 5] #[1 3 82 0 5 8 57 0 6 8 61 0 9 8 61 1 69] #[0 4 138 0 5 0 6 0 9] #[1 1 254 0 4 1 254 0 20 8 65 0 51 1 254 0 63 1 254 0 86 8 65 1 82] #[0 8 73 0 86 1 44] #[0 8 77 0 5] #[1 6 213 0 1 6 217 0 7 6 221 0 8 8 81 0 10 6 225 0 16 8 85 0 21] #[1 4 142 0 15 2 17 0 86 8 97 1 38 2 17 1 39 8 93 1 51 8 97 1 52 8 101 1 89] #[0 4 146 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 8 105 1 36 8 105 1 38 2 17 1 39 8 105 1 40 8 105 1 45 8 105 1 46 8 105 1 47 8 105 1 48 8 105 1 49 8 105 1 50 8 105 1 53] #[1 8 109 0 18 8 113 0 19] #[0 4 150 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 6 213 0 1 4 154 0 3 4 154 0 4 4 154 0 5 4 154 0 6 6 217 0 7 1 43 0 8 4 154 0 10 4 154 0 11 4 154 0 13 6 225 0 16 4 154 0 17 4 154 0 20 4 154 0 22 4 154 0 23 4 154 0 24 4 154 0 25 4 154 0 26 4 154 0 27 4 154 0 29 4 154 0 30 4 154 0 31 4 154 0 32 4 154 0 33 4 154 0 34 4 154 0 35 4 154 0 37 4 154 0 41 4 154 0 42 4 154 0 43 4 154 0 44 4 154 0 46 4 154 0 47 4 154 0 48 4 154 0 50 4 154 0 54 4 154 0 55 4 154 0 57 4 154 0 58 4 154 0 59 4 154 0 63 4 154 0 64 4 154 0 66 4 154 0 68 4 154 0 69 4 154 0 70 4 154 0 71 4 154 0 72 4 154 0 73 4 154 0 74 4 154 0 75 4 154 0 76 4 154 0 77 4 154 0 78 4 154 0 79 4 154 0 80 4 154 0 82 4 154 0 83 4 154 0 86 4 154 0 87 4 154 0 88 4 154 0 89 4 154 0 90 4 154 1 109] #[1 2 1 0 82 8 117 0 144] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 8 121 1 36 8 121 1 38 2 17 1 39 8 121 1 40 8 121 1 45 8 121 1 46 8 121 1 47 8 121 1 48 8 121 1 49 8 121 1 50 8 121 1 53] #[0 4 158 0 6 0 11 0 21] #[0 8 125 0 11] #[0 4 162 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 4 166 0 3 1 47 0 4 4 166 0 5 4 166 0 6 4 166 0 8 4 166 0 10 4 166 0 11 4 166 0 13 4 166 0 17 4 166 0 20 4 166 0 22 4 166 0 23 4 166 0 24 4 166 0 25 4 166 0 26 4 166 0 27 4 166 0 29 4 166 0 30 4 166 0 31 4 166 0 32 4 166 0 33 4 166 0 34 4 166 0 35 4 166 0 37 4 166 0 41 4 166 0 42 4 166 0 43 4 166 0 44 4 166 0 46 4 166 0 47 4 166 0 48 4 166 0 50 4 166 0 54 4 166 0 55 4 166 0 57 4 166 0 58 4 166 0 59 4 166 0 63 4 166 0 64 4 166 0 66 4 166 0 68 4 166 0 69 4 166 0 70 4 166 0 71 4 166 0 72 4 166 0 73 4 166 0 74 4 166 0 75 4 166 0 76 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 80 4 166 0 82 4 166 0 83 4 166 0 86 4 166 0 87 4 166 0 88 4 166 0 89 4 166 0 90 8 133 0 237 8 137 1 100 4 166 1 109] #[1 0 73 0 46 2 1 0 82 8 141 0 109 8 145 0 144] #[0 4 170 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 4 174 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 4 178 0 28 8 149 0 61 1 51 0 83 8 153 0 228 8 157 0 229 8 161 1 80 8 165 1 87] #[0 8 169 0 83] #[0 8 173 0 83] #[0 4 186 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 4 190 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 9 0 3 3 21 0 4 0 15 0 8 0 25 0 20 2 25 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 2 29 0 52 2 33 0 54 0 85 0 66 0 89 0 71 2 37 0 77 0 105 0 82 2 41 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 8 177 0 116 8 181 0 233 2 57 0 234 2 61 0 235 2 65 0 236 2 69 0 237 2 73 0 240 2 77 0 241 2 81 0 242 2 85 0 243 2 89 0 244 2 89 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 2 113 1 38 2 17 1 39 2 113 1 106] #[0 8 185 0 10] #[1 7 33 0 30 7 37 0 34 4 194 0 83 8 189 0 114 7 49 0 115 7 53 0 117] #[0 4 198 0 30 0 34 0 83] #[1 0 9 0 3 0 13 0 4 0 17 0 8 8 193 0 11 0 21 0 17 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 49 0 29 0 6 0 31 0 53 0 32 0 6 0 33 0 6 0 35 0 57 0 37 0 61 0 41 0 65 0 42 0 69 0 43 0 6 0 44 0 73 0 46 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 81 0 64 0 85 0 66 0 6 0 68 0 6 0 69 0 6 0 70 0 89 0 71 0 93 0 72 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 0 101 0 80 0 105 0 82 0 7 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 0 145 0 99 8 197 0 100 0 153 0 101 0 153 0 102 0 153 0 104 0 153 0 105 0 153 0 107 0 173 0 108 0 173 0 109 0 173 0 112 0 185 0 120 0 189 0 121 0 193 0 122 0 197 0 123 0 197 0 124 0 197 0 125 0 197 0 126 0 197 0 127 0 217 0 139 0 217 0 145 0 217 0 149 0 217 0 153 0 237 0 154 0 217 0 166 0 245 0 167 0 217 0 170 0 253 0 171 0 217 0 183 0 217 0 199 0 217 0 202 0 217 0 205 0 217 0 215 1 21 0 216 0 217 0 218 0 217 0 219 0 217 0 221 1 37 0 222 0 217 0 224 0 217 0 225 0 217 0 226 0 217 0 227 1 57 0 245 1 61 0 248 1 65 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 165 1 59] #[1 0 9 0 3 0 13 0 4 0 17 0 8 8 201 0 11 0 21 0 17 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 49 0 29 0 6 0 31 0 53 0 32 0 6 0 33 0 6 0 35 0 57 0 37 0 61 0 41 0 65 0 42 0 69 0 43 0 6 0 44 0 73 0 46 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 81 0 64 0 85 0 66 0 6 0 68 0 6 0 69 0 6 0 70 0 89 0 71 0 93 0 72 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 0 101 0 80 0 105 0 82 0 7 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 0 145 0 99 8 205 0 100 0 153 0 101 0 153 0 102 0 153 0 104 0 153 0 105 0 153 0 107 0 173 0 108 0 173 0 109 0 173 0 112 0 185 0 120 0 189 0 121 0 193 0 122 0 197 0 123 0 197 0 124 0 197 0 125 0 197 0 126 0 197 0 127 0 217 0 139 0 217 0 145 0 217 0 149 0 217 0 153 0 237 0 154 0 217 0 166 0 245 0 167 0 217 0 170 0 253 0 171 0 217 0 183 0 217 0 199 0 217 0 202 0 217 0 205 0 217 0 215 1 21 0 216 0 217 0 218 0 217 0 219 0 217 0 221 1 37 0 222 0 217 0 224 0 217 0 225 0 217 0 226 0 217 0 227 1 57 0 245 1 61 0 248 1 65 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 165 1 59] #[0 8 209 0 83] #[1 1 254 0 2 0 6 0 4 0 21 0 17 0 6 0 20 1 254 0 22 4 253 0 51 1 254 0 54 0 6 0 63 1 254 0 77 0 187 0 86 8 213 0 179 1 57 0 245 1 61 0 248 4 249 1 59 4 253 1 82] #[0 4 202 0 5] #[0 8 217 0 5] #[1 6 213 0 1 4 206 0 5 4 206 0 6 6 217 0 7 6 221 0 8 4 206 0 9 6 225 0 16] #[0 4 210 0 2 0 22 0 86] #[1 8 225 0 2 4 214 0 22 4 214 0 86 8 225 1 78] #[1 8 229 0 2 4 214 0 22 4 214 0 86 8 229 1 78] #[0 8 233 0 21] #[0 4 218 0 6 0 7 0 48] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 8 237 1 36 8 237 1 38 2 17 1 39 8 237 1 40 8 237 1 45 8 237 1 46 8 237 1 47 8 237 1 48 8 237 1 49 8 237 1 50 8 237 1 53] #[0 4 222 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 86 0 87 0 88 0 89 0 90] #[0 4 226 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 86 0 87 0 88 0 89 0 90] #[0 8 241 0 48] #[0 8 245 0 48] #[0 4 230 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 8 249 0 138 5 65 1 36 5 65 1 38 2 17 1 39 5 65 1 40 5 65 1 45 5 65 1 46 5 65 1 47 5 65 1 48 5 65 1 49 5 65 1 50 5 65 1 53] #[0 4 234 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 4 238 0 3 0 4 0 6 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 4 242 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 4 246 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 4 250 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 8 253 0 82 9 1 0 163] #[0 4 254 0 3 0 4 0 6 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 2 1 0 82 9 9 0 144 9 9 0 175] #[1 2 189 0 4 5 25 0 7 2 6 0 17 2 6 0 31 2 6 0 33 2 6 0 44 2 6 0 50 2 6 0 55 2 6 0 57 2 6 0 59 2 6 0 68 2 6 0 70 2 6 0 73 2 6 0 74 2 6 0 75 2 6 0 76 2 6 0 77 2 6 0 78 2 6 0 82 2 6 0 83 5 29 0 174 9 13 0 177 9 17 1 77] #[1 5 109 0 86 9 21 0 130 5 109 1 39] #[1 2 17 0 86 9 25 0 132 9 29 0 133 9 33 0 134 9 37 0 135 9 41 1 38 2 17 1 39] #[0 5 2 0 15] #[0 9 45 0 15] #[1 4 89 0 63 2 17 0 86 9 49 1 38 2 17 1 39 9 53 1 50] #[0 5 6 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 10 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 6 213 0 1 6 217 0 7 6 221 0 8 6 225 0 16 5 14 0 82] #[1 0 21 0 17 0 6 0 67 5 18 0 83 9 57 0 158 1 57 0 245 1 61 0 248 9 61 1 59 9 65 1 95] #[1 0 21 0 17 0 6 0 45 9 69 0 157 1 57 0 245 1 61 0 248 9 73 1 59] #[1 0 21 0 17 0 6 0 67 5 22 0 83 9 77 0 162 1 57 0 245 1 61 0 248 9 81 1 59 9 85 1 96] #[1 0 21 0 17 0 6 0 45 9 89 0 161 1 57 0 245 1 61 0 248 9 93 1 59] #[1 0 151 0 31 3 221 0 33 3 181 0 35 0 155 0 44 9 97 0 45 3 185 0 47 1 90 0 50 0 155 0 54 1 82 0 55 1 82 0 57 1 82 0 59 3 189 0 63 9 101 0 67 1 82 0 68 3 193 0 69 3 197 0 70 1 82 0 74 1 82 0 75 1 82 0 76 0 155 0 77 1 82 0 78 3 213 0 86 3 205 0 141 3 209 0 184 3 213 0 190 3 217 0 192 3 221 1 64 3 225 1 65] #[0 5 26 0 3 0 4 0 8 0 20 0 22 0 23 0 24 0 25 0 26 0 66 0 71 0 82 0 86 0 87 0 88 0 89 0 90] #[1 6 213 0 1 5 30 0 3 5 30 0 4 5 30 0 5 5 30 0 6 6 217 0 7 1 55 0 8 5 30 0 9 5 30 0 10 5 30 0 11 5 30 0 13 1 59 0 16 5 30 0 17 5 30 0 20 5 30 0 21 5 30 0 22 5 30 0 23 5 30 0 24 5 30 0 25 5 30 0 26 5 30 0 27 5 30 0 29 5 30 0 30 5 30 0 31 5 30 0 32 5 30 0 33 5 30 0 34 5 30 0 35 5 30 0 37 5 30 0 41 5 30 0 42 5 30 0 43 5 30 0 44 5 30 0 46 5 30 0 47 5 30 0 48 5 30 0 50 5 30 0 52 5 30 0 54 5 30 0 55 5 30 0 57 5 30 0 58 5 30 0 59 5 30 0 63 5 30 0 64 5 30 0 66 5 30 0 68 5 30 0 69 5 30 0 70 5 30 0 71 5 30 0 72 5 30 0 73 5 30 0 74 5 30 0 75 5 30 0 76 5 30 0 77 5 30 0 78 5 30 0 79 5 30 0 80 5 30 0 82 5 30 0 83 5 30 0 86 5 30 0 87 5 30 0 88 5 30 0 89 5 30 0 90 5 30 1 109] #[0 5 34 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 38 0 1 0 3 0 4 0 5 0 6 0 8 0 9 0 10 0 11 0 13 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 4 37 0 10 1 154 0 82 4 41 1 54 9 105 1 107] #[0 5 42 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 46 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 5 50 0 3 5 50 0 4 1 63 0 8 5 50 0 11 5 50 0 17 5 50 0 20 5 50 0 22 5 50 0 23 5 50 0 24 5 50 0 25 5 50 0 26 5 50 0 29 5 50 0 30 5 50 0 31 5 50 0 32 5 50 0 33 5 50 0 34 5 50 0 35 5 50 0 37 5 50 0 41 5 50 0 42 5 50 0 43 5 50 0 44 5 50 0 46 5 50 0 47 5 50 0 50 5 50 0 54 5 50 0 55 5 50 0 57 5 50 0 58 5 50 0 59 5 50 0 63 5 50 0 64 5 50 0 66 5 50 0 68 5 50 0 69 5 50 0 70 5 50 0 71 5 50 0 72 5 50 0 73 5 50 0 74 5 50 0 75 5 50 0 76 5 50 0 77 5 50 0 78 5 50 0 80 5 50 0 82 5 50 0 83 5 50 0 86 5 50 0 87 5 50 0 88 5 50 0 89 5 50 0 90 5 50 1 109] #[0 5 54 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 9 113 0 82 9 117 0 207] #[1 4 37 0 10 1 154 0 82 4 41 1 54 9 121 1 107] #[1 2 17 0 86 9 125 1 38 2 17 1 39] #[1 0 21 0 17 0 6 0 30 0 6 0 31 0 6 0 33 0 6 0 35 0 61 0 41 0 6 0 44 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 6 0 68 0 6 0 69 0 6 0 70 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 5 58 0 83 0 6 0 86 9 129 0 139 9 129 0 145 9 129 0 149 9 129 0 153 0 237 0 154 9 129 0 166 0 245 0 167 9 129 0 170 0 253 0 171 9 129 0 183 9 133 0 185 9 137 0 186 9 141 0 187 9 129 0 199 9 129 0 202 9 129 0 205 9 129 0 215 1 21 0 216 9 129 0 218 9 129 0 219 9 129 0 221 1 37 0 222 9 129 0 224 9 129 0 225 9 129 0 226 9 129 0 227 1 57 0 245 1 61 0 248 9 145 1 59 9 149 1 108] #[1 5 62 0 3 5 62 0 4 5 73 0 6 5 62 0 8 5 62 0 11 5 62 0 17 5 62 0 20 5 62 0 22 5 62 0 23 5 62 0 24 5 62 0 25 5 62 0 26 5 62 0 29 5 62 0 30 5 62 0 31 5 62 0 32 5 62 0 33 5 62 0 34 5 62 0 35 5 62 0 37 5 62 0 41 5 62 0 42 5 62 0 43 5 62 0 44 5 62 0 46 5 62 0 47 5 62 0 50 5 62 0 54 5 62 0 55 5 62 0 57 5 62 0 58 5 62 0 59 5 62 0 63 5 62 0 64 5 62 0 66 5 62 0 68 5 62 0 69 5 62 0 70 5 62 0 71 5 62 0 72 5 62 0 73 5 62 0 74 5 62 0 75 5 62 0 76 5 62 0 77 5 62 0 78 5 62 0 80 5 62 0 82 5 62 0 83 5 62 0 86 5 62 0 87 5 62 0 88 5 62 0 89 5 62 0 90 5 62 1 109] #[0 9 153 0 5] #[0 9 157 0 21] #[0 9 161 0 83] #[0 5 66 0 4 0 5 0 20 0 21 0 82 0 83 0 86 0 87 0 88 0 89 0 90] #[0 5 70 0 4 0 17 0 20 0 30 0 31 0 33 0 35 0 36 0 44 0 45 0 47 0 50 0 51 0 54 0 55 0 57 0 59 0 63 0 67 0 68 0 69 0 70 0 74 0 75 0 76 0 77 0 78 0 81 0 86] #[1 2 17 0 86 9 165 1 38 2 17 1 39] #[1 0 21 0 17 0 6 0 31 0 6 0 33 0 6 0 35 0 61 0 41 0 6 0 44 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 6 0 68 0 6 0 69 0 6 0 70 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 5 74 0 83 0 6 0 86 9 169 0 139 9 169 0 145 9 169 0 149 9 169 0 153 0 237 0 154 9 169 0 166 0 245 0 167 9 169 0 170 0 253 0 171 9 169 0 183 9 169 0 199 9 169 0 202 9 169 0 205 9 169 0 215 1 21 0 216 9 169 0 218 9 169 0 219 9 169 0 221 1 37 0 222 9 169 0 224 9 169 0 225 9 169 0 226 9 169 0 227 1 57 0 245 1 61 0 248 1 165 1 59] #[0 9 173 0 83] #[0 5 78 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 14 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 82 0 5 0 6] #[0 9 177 0 11] #[1 0 6 0 4 0 21 0 17 0 6 0 20 0 255 0 51 0 6 0 63 0 187 0 86 1 57 0 245 1 61 0 248 9 181 1 43 6 193 1 59 6 197 1 82] #[0 5 86 0 5] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 9 185 1 36 9 185 1 38 2 17 1 39 9 185 1 40 9 185 1 45 9 185 1 46 9 185 1 47 9 185 1 48 9 185 1 49 9 185 1 50 9 185 1 53] #[0 5 90 0 10] #[1 4 149 0 10 9 189 1 37] #[0 5 94 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 4 81 0 4 4 85 0 20 4 89 0 63 2 17 0 86 9 193 1 36 9 193 1 38 2 17 1 39 9 193 1 40 9 193 1 45 9 193 1 46 9 193 1 47 9 193 1 48 9 193 1 49 9 193 1 50 9 193 1 53] #[0 5 98 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 102 0 6 0 15] #[1 9 197 0 6 5 106 0 15] #[0 5 110 0 6 0 15] #[0 9 201 0 15] #[1 1 67 0 1 5 114 0 3 5 114 0 4 5 114 0 5 5 114 0 6 1 71 0 7 1 75 0 8 5 114 0 9 5 114 0 10 5 114 0 11 5 114 0 13 5 114 0 15 1 79 0 16 5 114 0 17 5 114 0 20 5 114 0 21 5 114 0 22 5 114 0 23 5 114 0 24 5 114 0 25 5 114 0 26 5 114 0 27 5 114 0 29 5 114 0 30 5 114 0 31 5 114 0 32 5 114 0 33 5 114 0 34 5 114 0 35 5 114 0 37 5 114 0 41 5 114 0 42 5 114 0 43 5 114 0 44 5 114 0 46 5 114 0 47 5 114 0 48 5 114 0 50 5 114 0 52 5 114 0 54 5 114 0 55 5 114 0 57 5 114 0 58 5 114 0 59 5 114 0 63 5 114 0 64 5 114 0 66 5 114 0 68 5 114 0 69 5 114 0 70 5 114 0 71 5 114 0 72 5 114 0 73 5 114 0 74 5 114 0 75 5 114 0 76 5 114 0 77 5 114 0 78 5 114 0 79 5 114 0 80 5 114 0 82 5 114 0 83 5 114 0 86 5 114 0 87 5 114 0 88 5 114 0 89 5 114 0 90 5 114 1 109] #[0 5 118 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 122 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 126 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 6 213 0 1 5 130 0 3 5 130 0 4 5 130 0 5 5 130 0 6 6 217 0 7 1 83 0 8 5 130 0 9 5 130 0 10 5 130 0 11 5 130 0 13 6 225 0 16 5 130 0 17 5 130 0 20 5 130 0 22 5 130 0 23 5 130 0 24 5 130 0 25 5 130 0 26 5 130 0 27 5 130 0 29 5 130 0 30 5 130 0 31 5 130 0 32 5 130 0 33 5 130 0 34 5 130 0 35 5 130 0 37 5 130 0 41 5 130 0 42 5 130 0 43 5 130 0 44 5 130 0 46 5 130 0 47 5 130 0 48 5 130 0 50 5 130 0 54 5 130 0 55 5 130 0 57 5 130 0 58 5 130 0 59 5 130 0 63 5 130 0 64 5 130 0 66 5 130 0 68 5 130 0 69 5 130 0 70 5 130 0 71 5 130 0 72 5 130 0 73 5 130 0 74 5 130 0 75 5 130 0 76 5 130 0 77 5 130 0 78 5 130 0 79 5 130 0 80 5 130 0 82 5 130 0 83 5 130 0 86 5 130 0 87 5 130 0 88 5 130 0 89 5 130 0 90 5 130 1 109] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 71 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 9 205 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 9 205 1 71] #[1 0 9 0 3 3 21 0 4 1 158 0 5 0 15 0 8 0 25 0 20 2 25 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 2 29 0 52 2 33 0 54 0 85 0 66 0 89 0 71 2 37 0 77 0 105 0 82 2 41 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 4 57 0 233 2 57 0 234 2 61 0 235 2 65 0 236 2 69 0 237 4 61 0 238 4 65 0 239 2 73 0 240 2 77 0 241 2 81 0 242 2 85 0 243 2 89 0 244 2 89 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 2 113 1 38 2 17 1 39 4 77 1 101 2 113 1 106] #[0 5 134 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 138 0 3 0 4 0 5 0 6 0 8 0 10 0 11 0 13 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 142 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 146 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 9 213 0 87 0 230] #[0 5 150 0 83] #[0 5 154 0 28 0 83] #[0 9 217 0 83] #[1 9 221 0 28 5 158 0 83 9 225 0 231 9 229 1 57] #[0 5 162 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 166 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 9 233 0 6 9 237 0 10] #[1 5 170 0 6 5 170 0 10 4 141 0 27 9 241 0 79 9 245 0 118 9 249 1 75] #[0 5 174 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 86 0 87 0 88 0 89 0 90] #[0 5 178 0 30 0 34 0 83] #[0 5 182 0 30 0 34 0 83] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 21 0 17 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 49 0 29 5 186 0 30 0 6 0 31 0 53 0 32 0 6 0 33 5 186 0 34 0 6 0 35 0 57 0 37 0 61 0 41 0 65 0 42 0 69 0 43 0 6 0 44 0 73 0 46 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 81 0 64 0 85 0 66 0 6 0 68 0 6 0 69 0 6 0 70 0 89 0 71 0 93 0 72 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 0 101 0 80 0 105 0 82 5 186 0 83 0 7 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 2 237 0 99 0 153 0 101 0 153 0 102 0 153 0 104 0 153 0 105 0 153 0 107 0 173 0 108 0 173 0 109 0 173 0 112 0 185 0 120 0 189 0 121 0 193 0 122 0 197 0 123 0 197 0 124 0 197 0 125 0 197 0 126 0 197 0 127 0 217 0 139 0 217 0 145 0 217 0 149 0 217 0 153 0 237 0 154 0 217 0 166 0 245 0 167 0 217 0 170 0 253 0 171 0 217 0 183 0 217 0 199 0 217 0 202 0 217 0 205 0 217 0 215 1 21 0 216 0 217 0 218 0 217 0 219 0 217 0 221 1 37 0 222 0 217 0 224 0 217 0 225 0 217 0 226 0 217 0 227 1 57 0 245 1 61 0 248 1 65 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 165 1 59] #[0 5 190 0 30 0 34 0 83] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 21 0 17 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 49 0 29 5 194 0 30 0 6 0 31 0 53 0 32 0 6 0 33 5 194 0 34 0 6 0 35 0 57 0 37 0 61 0 41 0 65 0 42 0 69 0 43 0 6 0 44 0 73 0 46 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 81 0 64 0 85 0 66 0 6 0 68 0 6 0 69 0 6 0 70 0 89 0 71 0 93 0 72 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 0 101 0 80 0 105 0 82 5 194 0 83 0 7 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 2 237 0 99 0 153 0 101 0 153 0 102 0 153 0 104 0 153 0 105 0 153 0 107 0 173 0 108 0 173 0 109 0 173 0 112 0 185 0 120 0 189 0 121 0 193 0 122 0 197 0 123 0 197 0 124 0 197 0 125 0 197 0 126 0 197 0 127 0 217 0 139 0 217 0 145 0 217 0 149 0 217 0 153 0 237 0 154 0 217 0 166 0 245 0 167 0 217 0 170 0 253 0 171 0 217 0 183 0 217 0 199 0 217 0 202 0 217 0 205 0 217 0 215 1 21 0 216 0 217 0 218 0 217 0 219 0 217 0 221 1 37 0 222 0 217 0 224 0 217 0 225 0 217 0 226 0 217 0 227 1 57 0 245 1 61 0 248 1 65 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 1 165 1 59] #[0 5 198 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 202 0 5 0 6 0 9] #[0 5 206 0 4 0 7 0 17 0 31 0 33 0 44 0 48 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 82 0 83] #[0 5 210 0 22 0 86] #[1 9 253 0 22 10 1 0 86 10 5 0 180] #[1 9 253 0 22 10 1 0 86 10 9 0 180] #[0 5 214 0 4 0 48 0 86] #[1 6 213 0 1 6 217 0 7 6 221 0 8 6 225 0 16 5 218 0 17 5 218 0 31 5 218 0 33 5 218 0 44 5 218 0 48 5 218 0 50 5 218 0 55 5 218 0 57 5 218 0 59 5 218 0 68 5 218 0 70 5 218 0 73 5 218 0 74 5 218 0 75 5 218 0 76 5 218 0 77 5 218 0 78 5 218 0 82 5 218 0 83] #[0 5 222 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 86 0 87 0 88 0 89 0 90] #[0 5 226 0 3 0 4 0 8 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 86 0 87 0 88 0 89 0 90] #[0 5 230 0 6 0 15] #[1 0 21 0 17 0 6 0 36 0 6 0 81 10 13 0 164 10 17 0 165 1 57 0 245 1 61 0 248 10 21 1 59] #[0 5 234 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 238 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 242 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 5 246 0 4 0 7 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 82 0 83] #[0 5 250 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 82 0 83] #[0 5 254 0 6 0 15 0 79] #[1 10 25 0 6 6 2 0 15] #[0 6 6 0 6 0 15] #[0 6 10 0 6 0 15] #[0 6 14 0 6 0 15] #[1 10 29 0 10 10 33 0 14] #[0 6 18 0 4 0 7 0 10 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 82 0 83] #[0 6 22 0 6 0 15 0 79] #[0 6 26 0 6 0 15 0 79] #[0 6 30 0 83] #[0 10 37 0 67] #[0 10 41 0 83] #[0 10 45 0 83] #[0 10 49 0 45] #[0 6 34 0 83] #[0 10 53 0 67] #[0 10 57 0 83] #[0 10 61 0 83] #[0 10 65 0 45] #[1 6 38 0 17 6 38 0 67 2 1 0 82 6 38 0 83 10 69 0 144] #[1 10 73 0 4 6 42 0 17 6 42 0 45 6 46 0 82 10 77 0 159 10 81 1 97] #[1 10 85 0 82 10 89 0 204] #[1 7 233 0 86 7 237 0 90 10 93 0 148] #[1 0 21 0 17 0 6 0 31 0 6 0 33 0 6 0 44 0 6 0 50 0 6 0 55 0 6 0 57 0 6 0 59 0 6 0 68 0 6 0 70 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 6 50 0 83 10 97 0 154 10 101 0 167 10 105 0 171 10 109 0 208 10 113 0 209 10 109 0 210 10 109 0 211 10 109 0 212 10 109 0 213 10 109 0 214 10 137 0 216 10 141 0 222 1 57 0 245 1 61 0 248 10 145 1 59 10 149 1 90] #[0 6 54 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 10 153 0 82 10 157 0 201] #[0 10 161 0 82] #[0 6 58 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[1 0 21 0 17 0 6 0 30 0 6 0 31 0 6 0 33 0 6 0 35 0 61 0 41 0 6 0 44 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 6 0 68 0 6 0 69 0 6 0 70 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 6 62 0 83 0 6 0 86 9 129 0 139 9 129 0 145 9 129 0 149 9 129 0 153 0 237 0 154 9 129 0 166 0 245 0 167 9 129 0 170 0 253 0 171 9 129 0 183 10 165 0 186 9 141 0 187 9 129 0 199 9 129 0 202 9 129 0 205 9 129 0 215 1 21 0 216 9 129 0 218 9 129 0 219 9 129 0 221 1 37 0 222 9 129 0 224 9 129 0 225 9 129 0 226 9 129 0 227 1 57 0 245 1 61 0 248 9 145 1 59] #[0 6 66 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[0 6 70 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[1 10 169 0 30 0 151 0 31 3 221 0 33 3 181 0 35 0 155 0 44 3 185 0 47 1 90 0 50 0 155 0 54 1 82 0 55 1 82 0 57 1 82 0 59 3 189 0 63 1 82 0 68 3 193 0 69 3 197 0 70 1 82 0 74 1 82 0 75 1 82 0 76 0 155 0 77 1 82 0 78 3 213 0 86 3 205 0 141 3 209 0 184 3 213 0 190 3 217 0 192 3 221 1 64 3 225 1 65] #[0 10 173 0 83] #[0 6 74 0 4 0 5 0 20 0 21 0 82 0 83 0 86 0 87 0 88 0 89 0 90] #[0 6 78 0 4 0 5 0 20 0 21 0 82 0 83 0 86 0 87 0 88 0 89 0 90] #[0 6 82 0 4 0 5 0 20 0 21 0 82 0 83 0 86 0 87 0 88 0 89 0 90] #[0 6 86 0 6 0 13 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 82 0 83] #[0 6 90 0 17 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[0 6 94 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 9 0 3 0 13 0 4 0 58 0 5 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 10 177 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 10 177 1 71] #[0 6 98 0 5 0 6 0 9] #[1 6 213 0 1 6 102 0 5 6 102 0 6 6 217 0 7 6 221 0 8 6 102 0 9 6 225 0 16] #[0 6 106 0 5 0 6 0 9] #[1 6 213 0 1 6 217 0 7 6 221 0 8 6 225 0 16 10 181 0 21] #[1 2 17 0 86 10 185 1 38 2 17 1 39 10 185 1 52] #[0 6 110 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 2 1 0 82 10 189 0 144] #[0 6 114 0 28 0 83] #[0 6 118 0 28 0 83] #[0 6 122 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 10 193 0 53 10 197 0 56 10 201 0 65 10 205 0 232] #[0 6 126 0 83] #[0 6 130 0 83] #[1 0 9 0 3 3 21 0 4 0 15 0 8 0 25 0 20 2 25 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 2 29 0 52 2 33 0 54 0 85 0 66 0 89 0 71 2 37 0 77 0 105 0 82 2 41 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 10 209 0 233 2 57 0 234 2 61 0 235 2 65 0 236 2 69 0 237 2 73 0 240 2 77 0 241 2 81 0 242 2 85 0 243 2 89 0 244 2 89 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35 2 113 1 38 2 17 1 39 2 113 1 106] #[0 6 134 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 31 0 32 0 33 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 86 0 87 0 88 0 89 0 90] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 10 213 0 119 10 213 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 6 138 0 6 0 10] #[0 6 142 0 6 0 10] #[0 6 146 0 10 0 22 0 86] #[0 6 150 0 10 0 22 0 86] #[1 6 154 0 10 10 221 0 22 10 225 0 86 10 229 0 181 10 233 1 85] #[1 6 154 0 10 10 221 0 22 10 225 0 86 10 229 0 181 10 237 1 85] #[1 0 21 0 17 0 6 0 36 6 158 0 83 10 241 0 165 1 57 0 245 1 61 0 248 10 245 1 59 10 249 1 68] #[1 0 21 0 17 0 6 0 81 10 253 0 164 1 57 0 245 1 61 0 248 11 1 1 59] #[1 11 5 0 36 11 9 0 81] #[1 2 17 0 86 11 13 0 133 9 33 0 134 9 37 0 135 9 41 1 38 2 17 1 39] #[1 4 89 0 63 2 17 0 86 11 17 1 38 2 17 1 39 11 21 1 50] #[1 2 17 0 86 11 25 1 38 2 17 1 39] #[1 10 73 0 4 6 46 0 82 10 77 0 159 10 81 1 97] #[0 6 162 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 6 166 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 2 1 0 82 10 69 0 144] #[0 6 42 0 17 0 45 0 83] #[0 6 170 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 6 174 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 6 38 0 17 0 67 0 83] #[0 6 178 0 17 0 67 0 83] #[0 11 29 0 86] #[0 6 182 0 82] #[1 2 1 0 82 11 33 0 144] #[1 4 118 0 17 4 118 0 31 4 118 0 33 4 118 0 35 4 118 0 41 4 118 0 44 4 118 0 47 4 118 0 50 4 118 0 54 4 118 0 55 4 118 0 57 4 118 0 58 4 118 0 59 4 118 0 63 4 118 0 68 4 118 0 69 4 118 0 70 4 118 0 73 4 118 0 74 4 118 0 75 4 118 0 76 4 118 0 77 4 118 0 78 1 39 0 83 4 118 0 86 8 37 0 140 11 37 1 66] #[0 6 186 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 6 190 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 11 45 0 86 0 155] #[1 4 37 0 10 1 154 0 13 1 154 0 17 1 154 0 31 1 154 0 33 1 154 0 44 1 154 0 50 1 154 0 55 1 154 0 57 1 154 0 59 1 154 0 68 1 154 0 70 1 154 0 73 1 154 0 74 1 154 0 75 1 154 0 76 1 154 0 77 1 154 0 78 1 154 0 83 4 41 1 54 11 49 1 107] #[1 3 57 0 86 3 61 0 90 11 53 0 172] #[0 6 194 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[1 0 21 0 17 0 6 0 31 0 6 0 33 0 6 0 44 0 6 0 50 0 6 0 55 0 6 0 57 0 6 0 59 0 6 0 68 0 6 0 70 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 6 198 0 83 10 97 0 154 10 101 0 167 10 105 0 171 11 57 0 208 11 57 0 210 11 57 0 211 11 57 0 212 11 57 0 213 11 57 0 214 10 137 0 216 10 141 0 222 1 57 0 245 1 61 0 248 10 145 1 59] #[0 6 202 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[0 6 206 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[0 6 210 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[0 6 214 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[0 6 218 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[1 0 198 0 4 3 69 0 12 3 73 0 128 11 61 1 74] #[1 3 81 0 7 11 65 0 223] #[1 1 82 0 31 3 221 0 33 0 155 0 44 1 90 0 50 1 82 0 55 1 82 0 57 1 82 0 59 1 82 0 68 3 197 0 70 1 82 0 74 1 82 0 75 1 82 0 76 0 155 0 77 1 82 0 78 3 205 0 141 3 221 1 64 11 69 1 65] #[0 11 73 0 83] #[1 4 118 0 17 4 118 0 31 4 118 0 33 4 118 0 35 4 118 0 41 4 118 0 44 4 118 0 47 4 118 0 50 4 118 0 54 4 118 0 55 4 118 0 57 4 118 0 58 4 118 0 59 4 118 0 63 4 118 0 68 4 118 0 69 4 118 0 70 4 118 0 73 4 118 0 74 4 118 0 75 4 118 0 76 4 118 0 77 4 118 0 78 1 39 0 83 4 118 0 86 8 37 0 140 11 77 1 66] #[0 6 222 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 21 0 17 0 6 0 30 0 6 0 31 0 6 0 33 0 6 0 35 0 61 0 41 0 6 0 44 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 6 0 68 0 6 0 69 0 6 0 70 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 6 226 0 83 0 6 0 86 11 81 0 139 11 81 0 145 11 81 0 149 11 81 0 153 0 237 0 154 11 81 0 166 0 245 0 167 11 81 0 170 0 253 0 171 11 81 0 183 11 85 0 193 11 89 0 194 11 93 0 195 11 81 0 199 11 81 0 202 11 81 0 205 11 81 0 215 1 21 0 216 11 81 0 218 11 81 0 219 11 81 0 221 1 37 0 222 11 81 0 224 11 81 0 225 11 81 0 226 11 81 0 227 1 57 0 245 1 61 0 248 11 97 1 59 11 101 1 92] #[0 6 230 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[1 11 113 0 86 11 105 0 188 11 109 0 189 11 113 0 191] #[0 6 234 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 11 117 0 5] #[0 6 238 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 48 0 50 0 52 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 6 242 0 6 0 15] #[0 6 246 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 6 250 0 83] #[0 6 254 0 83] #[0 7 2 0 83] #[0 7 6 0 83] #[1 5 170 0 6 5 170 0 10 4 141 0 27 9 241 0 79 9 245 0 118 11 121 1 75] #[0 7 10 0 6 0 10] #[0 7 14 0 6 0 10] #[0 7 18 0 10] #[0 7 22 0 10] #[0 7 26 0 10] #[1 4 149 0 10 11 125 1 37] #[1 4 149 0 10 11 129 1 37] #[0 7 30 0 83] #[0 11 5 0 36] #[0 11 133 0 83] #[0 11 137 0 83] #[0 11 9 0 81] #[1 10 73 0 4 6 46 0 82 10 77 0 159 11 141 1 97] #[1 10 73 0 4 6 46 0 82 10 77 0 159 11 145 1 97] #[0 7 34 0 6 0 15] #[0 7 38 0 6 0 15] #[0 7 42 0 6 0 15] #[0 7 46 0 6 0 15] #[0 11 149 0 5] #[0 7 50 0 17 0 45 0 83] #[0 11 153 0 83] #[0 2 66 0 10] #[1 4 149 0 10 11 157 1 37] #[1 3 49 0 13 7 54 0 17 7 54 0 31 7 54 0 33 7 54 0 44 7 54 0 50 7 54 0 55 7 54 0 57 7 54 0 59 7 54 0 68 7 54 0 70 7 54 0 73 7 54 0 74 7 54 0 75 7 54 0 76 7 54 0 77 7 54 0 78 7 54 0 83 11 161 0 169 11 165 1 104] #[1 0 198 0 4 0 198 0 7 3 69 0 12 0 198 0 17 0 198 0 31 0 198 0 33 0 198 0 44 0 198 0 50 0 198 0 55 0 198 0 57 0 198 0 59 0 198 0 68 0 198 0 70 0 198 0 73 0 198 0 74 0 198 0 75 0 198 0 76 0 198 0 77 0 198 0 78 0 198 0 83 3 73 0 128 11 169 1 74] #[0 7 58 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[1 2 189 0 4 11 173 0 177] #[1 11 177 0 82 11 181 0 160] #[1 6 65 0 44 6 73 0 77] #[0 7 62 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 11 185 0 83] #[0 7 66 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[1 0 21 0 17 0 6 0 30 0 6 0 31 0 6 0 33 0 6 0 35 0 61 0 41 0 6 0 44 0 6 0 47 0 6 0 50 0 6 0 54 0 6 0 55 0 6 0 57 0 77 0 58 0 6 0 59 0 6 0 63 0 6 0 68 0 6 0 69 0 6 0 70 0 97 0 73 0 6 0 74 0 6 0 75 0 6 0 76 0 6 0 77 0 6 0 78 7 70 0 83 0 6 0 86 11 81 0 139 11 81 0 145 11 81 0 149 11 81 0 153 0 237 0 154 11 81 0 166 0 245 0 167 11 81 0 170 0 253 0 171 11 81 0 183 11 189 0 194 11 93 0 195 11 81 0 199 11 81 0 202 11 81 0 205 11 81 0 215 1 21 0 216 11 81 0 218 11 81 0 219 11 81 0 221 1 37 0 222 11 81 0 224 11 81 0 225 11 81 0 226 11 81 0 227 1 57 0 245 1 61 0 248 11 97 1 59] #[0 7 74 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[0 7 78 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[1 11 193 0 30 0 151 0 31 3 221 0 33 3 181 0 35 0 155 0 44 3 185 0 47 1 90 0 50 0 155 0 54 1 82 0 55 1 82 0 57 1 82 0 59 3 189 0 63 1 82 0 68 3 193 0 69 3 197 0 70 1 82 0 74 1 82 0 75 1 82 0 76 0 155 0 77 1 82 0 78 3 213 0 86 3 205 0 141 3 209 0 184 3 213 0 190 3 217 0 192 3 221 1 64 3 225 1 65] #[0 11 197 0 83] #[1 11 201 0 6 7 82 0 17 7 82 0 30 7 82 0 31 7 82 0 33 7 82 0 35 7 82 0 41 7 82 0 44 7 82 0 47 7 82 0 50 7 82 0 54 7 82 0 55 7 82 0 57 7 82 0 58 7 82 0 59 7 82 0 63 7 82 0 68 7 82 0 69 7 82 0 70 7 82 0 73 7 82 0 74 7 82 0 75 7 82 0 76 7 82 0 77 7 82 0 78 7 82 0 83 7 82 0 86] #[0 7 86 0 6 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[1 4 81 0 4 7 90 0 6 7 90 0 17 7 90 0 30 7 90 0 31 7 90 0 33 7 90 0 35 7 90 0 41 7 90 0 44 7 90 0 47 7 90 0 50 7 90 0 54 7 90 0 55 7 90 0 57 7 90 0 58 7 90 0 59 7 90 0 63 7 90 0 68 7 90 0 69 7 90 0 70 7 90 0 73 7 90 0 74 7 90 0 75 7 90 0 76 7 90 0 77 7 90 0 78 7 90 0 83 7 90 0 86 11 209 1 40 11 209 1 102] #[1 2 1 0 82 11 213 0 144] #[0 7 94 0 6 0 10] #[1 7 98 0 5 7 98 0 6 7 98 0 9 11 217 0 13 11 221 0 182 11 225 1 67] #[1 7 98 0 5 7 98 0 6 7 98 0 9 11 217 0 13 11 221 0 182 11 229 1 67] #[0 7 102 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 7 106 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 2 1 0 82 11 233 0 144] #[1 2 1 0 82 11 237 0 144] #[0 7 110 0 82] #[0 7 114 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 11 177 0 82 11 241 0 160] #[0 7 118 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[0 7 122 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[1 3 138 0 4 3 138 0 7 3 138 0 17 3 138 0 31 3 138 0 33 3 138 0 44 3 138 0 50 3 138 0 55 3 138 0 57 3 138 0 59 3 138 0 68 3 138 0 70 3 138 0 73 3 138 0 74 3 138 0 75 3 138 0 76 3 138 0 77 3 138 0 78 3 138 0 83 11 245 0 173 7 157 0 176] #[0 7 126 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[1 0 21 0 17 0 6 0 45 0 6 0 67 7 201 0 161 7 205 0 162 1 57 0 245 1 61 0 248 11 249 1 59] #[0 7 130 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[0 7 134 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[0 7 138 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[1 11 253 0 86 11 253 0 191 12 1 0 196 12 5 0 197] #[0 7 142 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 11 113 0 86 12 9 0 189 11 113 0 191] #[0 7 146 0 6 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[0 7 150 0 6 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[0 7 154 0 3 0 4 0 8 0 11 0 17 0 20 0 22 0 23 0 24 0 25 0 26 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 41 0 42 0 43 0 44 0 46 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 80 0 82 0 83 0 86 0 87 0 88 0 89 0 90 1 109] #[1 0 9 0 3 0 13 0 4 0 17 0 8 0 25 0 20 0 29 0 22 0 33 0 23 0 37 0 24 0 41 0 25 0 45 0 26 0 85 0 66 0 89 0 71 0 105 0 82 1 213 0 86 0 113 0 87 0 117 0 88 0 133 0 89 0 141 0 90 0 133 0 94 0 137 0 95 0 141 0 97 12 13 0 251 1 69 0 253 1 69 0 254 1 77 1 4 1 77 1 5 1 85 1 6 1 89 1 9 1 77 1 12 1 77 1 13 1 77 1 14 1 77 1 15 1 77 1 16 1 77 1 17 1 77 1 21 1 77 1 22 1 77 1 25 1 129 1 26 1 133 1 27 1 137 1 29 1 141 1 30 1 145 1 31 1 149 1 32 1 153 1 33 1 157 1 34 1 161 1 35] #[0 7 158 0 5 0 6 0 9] #[0 7 162 0 5 0 6 0 9] #[0 7 166 0 5 0 6 0 9] #[0 7 170 0 17 0 81 0 83] #[0 7 174 0 17 0 36 0 83] #[0 7 178 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[0 7 182 0 17 0 31 0 33 0 44 0 50 0 55 0 57 0 59 0 68 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83] #[1 10 65 0 45 10 53 0 67] #[1 7 186 0 6 12 17 0 13 7 186 0 17 7 186 0 30 7 186 0 31 7 186 0 33 7 186 0 35 7 186 0 41 7 186 0 44 7 186 0 47 7 186 0 50 7 186 0 54 7 186 0 55 7 186 0 57 7 186 0 58 7 186 0 59 7 186 0 63 7 186 0 68 7 186 0 69 7 186 0 70 7 186 0 73 7 186 0 74 7 186 0 75 7 186 0 76 7 186 0 77 7 186 0 78 7 186 0 83 7 186 0 86 12 21 0 198 12 25 1 91] #[1 12 29 0 6 7 190 0 17 7 190 0 30 7 190 0 31 7 190 0 33 7 190 0 35 7 190 0 41 7 190 0 44 7 190 0 47 7 190 0 50 7 190 0 54 7 190 0 55 7 190 0 57 7 190 0 58 7 190 0 59 7 190 0 63 7 190 0 68 7 190 0 69 7 190 0 70 7 190 0 73 7 190 0 74 7 190 0 75 7 190 0 76 7 190 0 77 7 190 0 78 7 190 0 83 7 190 0 86] #[0 7 194 0 6 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[0 7 198 0 6 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[0 7 202 0 5 0 6 0 9] #[1 0 113 0 87 0 117 0 88 0 133 0 89 0 133 0 94 12 33 0 95] #[0 7 206 0 6 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[0 7 210 0 6 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[1 11 253 0 86 11 253 0 191 12 37 0 197] #[0 7 214 0 6 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86] #[0 7 218 0 6 0 17 0 30 0 31 0 33 0 35 0 41 0 44 0 47 0 50 0 54 0 55 0 57 0 58 0 59 0 63 0 68 0 69 0 70 0 73 0 74 0 75 0 76 0 77 0 78 0 83 0 86]	).! !!SwiftParser class methodsFor: 'generated-accessing'!scannerClass	^SwiftScanner! !!SwiftParser class methodsFor: 'generated-accessing'!cacheId	^'2019-04-15T17:16:18.538217-05:00'! !SwiftParseNode subclass: #SwiftPatternInitializerNode	instanceVariableNames: '_Tokens colonTokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens periodTokens protocolTokens lessThanTokens greaterThanTokens minusGreaterThanTokens commaTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens inoutTokens varTokens letTokens expressions isTokens asTokens equalToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftPatternInitializerNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftPatternInitializerNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!isTokens: anOrderedCollection	isTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!tokenVariables	^ #(#equalToken)! !!SwiftPatternInitializerNode methodsFor: 'generated'!equalToken	^ equalToken! !!SwiftPatternInitializerNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitPatternInitializer: self! !!SwiftPatternInitializerNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!otherVariables	^ #(#expressions)! !!SwiftPatternInitializerNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #colonTokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #minusGreaterThanTokens #periodTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #commaTokens #periodPeriodPeriodTokens #inoutTokens #varTokens #letTokens #isTokens #asTokens)! !!SwiftPatternInitializerNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !!SwiftPatternInitializerNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!asTokens	^ asTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!asTokens: anOrderedCollection	asTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!isTokens	^ isTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftPatternInitializerNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftPatternInitializerNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	isTokens := OrderedCollection new: 2.	asTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftPostfixOperatorDeclarationNode	instanceVariableNames: 'operatorTokens postfixToken leftBraceToken rightBraceToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftPostfixOperatorDeclarationNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!SwiftPostfixOperatorDeclarationNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !!SwiftPostfixOperatorDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#operatorTokens)! !!SwiftPostfixOperatorDeclarationNode methodsFor: 'generated'!postfixToken: aSmaCCToken	postfixToken := aSmaCCToken! !!SwiftPostfixOperatorDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#postfixToken #leftBraceToken #rightBraceToken)! !!SwiftPostfixOperatorDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftPostfixOperatorDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitPostfixOperatorDeclaration: self! !!SwiftPostfixOperatorDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftPostfixOperatorDeclarationNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!SwiftPostfixOperatorDeclarationNode methodsFor: 'generated'!postfixToken	^ postfixToken! !!SwiftPostfixOperatorDeclarationNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !!SwiftPostfixOperatorDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	operatorTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftPostfixSelfExpressionNode	instanceVariableNames: 'identifierTokens lessThanTokens commaTokens greaterThanTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens leftBracketTokens expressions rightBracketTokens keyExpressions colonTokens valueExpressions __FILE__Token __LINE__Token __COLUMN__Token __FUNCTION__Token selfTokens periodTokens initTokens leftBraceTokens leftParenTokens rightParenTokens inoutTokens letTokens _Tokens protocolTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens equalTokens varTokens rightBraceTokens operatorTokens inToken weakToken unownedToken unownedLeftParensafeRightParenToken unownedLeftParenunsafeRightParenToken statements dynamicTypeTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!keyExpressions	^ keyExpressions! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!__FUNCTION__Token	^ __FUNCTION__Token! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!__FUNCTION__Token: aSmaCCToken	__FUNCTION__Token := aSmaCCToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expressions #keyExpressions #valueExpressions)! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken	^ unownedLeftParensafeRightParenToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!valueExpressions: anOrderedCollection	valueExpressions := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken: aSmaCCToken	unownedLeftParensafeRightParenToken := aSmaCCToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!valueExpressions	^ valueExpressions! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!weakToken	^ weakToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!dynamicTypeTokens	^ dynamicTypeTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!initTokens	^ initTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!__FILE__Token: aSmaCCToken	__FILE__Token := aSmaCCToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!__FILE__Token	^ __FILE__Token! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#identifierTokens #lessThanTokens #commaTokens #greaterThanTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #leftBracketTokens #rightBracketTokens #colonTokens #selfTokens #periodTokens #initTokens #leftBraceTokens #leftParenTokens #rightParenTokens #inoutTokens #letTokens #_Tokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #protocolTokens #typeTokens #periodPeriodPeriodTokens #equalTokens #varTokens #rightBraceTokens #operatorTokens #dynamicTypeTokens)! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!dynamicTypeTokens: anOrderedCollection	dynamicTypeTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken: aSmaCCToken	unownedLeftParenunsafeRightParenToken := aSmaCCToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!__COLUMN__Token: aSmaCCToken	__COLUMN__Token := aSmaCCToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!selfTokens	^ selfTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!selfTokens: anOrderedCollection	selfTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!initTokens: anOrderedCollection	initTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!__COLUMN__Token	^ __COLUMN__Token! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!unownedToken	^ unownedToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!unownedToken: aSmaCCToken	unownedToken := aSmaCCToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!__LINE__Token: aSmaCCToken	__LINE__Token := aSmaCCToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!weakToken: aSmaCCToken	weakToken := aSmaCCToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken	^ unownedLeftParenunsafeRightParenToken! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#__FILE__Token #__LINE__Token #__COLUMN__Token #__FUNCTION__Token #inToken #weakToken #unownedToken #unownedLeftParensafeRightParenToken #unownedLeftParenunsafeRightParenToken)! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!__LINE__Token	^ __LINE__Token! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitPostfixSelfExpression: self! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!keyExpressions: anOrderedCollection	keyExpressions := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated'!statements	^ statements! !!SwiftPostfixSelfExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	keyExpressions := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	valueExpressions := OrderedCollection new: 2.	selfTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	initTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.	dynamicTypeTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftPrefixExpressionNode	instanceVariableNames: 'operatorTokens identifierTokens lessThanTokens commaTokens greaterThanTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens leftBracketTokens expressions rightBracketTokens keyExpressions colonTokens valueExpressions __FILE__Token __LINE__Token __COLUMN__Token __FUNCTION__Token selfTokens periodTokens initTokens leftBraceTokens leftParenTokens rightParenTokens inoutTokens letTokens _Tokens protocolTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens equalTokens varTokens rightBraceTokens inToken weakToken unownedToken unownedLeftParensafeRightParenToken unownedLeftParenunsafeRightParenToken statements dynamicTypeTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftPrefixExpressionNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!keyExpressions	^ keyExpressions! !!SwiftPrefixExpressionNode methodsFor: 'generated'!__FUNCTION__Token	^ __FUNCTION__Token! !!SwiftPrefixExpressionNode methodsFor: 'generated'!__FUNCTION__Token: aSmaCCToken	__FUNCTION__Token := aSmaCCToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expressions #keyExpressions #valueExpressions)! !!SwiftPrefixExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftPrefixExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken	^ unownedLeftParensafeRightParenToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!valueExpressions: anOrderedCollection	valueExpressions := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken: aSmaCCToken	unownedLeftParensafeRightParenToken := aSmaCCToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!valueExpressions	^ valueExpressions! !!SwiftPrefixExpressionNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!weakToken	^ weakToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!dynamicTypeTokens	^ dynamicTypeTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!initTokens	^ initTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!__FILE__Token: aSmaCCToken	__FILE__Token := aSmaCCToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!__FILE__Token	^ __FILE__Token! !!SwiftPrefixExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#operatorTokens #identifierTokens #lessThanTokens #commaTokens #greaterThanTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #leftBracketTokens #rightBracketTokens #colonTokens #selfTokens #periodTokens #initTokens #leftBraceTokens #leftParenTokens #rightParenTokens #inoutTokens #letTokens #_Tokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #protocolTokens #typeTokens #periodPeriodPeriodTokens #equalTokens #varTokens #rightBraceTokens #dynamicTypeTokens)! !!SwiftPrefixExpressionNode methodsFor: 'generated'!dynamicTypeTokens: anOrderedCollection	dynamicTypeTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken: aSmaCCToken	unownedLeftParenunsafeRightParenToken := aSmaCCToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!__COLUMN__Token: aSmaCCToken	__COLUMN__Token := aSmaCCToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!selfTokens	^ selfTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!selfTokens: anOrderedCollection	selfTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!initTokens: anOrderedCollection	initTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!__COLUMN__Token	^ __COLUMN__Token! !!SwiftPrefixExpressionNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftPrefixExpressionNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!unownedToken	^ unownedToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!unownedToken: aSmaCCToken	unownedToken := aSmaCCToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!__LINE__Token: aSmaCCToken	__LINE__Token := aSmaCCToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftPrefixExpressionNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!weakToken: aSmaCCToken	weakToken := aSmaCCToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken	^ unownedLeftParenunsafeRightParenToken! !!SwiftPrefixExpressionNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#__FILE__Token #__LINE__Token #__COLUMN__Token #__FUNCTION__Token #inToken #weakToken #unownedToken #unownedLeftParensafeRightParenToken #unownedLeftParenunsafeRightParenToken)! !!SwiftPrefixExpressionNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!__LINE__Token	^ __LINE__Token! !!SwiftPrefixExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitPrefixExpression: self! !!SwiftPrefixExpressionNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!keyExpressions: anOrderedCollection	keyExpressions := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftPrefixExpressionNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftPrefixExpressionNode methodsFor: 'generated'!statements	^ statements! !!SwiftPrefixExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	operatorTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	keyExpressions := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	valueExpressions := OrderedCollection new: 2.	selfTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	initTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.	dynamicTypeTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftPrefixOperatorDeclarationNode	instanceVariableNames: 'operatorTokens prefixToken leftBraceToken rightBraceToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftPrefixOperatorDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	operatorTokens := OrderedCollection new: 2.! !!SwiftPrefixOperatorDeclarationNode methodsFor: 'generated'!rightBraceToken	^ rightBraceToken! !!SwiftPrefixOperatorDeclarationNode methodsFor: 'generated'!leftBraceToken	^ leftBraceToken! !!SwiftPrefixOperatorDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#operatorTokens)! !!SwiftPrefixOperatorDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#prefixToken #leftBraceToken #rightBraceToken)! !!SwiftPrefixOperatorDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftPrefixOperatorDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitPrefixOperatorDeclaration: self! !!SwiftPrefixOperatorDeclarationNode methodsFor: 'generated'!prefixToken: aSmaCCToken	prefixToken := aSmaCCToken! !!SwiftPrefixOperatorDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftPrefixOperatorDeclarationNode methodsFor: 'generated'!prefixToken	^ prefixToken! !!SwiftPrefixOperatorDeclarationNode methodsFor: 'generated'!leftBraceToken: aSmaCCToken	leftBraceToken := aSmaCCToken! !!SwiftPrefixOperatorDeclarationNode methodsFor: 'generated'!rightBraceToken: aSmaCCToken	rightBraceToken := aSmaCCToken! !SwiftParseNode subclass: #SwiftPrimaryExpressionNode	instanceVariableNames: 'identifierToken lessThanToken commaTokens greaterThanToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftPrimaryExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	commaTokens := OrderedCollection new: 2.! !!SwiftPrimaryExpressionNode methodsFor: 'generated'!greaterThanToken	^ greaterThanToken! !!SwiftPrimaryExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#commaTokens)! !!SwiftPrimaryExpressionNode methodsFor: 'generated'!lessThanToken	^ lessThanToken! !!SwiftPrimaryExpressionNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!SwiftPrimaryExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#identifierToken #lessThanToken #greaterThanToken)! !!SwiftPrimaryExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitPrimaryExpression: self! !!SwiftPrimaryExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftPrimaryExpressionNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!SwiftPrimaryExpressionNode methodsFor: 'generated'!greaterThanToken: aSmaCCToken	greaterThanToken := aSmaCCToken! !!SwiftPrimaryExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftPrimaryExpressionNode methodsFor: 'generated'!lessThanToken: aSmaCCToken	lessThanToken := aSmaCCToken! !SwiftParseNode subclass: #SwiftProtocolAssociationTypeDeclarationNode	instanceVariableNames: 'typealiasToken identifierTokens colonTokens lessThanTokens commaTokens greaterThanTokens periodTokens equalToken leftBracketTokens protocolTokens rightBracketTokens minusGreaterThanTokens leftParenTokens rightParenTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens inoutTokens _Tokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!typealiasToken: aSmaCCToken	typealiasToken := aSmaCCToken! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!typealiasToken	^ typealiasToken! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#typealiasToken #equalToken)! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!equalToken	^ equalToken! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitProtocolAssociationTypeDeclaration: self! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#identifierTokens #colonTokens #lessThanTokens #greaterThanTokens #periodTokens #commaTokens #leftBracketTokens #rightBracketTokens #minusGreaterThanTokens #leftParenTokens #rightParenTokens #questionMarkTokens #bangTokens #protocolTokens #typeTokens #periodPeriodPeriodTokens #_Tokens #inoutTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens)! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftProtocolAssociationTypeDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	identifierTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftProtocolCompositionTypeNode	instanceVariableNames: 'protocolToken lessThanTokens identifierTokens periodTokens commaTokens greaterThanTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftProtocolCompositionTypeNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	lessThanTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!compositeTokenVariables	^ #(#lessThanTokens #identifierTokens #greaterThanTokens #periodTokens #commaTokens)! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!tokenVariables	^ #(#protocolToken)! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!protocolToken: aSmaCCToken	protocolToken := aSmaCCToken! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitProtocolCompositionType: self! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!protocolToken	^ protocolToken! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftProtocolCompositionTypeNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !SwiftParseNode subclass: #SwiftProtocolDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens protocolToken colonToken lessThanTokens commaTokens greaterThanTokens periodTokens declarations'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftProtocolDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!colonToken: aSmaCCToken	colonToken := aSmaCCToken! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!declarations	^ declarations! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#protocolToken #colonToken)! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitProtocolDeclaration: self! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!protocolToken: aSmaCCToken	protocolToken := aSmaCCToken! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #lessThanTokens #greaterThanTokens #periodTokens #commaTokens)! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#declarations)! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!protocolToken	^ protocolToken! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!colonToken	^ colonToken! !!SwiftProtocolDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !SwiftParseNode subclass: #SwiftProtocolInitializerDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens convenienceToken initToken lessThanTokens colonTokens commaTokens greaterThanTokens periodTokens protocolTokens whereToken equalEqualTokens inoutTokens letTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens equalTokens expressions varTokens periodPeriodPeriodTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!equalEqualTokens: anOrderedCollection	equalEqualTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#convenienceToken #initToken #whereToken)! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitProtocolInitializerDeclaration: self! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!convenienceToken	^ convenienceToken! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!otherVariables	^ #(#expressions)! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!equalEqualTokens	^ equalEqualTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #lessThanTokens #colonTokens #commaTokens #greaterThanTokens #periodTokens #protocolTokens #equalEqualTokens #inoutTokens #letTokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #typeTokens #periodPeriodPeriodTokens #equalTokens #varTokens)! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!convenienceToken: aSmaCCToken	convenienceToken := aSmaCCToken! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!initToken	^ initToken! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!whereToken: aSmaCCToken	whereToken := aSmaCCToken! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!initToken: aSmaCCToken	initToken := aSmaCCToken! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated'!whereToken	^ whereToken! !!SwiftProtocolInitializerDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	equalEqualTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftProtocolMethodDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens classTokens mutatingTokens nonmutatingTokens overrideTokens staticTokens unownedTokens unownedLeftParensafeRightParenTokens unownedLeftParenunsafeRightParenTokens weakTokens funcToken lessThanTokens colonTokens commaTokens greaterThanTokens periodTokens protocolTokens whereToken equalEqualTokens periodPeriodPeriodTokens varTokens inoutTokens letTokens equalTokens expressions minusGreaterThanTokens questionMarkTokens bangTokens typeTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!classTokens	^ classTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!otherVariables	^ #(#expressions)! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!unownedTokens: anOrderedCollection	unownedTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!nonmutatingTokens: anOrderedCollection	nonmutatingTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!weakTokens: anOrderedCollection	weakTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!whereToken	^ whereToken! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!overrideTokens	^ overrideTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!equalEqualTokens: anOrderedCollection	equalEqualTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #classTokens #mutatingTokens #nonmutatingTokens #overrideTokens #staticTokens #unownedTokens #unownedLeftParensafeRightParenTokens #unownedLeftParenunsafeRightParenTokens #weakTokens #lessThanTokens #colonTokens #commaTokens #greaterThanTokens #periodTokens #protocolTokens #equalEqualTokens #periodPeriodPeriodTokens #varTokens #inoutTokens #letTokens #equalTokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #typeTokens)! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!classTokens: anOrderedCollection	classTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!weakTokens	^ weakTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!funcToken	^ funcToken! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenTokens	^ unownedLeftParenunsafeRightParenTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!equalEqualTokens	^ equalEqualTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenTokens: anOrderedCollection	unownedLeftParenunsafeRightParenTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!unownedLeftParensafeRightParenTokens: anOrderedCollection	unownedLeftParensafeRightParenTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!unownedLeftParensafeRightParenTokens	^ unownedLeftParensafeRightParenTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!unownedTokens	^ unownedTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!funcToken: aSmaCCToken	funcToken := aSmaCCToken! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!mutatingTokens	^ mutatingTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!staticTokens: anOrderedCollection	staticTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#funcToken #whereToken)! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!nonmutatingTokens	^ nonmutatingTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitProtocolMethodDeclaration: self! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!overrideTokens: anOrderedCollection	overrideTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!staticTokens	^ staticTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!mutatingTokens: anOrderedCollection	mutatingTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated'!whereToken: aSmaCCToken	whereToken := aSmaCCToken! !!SwiftProtocolMethodDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	classTokens := OrderedCollection new: 2.	mutatingTokens := OrderedCollection new: 2.	nonmutatingTokens := OrderedCollection new: 2.	overrideTokens := OrderedCollection new: 2.	staticTokens := OrderedCollection new: 2.	unownedTokens := OrderedCollection new: 2.	unownedLeftParensafeRightParenTokens := OrderedCollection new: 2.	unownedLeftParenunsafeRightParenTokens := OrderedCollection new: 2.	weakTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	equalEqualTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftProtocolPropertyDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens classTokens mutatingTokens nonmutatingTokens overrideTokens staticTokens unownedTokens unownedLeftParensafeRightParenTokens unownedLeftParenunsafeRightParenTokens weakTokens varToken colonTokens periodTokens protocolTokens lessThanTokens greaterThanTokens minusGreaterThanTokens commaTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens inoutTokens getToken setToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!classTokens	^ classTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!unownedTokens: anOrderedCollection	unownedTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!nonmutatingTokens: anOrderedCollection	nonmutatingTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!weakTokens: anOrderedCollection	weakTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!setToken: aSmaCCToken	setToken := aSmaCCToken! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!varToken	^ varToken! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!overrideTokens	^ overrideTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!getToken: aSmaCCToken	getToken := aSmaCCToken! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #classTokens #mutatingTokens #nonmutatingTokens #overrideTokens #staticTokens #unownedTokens #unownedLeftParensafeRightParenTokens #unownedLeftParenunsafeRightParenTokens #weakTokens #colonTokens #minusGreaterThanTokens #periodTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #commaTokens #periodPeriodPeriodTokens #inoutTokens)! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!classTokens: anOrderedCollection	classTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!weakTokens	^ weakTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenTokens	^ unownedLeftParenunsafeRightParenTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenTokens: anOrderedCollection	unownedLeftParenunsafeRightParenTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!unownedLeftParensafeRightParenTokens: anOrderedCollection	unownedLeftParensafeRightParenTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!unownedLeftParensafeRightParenTokens	^ unownedLeftParensafeRightParenTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!unownedTokens	^ unownedTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!mutatingTokens	^ mutatingTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!setToken	^ setToken! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!staticTokens: anOrderedCollection	staticTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#varToken #getToken #setToken)! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!varToken: aSmaCCToken	varToken := aSmaCCToken! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!nonmutatingTokens	^ nonmutatingTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!getToken	^ getToken! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitProtocolPropertyDeclaration: self! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!overrideTokens: anOrderedCollection	overrideTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!staticTokens	^ staticTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated'!mutatingTokens: anOrderedCollection	mutatingTokens := anOrderedCollection! !!SwiftProtocolPropertyDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	classTokens := OrderedCollection new: 2.	mutatingTokens := OrderedCollection new: 2.	nonmutatingTokens := OrderedCollection new: 2.	overrideTokens := OrderedCollection new: 2.	staticTokens := OrderedCollection new: 2.	unownedTokens := OrderedCollection new: 2.	unownedLeftParensafeRightParenTokens := OrderedCollection new: 2.	unownedLeftParenunsafeRightParenTokens := OrderedCollection new: 2.	weakTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftProtocolSubscriptDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens subscriptToken inoutTokens letTokens colonTokens periodTokens protocolTokens lessThanTokens greaterThanTokens minusGreaterThanTokens commaTokens questionMarkTokens bangTokens typeTokens equalTokens expressions varTokens periodPeriodPeriodTokens getToken setToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!setToken: aSmaCCToken	setToken := aSmaCCToken! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!getToken	^ getToken! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#subscriptToken #getToken #setToken)! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitProtocolSubscriptDeclaration: self! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!getToken: aSmaCCToken	getToken := aSmaCCToken! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!setToken	^ setToken! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!subscriptToken: aSmaCCToken	subscriptToken := aSmaCCToken! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!otherVariables	^ #(#expressions)! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!subscriptToken	^ subscriptToken! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #inoutTokens #letTokens #colonTokens #minusGreaterThanTokens #periodTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #commaTokens #equalTokens #varTokens #periodPeriodPeriodTokens)! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftProtocolSubscriptDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.! !SmaCCScanner subclass: #SwiftScanner	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftScanner methodsFor: 'generated'!scanForTokenX5	self recordMatch: #(12 90).	self step.	(currentCharacter == $!!		or: [ (currentCharacter between: $% and: $&)				or: [ (currentCharacter between: $* and: $+)						or: [ (currentCharacter between: $- and: $/)								or: [ (currentCharacter between: $< and: $>)										or:											[ '^|~' includes: currentCharacter ] ] ] ] ])		ifTrue: [ [ self recordMatch: #(90).			self step.			currentCharacter == $!!				or: [ (currentCharacter between: $% and: $&)						or: [ (currentCharacter between: $* and: $+)								or: [ (currentCharacter between: $- and: $/)										or: [ (currentCharacter between: $< and: $>)												or:													[ '^|~' includes: currentCharacter ] ] ] ] ] ] whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scan5	[ self step.	currentCharacter == $*		ifTrue: [ [ self step.			currentCharacter == $* ] whileTrue.			currentCharacter == $/				ifTrue: [ ^ self recordAndReportMatch: #(85) ].			^ self scan5 ].	true ] whileTrue! !!SwiftScanner methodsFor: 'generated'!scanForTokenX1X1X2	(currentCharacter <= Character tab		or: [ (currentCharacter between: Character pageUp and: Character newPage)				or: [ (currentCharacter						between: (Character value: 14)						and: Character space)						or: [ (currentCharacter between: $" and: $$)								or: [ (currentCharacter between: $' and: $))										or: [ currentCharacter == $,												or: [ (currentCharacter between: $0 and: $;)														or: [ (currentCharacter between: $? and: $])																or: [ (currentCharacter between: $_ and: ${)																		or: [ currentCharacter == $}																				or: [ currentCharacter >= (Character value: 127) ] ] ] ] ] ] ] ] ] ])		ifTrue:			[ self scanForTokenX1X1X1 ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!emptySymbolTokenId	^ 365! !!SwiftScanner methodsFor: 'generated'!scanForTokenX7	self recordMatch: #(3 90).	self step.	(currentCharacter == $!!		or: [ (currentCharacter between: $% and: $&)				or: [ (currentCharacter between: $* and: $+)						or: [ (currentCharacter between: $- and: $/)								or: [ (currentCharacter between: $< and: $>)										or:											[ '^|~' includes: currentCharacter ] ] ] ] ])		ifTrue: [ [ self recordMatch: #(90).			self step.			currentCharacter == $!!				or: [ (currentCharacter between: $% and: $&)						or: [ (currentCharacter between: $* and: $+)								or: [ (currentCharacter between: $- and: $/)										or: [ (currentCharacter between: $< and: $>)												or:													[ '^|~' includes: currentCharacter ] ] ] ] ] ] whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scan6	self step.	currentCharacter isDigit		ifTrue: [ [ self recordMatch: #(88).			self step.			('Ee' includes: currentCharacter)				ifTrue: [ ^ self scan7 ].			currentCharacter isDigit or: [ currentCharacter == $_ ] ] whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scan1X1	self step.	currentCharacter == $U		ifTrue: [ self step.			(currentCharacter isDigit				or: [ (currentCharacter between: $A and: $F)						or: [ currentCharacter between: $a and: $f ] ])				ifTrue: [ self step.					(currentCharacter isDigit						or: [ (currentCharacter between: $A and: $F)								or: [ currentCharacter between: $a and: $f ] ])						ifTrue: [ self step.							(currentCharacter isDigit								or: [ (currentCharacter between: $A and: $F)										or: [ currentCharacter between: $a and: $f ] ])								ifTrue: [ self step.									(currentCharacter isDigit										or: [ (currentCharacter between: $A and: $F)												or: [ currentCharacter between: $a and: $f ] ])										ifTrue: [ ^ self scan2 ] ] ] ].			^ self reportLastMatch ].	currentCharacter == $u		ifTrue: [ ^ self scan2 ].	currentCharacter == $x		ifTrue: [ ^ self scan3 ].	('"(0\nrt' includes: currentCharacter)		ifTrue: [ ^ self scan1 ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scanForTokenX13	[ self recordMatch: #(84).	self step.	currentCharacter isSeparator		or: [ currentCharacter == Character pageUp ] ] whileTrue.	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scan8	[ self recordMatch: #(87 88).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan6 ].	('Ee' includes: currentCharacter)		ifTrue: [ ^ self scan7 ].	currentCharacter isDigit or: [ currentCharacter == $_ ] ] whileTrue.	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scanForTokenX14	self step.	currentCharacter isDigit		ifTrue: [ [ self recordMatch: #(86).			self step.			currentCharacter isDigit ] whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scan3	self step.	(currentCharacter isDigit		or: [ (currentCharacter between: $A and: $F)				or: [ currentCharacter between: $a and: $f ] ])		ifTrue: [ self step.			(currentCharacter isDigit				or: [ (currentCharacter between: $A and: $F)						or: [ currentCharacter between: $a and: $f ] ])				ifTrue: [ ^ self scan1 ] ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scan7	self step.	currentCharacter isDigit		ifTrue: [ [ self recordMatch: #(88).			self step.			currentCharacter isDigit or: [ currentCharacter == $_ ] ] whileTrue.			^ self reportLastMatch ].	('+-' includes: currentCharacter)		ifTrue: [ self step.			currentCharacter isDigit				ifTrue: [ [ self recordMatch: #(88).					self step.					currentCharacter isDigit or: [ currentCharacter == $_ ] ]						whileTrue ] ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scanForTokenX15	currentCharacter == ${		ifTrue: [ ^ self recordAndReportMatch: #(82) ].	currentCharacter == $}		ifTrue: [ ^ self recordAndReportMatch: #(83) ].	currentCharacter isDigit		ifTrue: [ ^ self scan8 ].	(currentCharacter isSeparator		or: [ currentCharacter == Character pageUp ])		ifTrue:			[ ^ self scanForTokenX13 ].	((currentCharacter between: $A and: $Z)		or: [ (currentCharacter between: $a and: $t)				or: [ currentCharacter between: $v and: $z ] ])		ifTrue:			[ ^ self scanForTokenX12 ].	(currentCharacter == $%		or: [ (currentCharacter between: $* and: $+)				or:					[ '-^|~' includes: currentCharacter ] ])		ifTrue:			[ self scanForTokenX9 ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!tokenActions	^ #(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil #whitespace #comment)! !!SwiftScanner methodsFor: 'generated'!scanForTokenX1	self recordMatch: #(90).	self step.	currentCharacter == $*		ifTrue: [ ^ self scan4 ].	currentCharacter == $/		ifTrue:			[ ^ self scanForTokenX1X1 ].	(currentCharacter == $!!		or: [ (currentCharacter between: $% and: $&)				or: [ currentCharacter == $+						or: [ (currentCharacter between: $- and: $.)								or: [ (currentCharacter between: $< and: $>)										or:											[ '^|~' includes: currentCharacter ] ] ] ] ])		ifTrue: [ [ self recordMatch: #(90).			self step.			currentCharacter == $!!				or: [ (currentCharacter between: $% and: $&)						or: [ (currentCharacter between: $* and: $+)								or: [ (currentCharacter between: $- and: $/)										or: [ (currentCharacter between: $< and: $>)												or:													[ '^|~' includes: currentCharacter ] ] ] ] ] ] whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scanForTokenX1X1	[ self recordMatch: #(85 90).	self step.	currentCharacter == $!!		or: [ (currentCharacter between: $% and: $&)				or: [ (currentCharacter between: $* and: $+)						or: [ (currentCharacter between: $- and: $/)								or: [ (currentCharacter between: $< and: $>)										or:											[ '^|~' includes: currentCharacter ] ] ] ] ] ] whileTrue.	^ self scanForTokenX1X1X2! !!SwiftScanner methodsFor: 'generated'!scan1	[ self step.	currentCharacter == $"		ifTrue: [ ^ self recordAndReportMatch: #(89) ].	currentCharacter == $\		ifTrue:			[ ^ self scan1X1 ].	currentCharacter <= Character tab		or: [ (currentCharacter between: Character pageUp and: Character newPage)				or: [ (currentCharacter between: (Character value: 14) and: $!!)						or: [ (currentCharacter between: $# and: $[)								or: [ currentCharacter >= $] ] ] ] ] ] whileTrue.	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scanForTokenX12	[ self recordMatch: #(86).	self step.	(currentCharacter between: $0 and: $9)		or: [ (currentCharacter between: $A and: $Z)				or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $z ] ] ] ]		whileTrue.	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scan10X1X1X1	self recordMatch: #(86).	self step.	currentCharacter == $e		ifTrue: [ self recordMatch: #(86).			self step.			currentCharacter == $d				ifTrue: [ self recordMatch: #(86).					self step.					currentCharacter == $(						ifTrue: [ self step.							currentCharacter == $s								ifTrue: [ (self scanForString: 'afe)')										ifTrue: [ ^ self recordAndReportMatch: #(75) ].									^ self reportLastMatch ].							currentCharacter == $u								ifTrue: [ (self scanForString: 'nsafe)')										ifTrue: [ ^ self recordAndReportMatch: #(76) ] ].							^ self reportLastMatch ].					((currentCharacter between: $0 and: $9)						or: [ (currentCharacter between: $A and: $Z)								or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $z ] ] ])						ifTrue: [ [ self recordMatch: #(86).							self step.							(currentCharacter between: $0 and: $9)								or: [ (currentCharacter between: $A and: $Z)										or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $z ] ] ] ]								whileTrue ].					^ self reportLastMatch ].			((currentCharacter between: $0 and: $9)				or: [ (currentCharacter between: $A and: $Z)						or: [ currentCharacter == $_								or: [ (currentCharacter between: $a and: $c)										or: [ currentCharacter between: $e and: $z ] ] ] ])				ifTrue: [ [ self recordMatch: #(86).					self step.					(currentCharacter between: $0 and: $9)						or: [ (currentCharacter between: $A and: $Z)								or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $z ] ] ] ]						whileTrue ].			^ self reportLastMatch ].	((currentCharacter between: $0 and: $9)		or: [ (currentCharacter between: $A and: $Z)				or: [ currentCharacter == $_						or: [ (currentCharacter between: $a and: $d)								or: [ currentCharacter between: $f and: $z ] ] ] ])		ifTrue: [ [ self recordMatch: #(86).			self step.			(currentCharacter between: $0 and: $9)				or: [ (currentCharacter between: $A and: $Z)						or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $z ] ] ] ]				whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scanForTokenX11	self recordMatch: #(22 86).	self step.	((currentCharacter between: $0 and: $9)		or: [ (currentCharacter between: $A and: $Z)				or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $z ] ] ])		ifTrue: [ [ self recordMatch: #(86).			self step.			(currentCharacter between: $0 and: $9)				or: [ (currentCharacter between: $A and: $Z)						or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $z ] ] ] ]				whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scan10X1	self recordMatch: #(86).	self step.	currentCharacter == $w		ifTrue:			[ ^ self scan10X1X1 ].	((currentCharacter between: $0 and: $9)		or: [ (currentCharacter between: $A and: $Z)				or: [ currentCharacter == $_						or: [ (currentCharacter between: $a and: $v)								or: [ currentCharacter between: $x and: $z ] ] ] ])		ifTrue: [ [ self recordMatch: #(86).			self step.			(currentCharacter between: $0 and: $9)				or: [ (currentCharacter between: $A and: $Z)						or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $z ] ] ] ]				whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scanForTokenX3	self recordMatch: #(15 90).	self step.	(currentCharacter == $!!		or: [ (currentCharacter between: $% and: $&)				or: [ (currentCharacter between: $* and: $+)						or: [ (currentCharacter between: $- and: $/)								or: [ (currentCharacter between: $< and: $>)										or:											[ '^|~' includes: currentCharacter ] ] ] ] ])		ifTrue: [ [ self recordMatch: #(90).			self step.			currentCharacter == $!!				or: [ (currentCharacter between: $% and: $&)						or: [ (currentCharacter between: $* and: $+)								or: [ (currentCharacter between: $- and: $/)										or: [ (currentCharacter between: $< and: $>)												or:													[ '^|~' includes: currentCharacter ] ] ] ] ] ] whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scan4	[ self recordMatch: #(90).	self step.	currentCharacter == $*		ifTrue: [ [ self recordMatch: #(90).			self step.			currentCharacter == $* ] whileTrue.			currentCharacter == $/				ifTrue: [ self recordMatch: #(85 90).					self step.					(currentCharacter == $!!						or: [ (currentCharacter between: $% and: $&)								or: [ (currentCharacter between: $* and: $+)										or: [ (currentCharacter between: $- and: $/)												or: [ (currentCharacter between: $< and: $>)														or: [ '^|~' includes: currentCharacter ] ] ] ] ])						ifTrue: [ [ self recordMatch: #(90).							self step.							currentCharacter == $!!								or: [ (currentCharacter between: $% and: $&)										or: [ (currentCharacter between: $* and: $+)												or: [ (currentCharacter between: $- and: $/)														or: [ (currentCharacter between: $< and: $>)																or: [ '^|~' includes: currentCharacter ] ] ] ] ] ]								whileTrue ].					^ self reportLastMatch ].			(currentCharacter == $!!				or: [ (currentCharacter between: $% and: $&)						or: [ currentCharacter == $+								or: [ (currentCharacter between: $- and: $.)										or: [ (currentCharacter between: $< and: $>)												or: [ '^|~' includes: currentCharacter ] ] ] ] ])				ifTrue: [ ^ self scan4 ].			^ self scan5 ].	currentCharacter == $!!		or: [ (currentCharacter between: $% and: $&)				or: [ currentCharacter == $+						or: [ (currentCharacter between: $- and: $/)								or: [ (currentCharacter between: $< and: $>)										or: [ '^|~' includes: currentCharacter ] ] ] ] ] ] whileTrue.	^ self scan5! !!SwiftScanner methodsFor: 'generated'!scanForTokenX6	self recordMatch: #(8 90).	self step.	(currentCharacter == $!!		or: [ (currentCharacter between: $% and: $&)				or: [ (currentCharacter between: $* and: $+)						or: [ (currentCharacter between: $- and: $/)								or: [ (currentCharacter between: $< and: $>)										or:											[ '^|~' includes: currentCharacter ] ] ] ] ])		ifTrue: [ [ self recordMatch: #(90).			self step.			currentCharacter == $!!				or: [ (currentCharacter between: $% and: $&)						or: [ (currentCharacter between: $* and: $+)								or: [ (currentCharacter between: $- and: $/)										or: [ (currentCharacter between: $< and: $>)												or:													[ '^|~' includes: currentCharacter ] ] ] ] ] ] whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!errorTokenId	^ 366! !!SwiftScanner methodsFor: 'generated'!scanForTokenX2	self recordMatch: #(87 88).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan6 ].	currentCharacter == $b		ifTrue: [ self step.			(currentCharacter between: $0 and: $1)				ifTrue: [ [ self recordMatch: #(87).					self step.					(currentCharacter between: $0 and: $1)						or: [ currentCharacter == $_ ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter == $o		ifTrue: [ self step.			(currentCharacter between: $0 and: $7)				ifTrue: [ [ self recordMatch: #(87).					self step.					(currentCharacter between: $0 and: $7)						or: [ currentCharacter == $_ ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter == $x		ifTrue: [ self step.			(currentCharacter isDigit				or: [ (currentCharacter between: $A and: $F)						or: [ currentCharacter between: $a and: $f ] ])				ifTrue: [ [ self recordMatch: #(87).					self step.					currentCharacter == $.						ifTrue: [ [ self step.							('Pp' includes: currentCharacter)								ifTrue: [ ^ self scan7 ].							currentCharacter isDigit								or: [ (currentCharacter between: $A and: $F)										or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $f ] ] ] ]								whileTrue.							^ self reportLastMatch ].					('Pp' includes: currentCharacter)						ifTrue: [ ^ self scan7 ].					currentCharacter isDigit						or: [ (currentCharacter between: $A and: $F)								or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $f ] ] ] ]						whileTrue ].			^ self reportLastMatch ].	('Ee' includes: currentCharacter)		ifTrue: [ ^ self scan7 ].	(currentCharacter isDigit or: [ currentCharacter == $_ ])		ifTrue: [ ^ self scan8 ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scanForTokenX8	self recordMatch: #(1 90).	self step.	(currentCharacter == $!!		or: [ (currentCharacter between: $% and: $&)				or: [ (currentCharacter between: $* and: $+)						or: [ (currentCharacter between: $- and: $/)								or: [ (currentCharacter between: $< and: $>)										or:											[ '^|~' includes: currentCharacter ] ] ] ] ])		ifTrue: [ [ self recordMatch: #(90).			self step.			currentCharacter == $!!				or: [ (currentCharacter between: $% and: $&)						or: [ (currentCharacter between: $* and: $+)								or: [ (currentCharacter between: $- and: $/)										or: [ (currentCharacter between: $< and: $>)												or:													[ '^|~' includes: currentCharacter ] ] ] ] ] ] whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scanForToken	self step.	currentCharacter == $!!		ifTrue:			[ ^ self scanForTokenX8 ].	currentCharacter == $"		ifTrue: [ ^ self scan1 ].	currentCharacter == $#		ifTrue: [ ^ self recordAndReportMatch: #(2) ].	currentCharacter == $$		ifTrue:			[ ^ self scanForTokenX14 ].	currentCharacter == $&		ifTrue:			[ ^ self scanForTokenX7 ].	currentCharacter == $(		ifTrue: [ ^ self recordAndReportMatch: #(4) ].	currentCharacter == $)		ifTrue: [ ^ self recordAndReportMatch: #(5) ].	currentCharacter == $,		ifTrue: [ ^ self recordAndReportMatch: #(6) ].	currentCharacter == $.		ifTrue:			[ ^ self scanForTokenX6 ].	currentCharacter == $/		ifTrue:			[ ^ self scanForTokenX1 ].	currentCharacter == $0		ifTrue:			[ ^ self scanForTokenX2 ].	^ self scanForTokenX16! !!SwiftScanner methodsFor: 'generated'!scan10	self recordMatch: #(86).	self step.	currentCharacter == $o		ifTrue:			[ ^ self scan10X1 ].	((currentCharacter between: $0 and: $9)		or: [ (currentCharacter between: $A and: $Z)				or: [ currentCharacter == $_						or: [ (currentCharacter between: $a and: $n)								or: [ currentCharacter between: $p and: $z ] ] ] ])		ifTrue: [ [ self recordMatch: #(86).			self step.			(currentCharacter between: $0 and: $9)				or: [ (currentCharacter between: $A and: $Z)						or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $z ] ] ] ]				whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scan9	self recordMatch: #(86).	self step.	currentCharacter == $n		ifTrue: [ ^ self scan10 ].	((currentCharacter between: $0 and: $9)		or: [ (currentCharacter between: $A and: $Z)				or: [ currentCharacter == $_						or: [ (currentCharacter between: $a and: $m)								or: [ currentCharacter between: $o and: $z ] ] ] ])		ifTrue: [ [ self recordMatch: #(86).			self step.			(currentCharacter between: $0 and: $9)				or: [ (currentCharacter between: $A and: $Z)						or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $z ] ] ] ]				whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scanForTokenX9	[ self recordMatch: #(90).	self step.	currentCharacter == $!!		or: [ (currentCharacter between: $% and: $&)				or: [ (currentCharacter between: $* and: $+)						or: [ (currentCharacter between: $- and: $/)								or: [ (currentCharacter between: $< and: $>)										or:											[ '^|~' includes: currentCharacter ] ] ] ] ] ] whileTrue! !!SwiftScanner methodsFor: 'generated'!scanForTokenX10	self step.	((currentCharacter between: $A and: $Z)		or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $z ] ])		ifTrue: [ [ self step.			currentCharacter == $`				ifTrue: [ ^ self recordAndReportMatch: #(86) ].			(currentCharacter between: $0 and: $9)				or: [ (currentCharacter between: $A and: $Z)						or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $z ] ] ] ]				whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scanForTokenX1X1X1	[ self recordMatch: #(85).	self step.	currentCharacter <= Character tab		or: [ (currentCharacter between: Character pageUp and: Character newPage)				or: [ currentCharacter >= (Character value: 14) ] ] ] whileTrue! !!SwiftScanner methodsFor: 'generated'!scanForTokenX16	currentCharacter == $:		ifTrue: [ ^ self recordAndReportMatch: #(10) ].	currentCharacter == $;		ifTrue: [ ^ self recordAndReportMatch: #(11) ].	currentCharacter == $<		ifTrue:			[ ^ self scanForTokenX5 ].	currentCharacter == $=		ifTrue:			[ ^ self scanForTokenX4 ].	currentCharacter == $>		ifTrue:			[ ^ self scanForTokenX3 ].	currentCharacter == $?		ifTrue: [ ^ self recordAndReportMatch: #(16) ].	currentCharacter == $@		ifTrue: [ ^ self recordAndReportMatch: #(17) ].	currentCharacter == $[		ifTrue: [ ^ self recordAndReportMatch: #(20) ].	currentCharacter == $]		ifTrue: [ ^ self recordAndReportMatch: #(21) ].	currentCharacter == $_		ifTrue:			[ ^ self scanForTokenX11 ].	currentCharacter == $`		ifTrue:			[ ^ self scanForTokenX10 ].	currentCharacter == $u		ifTrue: [ ^ self scan9 ].	^ self scanForTokenX15! !!SwiftScanner methodsFor: 'generated'!scan2	self step.	(currentCharacter isDigit		or: [ (currentCharacter between: $A and: $F)				or: [ currentCharacter between: $a and: $f ] ])		ifTrue: [ self step.			(currentCharacter isDigit				or: [ (currentCharacter between: $A and: $F)						or: [ currentCharacter between: $a and: $f ] ])				ifTrue: [ ^ self scan3 ] ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scan10X1X1	self recordMatch: #(86).	self step.	currentCharacter == $n		ifTrue:			[ ^ self scan10X1X1X1 ].	((currentCharacter between: $0 and: $9)		or: [ (currentCharacter between: $A and: $Z)				or: [ currentCharacter == $_						or: [ (currentCharacter between: $a and: $m)								or: [ currentCharacter between: $o and: $z ] ] ] ])		ifTrue: [ [ self recordMatch: #(86).			self step.			(currentCharacter between: $0 and: $9)				or: [ (currentCharacter between: $A and: $Z)						or: [ currentCharacter == $_ or: [ currentCharacter between: $a and: $z ] ] ] ]				whileTrue ].	^ self reportLastMatch! !!SwiftScanner methodsFor: 'generated'!scanForTokenX4	self recordMatch: #(13 90).	self step.	(currentCharacter == $!!		or: [ (currentCharacter between: $% and: $&)				or: [ (currentCharacter between: $* and: $+)						or: [ (currentCharacter between: $- and: $/)								or: [ (currentCharacter between: $< and: $>)										or:											[ '^|~' includes: currentCharacter ] ] ] ] ])		ifTrue: [ [ self recordMatch: #(90).			self step.			currentCharacter == $!!				or: [ (currentCharacter between: $% and: $&)						or: [ (currentCharacter between: $* and: $+)								or: [ (currentCharacter between: $- and: $/)										or: [ (currentCharacter between: $< and: $>)												or:													[ '^|~' includes: currentCharacter ] ] ] ] ] ] whileTrue ].	^ self reportLastMatch! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SwiftScanner class	instanceVariableNames: ''!!SwiftScanner class methodsFor: 'generated-initialization'!initializeKeywordMap	keywordMap := Dictionary new.	#(#(90 '->' 7) #(90 '...' 9) #(90 '==' 14) #(86 'Protocol' 18) #(86 'Type' 19) #(86 '__COLUMN__' 23) #(86 '__FILE__' 24) #(86 '__FUNCTION__' 25) #(86 '__LINE__' 26) #(86 'as' 27) #(86 'associativity' 28) #(86 'break' 29) #(86 'case' 30) #(86 'class' 31) #(86 'continue' 32) #(86 'convenience' 33) #(86 'default' 34) #(86 'deinit' 35) #(86 'didSet' 36) #(86 'do' 37) #(86 'dynamicType' 38) #(86 'else' 39) #(86 'enum' 40) #(86 'extension' 41) #(86 'fallthrough' 42) #(86 'for' 43) #(86 'func' 44) #(86 'get' 45) #(86 'if' 46) #(86 'import' 47) #(86 'in' 48) #(86 'infix' 49) #(86 'init' 50) #(86 'inout' 51) #(86 'is' 52) #(86 'left' 53) #(86 'let' 54) #(86 'mutating' 55) #(86 'none' 56) #(86 'nonmutating' 57) #(86 'operator' 58) #(86 'override' 59) #(86 'postfix' 60) #(86 'precedence' 61) #(86 'prefix' 62) #(86 'protocol' 63) #(86 'return' 64) #(86 'right' 65) #(86 'self' 66) #(86 'set' 67) #(86 'static' 68) #(86 'struct' 69) #(86 'subscript' 70) #(86 'super' 71) #(86 'switch' 72) #(86 'typealias' 73) #(86 'unowned' 74) #(86 'var' 77) #(86 'weak' 78) #(86 'where' 79) #(86 'while' 80) #(86 'willSet' 81))		do: [ :each | 			(keywordMap at: each first ifAbsentPut: [ Dictionary new ])				at: (each at: 2)				put: each last ].	^ keywordMap! !SwiftParseNode subclass: #SwiftSelfExpressionNode	instanceVariableNames: 'selfToken periodToken identifierToken leftBracketToken expression rightBracketToken initToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftSelfExpressionNode methodsFor: 'generated'!rightBracketToken	^ rightBracketToken! !!SwiftSelfExpressionNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!SwiftSelfExpressionNode methodsFor: 'generated'!expression	^ expression! !!SwiftSelfExpressionNode methodsFor: 'generated'!rightBracketToken: aSmaCCToken	rightBracketToken := aSmaCCToken! !!SwiftSelfExpressionNode methodsFor: 'generated'!leftBracketToken: aSmaCCToken	leftBracketToken := aSmaCCToken! !!SwiftSelfExpressionNode methodsFor: 'generated'!selfToken	^ selfToken! !!SwiftSelfExpressionNode methodsFor: 'generated'!selfToken: aSmaCCToken	selfToken := aSmaCCToken! !!SwiftSelfExpressionNode methodsFor: 'generated'!expression: anObject	expression := anObject! !!SwiftSelfExpressionNode methodsFor: 'generated'!leftBracketToken	^ leftBracketToken! !!SwiftSelfExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitSelfExpression: self! !!SwiftSelfExpressionNode methodsFor: 'generated'!initToken	^ initToken! !!SwiftSelfExpressionNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !!SwiftSelfExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expression)! !!SwiftSelfExpressionNode methodsFor: 'generated'!initToken: aSmaCCToken	initToken := aSmaCCToken! !!SwiftSelfExpressionNode methodsFor: 'generated'!periodToken: aSmaCCToken	periodToken := aSmaCCToken! !!SwiftSelfExpressionNode methodsFor: 'generated'!periodToken	^ periodToken! !!SwiftSelfExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#selfToken #periodToken #identifierToken #leftBracketToken #rightBracketToken #initToken)! !SwiftParseNode subclass: #SwiftStatementNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitStatement: self! !SwiftStatementNode subclass: #SwiftBranchStatementNode	instanceVariableNames: 'semicolonToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftBranchStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!SwiftBranchStatementNode methodsFor: 'generated'!tokenVariables	^ #(#semicolonToken)! !!SwiftBranchStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!SwiftBranchStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitBranchStatement: self! !SwiftStatementNode subclass: #SwiftControlTransferStatementNode	instanceVariableNames: 'semicolonToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftControlTransferStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!SwiftControlTransferStatementNode methodsFor: 'generated'!tokenVariables	^ #(#semicolonToken)! !!SwiftControlTransferStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!SwiftControlTransferStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitControlTransferStatement: self! !SwiftControlTransferStatementNode subclass: #SwiftBreakStatementNode	instanceVariableNames: 'breakToken name'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftBreakStatementNode methodsFor: 'generated'!tokenVariables	^ #(#breakToken #name #semicolonToken)! !!SwiftBreakStatementNode methodsFor: 'generated'!breakToken	^ breakToken! !!SwiftBreakStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitBreakStatement: self! !!SwiftBreakStatementNode methodsFor: 'generated'!breakToken: aSmaCCToken	breakToken := aSmaCCToken! !!SwiftBreakStatementNode methodsFor: 'generated'!name	^ name! !!SwiftBreakStatementNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !SwiftControlTransferStatementNode subclass: #SwiftContinueStatementNode	instanceVariableNames: 'continueToken name'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftContinueStatementNode methodsFor: 'generated'!tokenVariables	^ #(#continueToken #name #semicolonToken)! !!SwiftContinueStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitContinueStatement: self! !!SwiftContinueStatementNode methodsFor: 'generated'!continueToken	^ continueToken! !!SwiftContinueStatementNode methodsFor: 'generated'!name	^ name! !!SwiftContinueStatementNode methodsFor: 'generated'!continueToken: aSmaCCToken	continueToken := aSmaCCToken! !!SwiftContinueStatementNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !SwiftStatementNode subclass: #SwiftDeclarationStatementNode	instanceVariableNames: 'declaration semicolonToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftDeclarationStatementNode methodsFor: 'generated'!tokenVariables	^ #(#semicolonToken)! !!SwiftDeclarationStatementNode methodsFor: 'generated'!nodeVariables	^ #(#declaration)! !!SwiftDeclarationStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitDeclarationStatement: self! !!SwiftDeclarationStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!SwiftDeclarationStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!SwiftDeclarationStatementNode methodsFor: 'generated'!declaration	^ declaration! !!SwiftDeclarationStatementNode methodsFor: 'generated'!declaration: aSwiftParseNode	self declaration notNil		ifTrue: [ self declaration parent: nil ].	declaration := aSwiftParseNode.	self declaration notNil		ifTrue: [ self declaration parent: self ]! !SwiftStatementNode subclass: #SwiftExpressionStatementNode	instanceVariableNames: 'expression semicolonToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftExpressionStatementNode methodsFor: 'generated'!expression: anObject	expression := anObject! !!SwiftExpressionStatementNode methodsFor: 'generated'!tokenVariables	^ #(#semicolonToken)! !!SwiftExpressionStatementNode methodsFor: 'generated'!expression	^ expression! !!SwiftExpressionStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!SwiftExpressionStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitExpressionStatement: self! !!SwiftExpressionStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!SwiftExpressionStatementNode methodsFor: 'generated'!otherVariables	^ #(#expression)! !SwiftControlTransferStatementNode subclass: #SwiftFallThroughStatementNode	instanceVariableNames: 'fallthroughToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftFallThroughStatementNode methodsFor: 'generated'!fallthroughToken	^ fallthroughToken! !!SwiftFallThroughStatementNode methodsFor: 'generated'!tokenVariables	^ #(#fallthroughToken #semicolonToken)! !!SwiftFallThroughStatementNode methodsFor: 'generated'!fallthroughToken: aSmaCCToken	fallthroughToken := aSmaCCToken! !!SwiftFallThroughStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitFallThroughStatement: self! !SwiftBranchStatementNode subclass: #SwiftIfStatementNode	instanceVariableNames: 'ifToken expression then elseToken else'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftIfStatementNode methodsFor: 'generated'!else: aSwiftParseNode	self else notNil		ifTrue: [ self else parent: nil ].	else := aSwiftParseNode.	self else notNil		ifTrue: [ self else parent: self ]! !!SwiftIfStatementNode methodsFor: 'generated'!then	^ then! !!SwiftIfStatementNode methodsFor: 'generated'!ifToken	^ ifToken! !!SwiftIfStatementNode methodsFor: 'generated'!expression	^ expression! !!SwiftIfStatementNode methodsFor: 'generated'!tokenVariables	^ #(#ifToken #elseToken #semicolonToken)! !!SwiftIfStatementNode methodsFor: 'generated'!elseToken	^ elseToken! !!SwiftIfStatementNode methodsFor: 'generated'!then: aSwiftBlockNode	self then notNil		ifTrue: [ self then parent: nil ].	then := aSwiftBlockNode.	self then notNil		ifTrue: [ self then parent: self ]! !!SwiftIfStatementNode methodsFor: 'generated'!expression: anObject	expression := anObject! !!SwiftIfStatementNode methodsFor: 'generated'!elseToken: aSmaCCToken	elseToken := aSmaCCToken! !!SwiftIfStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitIfStatement: self! !!SwiftIfStatementNode methodsFor: 'generated'!else	^ else! !!SwiftIfStatementNode methodsFor: 'generated'!ifToken: aSmaCCToken	ifToken := aSmaCCToken! !!SwiftIfStatementNode methodsFor: 'generated'!nodeVariables	^ #(#then #else)! !!SwiftIfStatementNode methodsFor: 'generated'!otherVariables	^ #(#expression)! !SwiftStatementNode subclass: #SwiftLabeledStatementNode	instanceVariableNames: 'name colonToken statement semicolonToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftLabeledStatementNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!SwiftLabeledStatementNode methodsFor: 'generated'!tokenVariables	^ #(#name #colonToken #semicolonToken)! !!SwiftLabeledStatementNode methodsFor: 'generated'!statement	^ statement! !!SwiftLabeledStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!SwiftLabeledStatementNode methodsFor: 'generated'!name	^ name! !!SwiftLabeledStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!SwiftLabeledStatementNode methodsFor: 'generated'!colonToken	^ colonToken! !!SwiftLabeledStatementNode methodsFor: 'generated'!nodeVariables	^ #(#statement)! !!SwiftLabeledStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitLabeledStatement: self! !!SwiftLabeledStatementNode methodsFor: 'generated'!colonToken: aSmaCCToken	colonToken := aSmaCCToken! !!SwiftLabeledStatementNode methodsFor: 'generated'!statement: aSwiftStatementNode	self statement notNil		ifTrue: [ self statement parent: nil ].	statement := aSwiftStatementNode.	self statement notNil		ifTrue: [ self statement parent: self ]! !SwiftStatementNode subclass: #SwiftLoopStatementNode	instanceVariableNames: 'semicolonToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftLoopStatementNode methodsFor: 'generated'!semicolonToken	^ semicolonToken! !!SwiftLoopStatementNode methodsFor: 'generated'!tokenVariables	^ #(#semicolonToken)! !!SwiftLoopStatementNode methodsFor: 'generated'!semicolonToken: aSmaCCToken	semicolonToken := aSmaCCToken! !!SwiftLoopStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitLoopStatement: self! !SwiftLoopStatementNode subclass: #SwiftDoWhileStatementNode	instanceVariableNames: 'doToken block whileToken identifierTokens lessThanTokens commaTokens greaterThanTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens leftBracketTokens expressions rightBracketTokens keyExpressions colonTokens valueExpressions __FILE__Token __LINE__Token __COLUMN__Token __FUNCTION__Token selfTokens periodTokens initTokens leftBraceTokens leftParenTokens rightParenTokens inoutTokens letTokens _Tokens protocolTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens equalTokens varTokens rightBraceTokens operatorTokens inToken weakToken unownedToken unownedLeftParensafeRightParenToken unownedLeftParenunsafeRightParenToken statements dynamicTypeTokens andToken operators'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftDoWhileStatementNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!keyExpressions	^ keyExpressions! !!SwiftDoWhileStatementNode methodsFor: 'generated'!__FUNCTION__Token	^ __FUNCTION__Token! !!SwiftDoWhileStatementNode methodsFor: 'generated'!__FUNCTION__Token: aSmaCCToken	__FUNCTION__Token := aSmaCCToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!otherVariables	^ #(#expressions #keyExpressions #valueExpressions)! !!SwiftDoWhileStatementNode methodsFor: 'generated'!operators: anOrderedCollection	self setParents: self operators to: nil.	operators := anOrderedCollection.	self setParents: self operators to: self! !!SwiftDoWhileStatementNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements #operators)! !!SwiftDoWhileStatementNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken	^ unownedLeftParensafeRightParenToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!andToken	^ andToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!whileToken: aSmaCCToken	whileToken := aSmaCCToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!valueExpressions: anOrderedCollection	valueExpressions := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken: aSmaCCToken	unownedLeftParensafeRightParenToken := aSmaCCToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!valueExpressions	^ valueExpressions! !!SwiftDoWhileStatementNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!whileToken	^ whileToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!weakToken	^ weakToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!dynamicTypeTokens	^ dynamicTypeTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!initTokens	^ initTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!__FILE__Token: aSmaCCToken	__FILE__Token := aSmaCCToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!operators	^ operators! !!SwiftDoWhileStatementNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!__FILE__Token	^ __FILE__Token! !!SwiftDoWhileStatementNode methodsFor: 'generated'!compositeTokenVariables	^ #(#identifierTokens #lessThanTokens #commaTokens #greaterThanTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #leftBracketTokens #rightBracketTokens #colonTokens #selfTokens #periodTokens #initTokens #leftBraceTokens #leftParenTokens #rightParenTokens #inoutTokens #letTokens #_Tokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #protocolTokens #typeTokens #periodPeriodPeriodTokens #equalTokens #varTokens #rightBraceTokens #operatorTokens #dynamicTypeTokens)! !!SwiftDoWhileStatementNode methodsFor: 'generated'!block	^ block! !!SwiftDoWhileStatementNode methodsFor: 'generated'!doToken: aSmaCCToken	doToken := aSmaCCToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!block: aSwiftBlockNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aSwiftBlockNode.	self block notNil		ifTrue: [ self block parent: self ]! !!SwiftDoWhileStatementNode methodsFor: 'generated'!dynamicTypeTokens: anOrderedCollection	dynamicTypeTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken: aSmaCCToken	unownedLeftParenunsafeRightParenToken := aSmaCCToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!__COLUMN__Token: aSmaCCToken	__COLUMN__Token := aSmaCCToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!selfTokens	^ selfTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!selfTokens: anOrderedCollection	selfTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!initTokens: anOrderedCollection	initTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!__COLUMN__Token	^ __COLUMN__Token! !!SwiftDoWhileStatementNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftDoWhileStatementNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!unownedToken	^ unownedToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!SwiftDoWhileStatementNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!unownedToken: aSmaCCToken	unownedToken := aSmaCCToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!__LINE__Token: aSmaCCToken	__LINE__Token := aSmaCCToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftDoWhileStatementNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!andToken: aSmaCCToken	andToken := aSmaCCToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!weakToken: aSmaCCToken	weakToken := aSmaCCToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken	^ unownedLeftParenunsafeRightParenToken! !!SwiftDoWhileStatementNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!tokenVariables	^ #(#doToken #whileToken #__FILE__Token #__LINE__Token #__COLUMN__Token #__FUNCTION__Token #inToken #weakToken #unownedToken #unownedLeftParensafeRightParenToken #unownedLeftParenunsafeRightParenToken #andToken #semicolonToken)! !!SwiftDoWhileStatementNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!__LINE__Token	^ __LINE__Token! !!SwiftDoWhileStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitDoWhileStatement: self! !!SwiftDoWhileStatementNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!keyExpressions: anOrderedCollection	keyExpressions := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftDoWhileStatementNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftDoWhileStatementNode methodsFor: 'generated'!statements	^ statements! !!SwiftDoWhileStatementNode methodsFor: 'generated'!doToken	^ doToken! !!SwiftDoWhileStatementNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	keyExpressions := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	valueExpressions := OrderedCollection new: 2.	selfTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	initTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.	dynamicTypeTokens := OrderedCollection new: 2.	operators := OrderedCollection new: 2.! !SwiftLoopStatementNode subclass: #SwiftForInStatementNode	instanceVariableNames: 'forToken _Tokens colonTokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens periodTokens protocolTokens lessThanTokens greaterThanTokens minusGreaterThanTokens commaTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens inoutTokens varTokens letTokens expressions isTokens asTokens inToken block'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftForInStatementNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftForInStatementNode methodsFor: 'generated'!forToken	^ forToken! !!SwiftForInStatementNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftForInStatementNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftForInStatementNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftForInStatementNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftForInStatementNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!isTokens: anOrderedCollection	isTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!SwiftForInStatementNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!tokenVariables	^ #(#forToken #inToken #semicolonToken)! !!SwiftForInStatementNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftForInStatementNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftForInStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitForInStatement: self! !!SwiftForInStatementNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftForInStatementNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftForInStatementNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftForInStatementNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftForInStatementNode methodsFor: 'generated'!otherVariables	^ #(#expressions)! !!SwiftForInStatementNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftForInStatementNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftForInStatementNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftForInStatementNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftForInStatementNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #colonTokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #minusGreaterThanTokens #periodTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #commaTokens #periodPeriodPeriodTokens #inoutTokens #varTokens #letTokens #isTokens #asTokens)! !!SwiftForInStatementNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftForInStatementNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftForInStatementNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftForInStatementNode methodsFor: 'generated'!asTokens	^ asTokens! !!SwiftForInStatementNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftForInStatementNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftForInStatementNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftForInStatementNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftForInStatementNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftForInStatementNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftForInStatementNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!block	^ block! !!SwiftForInStatementNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!asTokens: anOrderedCollection	asTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!isTokens	^ isTokens! !!SwiftForInStatementNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftForInStatementNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftForInStatementNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!block: aSwiftBlockNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aSwiftBlockNode.	self block notNil		ifTrue: [ self block parent: self ]! !!SwiftForInStatementNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftForInStatementNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftForInStatementNode methodsFor: 'generated'!forToken: aSmaCCToken	forToken := aSmaCCToken! !!SwiftForInStatementNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftForInStatementNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftForInStatementNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	isTokens := OrderedCollection new: 2.	asTokens := OrderedCollection new: 2.! !SwiftLoopStatementNode subclass: #SwiftForStatementNode	instanceVariableNames: 'forToken expressions commaTokens testExpression incrementExpression block leftParenToken rightParenToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftForStatementNode methodsFor: 'generated'!block	^ block! !!SwiftForStatementNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftForStatementNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftForStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitForStatement: self! !!SwiftForStatementNode methodsFor: 'generated'!forToken	^ forToken! !!SwiftForStatementNode methodsFor: 'generated'!rightParenToken	^ rightParenToken! !!SwiftForStatementNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftForStatementNode methodsFor: 'generated'!forToken: aSmaCCToken	forToken := aSmaCCToken! !!SwiftForStatementNode methodsFor: 'generated'!testExpression	^ testExpression! !!SwiftForStatementNode methodsFor: 'generated'!leftParenToken	^ leftParenToken! !!SwiftForStatementNode methodsFor: 'generated'!otherVariables	^ #(#expressions #testExpression #incrementExpression)! !!SwiftForStatementNode methodsFor: 'generated'!leftParenToken: aSmaCCToken	leftParenToken := aSmaCCToken! !!SwiftForStatementNode methodsFor: 'generated'!incrementExpression: anObject	incrementExpression := anObject! !!SwiftForStatementNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftForStatementNode methodsFor: 'generated'!block: aSwiftBlockNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aSwiftBlockNode.	self block notNil		ifTrue: [ self block parent: self ]! !!SwiftForStatementNode methodsFor: 'generated'!compositeTokenVariables	^ #(#commaTokens)! !!SwiftForStatementNode methodsFor: 'generated'!tokenVariables	^ #(#forToken #leftParenToken #rightParenToken #semicolonToken)! !!SwiftForStatementNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!SwiftForStatementNode methodsFor: 'generated'!rightParenToken: aSmaCCToken	rightParenToken := aSmaCCToken! !!SwiftForStatementNode methodsFor: 'generated'!testExpression: anObject	testExpression := anObject! !!SwiftForStatementNode methodsFor: 'generated'!incrementExpression	^ incrementExpression! !!SwiftForStatementNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	expressions := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.! !SwiftControlTransferStatementNode subclass: #SwiftReturnStatementNode	instanceVariableNames: 'returnToken expression'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftReturnStatementNode methodsFor: 'generated'!expression: anObject	expression := anObject! !!SwiftReturnStatementNode methodsFor: 'generated'!tokenVariables	^ #(#returnToken #semicolonToken)! !!SwiftReturnStatementNode methodsFor: 'generated'!expression	^ expression! !!SwiftReturnStatementNode methodsFor: 'generated'!returnToken	^ returnToken! !!SwiftReturnStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitReturnStatement: self! !!SwiftReturnStatementNode methodsFor: 'generated'!returnToken: aSmaCCToken	returnToken := aSmaCCToken! !!SwiftReturnStatementNode methodsFor: 'generated'!otherVariables	^ #(#expression)! !SwiftParseNode subclass: #SwiftStructDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens structToken lessThanTokens colonTokens commaTokens greaterThanTokens periodTokens protocolTokens whereToken equalEqualTokens declarations'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftStructDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	equalEqualTokens := OrderedCollection new: 2.	declarations := OrderedCollection new: 2.! !!SwiftStructDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!structToken	^ structToken! !!SwiftStructDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!equalEqualTokens: anOrderedCollection	equalEqualTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!declarations	^ declarations! !!SwiftStructDeclarationNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#structToken #whereToken)! !!SwiftStructDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitStructDeclaration: self! !!SwiftStructDeclarationNode methodsFor: 'generated'!declarations: anOrderedCollection	self setParents: self declarations to: nil.	declarations := anOrderedCollection.	self setParents: self declarations to: self! !!SwiftStructDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!equalEqualTokens	^ equalEqualTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #lessThanTokens #colonTokens #commaTokens #greaterThanTokens #periodTokens #protocolTokens #equalEqualTokens)! !!SwiftStructDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!structToken: aSmaCCToken	structToken := aSmaCCToken! !!SwiftStructDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!whereToken: aSmaCCToken	whereToken := aSmaCCToken! !!SwiftStructDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#declarations)! !!SwiftStructDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftStructDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftStructDeclarationNode methodsFor: 'generated'!whereToken	^ whereToken! !SwiftParseNode subclass: #SwiftSubscriptDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens subscriptToken inoutTokens letTokens colonTokens periodTokens protocolTokens lessThanTokens greaterThanTokens minusGreaterThanTokens commaTokens questionMarkTokens bangTokens typeTokens equalTokens expressions varTokens periodPeriodPeriodTokens blocks getToken setToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftSubscriptDeclarationNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!setToken: aSmaCCToken	setToken := aSmaCCToken! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!getToken	^ getToken! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#subscriptToken #getToken #setToken)! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitSubscriptDeclaration: self! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!getToken: aSmaCCToken	getToken := aSmaCCToken! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!blocks	^ blocks! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!setToken	^ setToken! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!otherVariables	^ #(#expressions)! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!subscriptToken	^ subscriptToken! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!subscriptToken: aSmaCCToken	subscriptToken := aSmaCCToken! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #inoutTokens #letTokens #colonTokens #minusGreaterThanTokens #periodTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #commaTokens #equalTokens #varTokens #periodPeriodPeriodTokens)! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!blocks: anOrderedCollection	self setParents: self blocks to: nil.	blocks := anOrderedCollection.	self setParents: self blocks to: self! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#blocks)! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftSubscriptDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	blocks := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftSubscriptExpressionNode	instanceVariableNames: 'identifierTokens lessThanTokens commaTokens greaterThanTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens leftBracketTokens expressions rightBracketTokens keyExpressions colonTokens valueExpressions __FILE__Token __LINE__Token __COLUMN__Token __FUNCTION__Token selfTokens periodTokens initTokens leftBraceTokens leftParenTokens rightParenTokens inoutTokens letTokens _Tokens protocolTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens equalTokens varTokens rightBraceTokens operatorTokens inToken weakToken unownedToken unownedLeftParensafeRightParenToken unownedLeftParenunsafeRightParenToken statements dynamicTypeTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftSubscriptExpressionNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!keyExpressions	^ keyExpressions! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!__FUNCTION__Token	^ __FUNCTION__Token! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!__FUNCTION__Token: aSmaCCToken	__FUNCTION__Token := aSmaCCToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expressions #keyExpressions #valueExpressions)! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken	^ unownedLeftParensafeRightParenToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!valueExpressions: anOrderedCollection	valueExpressions := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!unownedLeftParensafeRightParenToken: aSmaCCToken	unownedLeftParensafeRightParenToken := aSmaCCToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!valueExpressions	^ valueExpressions! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!weakToken	^ weakToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!dynamicTypeTokens	^ dynamicTypeTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!initTokens	^ initTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!__FILE__Token: aSmaCCToken	__FILE__Token := aSmaCCToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!__FILE__Token	^ __FILE__Token! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!compositeTokenVariables	^ #(#identifierTokens #lessThanTokens #commaTokens #greaterThanTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #leftBracketTokens #rightBracketTokens #colonTokens #selfTokens #periodTokens #initTokens #leftBraceTokens #leftParenTokens #rightParenTokens #inoutTokens #letTokens #_Tokens #minusGreaterThanTokens #questionMarkTokens #bangTokens #protocolTokens #typeTokens #periodPeriodPeriodTokens #equalTokens #varTokens #rightBraceTokens #operatorTokens #dynamicTypeTokens)! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!dynamicTypeTokens: anOrderedCollection	dynamicTypeTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken: aSmaCCToken	unownedLeftParenunsafeRightParenToken := aSmaCCToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!inToken	^ inToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!__COLUMN__Token: aSmaCCToken	__COLUMN__Token := aSmaCCToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!selfTokens	^ selfTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!selfTokens: anOrderedCollection	selfTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!inToken: aSmaCCToken	inToken := aSmaCCToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!initTokens: anOrderedCollection	initTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!__COLUMN__Token	^ __COLUMN__Token! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!unownedToken	^ unownedToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!equalTokens	^ equalTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!unownedToken: aSmaCCToken	unownedToken := aSmaCCToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!__LINE__Token: aSmaCCToken	__LINE__Token := aSmaCCToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!weakToken: aSmaCCToken	weakToken := aSmaCCToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenToken	^ unownedLeftParenunsafeRightParenToken! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#__FILE__Token #__LINE__Token #__COLUMN__Token #__FUNCTION__Token #inToken #weakToken #unownedToken #unownedLeftParensafeRightParenToken #unownedLeftParenunsafeRightParenToken)! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!__LINE__Token	^ __LINE__Token! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitSubscriptExpression: self! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!keyExpressions: anOrderedCollection	keyExpressions := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!equalTokens: anOrderedCollection	equalTokens := anOrderedCollection! !!SwiftSubscriptExpressionNode methodsFor: 'generated'!statements	^ statements! !!SwiftSubscriptExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	expressions := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	keyExpressions := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	valueExpressions := OrderedCollection new: 2.	selfTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	initTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	equalTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.	dynamicTypeTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftSuperclassInitializerExpressionNode	instanceVariableNames: 'superToken periodToken initToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftSuperclassInitializerExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#superToken #periodToken #initToken)! !!SwiftSuperclassInitializerExpressionNode methodsFor: 'generated'!superToken	^ superToken! !!SwiftSuperclassInitializerExpressionNode methodsFor: 'generated'!initToken	^ initToken! !!SwiftSuperclassInitializerExpressionNode methodsFor: 'generated'!periodToken: aSmaCCToken	periodToken := aSmaCCToken! !!SwiftSuperclassInitializerExpressionNode methodsFor: 'generated'!periodToken	^ periodToken! !!SwiftSuperclassInitializerExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitSuperclassInitializerExpression: self! !!SwiftSuperclassInitializerExpressionNode methodsFor: 'generated'!initToken: aSmaCCToken	initToken := aSmaCCToken! !!SwiftSuperclassInitializerExpressionNode methodsFor: 'generated'!superToken: aSmaCCToken	superToken := aSmaCCToken! !SwiftParseNode subclass: #SwiftSuperclassMethodExpressionNode	instanceVariableNames: 'superToken periodToken identifierToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftSuperclassMethodExpressionNode methodsFor: 'generated'!identifierToken	^ identifierToken! !!SwiftSuperclassMethodExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#superToken #periodToken #identifierToken)! !!SwiftSuperclassMethodExpressionNode methodsFor: 'generated'!superToken	^ superToken! !!SwiftSuperclassMethodExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitSuperclassMethodExpression: self! !!SwiftSuperclassMethodExpressionNode methodsFor: 'generated'!periodToken: aSmaCCToken	periodToken := aSmaCCToken! !!SwiftSuperclassMethodExpressionNode methodsFor: 'generated'!periodToken	^ periodToken! !!SwiftSuperclassMethodExpressionNode methodsFor: 'generated'!superToken: aSmaCCToken	superToken := aSmaCCToken! !!SwiftSuperclassMethodExpressionNode methodsFor: 'generated'!identifierToken: aSmaCCToken	identifierToken := aSmaCCToken! !SwiftParseNode subclass: #SwiftSuperclassSubscriptExpressionNode	instanceVariableNames: 'superToken leftBracketToken expression rightBracketToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftSuperclassSubscriptExpressionNode methodsFor: 'generated'!rightBracketToken	^ rightBracketToken! !!SwiftSuperclassSubscriptExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#superToken #leftBracketToken #rightBracketToken)! !!SwiftSuperclassSubscriptExpressionNode methodsFor: 'generated'!expression	^ expression! !!SwiftSuperclassSubscriptExpressionNode methodsFor: 'generated'!superToken	^ superToken! !!SwiftSuperclassSubscriptExpressionNode methodsFor: 'generated'!leftBracketToken: aSmaCCToken	leftBracketToken := aSmaCCToken! !!SwiftSuperclassSubscriptExpressionNode methodsFor: 'generated'!rightBracketToken: aSmaCCToken	rightBracketToken := aSmaCCToken! !!SwiftSuperclassSubscriptExpressionNode methodsFor: 'generated'!expression: anObject	expression := anObject! !!SwiftSuperclassSubscriptExpressionNode methodsFor: 'generated'!leftBracketToken	^ leftBracketToken! !!SwiftSuperclassSubscriptExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitSuperclassSubscriptExpression: self! !!SwiftSuperclassSubscriptExpressionNode methodsFor: 'generated'!otherVariables	^ #(#expression)! !!SwiftSuperclassSubscriptExpressionNode methodsFor: 'generated'!superToken: aSmaCCToken	superToken := aSmaCCToken! !SwiftBranchStatementNode subclass: #SwiftSwitchStatementNode	instanceVariableNames: 'switchToken expressions leftBraceTokens caseTokens _Tokens colonTokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens periodTokens protocolTokens lessThanTokens greaterThanTokens rightBracketTokens minusGreaterThanTokens commaTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens inoutTokens varTokens letTokens isTokens asTokens whereTokens statements defaultTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftSwitchStatementNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!SwiftSwitchStatementNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!expressions	^ expressions! !!SwiftSwitchStatementNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!isTokens: anOrderedCollection	isTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!statements	^ statements! !!SwiftSwitchStatementNode methodsFor: 'generated'!letTokens: anOrderedCollection	letTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!caseTokens: anOrderedCollection	caseTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitSwitchStatement: self! !!SwiftSwitchStatementNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!defaultTokens: anOrderedCollection	defaultTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!tokenVariables	^ #(#switchToken #semicolonToken)! !!SwiftSwitchStatementNode methodsFor: 'generated'!defaultTokens	^ defaultTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!otherVariables	^ #(#expressions)! !!SwiftSwitchStatementNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!caseTokens	^ caseTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!letTokens	^ letTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!switchToken	^ switchToken! !!SwiftSwitchStatementNode methodsFor: 'generated'!whereTokens	^ whereTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!varTokens	^ varTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!expressions: anOrderedCollection	expressions := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!compositeTokenVariables	^ #(#leftBraceTokens #caseTokens #_Tokens #colonTokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #minusGreaterThanTokens #periodTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #commaTokens #periodPeriodPeriodTokens #varTokens #letTokens #isTokens #asTokens #inoutTokens #whereTokens #defaultTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens)! !!SwiftSwitchStatementNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!whereTokens: anOrderedCollection	whereTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!asTokens	^ asTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!varTokens: anOrderedCollection	varTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!asTokens: anOrderedCollection	asTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!isTokens	^ isTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!compositeNodeVariables	^ #(#statements)! !!SwiftSwitchStatementNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!switchToken: aSmaCCToken	switchToken := aSmaCCToken! !!SwiftSwitchStatementNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftSwitchStatementNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftSwitchStatementNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	expressions := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	caseTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	varTokens := OrderedCollection new: 2.	letTokens := OrderedCollection new: 2.	isTokens := OrderedCollection new: 2.	asTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	whereTokens := OrderedCollection new: 2.	statements := OrderedCollection new: 2.	defaultTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftTupleTypeNode	instanceVariableNames: 'leftParenTokens _Tokens identifierTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens inoutTokens periodTokens protocolTokens lessThanTokens greaterThanTokens colonTokens minusGreaterThanTokens commaTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftTupleTypeNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitTupleType: self! !!SwiftTupleTypeNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!compositeTokenVariables	^ #(#leftParenTokens #_Tokens #identifierTokens #rightParenTokens #inoutTokens #leftBracketTokens #rightBracketTokens #colonTokens #minusGreaterThanTokens #periodTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #commaTokens #periodPeriodPeriodTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens)! !!SwiftTupleTypeNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftTupleTypeNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftTupleTypeNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftTupleTypeNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	leftParenTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftTypeCastOperatorNode	instanceVariableNames: '_isToken type asToken questionMarkToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftTypeCastOperatorNode methodsFor: 'generated'!type: aSwiftParseNode	self type notNil		ifTrue: [ self type parent: nil ].	type := aSwiftParseNode.	self type notNil		ifTrue: [ self type parent: self ]! !!SwiftTypeCastOperatorNode methodsFor: 'generated'!type	^ type! !!SwiftTypeCastOperatorNode methodsFor: 'generated'!tokenVariables	^ #(#_isToken #asToken #questionMarkToken)! !!SwiftTypeCastOperatorNode methodsFor: 'generated'!_isToken: aSmaCCToken	_isToken := aSmaCCToken! !!SwiftTypeCastOperatorNode methodsFor: 'generated'!_isToken	^ _isToken! !!SwiftTypeCastOperatorNode methodsFor: 'generated'!asToken: aSmaCCToken	asToken := aSmaCCToken! !!SwiftTypeCastOperatorNode methodsFor: 'generated'!nodeVariables	^ #(#type)! !!SwiftTypeCastOperatorNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitTypeCastOperator: self! !!SwiftTypeCastOperatorNode methodsFor: 'generated'!asToken	^ asToken! !!SwiftTypeCastOperatorNode methodsFor: 'generated'!questionMarkToken: aSmaCCToken	questionMarkToken := aSmaCCToken! !!SwiftTypeCastOperatorNode methodsFor: 'generated'!questionMarkToken	^ questionMarkToken! !SwiftParseNode subclass: #SwiftTypeIdentifierNode	instanceVariableNames: 'identifierTokens lessThanTokens commaTokens greaterThanTokens periodTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftTypeIdentifierNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftTypeIdentifierNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftTypeIdentifierNode methodsFor: 'generated'!compositeTokenVariables	^ #(#identifierTokens #lessThanTokens #commaTokens #greaterThanTokens #periodTokens)! !!SwiftTypeIdentifierNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftTypeIdentifierNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftTypeIdentifierNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftTypeIdentifierNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitTypeIdentifier: self! !!SwiftTypeIdentifierNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftTypeIdentifierNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftTypeIdentifierNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftTypeIdentifierNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftTypeIdentifierNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftTypeIdentifierNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	identifierTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftTypealiasDeclarationNode	instanceVariableNames: 'typealiasToken identifierTokens equalToken leftBracketTokens periodTokens protocolTokens lessThanTokens greaterThanTokens rightBracketTokens colonTokens minusGreaterThanTokens commaTokens leftParenTokens rightParenTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens inoutTokens _Tokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftTypealiasDeclarationNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!typealiasToken: aSmaCCToken	typealiasToken := aSmaCCToken! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!typealiasToken	^ typealiasToken! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#typealiasToken #equalToken)! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!equalToken	^ equalToken! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitTypealiasDeclaration: self! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#identifierTokens #leftBracketTokens #rightBracketTokens #colonTokens #minusGreaterThanTokens #periodTokens #leftParenTokens #rightParenTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #commaTokens #periodPeriodPeriodTokens #_Tokens #inoutTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens)! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftTypealiasDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	identifierTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	_Tokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.! !SwiftParseNode subclass: #SwiftVariableDeclarationNode	instanceVariableNames: '_Tokens identifierTokens leftParenTokens rightParenTokens leftBracketTokens rightBracketTokens leftBraceTokens rightBraceTokens integer_literalTokens floating_point_literalTokens full_string_literalTokens operatorTokens classTokens mutatingTokens nonmutatingTokens overrideTokens staticTokens unownedTokens unownedLeftParensafeRightParenTokens unownedLeftParenunsafeRightParenTokens weakTokens varToken inializers commaTokens colonTokens periodTokens protocolTokens lessThanTokens greaterThanTokens minusGreaterThanTokens questionMarkTokens bangTokens typeTokens periodPeriodPeriodTokens inoutTokens blocks getToken setToken equalToken expression willSetToken didSetToken'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftVariableDeclarationNode methodsFor: 'generated'!colonTokens: anOrderedCollection	colonTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!classTokens	^ classTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!otherVariables	^ #(#expression)! !!SwiftVariableDeclarationNode methodsFor: 'generated'!unownedTokens: anOrderedCollection	unownedTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!compositeNodeVariables	^ #(#inializers #blocks)! !!SwiftVariableDeclarationNode methodsFor: 'generated'!willSetToken: aSmaCCToken	willSetToken := aSmaCCToken! !!SwiftVariableDeclarationNode methodsFor: 'generated'!nonmutatingTokens: anOrderedCollection	nonmutatingTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!integer_literalTokens	^ integer_literalTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!weakTokens: anOrderedCollection	weakTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!rightParenTokens: anOrderedCollection	rightParenTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!_Tokens: anOrderedCollection	_Tokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!setToken: aSmaCCToken	setToken := aSmaCCToken! !!SwiftVariableDeclarationNode methodsFor: 'generated'!equalToken	^ equalToken! !!SwiftVariableDeclarationNode methodsFor: 'generated'!typeTokens: anOrderedCollection	typeTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!operatorTokens: anOrderedCollection	operatorTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens: anOrderedCollection	periodPeriodPeriodTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!periodTokens	^ periodTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!blocks: anOrderedCollection	self setParents: self blocks to: nil.	blocks := anOrderedCollection.	self setParents: self blocks to: self! !!SwiftVariableDeclarationNode methodsFor: 'generated'!varToken	^ varToken! !!SwiftVariableDeclarationNode methodsFor: 'generated'!overrideTokens	^ overrideTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!questionMarkTokens: anOrderedCollection	questionMarkTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!expression: anObject	expression := anObject! !!SwiftVariableDeclarationNode methodsFor: 'generated'!greaterThanTokens	^ greaterThanTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!leftBracketTokens	^ leftBracketTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!getToken: aSmaCCToken	getToken := aSmaCCToken! !!SwiftVariableDeclarationNode methodsFor: 'generated'!compositeTokenVariables	^ #(#_Tokens #identifierTokens #leftParenTokens #rightParenTokens #leftBracketTokens #rightBracketTokens #leftBraceTokens #rightBraceTokens #integer_literalTokens #floating_point_literalTokens #full_string_literalTokens #operatorTokens #classTokens #mutatingTokens #nonmutatingTokens #overrideTokens #staticTokens #unownedTokens #unownedLeftParensafeRightParenTokens #unownedLeftParenunsafeRightParenTokens #weakTokens #commaTokens #colonTokens #minusGreaterThanTokens #periodTokens #questionMarkTokens #bangTokens #protocolTokens #lessThanTokens #greaterThanTokens #typeTokens #periodPeriodPeriodTokens #inoutTokens)! !!SwiftVariableDeclarationNode methodsFor: 'generated'!classTokens: anOrderedCollection	classTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!weakTokens	^ weakTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!blocks	^ blocks! !!SwiftVariableDeclarationNode methodsFor: 'generated'!inoutTokens: anOrderedCollection	inoutTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!willSetToken	^ willSetToken! !!SwiftVariableDeclarationNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenTokens	^ unownedLeftParenunsafeRightParenTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!protocolTokens: anOrderedCollection	protocolTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!rightBraceTokens: anOrderedCollection	rightBraceTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!rightBracketTokens	^ rightBracketTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!lessThanTokens: anOrderedCollection	lessThanTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!rightBracketTokens: anOrderedCollection	rightBracketTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!inoutTokens	^ inoutTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!rightBraceTokens	^ rightBraceTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!identifierTokens: anOrderedCollection	identifierTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!operatorTokens	^ operatorTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!unownedLeftParenunsafeRightParenTokens: anOrderedCollection	unownedLeftParenunsafeRightParenTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!floating_point_literalTokens: anOrderedCollection	floating_point_literalTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!didSetToken	^ didSetToken! !!SwiftVariableDeclarationNode methodsFor: 'generated'!bangTokens: anOrderedCollection	bangTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!unownedLeftParensafeRightParenTokens	^ unownedLeftParensafeRightParenTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!unownedLeftParensafeRightParenTokens: anOrderedCollection	unownedLeftParensafeRightParenTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!unownedTokens	^ unownedTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!typeTokens	^ typeTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!greaterThanTokens: anOrderedCollection	greaterThanTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!colonTokens	^ colonTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!leftBraceTokens	^ leftBraceTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!floating_point_literalTokens	^ floating_point_literalTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!mutatingTokens	^ mutatingTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!_Tokens	^ _Tokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!inializers	^ inializers! !!SwiftVariableDeclarationNode methodsFor: 'generated'!identifierTokens	^ identifierTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!bangTokens	^ bangTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!setToken	^ setToken! !!SwiftVariableDeclarationNode methodsFor: 'generated'!integer_literalTokens: anOrderedCollection	integer_literalTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!periodPeriodPeriodTokens	^ periodPeriodPeriodTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!inializers: anOrderedCollection	self setParents: self inializers to: nil.	inializers := anOrderedCollection.	self setParents: self inializers to: self! !!SwiftVariableDeclarationNode methodsFor: 'generated'!didSetToken: aSmaCCToken	didSetToken := aSmaCCToken! !!SwiftVariableDeclarationNode methodsFor: 'generated'!protocolTokens	^ protocolTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!leftBraceTokens: anOrderedCollection	leftBraceTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!commaTokens	^ commaTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!leftBracketTokens: anOrderedCollection	leftBracketTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!rightParenTokens	^ rightParenTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!staticTokens: anOrderedCollection	staticTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens: anOrderedCollection	minusGreaterThanTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!leftParenTokens	^ leftParenTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!commaTokens: anOrderedCollection	commaTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!tokenVariables	^ #(#varToken #getToken #setToken #equalToken #willSetToken #didSetToken)! !!SwiftVariableDeclarationNode methodsFor: 'generated'!questionMarkTokens	^ questionMarkTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!periodTokens: anOrderedCollection	periodTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!nonmutatingTokens	^ nonmutatingTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!getToken	^ getToken! !!SwiftVariableDeclarationNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitVariableDeclaration: self! !!SwiftVariableDeclarationNode methodsFor: 'generated'!overrideTokens: anOrderedCollection	overrideTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!staticTokens	^ staticTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!equalToken: aSmaCCToken	equalToken := aSmaCCToken! !!SwiftVariableDeclarationNode methodsFor: 'generated'!full_string_literalTokens: anOrderedCollection	full_string_literalTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!full_string_literalTokens	^ full_string_literalTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!leftParenTokens: anOrderedCollection	leftParenTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!lessThanTokens	^ lessThanTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!minusGreaterThanTokens	^ minusGreaterThanTokens! !!SwiftVariableDeclarationNode methodsFor: 'generated'!varToken: aSmaCCToken	varToken := aSmaCCToken! !!SwiftVariableDeclarationNode methodsFor: 'generated'!mutatingTokens: anOrderedCollection	mutatingTokens := anOrderedCollection! !!SwiftVariableDeclarationNode methodsFor: 'generated'!expression	^ expression! !!SwiftVariableDeclarationNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	_Tokens := OrderedCollection new: 2.	identifierTokens := OrderedCollection new: 2.	leftParenTokens := OrderedCollection new: 2.	rightParenTokens := OrderedCollection new: 2.	leftBracketTokens := OrderedCollection new: 2.	rightBracketTokens := OrderedCollection new: 2.	leftBraceTokens := OrderedCollection new: 2.	rightBraceTokens := OrderedCollection new: 2.	integer_literalTokens := OrderedCollection new: 2.	floating_point_literalTokens := OrderedCollection new: 2.	full_string_literalTokens := OrderedCollection new: 2.	operatorTokens := OrderedCollection new: 2.	classTokens := OrderedCollection new: 2.	mutatingTokens := OrderedCollection new: 2.	nonmutatingTokens := OrderedCollection new: 2.	overrideTokens := OrderedCollection new: 2.	staticTokens := OrderedCollection new: 2.	unownedTokens := OrderedCollection new: 2.	unownedLeftParensafeRightParenTokens := OrderedCollection new: 2.	unownedLeftParenunsafeRightParenTokens := OrderedCollection new: 2.	weakTokens := OrderedCollection new: 2.	inializers := OrderedCollection new: 2.	commaTokens := OrderedCollection new: 2.	colonTokens := OrderedCollection new: 2.	minusGreaterThanTokens := OrderedCollection new: 2.	periodTokens := OrderedCollection new: 2.	questionMarkTokens := OrderedCollection new: 2.	bangTokens := OrderedCollection new: 2.	protocolTokens := OrderedCollection new: 2.	lessThanTokens := OrderedCollection new: 2.	greaterThanTokens := OrderedCollection new: 2.	typeTokens := OrderedCollection new: 2.	periodPeriodPeriodTokens := OrderedCollection new: 2.	inoutTokens := OrderedCollection new: 2.	blocks := OrderedCollection new: 2.! !SwiftLoopStatementNode subclass: #SwiftWhileStatementNode	instanceVariableNames: 'whileToken expression block'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftWhileStatementNode methodsFor: 'generated'!tokenVariables	^ #(#whileToken #semicolonToken)! !!SwiftWhileStatementNode methodsFor: 'generated'!expression	^ expression! !!SwiftWhileStatementNode methodsFor: 'generated'!block	^ block! !!SwiftWhileStatementNode methodsFor: 'generated'!whileToken	^ whileToken! !!SwiftWhileStatementNode methodsFor: 'generated'!expression: anObject	expression := anObject! !!SwiftWhileStatementNode methodsFor: 'generated'!block: aSwiftBlockNode	self block notNil		ifTrue: [ self block parent: nil ].	block := aSwiftBlockNode.	self block notNil		ifTrue: [ self block parent: self ]! !!SwiftWhileStatementNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitWhileStatement: self! !!SwiftWhileStatementNode methodsFor: 'generated'!nodeVariables	^ #(#block)! !!SwiftWhileStatementNode methodsFor: 'generated'!otherVariables	^ #(#expression)! !!SwiftWhileStatementNode methodsFor: 'generated'!whileToken: aSmaCCToken	whileToken := aSmaCCToken! !SwiftParseNode subclass: #SwiftWildcardExpressionNode	instanceVariableNames: '_Token'	classVariableNames: ''	package: 'SmaCC_Swift'!!SwiftWildcardExpressionNode methodsFor: 'generated'!_Token	^ _Token! !!SwiftWildcardExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#_Token)! !!SwiftWildcardExpressionNode methodsFor: 'generated'!_Token: aSmaCCToken	_Token := aSmaCCToken! !!SwiftWildcardExpressionNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitWildcardExpression: self! !