TestCase subclass: #SmaCCRewriteTest	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_Tests'!!SmaCCRewriteTest methodsFor: 'private'!compareRewrite: sourceString isEqualTo: resultString using: aSmaCCRewriteEngine	| tree rewriteResult |	tree := self parserClass parse: sourceString.	rewriteResult := aSmaCCRewriteEngine rewriteTree: tree.	self assert: rewriteResult = resultString! !!SmaCCRewriteTest methodsFor: 'private'!whitespacePostfixRewriter	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'Parser: SmaCCRewriteTestParser					>>>`a` `op{beToken}` `b`<<<					->					>>>`\a\` `\b\` `op`<<<').	^ rewriter! !!SmaCCRewriteTest methodsFor: 'private'!lispRewriter	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'Parser: SmaCCRewriteTestParser					>>>`a{testBlock: [:node | 									| myParent grandParent | 									myParent := node parent. 									grandParent := myParent parent.									myParent class = grandParent class and: [myParent operator = grandParent operator]]}`								`op{beToken;testBlock: [:token | token value ~= ''^'']}` `b`<<<					->					>>>`a` `b`<<<					>>>`a`^`b`<<<					->					>>>(expt `a` `b`)<<<					>>>`a` `op{beToken}` `b`<<<					->					>>>(`op` `a` `b`)<<<').	^ rewriter! !!SmaCCRewriteTest methodsFor: 'private'!parserClass	^ SmaCCRewriteTestParser! !!SmaCCRewriteTest methodsFor: 'private'!postfixRewriter	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'Parser: SmaCCRewriteTestParser					>>>`a` `op{beToken}` `b`<<<					->					>>>`a` `b` `op`<<<').	^ rewriter! !!SmaCCRewriteTest methodsFor: 'tests'!testExpressions	| stream coreExpression |	stream := WriteStream on: String new.	(1 to: 25)		do: [ :i | stream nextPutAll: '1 +' ]		separatedBy: [ stream space ].	coreExpression := stream contents.	self		compareRewrite: coreExpression , ' 1'		isEqualTo: '1 ' , coreExpression		using: self postfixRewriter! !!SmaCCRewriteTest methodsFor: 'tests'!testWithParens	self		compareRewrite: '1+(2+3)'		isEqualTo: '1 2 3 + +'		using: self postfixRewriter! !!SmaCCRewriteTest methodsFor: 'tests'!testMultipleInsertAfters	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'SmaCCRewriteTestBinaryExpressionNode					->					[match parent notNil 						ifTrue:							[self insert: ''()'' after: match.							self insert: ''[]'' after: match].					self continue]').	self compareRewrite: '1+1+1' isEqualTo: '1+1()[]+1' using: rewriter! !!SmaCCRewriteTest methodsFor: 'tests'!testCodeExpressionToRemoveParens	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'Parser: SmaCCRewriteTestParser					>>>`a{testBlock: [:node | node leftParens notEmpty]}`<<<					->					>>>``match leftParens do: [:each | self delete: each].							match rightParens do: [:each | self delete: each].							match nodesDo: [:each | self rewrite: each]``<<<').	self		compareRewrite: '(1)+ ( 1 +(1))'		isEqualTo: '1+  1 +1'		using: rewriter! !!SmaCCRewriteTest methodsFor: 'tests'!testOneExpression	self		compareRewrite: '2+3'		isEqualTo: '2 3 +'		using: self postfixRewriter! !!SmaCCRewriteTest methodsFor: 'tests'!testTypeAddParens	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'Parser: SmaCCRewriteTestParser					SmaCCRewriteTestBinaryExpressionNode					->					>>>`(left)` `operator` `(right)`<<<').	self		compareRewrite: '1+(1+1)'		isEqualTo: '(1) + ((1) + (1))'		using: rewriter! !!SmaCCRewriteTest methodsFor: 'tests'!testWhitespace	self		compareRewrite:			'1+	2	*3'		isEqualTo:			'1 	2	 3 * +'		using: self whitespacePostfixRewriter! !!SmaCCRewriteTest methodsFor: 'tests'!testAddParens	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'Parser: SmaCCRewriteTestParser					>>>`a` `op{beToken}` `b`<<<					->					>>>`(a)` `op` `(b)`<<<').	self		compareRewrite: '1+(1+1)'		isEqualTo: '(1) + ((1) + (1))'		using: rewriter! !!SmaCCRewriteTest methodsFor: 'tests'!testNoChanges	self compareRewrite: '2' isEqualTo: '2' using: self postfixRewriter! !!SmaCCRewriteTest methodsFor: 'tests'!testCodeToRemoveParens	| rewriter |	rewriter := SmaCCRewriteEngine new.	rewriter		rewriteRule:			(SmaCCRewriteRuleFileParser				parse:					'SmaCCRewriteTestExpressionNode					->					[match leftParens do: [:each | self delete: each].					self processChildren.					match rightParens do: [:each | self delete: each]]').	self		compareRewrite: '(1)+ ( 1 +(1))'		isEqualTo: '1+  1 +1'		using: rewriter! !!SmaCCRewriteTest methodsFor: 'tests'!testLispExpressions	self		compareRewrite: '1+2*3^4+5'		isEqualTo: '(+ 1 (* 2 (expt 3 4)) 5)'		using: self lispRewriter! !!SmaCCRewriteTest methodsFor: 'tests'!testTwoExpressions	self		compareRewrite: '1+2*3'		isEqualTo: '1 2 3 * +'		using: self postfixRewriter! !SmaCCParseNode subclass: #SmaCCRewriteTestExpressionNode	instanceVariableNames: 'leftParens rightParens'	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_Tests'!!SmaCCRewriteTestExpressionNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	leftParens := OrderedCollection new: 2.	rightParens := OrderedCollection new: 2.! !!SmaCCRewriteTestExpressionNode methodsFor: 'generated'!leftParens: anOrderedCollection	leftParens := anOrderedCollection! !!SmaCCRewriteTestExpressionNode methodsFor: 'generated'!leftParens	^ leftParens! !!SmaCCRewriteTestExpressionNode methodsFor: 'generated'!acceptVisitor: anExpressionVisitor	^ anExpressionVisitor visitExpression: self! !!SmaCCRewriteTestExpressionNode methodsFor: 'generated'!rightParens: anOrderedCollection	rightParens := anOrderedCollection! !!SmaCCRewriteTestExpressionNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#leftParens #rightParens)! !!SmaCCRewriteTestExpressionNode methodsFor: 'generated'!rightParens	^ rightParens! !SmaCCRewriteTestExpressionNode subclass: #SmaCCRewriteTestBinaryExpressionNode	instanceVariableNames: 'left operator right'	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_Tests'!!SmaCCRewriteTestBinaryExpressionNode methodsFor: 'generated'!right: aSmaCCRewriteTestExpressionNode	self right notNil		ifTrue: [ self right parent: nil ].	right := aSmaCCRewriteTestExpressionNode.	self right notNil		ifTrue: [ self right parent: self ]! !!SmaCCRewriteTestBinaryExpressionNode methodsFor: 'generated'!tokenVariables	^ #(#operator)! !!SmaCCRewriteTestBinaryExpressionNode methodsFor: 'generated'!nodeVariables	^ #(#left #right)! !!SmaCCRewriteTestBinaryExpressionNode methodsFor: 'generated'!left	^ left! !!SmaCCRewriteTestBinaryExpressionNode methodsFor: 'generated'!operator	^ operator! !!SmaCCRewriteTestBinaryExpressionNode methodsFor: 'generated'!acceptVisitor: anExpressionVisitor	^ anExpressionVisitor visitBinaryExpression: self! !!SmaCCRewriteTestBinaryExpressionNode methodsFor: 'generated'!operator: aSmaCCToken	operator := aSmaCCToken! !!SmaCCRewriteTestBinaryExpressionNode methodsFor: 'generated'!left: aSmaCCRewriteTestExpressionNode	self left notNil		ifTrue: [ self left parent: nil ].	left := aSmaCCRewriteTestExpressionNode.	self left notNil		ifTrue: [ self left parent: self ]! !!SmaCCRewriteTestBinaryExpressionNode methodsFor: 'generated'!right	^ right! !SmaCCParseNodeVisitor subclass: #SmaCCRewriteTestExpressionNodeVisitor	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_Tests'!!SmaCCRewriteTestExpressionNodeVisitor methodsFor: 'generated'!visitBinaryExpression: aBinaryExpression	^ self visitExpression: aBinaryExpression! !!SmaCCRewriteTestExpressionNodeVisitor methodsFor: 'generated'!visitExpression: anExpression	^ self visitSmaCCParseNode: anExpression! !!SmaCCRewriteTestExpressionNodeVisitor methodsFor: 'generated'!visitNumber: aNumber	^ self visitExpression: aNumber! !SmaCCRewriteTestExpressionNode subclass: #SmaCCRewriteTestNumberNode	instanceVariableNames: 'number'	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_Tests'!!SmaCCRewriteTestNumberNode methodsFor: 'generated'!number	^ number! !!SmaCCRewriteTestNumberNode methodsFor: 'generated'!number: aSmaCCToken	number := aSmaCCToken! !!SmaCCRewriteTestNumberNode methodsFor: 'generated'!tokenVariables	^ #(#number)! !!SmaCCRewriteTestNumberNode methodsFor: 'generated'!acceptVisitor: anExpressionVisitor	^ anExpressionVisitor visitNumber: self! !SmaCCGLRParser subclass: #SmaCCRewriteTestParser	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_Tests'!!SmaCCRewriteTestParser methodsFor: 'generated-reduction actions'!reduceActionForExpression1: nodes	| result |	result := nodes at: 2.	result addFirstToken: (nodes at: 1) to: result leftParens.	result addToken: (nodes at: 3) to: result rightParens.	^ result! !!SmaCCRewriteTestParser methodsFor: 'generated-reduction actions'!reduceActionForExpression4: nodes	| result |	result := SmaCCRewriteTestBinaryExpressionNode new.	result left: (nodes at: 1).	result operator: (nodes at: 2).	result right: (nodes at: 3).	^ result! !!SmaCCRewriteTestParser methodsFor: 'generated-reduction actions'!reduceActionForExpression7: nodes	| result |	result := SmaCCRewriteTestNumberNode new.	result number: (nodes at: 1).	^ result! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SmaCCRewriteTestParser class	instanceVariableNames: ''!!SmaCCRewriteTestParser class methodsFor: 'generated-accessing'!scannerClass	^SmaCCRewriteTestScanner! !!SmaCCRewriteTestParser class methodsFor: 'generated-accessing'!cacheId	^'2019-04-15T17:16:14.067598-05:00'! !!SmaCCRewriteTestParser class methodsFor: 'generated'!definitionComment"%glr;%left ""+"" ""-"";%left ""*"" ""/"";%right ""^"";%prefix SmaCCRewriteTest;%suffix Node;%root Expression;%ignore_variables leftParen rightParen;%hierarchy Expression (	Number	BinaryExpression	);<number>	: \d+	;<whitespace>	: \s+	;<patternToken>	: \` [^\`]* \`	;Expression	: ""("" 'leftParen' Expression "")"" 'rightParen' {{Expression}}	| Expression 'left' ""+"" 'operator' Expression 'right' {{BinaryExpression}}	| Expression 'left' ""-"" 'operator' Expression 'right' {{BinaryExpression}}	| Expression 'left' ""*"" 'operator' Expression 'right' {{BinaryExpression}}	| Expression 'left' ""/"" 'operator' Expression 'right' {{BinaryExpression}}	| Expression 'left' ""^"" 'operator' Expression 'right' {{BinaryExpression}}	| <number> 'number' {{Number}}	;"! !!SmaCCRewriteTestParser class methodsFor: 'generated'!symbolTypes	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCRewriteTestExpressionNode #SmaCCRewriteTestExpressionNode #SmaCCToken #SmaCCErrorNode)! !!SmaCCRewriteTestParser class methodsFor: 'generated'!startingStateForExpression	^ 1! !!SmaCCRewriteTestParser class methodsFor: 'generated'!reduceTable^#(	#(12 1 #reduceActionForExpression7: 290823 false ) 	#(12 3 #reduceActionForExpression1: 290817 false ) 	#(12 3 #reduceActionForExpression4: 290820 false ) 	#(12 3 #reduceActionForExpression4: 290818 false ) 	#(12 3 #reduceActionForExpression4: 290819 false ) 	#(12 3 #reduceActionForExpression4: 290821 false ) 	#(12 3 #reduceActionForExpression4: 290822 false )	).! !!SmaCCRewriteTestParser class methodsFor: 'generated'!symbolNames	^ #('"("' '")"' '"*"' '"+"' '"-"' '"/"' '"^"' '<number>' '<whitespace>' '<patternToken>' 'B e g i n' 'Expression' 'E O F' 'error')! !!SmaCCRewriteTestParser class methodsFor: 'generated'!transitionTable^#(#[1 0 9 0 1 0 13 0 8 0 17 0 12] #[1 0 9 0 1 0 13 0 8 0 21 0 12] #[0 0 6 0 2 0 3 0 4 0 5 0 6 0 7 0 13] #[1 0 25 0 3 0 29 0 4 0 33 0 5 0 37 0 6 0 41 0 7 0 0 0 13] #[1 0 45 0 2 0 25 0 3 0 29 0 4 0 33 0 5 0 37 0 6 0 41 0 7] #[1 0 9 0 1 0 13 0 8 0 49 0 12] #[1 0 9 0 1 0 13 0 8 0 53 0 12] #[1 0 9 0 1 0 13 0 8 0 57 0 12] #[1 0 9 0 1 0 13 0 8 0 61 0 12] #[1 0 9 0 1 0 13 0 8 0 65 0 12] #[0 0 10 0 2 0 3 0 4 0 5 0 6 0 7 0 13] #[1 0 14 0 2 0 14 0 3 0 14 0 4 0 14 0 5 0 14 0 6 0 41 0 7 0 14 0 13] #[1 0 18 0 2 0 25 0 3 0 18 0 4 0 18 0 5 0 37 0 6 0 41 0 7 0 18 0 13] #[1 0 22 0 2 0 25 0 3 0 22 0 4 0 22 0 5 0 37 0 6 0 41 0 7 0 22 0 13] #[1 0 26 0 2 0 26 0 3 0 26 0 4 0 26 0 5 0 26 0 6 0 41 0 7 0 26 0 13] #[1 0 30 0 2 0 30 0 3 0 30 0 4 0 30 0 5 0 30 0 6 0 41 0 7 0 30 0 13]	).! !SmaCCScanner subclass: #SmaCCRewriteTestScanner	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Rewrite_Engine_Tests'!!SmaCCRewriteTestScanner methodsFor: 'generated'!scanForToken	self step.	currentCharacter == $(		ifTrue: [ ^ self recordAndReportMatch: #(1) ].	currentCharacter == $)		ifTrue: [ ^ self recordAndReportMatch: #(2) ].	currentCharacter == $*		ifTrue: [ ^ self recordAndReportMatch: #(3) ].	currentCharacter == $+		ifTrue: [ ^ self recordAndReportMatch: #(4) ].	currentCharacter == $-		ifTrue: [ ^ self recordAndReportMatch: #(5) ].	currentCharacter == $/		ifTrue: [ ^ self recordAndReportMatch: #(6) ].	currentCharacter == $^		ifTrue: [ ^ self recordAndReportMatch: #(7) ].	currentCharacter == $`		ifTrue: [ [ self step.			currentCharacter == $`				ifTrue: [ ^ self recordAndReportMatch: #(10) ].			true ] whileTrue ].	currentCharacter isDigit		ifTrue: [ [ self recordMatch: #(8).			self step.			currentCharacter isDigit ] whileTrue.			^ self reportLastMatch ].	(currentCharacter isSeparator		or: [ currentCharacter == Character pageUp ])		ifTrue: [ [ self recordMatch: #(9).			self step.			currentCharacter isSeparator				or: [ currentCharacter == Character pageUp ] ] whileTrue ].	^ self reportLastMatch! !!SmaCCRewriteTestScanner methodsFor: 'generated'!tokenActions	^ #(nil nil nil nil nil nil nil nil #whitespace #patternToken)! !!SmaCCRewriteTestScanner methodsFor: 'generated'!emptySymbolTokenId	^ 13! !!SmaCCRewriteTestScanner methodsFor: 'generated'!errorTokenId	^ 14! !