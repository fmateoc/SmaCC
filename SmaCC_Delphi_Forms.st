SmaCCParseNode subclass: #DelphiFormParseNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormParseNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitParse: self! !DelphiFormParseNode subclass: #DelphiFormArrayNode	instanceVariableNames: 'left values right'	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormArrayNode methodsFor: 'generated'!right: aSmaCCToken	right := aSmaCCToken! !!DelphiFormArrayNode methodsFor: 'generated'!tokenVariables	^ #(#left #right)! !!DelphiFormArrayNode methodsFor: 'generated'!values: anOrderedCollection	self setParents: self values to: nil.	values := anOrderedCollection.	self setParents: self values to: self! !!DelphiFormArrayNode methodsFor: 'generated'!values	^ values! !!DelphiFormArrayNode methodsFor: 'generated'!left	^ left! !!DelphiFormArrayNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitArray: self! !!DelphiFormArrayNode methodsFor: 'generated'!compositeNodeVariables	^ #(#values)! !!DelphiFormArrayNode methodsFor: 'generated'!left: aSmaCCToken	left := aSmaCCToken! !!DelphiFormArrayNode methodsFor: 'generated'!right	^ right! !!DelphiFormArrayNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	values := OrderedCollection new: 2.! !DelphiFormParseNode subclass: #DelphiFormByteArrayNode	instanceVariableNames: 'left lines right'	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormByteArrayNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	lines := OrderedCollection new: 2.! !!DelphiFormByteArrayNode methodsFor: 'generated'!right	^ right! !!DelphiFormByteArrayNode methodsFor: 'generated'!compositeTokenVariables	^ #(#lines)! !!DelphiFormByteArrayNode methodsFor: 'generated'!lines	^ lines! !!DelphiFormByteArrayNode methodsFor: 'generated'!right: aSmaCCToken	right := aSmaCCToken! !!DelphiFormByteArrayNode methodsFor: 'generated'!left	^ left! !!DelphiFormByteArrayNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitByteArray: self! !!DelphiFormByteArrayNode methodsFor: 'generated'!tokenVariables	^ #(#left #right)! !!DelphiFormByteArrayNode methodsFor: 'generated'!left: aSmaCCToken	left := aSmaCCToken! !!DelphiFormByteArrayNode methodsFor: 'generated'!lines: anOrderedCollection	lines := anOrderedCollection! !DelphiFormParseNode subclass: #DelphiFormCombinedStringNode	instanceVariableNames: 'left plus right'	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormCombinedStringNode methodsFor: 'generated'!right: aSmaCCToken	right := aSmaCCToken! !!DelphiFormCombinedStringNode methodsFor: 'generated'!plus: aSmaCCToken	plus := aSmaCCToken! !!DelphiFormCombinedStringNode methodsFor: 'generated'!tokenVariables	^ #(#plus #right)! !!DelphiFormCombinedStringNode methodsFor: 'generated'!nodeVariables	^ #(#left)! !!DelphiFormCombinedStringNode methodsFor: 'generated'!left	^ left! !!DelphiFormCombinedStringNode methodsFor: 'generated'!plus	^ plus! !!DelphiFormCombinedStringNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitCombinedString: self! !!DelphiFormCombinedStringNode methodsFor: 'generated'!left: aDelphiFormParseNode	self left notNil		ifTrue: [ self left parent: nil ].	left := aDelphiFormParseNode.	self left notNil		ifTrue: [ self left parent: self ]! !!DelphiFormCombinedStringNode methodsFor: 'generated'!right	^ right! !DelphiFormParseNode subclass: #DelphiFormItemNode	instanceVariableNames: 'itemToken properties endToken'	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormItemNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	properties := OrderedCollection new: 2.! !!DelphiFormItemNode methodsFor: 'generated'!endToken	^ endToken! !!DelphiFormItemNode methodsFor: 'generated'!properties: anOrderedCollection	self setParents: self properties to: nil.	properties := anOrderedCollection.	self setParents: self properties to: self! !!DelphiFormItemNode methodsFor: 'generated'!tokenVariables	^ #(#itemToken #endToken)! !!DelphiFormItemNode methodsFor: 'generated'!itemToken	^ itemToken! !!DelphiFormItemNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitItem: self! !!DelphiFormItemNode methodsFor: 'generated'!itemToken: aSmaCCToken	itemToken := aSmaCCToken! !!DelphiFormItemNode methodsFor: 'generated'!endToken: aSmaCCToken	endToken := aSmaCCToken! !!DelphiFormItemNode methodsFor: 'generated'!compositeNodeVariables	^ #(#properties)! !!DelphiFormItemNode methodsFor: 'generated'!properties	^ properties! !DelphiFormParseNode subclass: #DelphiFormLiteralNode	instanceVariableNames: 'value'	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormLiteralNode methodsFor: 'generated'!tokenVariables	^ #(#value)! !!DelphiFormLiteralNode methodsFor: 'generated'!value	^ value! !!DelphiFormLiteralNode methodsFor: 'generated'!value: aSmaCCToken	value := aSmaCCToken! !!DelphiFormLiteralNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitLiteral: self! !DelphiFormLiteralNode subclass: #DelphiFormBooleanNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormBooleanNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitBoolean: self! !DelphiFormLiteralNode subclass: #DelphiFormBytesNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormBytesNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitBytes: self! !DelphiFormLiteralNode subclass: #DelphiFormFloatNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormFloatNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitFloat: self! !DelphiFormLiteralNode subclass: #DelphiFormIntegerNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormIntegerNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitInteger: self! !DelphiFormParseNode subclass: #DelphiFormNamedValueNode	instanceVariableNames: 'name'	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormNamedValueNode methodsFor: 'generated'!name: aDelphiFormQualifiedNameNode	self name notNil		ifTrue: [ self name parent: nil ].	name := aDelphiFormQualifiedNameNode.	self name notNil		ifTrue: [ self name parent: self ]! !!DelphiFormNamedValueNode methodsFor: 'generated'!name	^ name! !!DelphiFormNamedValueNode methodsFor: 'generated'!nodeVariables	^ #(#name)! !!DelphiFormNamedValueNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitNamedValue: self! !DelphiFormParseNode subclass: #DelphiFormObjectArrayNode	instanceVariableNames: 'left items right'	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormObjectArrayNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	items := OrderedCollection new: 2.! !!DelphiFormObjectArrayNode methodsFor: 'generated'!right	^ right! !!DelphiFormObjectArrayNode methodsFor: 'generated'!items: anOrderedCollection	self setParents: self items to: nil.	items := anOrderedCollection.	self setParents: self items to: self! !!DelphiFormObjectArrayNode methodsFor: 'generated'!right: aSmaCCToken	right := aSmaCCToken! !!DelphiFormObjectArrayNode methodsFor: 'generated'!tokenVariables	^ #(#left #right)! !!DelphiFormObjectArrayNode methodsFor: 'generated'!left	^ left! !!DelphiFormObjectArrayNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitObjectArray: self! !!DelphiFormObjectArrayNode methodsFor: 'generated'!compositeNodeVariables	^ #(#items)! !!DelphiFormObjectArrayNode methodsFor: 'generated'!items	^ items! !!DelphiFormObjectArrayNode methodsFor: 'generated'!left: aSmaCCToken	left := aSmaCCToken! !DelphiFormParseNode subclass: #DelphiFormObjectNode	instanceVariableNames: 'objectTypeToken nameToken colonToken typeToken left indexToken right properties endToken'	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormObjectNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	properties := OrderedCollection new: 2.! !!DelphiFormObjectNode methodsFor: 'generated'!nameToken: aSmaCCToken	nameToken := aSmaCCToken! !!DelphiFormObjectNode methodsFor: 'generated'!indexToken: aSmaCCToken	indexToken := aSmaCCToken! !!DelphiFormObjectNode methodsFor: 'generated'!properties: anOrderedCollection	self setParents: self properties to: nil.	properties := anOrderedCollection.	self setParents: self properties to: self! !!DelphiFormObjectNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitObject: self! !!DelphiFormObjectNode methodsFor: 'generated'!left: aSmaCCToken	left := aSmaCCToken! !!DelphiFormObjectNode methodsFor: 'generated'!colonToken: aSmaCCToken	colonToken := aSmaCCToken! !!DelphiFormObjectNode methodsFor: 'generated'!left	^ left! !!DelphiFormObjectNode methodsFor: 'generated'!endToken	^ endToken! !!DelphiFormObjectNode methodsFor: 'generated'!endToken: aSmaCCToken	endToken := aSmaCCToken! !!DelphiFormObjectNode methodsFor: 'generated'!nameToken	^ nameToken! !!DelphiFormObjectNode methodsFor: 'generated'!properties	^ properties! !!DelphiFormObjectNode methodsFor: 'generated'!right	^ right! !!DelphiFormObjectNode methodsFor: 'generated'!right: aSmaCCToken	right := aSmaCCToken! !!DelphiFormObjectNode methodsFor: 'generated'!typeToken	^ typeToken! !!DelphiFormObjectNode methodsFor: 'generated'!objectTypeToken: aSmaCCToken	objectTypeToken := aSmaCCToken! !!DelphiFormObjectNode methodsFor: 'generated'!typeToken: aSmaCCToken	typeToken := aSmaCCToken! !!DelphiFormObjectNode methodsFor: 'generated'!tokenVariables	^ #(#objectTypeToken #nameToken #colonToken #typeToken #left #indexToken #right #endToken)! !!DelphiFormObjectNode methodsFor: 'generated'!compositeNodeVariables	^ #(#properties)! !!DelphiFormObjectNode methodsFor: 'generated'!colonToken	^ colonToken! !!DelphiFormObjectNode methodsFor: 'generated'!objectTypeToken	^ objectTypeToken! !!DelphiFormObjectNode methodsFor: 'generated'!indexToken	^ indexToken! !SmaCCParseNodeVisitor subclass: #DelphiFormParseNodeVisitor	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitBoolean: aBoolean	^ self visitLiteral: aBoolean! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitCombinedString: aCombinedString	^ self visitParse: aCombinedString! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitObject: anObject	^ self visitParse: anObject! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitString: aString	^ self visitLiteral: aString! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitByteArray: aByteArray	^ self visitParse: aByteArray! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitLiteral: aLiteral	^ self visitParse: aLiteral! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitFloat: aFloat	^ self visitLiteral: aFloat! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitInteger: anInteger	^ self visitLiteral: anInteger! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitNamedValue: aNamedValue	^ self visitParse: aNamedValue! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitBytes: aBytes	^ self visitLiteral: aBytes! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitArray: anArray	^ self visitParse: anArray! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitParse: aParse	^ self visitSmaCCParseNode: aParse! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitQualifiedName: aQualifiedName	^ self visitParse: aQualifiedName! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitSet: aSet	^ self visitParse: aSet! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitObjectArray: anObjectArray	^ self visitParse: anObjectArray! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitProperty: aProperty	^ self visitParse: aProperty! !!DelphiFormParseNodeVisitor methodsFor: 'generated'!visitItem: anItem	^ self visitParse: anItem! !SmaCCGLRParser subclass: #DelphiFormParser	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForNumber1: nodes	| result |	result := DelphiFormIntegerNode new.	result value: (nodes at: 1).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForIndex2: nodes	| result |	result := Array new: 3.	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	result at: 3 put: (nodes at: 3).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForValue4: nodes	| result |	result := DelphiFormNamedValueNode new.	result name: (nodes at: 1).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForSetItems2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 2).	self add: (nodes at: 3) to: (result at: 1).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForQualifiedName2: nodes	| result |	result := nodes at: 1.	result addToken: (nodes at: 2) to: result periods.	result addToken: (nodes at: 3) to: result names.	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForAssignment1: nodes	| result |	result := DelphiFormPropertyNode new.	result name: (nodes at: 1).	result equalsToken: (nodes at: 2).	result value: (nodes at: 3).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForByteArray1: nodes	| result |	result := DelphiFormByteArrayNode new.	result left: (nodes at: 1).	result addTokens: (nodes at: 2) to: result lines.	result right: (nodes at: 3).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForQualifiedName1: nodes	| result |	result := DelphiFormQualifiedNameNode new.	result addToken: (nodes at: 1) to: result names.	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForString1: nodes	| result |	result := DelphiFormStringNode new.	result value: (nodes at: 1).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForValues2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: result.	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForObject2: nodes	| result |	result := DelphiFormObjectNode new.	result objectTypeToken: (nodes at: 1).	result typeToken: (nodes at: 2).	result left: ((nodes at: 3) at: 1).	result indexToken: ((nodes at: 3) at: 2).	result right: ((nodes at: 3) at: 3).	result addNodes: (nodes at: 4) to: result properties.	result endToken: (nodes at: 5).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForObject1: nodes	| result |	result := DelphiFormObjectNode new.	result objectTypeToken: (nodes at: 1).	result nameToken: (nodes at: 2).	result colonToken: (nodes at: 3).	result typeToken: (nodes at: 4).	result left: ((nodes at: 5) at: 1).	result indexToken: ((nodes at: 5) at: 2).	result right: ((nodes at: 5) at: 3).	result addNodes: (nodes at: 6) to: result properties.	result endToken: (nodes at: 7).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForNumber2: nodes	| result |	result := DelphiFormFloatNode new.	result value: (nodes at: 1).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForItem1: nodes	| result |	result := DelphiFormItemNode new.	result itemToken: (nodes at: 1).	result addNodes: (nodes at: 2) to: result properties.	result endToken: (nodes at: 3).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForSetItems_1: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForIndex1: nodes	| result |	result := Array new: 3.	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForObjectArray1: nodes	| result |	result := DelphiFormObjectArrayNode new.	result left: (nodes at: 1).	result addNodes: (nodes at: 2) to: result items.	result right: (nodes at: 3).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForSetItems_2: nodes	| result |	result := nodes at: 1.	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForString2: nodes	| result |	result := DelphiFormCombinedStringNode new.	result left: (nodes at: 1).	result plus: (nodes at: 2).	result right: (nodes at: 3).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForSet1: nodes	| result |	result := DelphiFormSetNode new.	result left: (nodes at: 1).	result addTokens: ((nodes at: 2) at: 1) to: result items.	result addTokens: ((nodes at: 2) at: 2) to: result commas.	result right: (nodes at: 3).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForValues1: nodes	| result |	result := OrderedCollection new: 2.	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForSetItems1: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForArray1: nodes	| result |	result := DelphiFormArrayNode new.	result left: (nodes at: 1).	result addNodes: (nodes at: 2) to: result values.	result right: (nodes at: 3).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForNumber3: nodes	| result |	result := DelphiFormBytesNode new.	result value: (nodes at: 1).	^ result! !!DelphiFormParser methodsFor: 'generated-reduction actions'!reduceActionForBoolean1: nodes	| result |	result := DelphiFormBooleanNode new.	result value: (nodes at: 1).	^ result! !!DelphiFormParser methodsFor: 'testing'!tryAllTokens	^ currentToken ids includes: scanner bytesId! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DelphiFormParser class	instanceVariableNames: ''!!DelphiFormParser class methodsFor: 'generated-accessing'!scannerClass	^DelphiFormScanner! !!DelphiFormParser class methodsFor: 'generated-accessing'!cacheId	^'2019-07-02T17:32:20.615123-05:00'! !!DelphiFormParser class methodsFor: 'file types'!fileExtension	^ '.dfm'! !!DelphiFormParser class methodsFor: 'file types'!fileExtensionType	^ 'Delphi form files'! !!DelphiFormParser class methodsFor: 'generated'!startingStateForForm	^ 1! !!DelphiFormParser class methodsFor: 'generated'!definitionComment"%glr;%ignorecase;%id <bytes>;%prefix DelphiForm;%suffix Node;%root Parse;%hierarchy Literal (Boolean Float Integer String Bytes);%start Property Object Value Item;<boolean>	: true | false	;<LETTER> 	: <isLetter> | _	;<DIGIT> 	: [0-9] 	;<name>	: <LETTER> (<LETTER>|<DIGIT>)*	;<positive_integer>	: \d+	;<integer>	: \-? <positive_integer>	;<float>	: <integer> (\. <positive_integer> | d | (\. <positive_integer>?)? e [\+\-]? <positive_integer>)	;<string>	: (\' [^\']* \' | (\#\d+))+	;<bytes>	: ([0-9a-f]{2,2})+	;<whitespace>	: \s+	;<patternToken>	: (\`  [^\`]* \`)+	;Form	: Object	;Object	: ObjectType 'objectTypeToken' <name> 'nameToken' "":"" 'colonToken' <name> 'typeToken' Index Properties ""end"" 'endToken' {{Object}}	| ObjectType 'objectTypeToken' <name> 'typeToken' Index Properties ""end"" 'endToken' {{Object}}	;ObjectType	: ""object""	| ""inherited""	| ""inline""	;Index	:	| ""["" 'left' <integer> 'indexToken' ""]"" 'right'	;Properties	:	| Properties Property 'property'	;Property	: Assignment	| Object	;Assignment	: QualifiedName 'name' ""="" 'equalsToken' Value 'value' {{Property}}	;Value	: Number	| String	| Set	| QualifiedName 'name' {{NamedValue}}	| Array	| ByteArray	| Boolean	| ObjectArray	;Number	: <integer> 'value' {{Integer}}	| <float> 'value' {{Float}}	| <bytes> 'value' {{Bytes}}	;String	: <string> 'value' {{String}}	| String 'left' ""+"" 'plus' <string> 'right' {{CombinedString}}	;Set	: ""["" 'left' SetItems_ ""]"" 'right' {{Set}}	;SetItems_	:	| SetItems	;SetItems	: <name> 'item' 	| SetItems "","" 'comma' <name> 'item' 	;Array	: ""("" 'left' Values "")"" 'right' {{Array}}	;Values	: 	| Values Value 'value'	;ByteArray	: ""{"" 'left' ByteData ""}"" 'right' {{ByteArray}}	;ByteData	: 	| ByteData <bytes> 'line'	;Boolean	: <boolean> 'value' {{Boolean}}	;ObjectArray	: ""<"" 'left' Items "">"" 'right' {{ObjectArray}}	;Items	: 	| Items Item 'item' 	;Item	: ""item"" 'itemToken' Properties ""end"" 'endToken' {{Item}}	;QualifiedName	: <name> 'name' {{QualifiedName}}	| QualifiedName ""."" 'period' <name> 'name' {{QualifiedName}}	;"! !!DelphiFormParser class methodsFor: 'generated'!startingStateForItem	^ 5! !!DelphiFormParser class methodsFor: 'generated'!symbolTypes	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #DelphiFormObjectNode #DelphiFormObjectNode #DelphiFormObjectNode #SmaCCToken #OrderedCollection #OrderedCollection #DelphiFormParseNode #DelphiFormPropertyNode #DelphiFormParseNode #DelphiFormLiteralNode #DelphiFormParseNode #DelphiFormSetNode #OrderedCollection #OrderedCollection #DelphiFormArrayNode #OrderedCollection #DelphiFormByteArrayNode #OrderedCollection #DelphiFormBooleanNode #DelphiFormObjectArrayNode #OrderedCollection #DelphiFormItemNode #DelphiFormQualifiedNameNode #SmaCCToken #SmaCCErrorNode)! !!DelphiFormParser class methodsFor: 'generated'!symbolNames	^ #('"("' '")"' '"+"' '","' '"."' '":"' '"<"' '"="' '">"' '"["' '"]"' '"end"' '"inherited"' '"inline"' '"item"' '"object"' '"{"' '"}"' '<boolean>' '<name>' '<integer>' '<float>' '<string>' '<bytes>' '<whitespace>' '<patternToken>' 'B e g i n' 'Form' 'Object' 'ObjectType' 'Index' 'Properties' 'Property' 'Assignment' 'Value' 'Number' 'String' 'Set' 'SetItems_' 'SetItems' 'Array' 'Values' 'ByteArray' 'ByteData' 'Boolean' 'ObjectArray' 'Items' 'Item' 'QualifiedName' 'E O F' 'error')! !!DelphiFormParser class methodsFor: 'generated'!startingStateForProperty	^ 2! !!DelphiFormParser class methodsFor: 'generated'!startingStateForObject	^ 3! !!DelphiFormParser class methodsFor: 'generated'!startingStateForValue	^ 4! !!DelphiFormParser class methodsFor: 'generated'!reduceTable^#(	#(30 1 #liftFirstValue: 882690 false ) 	#(30 1 #liftFirstValue: 882691 false ) 	#(30 1 #liftFirstValue: 882689 false ) 	#(28 1 #liftFirstValue: 620545 false ) 	#(49 1 #reduceActionForQualifiedName1: 2075649 false ) 	#(33 1 #liftFirstValue: 1051650 false ) 	#(33 1 #liftFirstValue: 1051649 false ) 	#(42 0 #reduceActionForValues1: 1715201 false ) 	#(47 0 #reduceActionForValues1: 1971201 false ) 	#(39 0 #reduceActionForSetItems_1: 1562625 false ) 	#(44 0 #reduceActionForValues1: 1817601 false ) 	#(45 1 #reduceActionForBoolean1: 1861633 false ) 	#(36 1 #reduceActionForNumber1: 1299457 false ) 	#(36 1 #reduceActionForNumber2: 1299458 false ) 	#(37 1 #reduceActionForString1: 1402881 false ) 	#(36 1 #reduceActionForNumber3: 1299459 false ) 	#(35 1 #liftFirstValue: 1173505 false ) 	#(35 1 #liftFirstValue: 1173506 false ) 	#(35 1 #liftFirstValue: 1173507 false ) 	#(35 1 #liftFirstValue: 1173509 false ) 	#(35 1 #liftFirstValue: 1173510 false ) 	#(35 1 #liftFirstValue: 1173511 false ) 	#(35 1 #liftFirstValue: 1173512 false ) 	#(35 1 #reduceActionForValue4: 1173508 false ) 	#(32 0 #reduceActionForValues1: 999425 false ) 	#(31 0 #reduceActionForIndex1: 936961 false ) 	#(40 1 #reduceActionForSetItems1: 1591297 false ) 	#(39 1 #reduceActionForSetItems_2: 1562626 false ) 	#(49 3 #reduceActionForQualifiedName2: 2075650 false ) 	#(34 3 #reduceActionForAssignment1: 1088513 false ) 	#(41 3 #reduceActionForArray1: 1661953 false ) 	#(42 2 #reduceActionForValues2: 1715202 false ) 	#(46 3 #reduceActionForObjectArray1: 1906689 false ) 	#(47 2 #reduceActionForValues2: 1971202 false ) 	#(38 3 #reduceActionForSet1: 1510401 false ) 	#(43 3 #reduceActionForByteArray1: 1754113 false ) 	#(44 2 #reduceActionForValues2: 1817602 false ) 	#(37 3 #reduceActionForString2: 1402882 false ) 	#(48 3 #reduceActionForItem1: 2007041 false ) 	#(32 2 #reduceActionForValues2: 999426 false ) 	#(40 3 #reduceActionForSetItems2: 1591298 false ) 	#(31 3 #reduceActionForIndex2: 936962 false ) 	#(29 5 #reduceActionForObject2: 638978 false ) 	#(29 7 #reduceActionForObject1: 638977 false )	).! !!DelphiFormParser class methodsFor: 'generated'!transitionTable^#(#[1 0 45 0 13 0 45 0 14 0 45 0 16 0 37 0 28 0 37 0 29 0 45 0 30] #[1 0 45 0 13 0 45 0 14 0 45 0 16 0 49 0 20 0 57 0 29 0 45 0 30 0 57 0 33 0 57 0 34 0 65 0 49] #[1 0 45 0 13 0 45 0 14 0 45 0 16 0 69 0 29 0 45 0 30] #[1 0 73 0 1 0 77 0 7 0 81 0 10 0 85 0 17 0 89 0 19 0 49 0 20 0 93 0 21 0 97 0 22 0 101 0 23 0 105 0 24 0 109 0 35 0 109 0 36 0 117 0 37 0 109 0 38 0 109 0 41 0 109 0 43 0 109 0 45 0 109 0 46 0 141 0 49] #[1 0 145 0 15 0 149 0 48] #[0 0 6 0 20] #[0 0 10 0 20] #[0 0 14 0 20] #[0 0 0 0 50] #[0 0 18 0 50] #[0 0 153 0 20] #[0 0 22 0 1 0 2 0 5 0 7 0 8 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 26 0 12 0 13 0 14 0 16 0 20 0 50] #[0 0 0 0 50] #[0 0 30 0 12 0 13 0 14 0 16 0 20 0 50] #[1 0 157 0 5 0 161 0 8] #[0 0 0 0 50] #[1 0 34 0 1 0 34 0 2 0 34 0 7 0 34 0 10 0 34 0 17 0 34 0 19 0 34 0 20 0 34 0 21 0 34 0 22 0 34 0 23 0 34 0 24 0 165 0 42] #[1 0 38 0 9 0 38 0 15 0 169 0 47] #[1 0 42 0 11 0 173 0 20 0 177 0 39 0 181 0 40] #[1 0 46 0 18 0 46 0 24 0 185 0 44] #[0 0 50 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 54 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 58 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 62 0 1 0 2 0 3 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 66 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 0 0 50] #[0 0 70 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[1 0 74 0 1 0 74 0 2 0 189 0 3 0 74 0 7 0 74 0 10 0 74 0 12 0 74 0 13 0 74 0 14 0 74 0 16 0 74 0 17 0 74 0 19 0 74 0 20 0 74 0 21 0 74 0 22 0 74 0 23 0 74 0 24 0 74 0 50] #[0 0 78 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 82 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 86 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 90 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 94 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[1 0 98 0 1 0 98 0 2 0 157 0 5 0 98 0 7 0 98 0 10 0 98 0 12 0 98 0 13 0 98 0 14 0 98 0 16 0 98 0 17 0 98 0 19 0 98 0 20 0 98 0 21 0 98 0 22 0 98 0 23 0 98 0 24 0 98 0 50] #[1 0 102 0 12 0 102 0 13 0 102 0 14 0 102 0 16 0 102 0 20 0 193 0 32] #[0 0 0 0 50] #[1 0 197 0 6 0 201 0 10 0 106 0 12 0 106 0 13 0 106 0 14 0 106 0 16 0 106 0 20 0 205 0 31] #[0 0 209 0 20] #[1 0 73 0 1 0 77 0 7 0 81 0 10 0 85 0 17 0 89 0 19 0 49 0 20 0 93 0 21 0 97 0 22 0 101 0 23 0 105 0 24 0 213 0 35 0 213 0 36 0 117 0 37 0 213 0 38 0 213 0 41 0 213 0 43 0 213 0 45 0 213 0 46 0 141 0 49] #[1 0 73 0 1 0 217 0 2 0 77 0 7 0 81 0 10 0 85 0 17 0 89 0 19 0 49 0 20 0 93 0 21 0 97 0 22 0 101 0 23 0 105 0 24 0 221 0 35 0 221 0 36 0 117 0 37 0 221 0 38 0 221 0 41 0 221 0 43 0 221 0 45 0 221 0 46 0 141 0 49] #[1 0 225 0 9 0 145 0 15 0 229 0 48] #[0 0 110 0 4 0 11] #[0 0 233 0 11] #[1 0 237 0 4 0 114 0 11] #[1 0 241 0 18 0 245 0 24] #[0 0 249 0 23] #[1 0 253 0 12 0 45 0 13 0 45 0 14 0 45 0 16 0 49 0 20 1 1 0 29 0 45 0 30 1 1 0 33 1 1 0 34 0 65 0 49] #[0 1 5 0 20] #[0 1 9 0 21] #[1 0 102 0 12 0 102 0 13 0 102 0 14 0 102 0 16 0 102 0 20 1 13 0 32] #[0 0 118 0 1 0 2 0 5 0 7 0 8 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 122 0 12 0 13 0 14 0 16 0 20 0 50] #[0 0 126 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 130 0 1 0 2 0 7 0 10 0 17 0 19 0 20 0 21 0 22 0 23 0 24] #[0 0 134 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 138 0 9 0 15] #[0 0 142 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 1 17 0 20] #[0 0 146 0 1 0 2 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 150 0 18 0 24] #[0 0 154 0 1 0 2 0 3 0 7 0 10 0 12 0 13 0 14 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 50] #[0 0 158 0 9 0 15 0 50] #[0 0 162 0 12 0 13 0 14 0 16 0 20] #[1 0 201 0 10 0 106 0 12 0 106 0 13 0 106 0 14 0 106 0 16 0 106 0 20 1 21 0 31] #[0 1 25 0 11] #[1 1 29 0 12 0 45 0 13 0 45 0 14 0 45 0 16 0 49 0 20 1 1 0 29 0 45 0 30 1 1 0 33 1 1 0 34 0 65 0 49] #[0 0 166 0 4 0 11] #[1 0 102 0 12 0 102 0 13 0 102 0 14 0 102 0 16 0 102 0 20 1 33 0 32] #[0 0 170 0 12 0 13 0 14 0 16 0 20] #[0 0 174 0 12 0 13 0 14 0 16 0 20 0 50] #[1 1 37 0 12 0 45 0 13 0 45 0 14 0 45 0 16 0 49 0 20 1 1 0 29 0 45 0 30 1 1 0 33 1 1 0 34 0 65 0 49] #[0 0 178 0 12 0 13 0 14 0 16 0 20 0 50]	).! !DelphiFormParseNode subclass: #DelphiFormPropertyNode	instanceVariableNames: 'name equalsToken value'	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormPropertyNode methodsFor: 'generated'!tokenVariables	^ #(#equalsToken)! !!DelphiFormPropertyNode methodsFor: 'generated'!value	^ value! !!DelphiFormPropertyNode methodsFor: 'generated'!equalsToken: aSmaCCToken	equalsToken := aSmaCCToken! !!DelphiFormPropertyNode methodsFor: 'generated'!nodeVariables	^ #(#name #value)! !!DelphiFormPropertyNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitProperty: self! !!DelphiFormPropertyNode methodsFor: 'generated'!name	^ name! !!DelphiFormPropertyNode methodsFor: 'generated'!name: aDelphiFormQualifiedNameNode	self name notNil		ifTrue: [ self name parent: nil ].	name := aDelphiFormQualifiedNameNode.	self name notNil		ifTrue: [ self name parent: self ]! !!DelphiFormPropertyNode methodsFor: 'generated'!equalsToken	^ equalsToken! !!DelphiFormPropertyNode methodsFor: 'generated'!value: aDelphiFormParseNode	self value notNil		ifTrue: [ self value parent: nil ].	value := aDelphiFormParseNode.	self value notNil		ifTrue: [ self value parent: self ]! !DelphiFormParseNode subclass: #DelphiFormQualifiedNameNode	instanceVariableNames: 'names periods'	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormQualifiedNameNode methodsFor: 'generated'!compositeTokenVariables	^ #(#names #periods)! !!DelphiFormQualifiedNameNode methodsFor: 'generated'!names	^ names! !!DelphiFormQualifiedNameNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitQualifiedName: self! !!DelphiFormQualifiedNameNode methodsFor: 'generated'!periods: anOrderedCollection	periods := anOrderedCollection! !!DelphiFormQualifiedNameNode methodsFor: 'generated'!periods	^ periods! !!DelphiFormQualifiedNameNode methodsFor: 'generated'!names: anOrderedCollection	names := anOrderedCollection! !!DelphiFormQualifiedNameNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	names := OrderedCollection new: 2.	periods := OrderedCollection new: 2.! !SmaCCScanner subclass: #DelphiFormScanner	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormScanner methodsFor: 'generated'!scanForTokenX2	[ self recordMatch: #(25).	self step.	currentCharacter isSeparator		or: [ currentCharacter == Character pageUp ] ] whileTrue.	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!scan4	self step.	currentCharacter isDigit		ifTrue: [ [ self recordMatch: #(22).			self step.			currentCharacter isDigit ] whileTrue.			^ self reportLastMatch ].	('+-' includes: currentCharacter)		ifTrue: [ ^ self scan5 ].	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!bytesId	^ 24! !!DelphiFormScanner methodsFor: 'generated'!tokenActions	^ #(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil #whitespace #patternToken)! !!DelphiFormScanner methodsFor: 'generated'!scan2	[ self step.	currentCharacter == $'		ifTrue: [ self recordMatch: #(23).			self step.			currentCharacter == $#				ifTrue: [ ^ self scan1 ].			currentCharacter == $'				ifTrue: [ ^ self scan2 ].			^ self reportLastMatch ].	true ] whileTrue! !!DelphiFormScanner methodsFor: 'generated'!scan3	self step.	currentCharacter isDigit		ifTrue: [ [ self recordMatch: #(22).			self step.			currentCharacter isDigit ] whileTrue ].	('Ee' includes: currentCharacter)		ifTrue: [ ^ self scan4 ].	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!scan6X1	self recordMatch: #(21 24).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan3 ].	currentCharacter isDigit		ifTrue: [ ^ self scan6 ].	('Dd' includes: currentCharacter)		ifTrue: [ self recordMatch: #(22).			self step.			(currentCharacter isDigit				or: [ (currentCharacter between: $A and: $F)						or: [ currentCharacter between: $a and: $f ] ])				ifTrue: [ ^ self scan7 ].			^ self reportLastMatch ].	('Ee' includes: currentCharacter)		ifTrue: [ self step.			currentCharacter isDigit				ifTrue: [ ^ self scan10 ].			('+-' includes: currentCharacter)				ifTrue: [ ^ self scan5 ].			((currentCharacter between: $A and: $F)				or: [ currentCharacter between: $a and: $f ])				ifTrue: [ ^ self scan7 ].			^ self reportLastMatch ].	((currentCharacter between: $A and: $C)		or: [ currentCharacter == $F				or: [ (currentCharacter between: $a and: $c)						or: [ currentCharacter == $f ] ] ])		ifTrue: [ ^ self scan8 ].	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!scan8	self step.	(currentCharacter isDigit		or: [ (currentCharacter between: $A and: $F)				or: [ currentCharacter between: $a and: $f ] ])		ifTrue: [ ^ self scan7 ].	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!emptySymbolTokenId	^ 50! !!DelphiFormScanner methodsFor: 'generated'!tokenClass	^SmaCCCaseInsensitiveToken! !!DelphiFormScanner methodsFor: 'generated'!scanForTokenX4	currentCharacter == $[		ifTrue: [ ^ self recordAndReportMatch: #(10) ].	currentCharacter == $]		ifTrue: [ ^ self recordAndReportMatch: #(11) ].	currentCharacter == $`		ifTrue: [ ^ self scan12 ].	currentCharacter == ${		ifTrue: [ ^ self recordAndReportMatch: #(17) ].	currentCharacter == $}		ifTrue: [ ^ self recordAndReportMatch: #(18) ].	currentCharacter isDigit		ifTrue: [ ^ self scan6 ].	(currentCharacter isSeparator		or: [ currentCharacter == Character pageUp ])		ifTrue:			[ ^ self scanForTokenX2 ].	((currentCharacter between: $A and: $F)		or: [ currentCharacter between: $a and: $f ])		ifTrue: [ ^ self scan11 ].	(currentCharacter isLetter or: [ currentCharacter == $_ ])		ifTrue:			[ self scanForTokenX3 ].	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!scan12	[ self step.	currentCharacter == $`		ifTrue: [ self recordMatch: #(26).			self step.			currentCharacter == $`				ifTrue: [ ^ self scan12 ].			^ self reportLastMatch ].	true ] whileTrue! !!DelphiFormScanner methodsFor: 'generated'!scan1	self step.	currentCharacter isDigit		ifTrue: [ [ self recordMatch: #(23).			self step.			currentCharacter == $#				ifTrue: [ ^ self scan1 ].			currentCharacter == $'				ifTrue: [ ^ self scan2 ].			currentCharacter isDigit ] whileTrue ].	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!scan6	self recordMatch: #(21).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan3 ].	currentCharacter isDigit		ifTrue:			[ ^ self scan6X1 ].	('Dd' includes: currentCharacter)		ifTrue: [ self recordMatch: #(22 24).			self step.			(currentCharacter isDigit				or: [ (currentCharacter between: $A and: $F)						or: [ currentCharacter between: $a and: $f ] ])				ifTrue: [ ^ self scan8 ].			^ self reportLastMatch ].	('Ee' includes: currentCharacter)		ifTrue: [ self recordMatch: #(24).			self step.			currentCharacter isDigit				ifTrue: [ ^ self scan9 ].			('+-' includes: currentCharacter)				ifTrue: [ ^ self scan5 ].			((currentCharacter between: $A and: $F)				or: [ currentCharacter between: $a and: $f ])				ifTrue: [ ^ self scan8 ].			^ self reportLastMatch ].	((currentCharacter between: $A and: $C)		or: [ currentCharacter == $F				or: [ (currentCharacter between: $a and: $c)						or: [ currentCharacter == $f ] ] ])		ifTrue: [ ^ self scan7 ].	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!errorTokenId	^ 51! !!DelphiFormScanner methodsFor: 'generated'!scan5	self step.	currentCharacter isDigit		ifTrue: [ [ self recordMatch: #(22).			self step.			currentCharacter isDigit ] whileTrue ].	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!scan10	self recordMatch: #(22 24).	self step.	currentCharacter isDigit		ifTrue: [ ^ self scan9 ].	((currentCharacter between: $A and: $F)		or: [ currentCharacter between: $a and: $f ])		ifTrue: [ ^ self scan8 ].	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!scan7	self recordMatch: #(24).	self step.	(currentCharacter isDigit		or: [ (currentCharacter between: $A and: $F)				or: [ currentCharacter between: $a and: $f ] ])		ifTrue: [ ^ self scan8 ].	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!scanForToken	self step.	currentCharacter == $#		ifTrue: [ ^ self scan1 ].	currentCharacter == $'		ifTrue: [ ^ self scan2 ].	currentCharacter == $(		ifTrue: [ ^ self recordAndReportMatch: #(1) ].	currentCharacter == $)		ifTrue: [ ^ self recordAndReportMatch: #(2) ].	currentCharacter == $+		ifTrue: [ ^ self recordAndReportMatch: #(3) ].	currentCharacter == $,		ifTrue: [ ^ self recordAndReportMatch: #(4) ].	currentCharacter == $-		ifTrue:			[ ^ self scanForTokenX1 ].	currentCharacter == $.		ifTrue: [ ^ self recordAndReportMatch: #(5) ].	currentCharacter == $:		ifTrue: [ ^ self recordAndReportMatch: #(6) ].	currentCharacter == $<		ifTrue: [ ^ self recordAndReportMatch: #(7) ].	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(8) ].	currentCharacter == $>		ifTrue: [ ^ self recordAndReportMatch: #(9) ].	^ self scanForTokenX4! !!DelphiFormScanner methodsFor: 'generated'!scanForTokenX1	self step.	currentCharacter isDigit		ifTrue: [ [ self recordMatch: #(21).			self step.			currentCharacter == $.				ifTrue: [ ^ self scan3 ].			currentCharacter isDigit ] whileTrue.			('Dd' includes: currentCharacter)				ifTrue: [ ^ self recordAndReportMatch: #(22) ].			('Ee' includes: currentCharacter)				ifTrue: [ ^ self scan4 ] ].	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!keywordFor: aString	^ aString asUppercase! !!DelphiFormScanner methodsFor: 'generated'!scan9	self recordMatch: #(22).	self step.	currentCharacter isDigit		ifTrue: [ ^ self scan10 ].	((currentCharacter between: $A and: $F)		or: [ currentCharacter between: $a and: $f ])		ifTrue: [ ^ self scan7 ].	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!scan11	self recordMatch: #(20).	self step.	(currentCharacter isDigit		or: [ (currentCharacter between: $A and: $F)				or: [ currentCharacter between: $a and: $f ] ])		ifTrue: [ self recordMatch: #(20 24).			self step.			(currentCharacter isDigit				or: [ (currentCharacter between: $A and: $F)						or: [ currentCharacter between: $a and: $f ] ])				ifTrue: [ ^ self scan11 ] ].	(currentCharacter isLetter or: [ currentCharacter == $_ ])		ifTrue: [ [ self recordMatch: #(20).			self step.			currentCharacter isAlphaNumeric or: [ currentCharacter == $_ ] ]				whileTrue ].	^ self reportLastMatch! !!DelphiFormScanner methodsFor: 'generated'!scanForTokenX3	[ self recordMatch: #(20).	self step.	currentCharacter isAlphaNumeric or: [ currentCharacter == $_ ] ]		whileTrue! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DelphiFormScanner class	instanceVariableNames: ''!!DelphiFormScanner class methodsFor: 'generated-initialization'!initializeKeywordMap	keywordMap := Dictionary new.	#(#(20 'END' 12) #(20 'FALSE' 19) #(20 'INHERITED' 13) #(20 'INLINE' 14) #(20 'ITEM' 15) #(20 'OBJECT' 16) #(20 'TRUE' 19))		do: [ :each | 			(keywordMap at: each first ifAbsentPut: [ Dictionary new ])				at: (each at: 2)				put: each last ].	^ keywordMap! !DelphiFormParseNode subclass: #DelphiFormSetNode	instanceVariableNames: 'left items commas right'	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormSetNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	items := OrderedCollection new: 2.	commas := OrderedCollection new: 2.! !!DelphiFormSetNode methodsFor: 'generated'!right: aSmaCCToken	right := aSmaCCToken! !!DelphiFormSetNode methodsFor: 'generated'!left: aSmaCCToken	left := aSmaCCToken! !!DelphiFormSetNode methodsFor: 'generated'!compositeTokenVariables	^ #(#items #commas)! !!DelphiFormSetNode methodsFor: 'generated'!items: anOrderedCollection	items := anOrderedCollection! !!DelphiFormSetNode methodsFor: 'generated'!items	^ items! !!DelphiFormSetNode methodsFor: 'generated'!left	^ left! !!DelphiFormSetNode methodsFor: 'generated'!tokenVariables	^ #(#left #right)! !!DelphiFormSetNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!DelphiFormSetNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitSet: self! !!DelphiFormSetNode methodsFor: 'generated'!commas	^ commas! !!DelphiFormSetNode methodsFor: 'generated'!right	^ right! !DelphiFormLiteralNode subclass: #DelphiFormStringNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Delphi_Forms'!!DelphiFormStringNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitString: self! !