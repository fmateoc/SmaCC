SmaCCParseNodeVisitor subclass: #CSVFileNodeVisitor	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSV_Parser'!!CSVFileNodeVisitor methodsFor: 'generated'!visitFile: aFile	^ self visitSmaCCParseNode: aFile! !!CSVFileNodeVisitor methodsFor: 'generated'!visitLine: aLine	^ self visitFile: aLine! !SmaCCParseNode subclass: #CSVParseNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSV_Parser'!!CSVParseNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitParse: self! !CSVParseNode subclass: #CSVFileNode	instanceVariableNames: 'lines eols'	classVariableNames: ''	package: 'SmaCC_CSV_Parser'!!CSVFileNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	lines := OrderedCollection new: 2.	eols := OrderedCollection new: 2.! !!CSVFileNode methodsFor: 'generated'!compositeTokenVariables	^ #(#eols)! !!CSVFileNode methodsFor: 'generated'!eols	^ eols! !!CSVFileNode methodsFor: 'generated'!lines	^ lines! !!CSVFileNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitFile: self! !!CSVFileNode methodsFor: 'generated'!eols: anOrderedCollection	eols := anOrderedCollection! !!CSVFileNode methodsFor: 'generated'!compositeNodeVariables	^ #(#lines)! !!CSVFileNode methodsFor: 'generated'!lines: anOrderedCollection	self setParents: self lines to: nil.	lines := anOrderedCollection.	self setParents: self lines to: self! !CSVParseNode subclass: #CSVLineNode	instanceVariableNames: 'values commas'	classVariableNames: ''	package: 'SmaCC_CSV_Parser'!!CSVLineNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	values := OrderedCollection new: 2.	commas := OrderedCollection new: 2.! !!CSVLineNode methodsFor: 'generated'!compositeTokenVariables	^ #(#values #commas)! !!CSVLineNode methodsFor: 'generated'!commas: anOrderedCollection	commas := anOrderedCollection! !!CSVLineNode methodsFor: 'generated'!values	^ values! !!CSVLineNode methodsFor: 'generated'!acceptVisitor: aParseVisitor	^ aParseVisitor visitLine: self! !!CSVLineNode methodsFor: 'generated'!commas	^ commas! !!CSVLineNode methodsFor: 'generated'!values: anOrderedCollection	values := anOrderedCollection! !SmaCCParseNodeVisitor subclass: #CSVParseNodeVisitor	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSV_Parser'!!CSVParseNodeVisitor methodsFor: 'generated'!visitFile: aFile	^ self visitParse: aFile! !!CSVParseNodeVisitor methodsFor: 'generated'!visitLine: aLine	^ self visitParse: aLine! !!CSVParseNodeVisitor methodsFor: 'generated'!visitParse: aParse	^ self visitSmaCCParseNode: aParse! !SmaCCParser subclass: #CSVParser	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSV_Parser'!!CSVParser methodsFor: 'generated-reduction actions'!reduceActionForLine2: nodes	| result |	result := nodes at: 1.	result addToken: (nodes at: 2) to: result commas.	result addToken: (nodes at: 3) to: result values.	^ result! !!CSVParser methodsFor: 'generated-reduction actions'!reduceActionForLines1: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	^ result! !!CSVParser methodsFor: 'generated-reduction actions'!reduceActionForFile1: nodes	| result |	result := CSVFileNode new.	result addNodes: ((nodes at: 1) at: 1) to: result lines.	result addTokens: ((nodes at: 1) at: 2) to: result eols.	^ result! !!CSVParser methodsFor: 'generated-reduction actions'!reduceActionForMissing1: nodes	^ SmaCCToken value: '' start: self position ids: #()! !!CSVParser methodsFor: 'generated-reduction actions'!reduceActionForLine1: nodes	| result |	result := CSVLineNode new.	result addToken: (nodes at: 1) to: result values.	^ result! !!CSVParser methodsFor: 'generated-reduction actions'!reduceActionForLines2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 2).	self add: (nodes at: 3) to: (result at: 1).	^ result! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CSVParser class	instanceVariableNames: ''!!CSVParser class methodsFor: 'generated'!definitionComment"%prefix CSV;%suffix Node;%root Parse;<entry> 	: [^\""\'\,\r\n] [^\,\r\n]*	| (\"" [^\""]* \"") +	| (\' [^\']* \') +	;<newline>	: \r \n? | \n	;File	: Lines {{}}	;Lines	: Line 'line'	| Lines <newline> 'eol' Line 'line'	;Line	: Value 'value' {{}}	| Line "","" 'comma' Value 'value' {{}}	;Value	: <entry>	| Missing	;Missing	: {SmaCCToken value: '' start: self position ids: #()}	;"! !!CSVParser class methodsFor: 'generated'!symbolTypes	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #CSVFileNode #CSVFileNode #OrderedCollection #CSVLineNode #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCErrorNode)! !!CSVParser class methodsFor: 'generated'!startingStateForFile	^ 1! !!CSVParser class methodsFor: 'generated'!reduceTable^#(	#(9 0 #reduceActionForMissing1: 344065 false ) 	#(8 1 #liftFirstValue: 312321 false ) 	#(5 1 #reduceActionForFile1: 156673 false ) 	#(6 1 #reduceActionForLines1: 179201 false ) 	#(7 1 #reduceActionForLine1: 241665 false ) 	#(8 1 #liftFirstValue: 312322 false ) 	#(6 3 #reduceActionForLines2: 179202 false ) 	#(7 3 #reduceActionForLine2: 241666 false )	).! !!CSVParser class methodsFor: 'generated'!symbolNames	^ #('","' '<entry>' '<newline>' 'B e g i n' 'File' 'Lines' 'Line' 'Value' 'Missing' 'E O F' 'error')! !!CSVParser class methodsFor: 'generated'!transitionTable^#(#[1 0 6 0 1 0 25 0 2 0 6 0 3 0 13 0 5 0 17 0 6 0 21 0 7 0 25 0 8 0 25 0 9 0 6 0 10] #[0 0 10 0 1 0 3 0 10] #[0 0 0 0 10] #[1 0 33 0 3 0 14 0 10] #[1 0 37 0 1 0 18 0 3 0 18 0 10] #[0 0 22 0 1 0 3 0 10] #[0 0 26 0 1 0 3 0 10] #[1 0 6 0 1 0 25 0 2 0 6 0 3 0 41 0 7 0 25 0 8 0 25 0 9 0 6 0 10] #[1 0 6 0 1 0 45 0 2 0 6 0 3 0 45 0 8 0 45 0 9 0 6 0 10] #[1 0 37 0 1 0 30 0 3 0 30 0 10] #[0 0 34 0 1 0 3 0 10]	).! !!CSVParser class methodsFor: 'parsing'!parseFileWithHeader: aFilename	| lines headerLine headerNames |	lines := self parseFileWithoutHeader: aFilename.	lines isEmpty		ifTrue: [ ^ lines ].	headerLine := lines removeFirst.	headerNames := (1 to: headerLine size)		collect: [ :i | (headerLine at: i) ifNil: [ 'Column ' , i printString ] ].	1 to: lines size do:		[ :i | 		| line dict |		dict := Dictionary new: headerNames size.		headerNames			with: (lines at: i)			do: [ :header :value | dict at: header put: value ].		lines at: i put: dict ].	^ lines! !!CSVParser class methodsFor: 'parsing'!parseFileWithoutHeader: aFilename	| file maxSize lines |	file := self parseFile: aFilename.	maxSize := file lines		inject: 0		into: [ :sum :each | sum max: each values size ].	lines := file lines		collect:			[ :each | 			| line |			line := Array new: maxSize.			1 to: each values size do: [ :i | line at: i put: (self dataValueFrom: (each values at: i)) ].			line ].	(file lines size > 0		and:			[ file lines last commas isEmpty				and: [ (self dataValueFrom: file lines last values first) isNil ] ])		ifTrue: [ lines removeLast ].	^ lines! !!CSVParser class methodsFor: 'private'!dataValueFrom: aSmaCCToken	| string |	string := aSmaCCToken value.	string isEmpty		ifTrue: [ ^ nil ].	string first = $'		ifTrue:			[ ^ (string copyFrom: 2 to: string size - 1)				copyReplaceAll: ''''''				with: '''' ].	string first = $"		ifTrue:			[ ^ (string copyFrom: 2 to: string size - 1)				copyReplaceAll: '""'				with: '"' ].	^ string! !!CSVParser class methodsFor: 'generated-accessing'!scannerClass	^CSVScanner! !!CSVParser class methodsFor: 'generated-accessing'!cacheId	^'2019-04-15T17:15:42.810828-05:00'! !!CSVParser class methodsFor: 'file types'!fileExtension	^ '.csv'! !!CSVParser class methodsFor: 'file types'!fileExtensionType	^ 'CSV files'! !SmaCCScanner subclass: #CSVScanner	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_CSV_Parser'!!CSVScanner methodsFor: 'generated'!scan2	[ self step.	currentCharacter == $'		ifTrue: [ self recordMatch: #(2).			self step.			currentCharacter == $'				ifTrue: [ ^ self scan2 ].			^ self reportLastMatch ].	true ] whileTrue! !!CSVScanner methodsFor: 'generated'!errorTokenId	^ 11! !!CSVScanner methodsFor: 'generated'!emptySymbolTokenId	^ 10! !!CSVScanner methodsFor: 'generated'!scanForToken	self step.	currentCharacter == Character lf		ifTrue: [ ^ self recordAndReportMatch: #(3) ].	currentCharacter == Character cr		ifTrue: [ self recordMatch: #(3).			self step.			currentCharacter == Character lf				ifTrue: [ ^ self recordAndReportMatch: #(3) ].			^ self reportLastMatch ].	currentCharacter == $"		ifTrue: [ ^ self scan1 ].	currentCharacter == $'		ifTrue: [ ^ self scan2 ].	currentCharacter == $,		ifTrue: [ ^ self recordAndReportMatch: #(1) ].	true		ifTrue: [ [ self recordMatch: #(2).			self step.			currentCharacter <= Character tab				or: [ (currentCharacter between: Character pageUp and: Character newPage)						or: [ (currentCharacter between: (Character value: 14) and: $+)								or: [ currentCharacter >= $- ] ] ] ] whileTrue ].	^ self reportLastMatch! !!CSVScanner methodsFor: 'generated'!scan1	[ self step.	currentCharacter == $"		ifTrue: [ self recordMatch: #(2).			self step.			currentCharacter == $"				ifTrue: [ ^ self scan1 ].			^ self reportLastMatch ].	true ] whileTrue! !