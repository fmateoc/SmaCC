SmaCCGLRParser subclass: #GstParser	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstParser methodsFor: 'generated-reduction actions'!reduceActionForArrayLiteral1: nodes	| result |	result := GstArrayLiteralNode new.	result arrayStart: (nodes at: 1).	result addNodes: (nodes at: 2) to: result values.	result arrayStop: (nodes at: 3).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForKeywordMessage1: nodes	| result |	result := GstKeywordMessageNode new.	result addToken: (nodes at: 1) to: result selectorParts.	result addNode: (nodes at: 2) to: result values.	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForSymbolLiteral1: nodes	| result |	result := GstSymbolLiteralNode new.	result value: (nodes at: 1).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForMethodPattern6: nodes	| result |	result := nodes at: 1.	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForTemporaries1: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForKeywordMessage2: nodes	| result |	result := nodes at: 1.	result addToken: (nodes at: 2) to: result selectorParts.	result addNode: (nodes at: 3) to: result values.	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForVariable1: nodes	| result |	result := GstVariableNode new.	result name: (nodes at: 1).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForVariables1: nodes	| result |	result := OrderedCollection new: 2.	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForValue4: nodes	| result |	result := nodes at: 2.	result addFirstToken: (nodes at: 1) to: result leftParens.	result addToken: (nodes at: 3) to: result rightParens.	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForKeywordMessageSend1: nodes	| result |	result := GstMessageSendNode new.	result receiver: ((nodes at: 1) at: 1).	result message: ((nodes at: 1) at: 2).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForStringLiteral1: nodes	| result |	result := GstStringLiteralNode new.	result value: (nodes at: 1).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForByteArrayLiteral1: nodes	| result |	result := GstByteArrayLiteralNode new.	result arrayStart: (nodes at: 1).	result addNodes: (nodes at: 2) to: result values.	result arrayStop: (nodes at: 3).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForAssignment1: nodes	| result |	result := GstAssignmentNode new.	result variable: (nodes at: 1).	result assignmentToken: (nodes at: 2).	result value: (nodes at: 3).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForMethodPattern3: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForKeywordPattern1: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self add: (nodes at: 1) to: (result at: 1).	self add: (nodes at: 2) to: (result at: 2).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForStatements1: nodes	| result |	result := Array new: 2.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForKeywordMessageSendVars1: nodes	| result |	result := Array new: 2.	result at: 1 put: (nodes at: 1).	result at: 2 put: (nodes at: 2).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForCascadedMessages2: nodes	| result |	result := nodes at: 3.	self addFirst: (nodes at: 1) to: (result at: 1).	self addFirst: (nodes at: 2) to: (result at: 2).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForKeywordPattern2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 1).	self add: (nodes at: 3) to: (result at: 2).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForBlockArgs2: nodes	| result |	result := Array new: 3.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).	result at: 3 put: (nodes at: 2).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForBlockArgs1: nodes	| result |	result := Array new: 3.	result at: 1 put: (OrderedCollection new: 2).	result at: 2 put: (OrderedCollection new: 2).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForMethod1: nodes	| result |	result := GstMethodNode new.	result addTokens: ((nodes at: 1) at: 1) to: result selectorParts.	result addNodes: ((nodes at: 1) at: 2) to: result variables.	result body: (nodes at: 2).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForCharacterLiteral1: nodes	| result |	result := GstCharacterLiteralNode new.	result value: (nodes at: 1).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForCascade1: nodes	| result |	result := GstCascadeNode new.	result receiver: ((nodes at: 1) at: 1).	result addNode: ((nodes at: 1) at: 2) to: result messages.	result addTokens: ((nodes at: 2) at: 1) to: result semicolons.	result addNodes: ((nodes at: 2) at: 2) to: result messages.	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForNilLiteral1: nodes	| result |	result := GstNilLiteralNode new.	result value: (nodes at: 1).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForTemporaries2: nodes	| result |	result := Array new: 3.	result at: 2 put: (OrderedCollection new: 2).	result at: 1 put: (nodes at: 1).	self addAll: (nodes at: 2) to: (result at: 2).	result at: 3 put: (nodes at: 3).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForUnaryMessage1: nodes	| result |	result := GstUnaryMessageNode new.	result selectorPart: (nodes at: 1).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForBooleanLiteral2: nodes	| result |	result := GstBooleanLiteralNode new.	result value: (nodes at: 1).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForVariables2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: result.	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForBinaryMessage1: nodes	| result |	result := GstBinaryMessageNode new.	result selectorPart: (nodes at: 1).	result value: (nodes at: 2).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForNumberLiteral1: nodes	| result |	result := GstNumberLiteralNode new.	result value: (nodes at: 1).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForSequence1: nodes	| result |	result := GstSequenceNode new.	result leftBar: ((nodes at: 1) at: 1).	result addNodes: ((nodes at: 1) at: 2) to: result variables.	result rightBar: ((nodes at: 1) at: 3).	result addNodes: ((nodes at: 2) at: 1) to: result statements.	result addTokens: ((nodes at: 2) at: 2) to: result periods.	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForStatement1: nodes	| result |	result := GstReturnNode new.	result upArrow: (nodes at: 1).	result value: (nodes at: 2).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForBlock1: nodes	| result |	result := GstBlockNode new.	result leftBracket: (nodes at: 1).	result addTokens: ((nodes at: 2) at: 1) to: result colons.	result addNodes: ((nodes at: 2) at: 2) to: result variables.	result bar: ((nodes at: 2) at: 3).	result body: (nodes at: 3).	result rightBracket: (nodes at: 4).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForStatementList2: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 2).	self add: (nodes at: 3) to: (result at: 1).	^ result! !!GstParser methodsFor: 'generated-reduction actions'!reduceActionForStatements3: nodes	| result |	result := nodes at: 1.	self add: (nodes at: 2) to: (result at: 2).	^ result! !!GstParser methodsFor: 'public'!actionsForCurrentToken	| actions |	actions := super actionsForCurrentToken.	actions isEmpty		ifTrue:			[ (currentToken ids includes: scanner binaryId)				ifTrue:					[ currentToken value = '|'						ifTrue: [ self addActionsFor: scanner binaryId to: actions ]						ifFalse:							[ (#('||' '|||') includes: currentToken value)								ifTrue:									[ currentToken := currentToken class										value: '|'										start: currentToken startPosition										ids: (Array with: scanner barId).									self position: currentToken startPosition.									actions := super actionsForCurrentToken ] ] ] ].	^ actions! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GstParser class	instanceVariableNames: ''!!GstParser class methodsFor: 'generated-accessing'!scannerClass	^GstScanner! !!GstParser class methodsFor: 'generated-accessing'!cacheId	^'2019-04-15T17:15:54.54493-05:00'! !!GstParser class methodsFor: 'generated'!definitionComment"%glr;%prefix Gst;%suffix Node;%root Program;%start Sequence Statement;%id <bar> <binary>;%hierarchy Value (	Assignment	Block	Cascade	Literal	MessageSend	Variable);%hierarchy Literal (StringLiteral NumberLiteral CharacterLiteral SymbolLiteral ArrayLiteral BooleanLiteral NilLiteral);%hierarchy ArrayLiteral (ByteArrayLiteral);%hierarchy Message (UnaryMessage BinaryMessage KeywordMessage);%ignore_variables leftParen rightParen leftBar rightBar leftBracket rightBracket semicolon colon period ;<name>	:  (<isLetter> | _ ) ( <isLetter> | _ | <isDigit> ) *	;<keyword>	: <name> \:	;<bar>	: \|	;<binary>	: [\~\-\!!\@\%\&\*\+\=\\\|\?\/\>\<\,] +	;<string>	: ( \' [^\']* \' )+	;<symbol>	: \# ( <name> | <binary> | <keyword>+ | <string> )	;<character>	: \$ .	;<comment>	: \"" [^\""]* \""	;<whitespace>	: \s+	;<float>	: \-? \d+ \. \d+ ([deq] [\+\-]? \d+)?	| \-? \d+ [deq] [\+\-]? \d+	;<integer>	: \-? (		  \d+		| 2r[0-1]+		| 3r[0-2]+		| 4r[0-3]+		| 5r[0-4]+		| 6r[0-5]+		| 7r[0-6]+		| 8r[0-7]+		| 9r[0-8]+		| 10r[0-9]+		| 11r[0-9A]+		| 12r[0-9A-B]+		| 13r[0-9A-C]+		| 14r[0-9A-D]+		| 15r[0-9A-E]+		| 16r[0-9A-F]+		| 17r[0-9A-G]+		| 18r[0-9A-H]+		| 19r[0-9A-I]+		| 20r[0-9A-J]+		| 21r[0-9A-K]+		| 22r[0-9A-L]+		| 23r[0-9A-M]+		| 24r[0-9A-N]+		| 25r[0-9A-O]+		| 26r[0-9A-P]+		| 27r[0-9A-Q]+		| 28r[0-9A-R]+		| 29r[0-9A-S]+		| 30r[0-9A-T]+		| 31r[0-9A-U]+		| 32r[0-9A-V]+		| 33r[0-9A-W]+		| 34r[0-9A-X]+		| 35r[0-9A-Y]+		| 36r[0-9A-Z]+		)	;<patternToken>	: (\`  [^\`]* \`)+	;Method	: MethodPattern Sequence 'body' {{}}	;MethodPattern	: <name> 'selectorPart'	| ""true"" 'selectorPart'	| ""false"" 'selectorPart'	| ""nil"" 'selectorPart'	| <binary> 'selectorPart' Variable 'variable'	| KeywordPattern	;KeywordPattern	: <keyword> 'selectorPart' Variable 'variable'	| KeywordPattern <keyword> 'selectorPart' Variable 'variable'	;Sequence	: Temporaries Statements {{}}	;Temporaries	: 	| <bar> 'leftBar' Variables <bar> 'rightBar'	;Variables	: 	| Variables Variable 'variable'	;Statements	: 	| StatementList	| StatementList ""."" 'period'	;StatementList	: Statement 'statement'	| StatementList ""."" 'period' Statement 'statement'	;Statement	: ""^"" 'upArrow' Assignment 'value' {{Return}}	| Assignment	;Assignment	: Variable 'variable' "":="" 'assignmentToken' Assignment 'value' {{}}	| Cascade	;Cascade	: KeywordMessageSendVars CascadedMessages {{}}	| BinaryMessageSendVars CascadedMessages {{}}	| UnaryMessageSendVars CascadedMessages {{}}	| KeywordMessageSend	;CascadedMessages	: "";"" 'semicolon' CascadedMessage 'message'	| "";"" 'semicolon' CascadedMessage 'message' CascadedMessages	;CascadedMessage	: KeywordMessage	| BinaryMessage	| UnaryMessage	;KeywordMessageSend	: KeywordMessageSendVars {{MessageSend}}	| BinaryMessageSend	;KeywordMessageSendVars	: BinaryMessageSend 'receiver' KeywordMessage 'message' 	;KeywordMessage	: <keyword> 'selectorPart' BinaryMessageSend 'value' {{}}	| KeywordMessage <keyword> 'selectorPart' BinaryMessageSend 'value' {{}}	;BinaryMessageSend	: BinaryMessageSendVars {{MessageSend}}	| UnaryMessageSend	;BinaryMessageSendVars	: BinaryMessageSend 'receiver' BinaryMessage 'message' 	;BinaryMessage	: <binary> 'selectorPart' UnaryMessageSend 'value' {{}}	;UnaryMessageSend	: UnaryMessageSendVars {{MessageSend}}	| Value	;UnaryMessageSendVars	: UnaryMessageSend 'receiver' UnaryMessage 'message' 	;UnaryMessage	: <name> 'selectorPart' {{}}	;Variable	: <name> 'name' {{}}	;Value	: Variable	| Literal	| Block	| ""("" 'leftParen' Assignment "")"" 'rightParen' {{Value}}	;Block	: ""["" 'leftBracket' BlockArgs Sequence 'body' ""]"" 'rightBracket' {{}}	;BlockArgs	: 	| BlockArgList <bar> 'bar'	;BlockArgList	: "":"" 'colon' Variable 'variable'	| BlockArgList "":"" 'colon' Variable 'variable'	;Literal	: StringLiteral	| NumberLiteral	| ArrayLiteral	| ByteArrayLiteral	| CharacterLiteral	| SymbolLiteral	| BooleanLiteral	| NilLiteral	;StringLiteral	: <string> 'value' {{}}	;NumberLiteral	: <float> 'value' {{}}	| IntegerLiteral	;IntegerLiteral	: <integer> 'value' {{NumberLiteral}}	;ArrayLiteral	: ""#("" 'arrayStart' ArrayLiteralItems "")"" 'arrayStop' {{}}	;ArrayLiteralItems	: 	| ArrayLiteralItems Literal 'value'	;ByteArrayLiteral	: ""#["" 'arrayStart' ByteArrayLiteralItems ""]"" 'arrayStop' {{}}	;ByteArrayLiteralItems	: 	| ByteArrayLiteralItems IntegerLiteral 'value' 	;CharacterLiteral	: <character> 'value' {{}}	;SymbolLiteral	: <symbol> 'value' {{}}	;BooleanLiteral	: ""true"" 'value' {{}}	| ""false"" 'value' {{}}	;NilLiteral	: ""nil"" 'value' {{}}	;"! !!GstParser class methodsFor: 'generated'!symbolTypes	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #GstMethodNode #GstMethodNode #OrderedCollection #OrderedCollection #GstSequenceNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #GstProgramNode #GstValueNode #GstValueNode #OrderedCollection #GstMessageNode #GstValueNode #OrderedCollection #GstKeywordMessageNode #GstValueNode #OrderedCollection #GstBinaryMessageNode #GstValueNode #OrderedCollection #GstUnaryMessageNode #GstVariableNode #GstValueNode #GstBlockNode #OrderedCollection #OrderedCollection #GstLiteralNode #GstStringLiteralNode #GstNumberLiteralNode #GstNumberLiteralNode #GstArrayLiteralNode #OrderedCollection #GstByteArrayLiteralNode #OrderedCollection #GstCharacterLiteralNode #GstSymbolLiteralNode #GstBooleanLiteralNode #GstNilLiteralNode #SmaCCToken #SmaCCErrorNode)! !!GstParser class methodsFor: 'generated'!startingStateForStatement	^ 3! !!GstParser class methodsFor: 'generated'!reduceTable^#(	#(32 0 #reduceActionForTemporaries1: 1999873 false ) 	#(29 1 #reduceActionForMethodPattern3: 1637379 false ) 	#(29 1 #reduceActionForMethodPattern3: 1637380 false ) 	#(29 1 #reduceActionForMethodPattern3: 1637378 false ) 	#(29 1 #reduceActionForMethodPattern3: 1637377 false ) 	#(29 1 #reduceActionForMethodPattern6: 1637382 false ) 	#(33 0 #reduceActionForVariables1: 2066433 false ) 	#(34 0 #reduceActionForStatements1: 2117633 false ) 	#(60 0 #reduceActionForVariables1: 4361217 false ) 	#(62 0 #reduceActionForVariables1: 4510721 false ) 	#(53 0 #reduceActionForBlockArgs1: 3820545 false ) 	#(65 1 #reduceActionForBooleanLiteral2: 4682754 false ) 	#(66 1 #reduceActionForNilLiteral1: 4749313 false ) 	#(65 1 #reduceActionForBooleanLiteral2: 4682753 false ) 	#(50 1 #reduceActionForVariable1: 3603457 false ) 	#(56 1 #reduceActionForStringLiteral1: 4121601 false ) 	#(64 1 #reduceActionForSymbolLiteral1: 4639745 false ) 	#(63 1 #reduceActionForCharacterLiteral1: 4590593 false ) 	#(57 1 #reduceActionForNumberLiteral1: 4164609 false ) 	#(58 1 #reduceActionForNumberLiteral1: 4225025 false ) 	#(36 1 #liftFirstValue: 2280450 false ) 	#(37 1 #liftFirstValue: 2356226 false ) 	#(38 1 #liftFirstValue: 2453508 false ) 	#(41 1 #reduceActionForKeywordMessageSend1: 2833409 false ) 	#(41 1 #liftFirstValue: 2833410 false ) 	#(44 1 #reduceActionForKeywordMessageSend1: 3161089 false ) 	#(44 1 #liftFirstValue: 3161090 false ) 	#(47 1 #reduceActionForKeywordMessageSend1: 3404801 false ) 	#(51 1 #liftFirstValue: 3638273 false ) 	#(47 1 #liftFirstValue: 3404802 false ) 	#(51 1 #liftFirstValue: 3638275 false ) 	#(51 1 #liftFirstValue: 3638274 false ) 	#(55 1 #liftFirstValue: 3968001 false ) 	#(55 1 #liftFirstValue: 3968002 false ) 	#(57 1 #liftFirstValue: 4164610 false ) 	#(55 1 #liftFirstValue: 3968003 false ) 	#(55 1 #liftFirstValue: 3968004 false ) 	#(55 1 #liftFirstValue: 3968005 false ) 	#(55 1 #liftFirstValue: 3968006 false ) 	#(55 1 #liftFirstValue: 3968007 false ) 	#(55 1 #liftFirstValue: 3968008 false ) 	#(30 2 #reduceActionForKeywordPattern1: 1823745 false ) 	#(29 2 #reduceActionForKeywordPattern1: 1637381 false ) 	#(28 2 #reduceActionForMethod1: 1588225 false ) 	#(31 2 #reduceActionForSequence1: 1955841 false ) 	#(34 1 #reduceActionForMethodPattern6: 2117634 false ) 	#(35 1 #reduceActionForMethodPattern3: 2184193 false ) 	#(36 2 #reduceActionForStatement1: 2280449 false ) 	#(38 2 #reduceActionForCascade1: 2453505 false ) 	#(42 2 #reduceActionForKeywordMessageSendVars1: 2920449 false ) 	#(45 2 #reduceActionForKeywordMessageSendVars1: 3245057 false ) 	#(38 2 #reduceActionForCascade1: 2453506 false ) 	#(49 1 #reduceActionForUnaryMessage1: 3556353 false ) 	#(48 2 #reduceActionForKeywordMessageSendVars1: 3475457 false ) 	#(38 2 #reduceActionForCascade1: 2453507 false ) 	#(30 3 #reduceActionForKeywordPattern2: 1823746 false ) 	#(32 3 #reduceActionForTemporaries2: 1999874 false ) 	#(33 2 #reduceActionForVariables2: 2066434 false ) 	#(34 2 #reduceActionForStatements3: 2117635 false ) 	#(59 3 #reduceActionForArrayLiteral1: 4283393 false ) 	#(60 2 #reduceActionForVariables2: 4361218 false ) 	#(61 3 #reduceActionForByteArrayLiteral1: 4424705 false ) 	#(62 2 #reduceActionForVariables2: 4510722 false ) 	#(51 3 #reduceActionForValue4: 3638276 false ) 	#(54 2 #reduceActionForKeywordPattern1: 3866625 false ) 	#(53 2 #reduceActionForBlockArgs2: 3820546 false ) 	#(39 2 #reduceActionForKeywordPattern1: 2631681 false ) 	#(40 1 #liftFirstValue: 2761729 false ) 	#(40 1 #liftFirstValue: 2761730 false ) 	#(40 1 #liftFirstValue: 2761731 false ) 	#(43 2 #reduceActionForKeywordMessage1: 3006465 false ) 	#(46 2 #reduceActionForBinaryMessage1: 3329025 false ) 	#(37 3 #reduceActionForAssignment1: 2356225 false ) 	#(35 3 #reduceActionForStatementList2: 2184194 false ) 	#(52 4 #reduceActionForBlock1: 3738625 false ) 	#(54 3 #reduceActionForKeywordPattern2: 3866626 false ) 	#(39 3 #reduceActionForCascadedMessages2: 2631682 false ) 	#(43 3 #reduceActionForKeywordMessage2: 3006466 false )	).! !!GstParser class methodsFor: 'generated'!startingStateForSequence	^ 2! !!GstParser class methodsFor: 'generated'!startingStateForMethod	^ 1! !!GstParser class methodsFor: 'generated'!symbolNames	^ #('"#("' '"#["' '"("' '")"' '"."' '":"' '":="' '";"' '"["' '"]"' '"^"' '"false"' '"nil"' '"true"' '<name>' '<keyword>' '<bar>' '<binary>' '<string>' '<symbol>' '<character>' '<comment>' '<whitespace>' '<float>' '<integer>' '<patternToken>' 'B e g i n' 'Method' 'MethodPattern' 'KeywordPattern' 'Sequence' 'Temporaries' 'Variables' 'Statements' 'StatementList' 'Statement' 'Assignment' 'Cascade' 'CascadedMessages' 'CascadedMessage' 'KeywordMessageSend' 'KeywordMessageSendVars' 'KeywordMessage' 'BinaryMessageSend' 'BinaryMessageSendVars' 'BinaryMessage' 'UnaryMessageSend' 'UnaryMessageSendVars' 'UnaryMessage' 'Variable' 'Value' 'Block' 'BlockArgs' 'BlockArgList' 'Literal' 'StringLiteral' 'NumberLiteral' 'IntegerLiteral' 'ArrayLiteral' 'ArrayLiteralItems' 'ByteArrayLiteral' 'ByteArrayLiteralItems' 'CharacterLiteral' 'SymbolLiteral' 'BooleanLiteral' 'NilLiteral' 'E O F' 'error')! !!GstParser class methodsFor: 'generated'!transitionTable^#(#[1 0 17 0 12 0 21 0 13 0 25 0 14 0 29 0 15 0 33 0 16 0 37 0 18 0 41 0 28 0 45 0 29 0 49 0 30] #[1 0 6 0 1 0 6 0 2 0 6 0 3 0 6 0 9 0 6 0 11 0 6 0 12 0 6 0 13 0 6 0 14 0 6 0 15 0 53 0 17 0 6 0 19 0 6 0 20 0 6 0 21 0 6 0 24 0 6 0 25 0 57 0 31 0 61 0 32 0 6 0 67] #[1 0 65 0 1 0 69 0 2 0 73 0 3 0 77 0 9 0 81 0 11 0 85 0 12 0 89 0 13 0 93 0 14 0 97 0 15 0 101 0 19 0 105 0 20 0 109 0 21 0 113 0 24 0 117 0 25 0 121 0 36 0 121 0 37 0 121 0 38 0 121 0 41 0 137 0 42 0 141 0 44 0 145 0 45 0 149 0 47 0 153 0 48 0 157 0 50 0 149 0 51 0 149 0 52 0 149 0 55 0 149 0 56 0 149 0 57 0 149 0 58 0 149 0 59 0 149 0 61 0 149 0 63 0 149 0 64 0 149 0 65 0 149 0 66] #[0 0 10 0 1 0 2 0 3 0 9 0 11 0 12 0 13 0 14 0 15 0 17 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 14 0 1 0 2 0 3 0 9 0 11 0 12 0 13 0 14 0 15 0 17 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 18 0 1 0 2 0 3 0 9 0 11 0 12 0 13 0 14 0 15 0 17 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 22 0 1 0 2 0 3 0 9 0 11 0 12 0 13 0 14 0 15 0 17 0 19 0 20 0 21 0 24 0 25 0 67] #[1 0 97 0 15 0 209 0 50] #[1 0 97 0 15 0 213 0 50] #[0 0 0 0 67] #[1 0 6 0 1 0 6 0 2 0 6 0 3 0 6 0 9 0 6 0 11 0 6 0 12 0 6 0 13 0 6 0 14 0 6 0 15 0 53 0 17 0 6 0 19 0 6 0 20 0 6 0 21 0 6 0 24 0 6 0 25 0 217 0 31 0 61 0 32 0 6 0 67] #[1 0 26 0 1 0 26 0 2 0 26 0 3 0 26 0 9 0 26 0 11 0 26 0 12 0 26 0 13 0 26 0 14 0 26 0 15 0 221 0 16 0 26 0 17 0 26 0 19 0 26 0 20 0 26 0 21 0 26 0 24 0 26 0 25 0 26 0 67] #[1 0 30 0 15 0 30 0 17 0 225 0 33] #[0 0 0 0 67] #[1 0 65 0 1 0 69 0 2 0 73 0 3 0 77 0 9 0 34 0 10 0 81 0 11 0 85 0 12 0 89 0 13 0 93 0 14 0 97 0 15 0 101 0 19 0 105 0 20 0 109 0 21 0 113 0 24 0 117 0 25 0 229 0 34 0 233 0 35 0 237 0 36 0 237 0 37 0 237 0 38 0 237 0 41 0 137 0 42 0 141 0 44 0 145 0 45 0 149 0 47 0 153 0 48 0 157 0 50 0 149 0 51 0 149 0 52 0 149 0 55 0 149 0 56 0 149 0 57 0 149 0 58 0 149 0 59 0 149 0 61 0 149 0 63 0 149 0 64 0 149 0 65 0 149 0 66 0 34 0 67] #[1 0 38 0 1 0 38 0 2 0 38 0 4 0 38 0 12 0 38 0 13 0 38 0 14 0 38 0 19 0 38 0 20 0 38 0 21 0 38 0 24 0 38 0 25 0 241 0 60] #[1 0 42 0 10 0 42 0 25 0 245 0 62] #[1 0 65 0 1 0 69 0 2 0 73 0 3 0 77 0 9 0 85 0 12 0 89 0 13 0 93 0 14 0 97 0 15 0 101 0 19 0 105 0 20 0 109 0 21 0 113 0 24 0 117 0 25 0 249 0 37 0 249 0 38 0 249 0 41 0 137 0 42 0 141 0 44 0 145 0 45 0 149 0 47 0 153 0 48 0 157 0 50 0 149 0 51 0 149 0 52 0 149 0 55 0 149 0 56 0 149 0 57 0 149 0 58 0 149 0 59 0 149 0 61 0 149 0 63 0 149 0 64 0 149 0 65 0 149 0 66] #[1 0 46 0 1 0 46 0 2 0 46 0 3 0 253 0 6 0 46 0 9 0 46 0 10 0 46 0 11 0 46 0 12 0 46 0 13 0 46 0 14 0 46 0 15 0 46 0 17 0 46 0 19 0 46 0 20 0 46 0 21 0 46 0 24 0 46 0 25 1 1 0 53 1 5 0 54] #[1 0 65 0 1 0 69 0 2 0 73 0 3 0 77 0 9 0 85 0 12 0 89 0 13 0 93 0 14 0 97 0 15 0 101 0 19 0 105 0 20 0 109 0 21 0 113 0 24 0 117 0 25 1 9 0 37 1 9 0 38 1 9 0 41 0 137 0 42 0 141 0 44 0 145 0 45 0 149 0 47 0 153 0 48 0 157 0 50 0 149 0 51 0 149 0 52 0 149 0 55 0 149 0 56 0 149 0 57 0 149 0 58 0 149 0 59 0 149 0 61 0 149 0 63 0 149 0 64 0 149 0 65 0 149 0 66] #[0 0 50 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 54 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 58 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 66 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 70 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 74 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 78 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 82 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 0 0 67] #[0 0 86 0 5 0 10 0 67] #[0 0 90 0 4 0 5 0 10 0 67] #[0 0 94 0 4 0 5 0 10 0 67] #[1 0 98 0 4 0 98 0 5 1 13 0 8 0 98 0 10 1 17 0 39 0 98 0 67] #[1 0 102 0 4 0 102 0 5 0 102 0 10 1 21 0 16 1 25 0 18 1 29 0 43 1 33 0 46 0 102 0 67] #[1 0 106 0 4 0 106 0 5 1 13 0 8 0 106 0 10 0 106 0 16 0 106 0 18 1 37 0 39 0 106 0 67] #[1 0 110 0 4 0 110 0 5 0 110 0 8 0 110 0 10 1 41 0 15 0 110 0 16 0 110 0 18 1 45 0 49 0 110 0 67] #[1 0 114 0 4 0 114 0 5 1 13 0 8 0 114 0 10 0 114 0 15 0 114 0 16 0 114 0 18 1 49 0 39 0 114 0 67] #[1 0 118 0 4 0 118 0 5 1 53 0 7 0 118 0 10 0 118 0 15 0 118 0 16 0 118 0 18 0 118 0 67] #[0 0 122 0 4 0 5 0 8 0 10 0 15 0 16 0 18 0 67] #[0 0 126 0 4 0 5 0 8 0 10 0 15 0 16 0 18 0 67] #[0 0 130 0 4 0 5 0 8 0 10 0 15 0 16 0 18 0 67] #[0 0 134 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 138 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 142 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 146 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 150 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 154 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 158 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 162 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 166 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 170 0 1 0 2 0 3 0 9 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 174 0 1 0 2 0 3 0 9 0 11 0 12 0 13 0 14 0 15 0 17 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 178 0 67] #[1 0 97 0 15 1 57 0 50] #[1 0 97 0 15 1 61 0 17 1 65 0 50] #[0 0 182 0 10 0 67] #[1 1 69 0 5 0 186 0 10 0 186 0 67] #[0 0 190 0 5 0 10 0 67] #[1 0 65 0 1 0 69 0 2 1 73 0 4 0 85 0 12 0 89 0 13 0 93 0 14 0 101 0 19 0 105 0 20 0 109 0 21 0 113 0 24 0 117 0 25 1 77 0 55 1 77 0 56 1 77 0 57 1 77 0 58 1 77 0 59 1 77 0 61 1 77 0 63 1 77 0 64 1 77 0 65 1 77 0 66] #[1 1 81 0 10 0 117 0 25 1 85 0 58] #[0 1 89 0 4] #[1 0 97 0 15 1 93 0 50] #[1 0 6 0 1 0 6 0 2 0 6 0 3 0 6 0 9 0 6 0 10 0 6 0 11 0 6 0 12 0 6 0 13 0 6 0 14 0 6 0 15 0 53 0 17 0 6 0 19 0 6 0 20 0 6 0 21 0 6 0 24 0 6 0 25 1 97 0 31 0 61 0 32] #[1 1 101 0 6 1 105 0 17] #[0 0 194 0 5 0 10 0 67] #[1 1 41 0 15 1 21 0 16 1 25 0 18 1 109 0 40 1 113 0 43 1 109 0 46 1 109 0 49] #[0 0 198 0 4 0 5 0 10 0 67] #[1 0 65 0 1 0 69 0 2 0 73 0 3 0 77 0 9 0 85 0 12 0 89 0 13 0 93 0 14 0 97 0 15 0 101 0 19 0 105 0 20 0 109 0 21 0 113 0 24 0 117 0 25 1 125 0 44 1 129 0 45 0 149 0 47 1 133 0 48 0 149 0 50 0 149 0 51 0 149 0 52 0 149 0 55 0 149 0 56 0 149 0 57 0 149 0 58 0 149 0 59 0 149 0 61 0 149 0 63 0 149 0 64 0 149 0 65 0 149 0 66] #[1 0 65 0 1 0 69 0 2 0 73 0 3 0 77 0 9 0 85 0 12 0 89 0 13 0 93 0 14 0 97 0 15 0 101 0 19 0 105 0 20 0 109 0 21 0 113 0 24 0 117 0 25 1 141 0 47 1 133 0 48 1 141 0 50 1 141 0 51 1 141 0 52 1 141 0 55 1 141 0 56 1 141 0 57 1 141 0 58 1 141 0 59 1 141 0 61 1 141 0 63 1 141 0 64 1 141 0 65 1 141 0 66] #[1 0 202 0 4 0 202 0 5 0 202 0 8 0 202 0 10 1 145 0 16 0 202 0 67] #[0 0 206 0 4 0 5 0 8 0 10 0 16 0 18 0 67] #[0 0 210 0 4 0 5 0 10 0 67] #[0 0 214 0 4 0 5 0 8 0 10 0 15 0 16 0 18 0 67] #[0 0 218 0 4 0 5 0 8 0 10 0 15 0 16 0 18 0 67] #[0 0 222 0 4 0 5 0 10 0 67] #[1 0 65 0 1 0 69 0 2 0 73 0 3 0 77 0 9 0 85 0 12 0 89 0 13 0 93 0 14 0 97 0 15 0 101 0 19 0 105 0 20 0 109 0 21 0 113 0 24 0 117 0 25 1 149 0 37 1 149 0 38 1 149 0 41 0 137 0 42 0 141 0 44 0 145 0 45 0 149 0 47 0 153 0 48 0 157 0 50 0 149 0 51 0 149 0 52 0 149 0 55 0 149 0 56 0 149 0 57 0 149 0 58 0 149 0 59 0 149 0 61 0 149 0 63 0 149 0 64 0 149 0 65 0 149 0 66] #[0 0 226 0 1 0 2 0 3 0 9 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 230 0 1 0 2 0 3 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 234 0 15 0 17] #[1 0 65 0 1 0 69 0 2 0 73 0 3 0 77 0 9 0 238 0 10 0 81 0 11 0 85 0 12 0 89 0 13 0 93 0 14 0 97 0 15 0 101 0 19 0 105 0 20 0 109 0 21 0 113 0 24 0 117 0 25 1 153 0 36 1 153 0 37 1 153 0 38 1 153 0 41 0 137 0 42 0 141 0 44 0 145 0 45 0 149 0 47 0 153 0 48 0 157 0 50 0 149 0 51 0 149 0 52 0 149 0 55 0 149 0 56 0 149 0 57 0 149 0 58 0 149 0 59 0 149 0 61 0 149 0 63 0 149 0 64 0 149 0 65 0 149 0 66 0 238 0 67] #[0 0 242 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 246 0 1 0 2 0 4 0 12 0 13 0 14 0 19 0 20 0 21 0 24 0 25] #[0 0 250 0 1 0 2 0 4 0 5 0 8 0 10 0 12 0 13 0 14 0 15 0 16 0 18 0 19 0 20 0 21 0 24 0 25 0 67] #[0 0 254 0 10 0 25] #[0 1 2 0 4 0 5 0 8 0 10 0 15 0 16 0 18 0 67] #[0 1 6 0 6 0 17] #[0 1 157 0 10] #[1 0 97 0 15 1 161 0 50] #[0 1 10 0 1 0 2 0 3 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 17 0 19 0 20 0 21 0 24 0 25] #[1 1 14 0 4 1 14 0 5 1 13 0 8 1 14 0 10 1 165 0 39 1 14 0 67] #[1 1 18 0 4 1 18 0 5 1 18 0 8 1 18 0 10 1 145 0 16 1 18 0 67] #[0 1 22 0 4 0 5 0 8 0 10 0 67] #[0 1 26 0 4 0 5 0 8 0 10 0 67] #[1 1 30 0 4 1 30 0 5 1 30 0 8 1 30 0 10 1 30 0 16 1 25 0 18 1 33 0 46 1 30 0 67] #[0 0 106 0 4 0 5 0 8 0 10 0 16 0 18 0 67] #[0 0 114 0 4 0 5 0 8 0 10 0 15 0 16 0 18 0 67] #[0 0 118 0 4 0 5 0 8 0 10 0 15 0 16 0 18 0 67] #[1 1 34 0 4 1 34 0 5 1 34 0 8 1 34 0 10 1 41 0 15 1 34 0 16 1 34 0 18 1 45 0 49 1 34 0 67] #[1 0 65 0 1 0 69 0 2 0 73 0 3 0 77 0 9 0 85 0 12 0 89 0 13 0 93 0 14 0 97 0 15 0 101 0 19 0 105 0 20 0 109 0 21 0 113 0 24 0 117 0 25 1 169 0 44 1 129 0 45 0 149 0 47 1 133 0 48 0 149 0 50 0 149 0 51 0 149 0 52 0 149 0 55 0 149 0 56 0 149 0 57 0 149 0 58 0 149 0 59 0 149 0 61 0 149 0 63 0 149 0 64 0 149 0 65 0 149 0 66] #[0 1 38 0 4 0 5 0 10 0 67] #[0 1 42 0 5 0 10 0 67] #[0 1 46 0 4 0 5 0 8 0 10 0 15 0 16 0 18 0 67] #[0 1 50 0 6 0 17] #[0 1 54 0 4 0 5 0 10 0 67] #[1 1 58 0 4 1 58 0 5 1 58 0 8 1 58 0 10 1 58 0 16 1 25 0 18 1 33 0 46 1 58 0 67]	).! !SmaCCParseNode subclass: #GstProgramNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstProgramNode methodsFor: 'testing'!isUsed	(parent isKindOf: GstValueNode)		ifTrue: [ ^ true ].	(parent isKindOf: GstReturnNode)		ifTrue: [ ^ true ].	(parent isKindOf: GstMessageNode)		ifTrue: [ ^ true ].	((parent isKindOf: GstSequenceNode)		and:			[ parent statements last == self				and: [ parent parent isKindOf: GstBlockNode ] ])		ifTrue:			[ | node |			node := parent parent parent.			(node isKindOf: GstMessageNode)				ifTrue:					[ (#(#ifTrue: #ifTrue:ifFalse: #ifFalse: #ifFalse:ifTrue: #whileTrue: #whileFalse: #ifNil: #ifNil:ifNotNil: #ifNotNil: #ifNotNil:ifNil:)						includes: node symbol)						ifTrue: [ ^ node isUsed ] ].			^ true ].	^ false! !!GstProgramNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitProgram: self! !GstProgramNode subclass: #GstMessageNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstMessageNode methodsFor: 'testing'!isUsed	^ (parent isKindOf: GstMessageSendNode)		or: [ parent messages last == self and: [ parent isUsed ] ]! !!GstMessageNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitMessage: self! !GstMessageNode subclass: #GstBinaryMessageNode	instanceVariableNames: 'selectorPart value'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstBinaryMessageNode methodsFor: 'generated'!tokenVariables	^ #(#selectorPart)! !!GstBinaryMessageNode methodsFor: 'generated'!value	^ value! !!GstBinaryMessageNode methodsFor: 'generated'!nodeVariables	^ #(#value)! !!GstBinaryMessageNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitBinaryMessage: self! !!GstBinaryMessageNode methodsFor: 'generated'!selectorPart: aSmaCCToken	selectorPart := aSmaCCToken! !!GstBinaryMessageNode methodsFor: 'generated'!selectorPart	^ selectorPart! !!GstBinaryMessageNode methodsFor: 'generated'!value: aGstValueNode	self value notNil		ifTrue: [ self value parent: nil ].	value := aGstValueNode.	self value notNil		ifTrue: [ self value parent: self ]! !!GstBinaryMessageNode methodsFor: 'accessing'!symbol	^ selectorPart value asSymbol! !GstMessageNode subclass: #GstKeywordMessageNode	instanceVariableNames: 'selectorParts values'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstKeywordMessageNode methodsFor: 'generated'!compositeTokenVariables	^ #(#selectorParts)! !!GstKeywordMessageNode methodsFor: 'generated'!selectorParts: anOrderedCollection	selectorParts := anOrderedCollection! !!GstKeywordMessageNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitKeywordMessage: self! !!GstKeywordMessageNode methodsFor: 'generated'!values	^ values! !!GstKeywordMessageNode methodsFor: 'generated'!compositeNodeVariables	^ #(#values)! !!GstKeywordMessageNode methodsFor: 'generated'!selectorParts	^ selectorParts! !!GstKeywordMessageNode methodsFor: 'generated'!values: anOrderedCollection	self setParents: self values to: nil.	values := anOrderedCollection.	self setParents: self values to: self! !!GstKeywordMessageNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	selectorParts := OrderedCollection new: 2.	values := OrderedCollection new: 2.! !!GstKeywordMessageNode methodsFor: 'accessing'!symbol	^ (selectorParts inject: '' into: [ :sum :each | sum , each value ])		asSymbol! !GstProgramNode subclass: #GstMethodNode	instanceVariableNames: 'selectorParts variables body'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstMethodNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	selectorParts := OrderedCollection new: 2.	variables := OrderedCollection new: 2.! !!GstMethodNode methodsFor: 'generated'!compositeTokenVariables	^ #(#selectorParts)! !!GstMethodNode methodsFor: 'generated'!selectorParts: anOrderedCollection	selectorParts := anOrderedCollection! !!GstMethodNode methodsFor: 'generated'!body	^ body! !!GstMethodNode methodsFor: 'generated'!variables: anOrderedCollection	self setParents: self variables to: nil.	variables := anOrderedCollection.	self setParents: self variables to: self! !!GstMethodNode methodsFor: 'generated'!compositeNodeVariables	^ #(#variables)! !!GstMethodNode methodsFor: 'generated'!nodeVariables	^ #(#body)! !!GstMethodNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitMethod: self! !!GstMethodNode methodsFor: 'generated'!variables	^ variables! !!GstMethodNode methodsFor: 'generated'!selectorParts	^ selectorParts! !!GstMethodNode methodsFor: 'generated'!body: aGstSequenceNode	self body notNil		ifTrue: [ self body parent: nil ].	body := aGstSequenceNode.	self body notNil		ifTrue: [ self body parent: self ]! !SmaCCParseNodeVisitor subclass: #GstProgramNodeVisitor	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstProgramNodeVisitor methodsFor: 'generated'!visitKeywordMessage: aKeywordMessage	^ self visitMessage: aKeywordMessage! !!GstProgramNodeVisitor methodsFor: 'generated'!visitVariable: aVariable	^ self visitValue: aVariable! !!GstProgramNodeVisitor methodsFor: 'generated'!visitValue: aValue	^ self visitProgram: aValue! !!GstProgramNodeVisitor methodsFor: 'generated'!visitBooleanLiteral: aBooleanLiteral	^ self visitLiteral: aBooleanLiteral! !!GstProgramNodeVisitor methodsFor: 'generated'!visitNilLiteral: aNilLiteral	^ self visitLiteral: aNilLiteral! !!GstProgramNodeVisitor methodsFor: 'generated'!visitAssignment: anAssignment	^ self visitValue: anAssignment! !!GstProgramNodeVisitor methodsFor: 'generated'!visitMessageSend: aMessageSend	^ self visitValue: aMessageSend! !!GstProgramNodeVisitor methodsFor: 'generated'!visitSymbolLiteral: aSymbolLiteral	^ self visitLiteral: aSymbolLiteral! !!GstProgramNodeVisitor methodsFor: 'generated'!visitUnaryMessage: anUnaryMessage	^ self visitMessage: anUnaryMessage! !!GstProgramNodeVisitor methodsFor: 'generated'!visitCascade: aCascade	^ self visitValue: aCascade! !!GstProgramNodeVisitor methodsFor: 'generated'!visitStringLiteral: aStringLiteral	^ self visitLiteral: aStringLiteral! !!GstProgramNodeVisitor methodsFor: 'generated'!visitArrayLiteral: anArrayLiteral	^ self visitLiteral: anArrayLiteral! !!GstProgramNodeVisitor methodsFor: 'generated'!visitLiteral: aLiteral	^ self visitValue: aLiteral! !!GstProgramNodeVisitor methodsFor: 'generated'!visitReturn: aReturn	^ self visitProgram: aReturn! !!GstProgramNodeVisitor methodsFor: 'generated'!visitProgram: aProgram	^ self visitSmaCCParseNode: aProgram! !!GstProgramNodeVisitor methodsFor: 'generated'!visitBinaryMessage: aBinaryMessage	^ self visitMessage: aBinaryMessage! !!GstProgramNodeVisitor methodsFor: 'generated'!visitBlock: aBlock	^ self visitValue: aBlock! !!GstProgramNodeVisitor methodsFor: 'generated'!visitByteArrayLiteral: aByteArrayLiteral	^ self visitArrayLiteral: aByteArrayLiteral! !!GstProgramNodeVisitor methodsFor: 'generated'!visitMessage: aMessage	^ self visitProgram: aMessage! !!GstProgramNodeVisitor methodsFor: 'generated'!visitCharacterLiteral: aCharacterLiteral	^ self visitLiteral: aCharacterLiteral! !!GstProgramNodeVisitor methodsFor: 'generated'!visitSequence: aSequence	^ self visitProgram: aSequence! !!GstProgramNodeVisitor methodsFor: 'generated'!visitNumberLiteral: aNumberLiteral	^ self visitLiteral: aNumberLiteral! !!GstProgramNodeVisitor methodsFor: 'generated'!visitMethod: aMethod	^ self visitProgram: aMethod! !GstProgramNode subclass: #GstReturnNode	instanceVariableNames: 'upArrow value'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstReturnNode methodsFor: 'generated'!tokenVariables	^ #(#upArrow)! !!GstReturnNode methodsFor: 'generated'!upArrow	^ upArrow! !!GstReturnNode methodsFor: 'generated'!value	^ value! !!GstReturnNode methodsFor: 'generated'!nodeVariables	^ #(#value)! !!GstReturnNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitReturn: self! !!GstReturnNode methodsFor: 'generated'!value: aGstValueNode	self value notNil		ifTrue: [ self value parent: nil ].	value := aGstValueNode.	self value notNil		ifTrue: [ self value parent: self ]! !!GstReturnNode methodsFor: 'generated'!upArrow: aSmaCCToken	upArrow := aSmaCCToken! !SmaCCScanner subclass: #GstScanner	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstScanner methodsFor: 'generated'!scan7X2	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $G ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $G ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan5	self step.	currentCharacter isDigit		ifTrue: [ [ self recordMatch: #(24).			self step.			currentCharacter isDigit ] whileTrue.			((currentCharacter between: $d and: $e)				or: [ currentCharacter == $q ])				ifTrue: [ ^ self scan6 ] ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scanForTokenX5	self recordMatch: #(17 18).	self step.	currentCharacter isSpecial		ifTrue: [ [ self recordMatch: #(18).			self step.			currentCharacter isSpecial ] whileTrue ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!emptySymbolTokenId	^ 67! !!GstScanner methodsFor: 'generated'!scan9X4	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $W ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $W ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan7X7	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $B ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $B ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan7X4	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $E ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $E ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scanForTokenX7	self step.	^ self recordAndReportMatch: #(21)! !!GstScanner methodsFor: 'generated'!scan6	self step.	currentCharacter isDigit		ifTrue: [ [ self recordMatch: #(24).			self step.			currentCharacter isDigit ] whileTrue.			^ self reportLastMatch ].	('+-' includes: currentCharacter)		ifTrue: [ self step.			currentCharacter isDigit				ifTrue: [ [ self recordMatch: #(24).					self step.					currentCharacter isDigit ] whileTrue ] ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan9X6	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $U ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $U ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan8X3	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $Q ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $Q ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan8	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $0		ifTrue:			[ ^ self scan8X10 ].	^ self scan8X12! !!GstScanner methodsFor: 'generated'!scan7X5	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $D ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $D ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan14	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter between: $0 and: $7)				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter between: $0 and: $7 ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan8X6	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $N ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $N ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan8X9	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $K ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $K ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan3	[ self step.	currentCharacter == $'		ifTrue: [ self recordMatch: #(19).			self step.			currentCharacter == $'				ifTrue: [ ^ self scan3 ].			^ self reportLastMatch ].	true ] whileTrue! !!GstScanner methodsFor: 'generated'!scan9X5	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $V ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $V ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan8X8	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $L ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $L ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan7X8	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit or: [ currentCharacter == $A ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit or: [ currentCharacter == $A ] ]						whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan15	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter between: $0 and: $8)				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter between: $0 and: $8 ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan7X1	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $H ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $H ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan7	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $0		ifTrue: [ ^ self scan7X9 ].	currentCharacter == $1		ifTrue: [ ^ self scan7X8 ].	currentCharacter == $2		ifTrue: [ ^ self scan7X7 ].	currentCharacter == $3		ifTrue: [ ^ self scan7X6 ].	^ self scan7X11! !!GstScanner methodsFor: 'generated'!tokenActions	^ #(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil #comment #whitespace nil nil #patternToken)! !!GstScanner methodsFor: 'generated'!scanForTokenX1	self recordMatch: #(18).	self step.	currentCharacter == $0		ifTrue: [ ^ self scan4 ].	currentCharacter == $1		ifTrue: [ ^ self scan7 ].	currentCharacter == $2		ifTrue: [ ^ self scan8 ].	currentCharacter == $3		ifTrue: [ ^ self scan9 ].	currentCharacter == $4		ifTrue: [ ^ self scan10 ].	currentCharacter == $5		ifTrue: [ ^ self scan11 ].	currentCharacter == $6		ifTrue: [ ^ self scan12 ].	currentCharacter == $7		ifTrue: [ ^ self scan13 ].	currentCharacter == $8		ifTrue: [ ^ self scan14 ].	currentCharacter isDigit		ifTrue: [ ^ self scan15 ].	currentCharacter isSpecial		ifTrue: [ [ self recordMatch: #(18).			self step.			currentCharacter isSpecial ] whileTrue ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!binaryId	^ 18! !!GstScanner methodsFor: 'generated'!scan8X10	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $J ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $J ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan8X12	currentCharacter == $1		ifTrue:			[ ^ self scan8X9 ].	currentCharacter == $2		ifTrue:			[ ^ self scan8X8 ].	currentCharacter == $3		ifTrue:			[ ^ self scan8X7 ].	currentCharacter == $4		ifTrue:			[ ^ self scan8X6 ].	currentCharacter == $5		ifTrue:			[ ^ self scan8X5 ].	currentCharacter == $6		ifTrue:			[ ^ self scan8X4 ].	currentCharacter == $7		ifTrue:			[ ^ self scan8X3 ].	currentCharacter == $8		ifTrue:			[ ^ self scan8X2 ].	currentCharacter isDigit		ifTrue:			[ ^ self scan8X1 ].	currentCharacter == $r		ifTrue:			[ ^ self scan8X11 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan8X2	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $R ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $R ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan8X4	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $P ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $P ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan1	[ self step.	currentCharacter == $'		ifTrue: [ self recordMatch: #(20).			self step.			currentCharacter == $'				ifTrue: [ ^ self scan1 ].			^ self reportLastMatch ].	true ] whileTrue! !!GstScanner methodsFor: 'generated'!scan11	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter between: $0 and: $4)				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter between: $0 and: $4 ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan9X9	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $0		ifTrue:			[ ^ self scan9X7 ].	currentCharacter == $1		ifTrue:			[ ^ self scan9X6 ].	currentCharacter == $2		ifTrue:			[ ^ self scan9X5 ].	currentCharacter == $3		ifTrue:			[ ^ self scan9X4 ].	currentCharacter == $4		ifTrue:			[ ^ self scan9X3 ].	currentCharacter == $5		ifTrue:			[ ^ self scan9X2 ].	currentCharacter == $6		ifTrue:			[ ^ self scan9X1 ].	currentCharacter == $r		ifTrue:			[ ^ self scan9X8 ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan13	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter between: $0 and: $6)				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter between: $0 and: $6 ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan8X11	self step.	(currentCharacter between: $0 and: $1)		ifTrue: [ [ self recordMatch: #(25).			self step.			currentCharacter between: $0 and: $1 ] whileTrue ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan7X6	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $C ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $C ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan7X3	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $F ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $F ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan9X1	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $Z ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $Z ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan8X7	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $M ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $M ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan9X7	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $T ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $T ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scanForTokenX3	[ self recordMatch: #(23).	self step.	currentCharacter isSeparator		or: [ currentCharacter == Character pageUp ] ] whileTrue.	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan8X1	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $S ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $S ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan16	[ self step.	currentCharacter == $`		ifTrue: [ self recordMatch: #(26).			self step.			currentCharacter == $`				ifTrue: [ ^ self scan16 ].			^ self reportLastMatch ].	true ] whileTrue! !!GstScanner methodsFor: 'generated'!scan4	[ self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter isDigit ] whileTrue.	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!errorTokenId	^ 68! !!GstScanner methodsFor: 'generated'!scanForTokenX6	[ self recordMatch: #(18).	self step.	currentCharacter isSpecial ] whileTrue.	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scanForTokenX2	self step.	currentCharacter == $'		ifTrue: [ ^ self scan1 ].	currentCharacter == $(		ifTrue: [ ^ self recordAndReportMatch: #(1) ].	currentCharacter == $[		ifTrue: [ ^ self recordAndReportMatch: #(2) ].	currentCharacter isSpecial		ifTrue: [ [ self recordMatch: #(20).			self step.			currentCharacter isSpecial ] whileTrue.			^ self reportLastMatch ].	(currentCharacter isLetter or: [ currentCharacter == $_ ])		ifTrue: [ [ self recordMatch: #(20).			self step.			currentCharacter == $:				ifTrue: [ ^ self scan2 ].			currentCharacter isAlphaNumeric or: [ currentCharacter == $_ ] ]				whileTrue ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!barId	^ 17! !!GstScanner methodsFor: 'generated'!scan9X8	self step.	(currentCharacter between: $0 and: $2)		ifTrue: [ [ self recordMatch: #(25).			self step.			currentCharacter between: $0 and: $2 ] whileTrue ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scanForToken	self step.	currentCharacter == $"		ifTrue: [ [ self step.			currentCharacter == $"				ifTrue: [ ^ self recordAndReportMatch: #(22) ].			true ] whileTrue ].	currentCharacter == $#		ifTrue:			[ ^ self scanForTokenX2 ].	currentCharacter == $$		ifTrue:			[ ^ self scanForTokenX7 ].	currentCharacter == $'		ifTrue: [ ^ self scan3 ].	currentCharacter == $(		ifTrue: [ ^ self recordAndReportMatch: #(3) ].	currentCharacter == $)		ifTrue: [ ^ self recordAndReportMatch: #(4) ].	currentCharacter == $-		ifTrue:			[ ^ self scanForTokenX1 ].	currentCharacter == $.		ifTrue: [ ^ self recordAndReportMatch: #(5) ].	^ self scanForTokenX9! !!GstScanner methodsFor: 'generated'!scan10	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter between: $0 and: $3)				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter between: $0 and: $3 ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan9X3	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $X ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $X ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan9	self recordMatch: #(25).	self step.	^ self scan9X9! !!GstScanner methodsFor: 'generated'!scanForTokenX8	currentCharacter == $[		ifTrue: [ ^ self recordAndReportMatch: #(9) ].	currentCharacter == $]		ifTrue: [ ^ self recordAndReportMatch: #(10) ].	currentCharacter == $^		ifTrue: [ ^ self recordAndReportMatch: #(11) ].	currentCharacter == $`		ifTrue: [ ^ self scan16 ].	currentCharacter == $|		ifTrue:			[ ^ self scanForTokenX5 ].	(currentCharacter isSeparator		or: [ currentCharacter == Character pageUp ])		ifTrue:			[ ^ self scanForTokenX3 ].	currentCharacter isSpecial		ifTrue:			[ ^ self scanForTokenX6 ].	(currentCharacter isLetter or: [ currentCharacter == $_ ])		ifTrue: [ [ self recordMatch: #(15).			self step.			currentCharacter == $:				ifTrue: [ ^ self recordAndReportMatch: #(16) ].			currentCharacter isAlphaNumeric or: [ currentCharacter == $_ ] ]				whileTrue ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan7X9	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			currentCharacter isDigit				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scanForTokenX9	currentCharacter == $0		ifTrue: [ ^ self scan4 ].	currentCharacter == $1		ifTrue: [ ^ self scan7 ].	currentCharacter == $2		ifTrue: [ ^ self scan8 ].	currentCharacter == $3		ifTrue: [ ^ self scan9 ].	currentCharacter == $4		ifTrue: [ ^ self scan10 ].	currentCharacter == $5		ifTrue: [ ^ self scan11 ].	currentCharacter == $6		ifTrue: [ ^ self scan12 ].	currentCharacter == $7		ifTrue: [ ^ self scan13 ].	currentCharacter == $8		ifTrue: [ ^ self scan14 ].	currentCharacter isDigit		ifTrue: [ ^ self scan15 ].	currentCharacter == $:		ifTrue:			[ ^ self scanForTokenX4 ].	currentCharacter == $;		ifTrue: [ ^ self recordAndReportMatch: #(8) ].	^ self scanForTokenX8! !!GstScanner methodsFor: 'generated'!scan8X5	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $O ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $O ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan7X11	currentCharacter == $4		ifTrue: [ ^ self scan7X5 ].	currentCharacter == $5		ifTrue: [ ^ self scan7X4 ].	currentCharacter == $6		ifTrue: [ ^ self scan7X3 ].	currentCharacter == $7		ifTrue: [ ^ self scan7X2 ].	currentCharacter == $8		ifTrue: [ ^ self scan7X1 ].	currentCharacter isDigit		ifTrue: [ self recordMatch: #(25).			self step.			currentCharacter == $.				ifTrue: [ ^ self scan5 ].			currentCharacter == $r				ifTrue:					[ ^ self scan7X10 ].			currentCharacter isDigit				ifTrue: [ ^ self scan4 ] ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan9X2	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter isDigit				or: [ currentCharacter between: $A and: $Y ])				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter isDigit						or: [ currentCharacter between: $A and: $Y ] ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan2	self recordMatch: #(20).	self step.	(currentCharacter isLetter or: [ currentCharacter == $_ ])		ifTrue: [ [ self step.			currentCharacter == $:				ifTrue: [ ^ self scan2 ].			currentCharacter isAlphaNumeric or: [ currentCharacter == $_ ] ]				whileTrue ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan7X10	self step.	(currentCharacter isDigit		or: [ currentCharacter between: $A and: $I ])		ifTrue: [ [ self recordMatch: #(25).			self step.			currentCharacter isDigit				or: [ currentCharacter between: $A and: $I ] ] whileTrue ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scanForTokenX4	self recordMatch: #(6).	self step.	currentCharacter == $=		ifTrue: [ ^ self recordAndReportMatch: #(7) ].	^ self reportLastMatch! !!GstScanner methodsFor: 'generated'!scan12	self recordMatch: #(25).	self step.	currentCharacter == $.		ifTrue: [ ^ self scan5 ].	currentCharacter == $r		ifTrue: [ self step.			(currentCharacter between: $0 and: $5)				ifTrue: [ [ self recordMatch: #(25).					self step.					currentCharacter between: $0 and: $5 ] whileTrue ].			^ self reportLastMatch ].	currentCharacter isDigit		ifTrue: [ ^ self scan4 ].	((currentCharacter between: $d and: $e)		or: [ currentCharacter == $q ])		ifTrue: [ ^ self scan6 ].	^ self reportLastMatch! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GstScanner class	instanceVariableNames: ''!!GstScanner class methodsFor: 'generated-initialization'!initializeKeywordMap	keywordMap := Dictionary new.	#(#(15 'false' 12) #(15 'nil' 13) #(15 'true' 14))		do: [ :each | 			(keywordMap at: each first ifAbsentPut: [ Dictionary new ])				at: (each at: 2)				put: each last ].	^ keywordMap! !GstProgramNode subclass: #GstSequenceNode	instanceVariableNames: 'leftBar variables rightBar statements periods'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstSequenceNode methodsFor: 'generated'!statements	^ statements! !!GstSequenceNode methodsFor: 'generated'!rightBar	^ rightBar! !!GstSequenceNode methodsFor: 'generated'!variables: anOrderedCollection	self setParents: self variables to: nil.	variables := anOrderedCollection.	self setParents: self variables to: self! !!GstSequenceNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#periods)! !!GstSequenceNode methodsFor: 'generated'!compositeNodeVariables	^ #(#variables #statements)! !!GstSequenceNode methodsFor: 'generated'!periods	^ periods! !!GstSequenceNode methodsFor: 'generated'!leftBar: aSmaCCToken	leftBar := aSmaCCToken! !!GstSequenceNode methodsFor: 'generated'!rightBar: aSmaCCToken	rightBar := aSmaCCToken! !!GstSequenceNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitSequence: self! !!GstSequenceNode methodsFor: 'generated'!variables	^ variables! !!GstSequenceNode methodsFor: 'generated'!statements: anOrderedCollection	self setParents: self statements to: nil.	statements := anOrderedCollection.	self setParents: self statements to: self! !!GstSequenceNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#leftBar #rightBar)! !!GstSequenceNode methodsFor: 'generated'!periods: anOrderedCollection	periods := anOrderedCollection! !!GstSequenceNode methodsFor: 'generated'!leftBar	^ leftBar! !!GstSequenceNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	variables := OrderedCollection new: 2.	statements := OrderedCollection new: 2.	periods := OrderedCollection new: 2.! !GstMessageNode subclass: #GstUnaryMessageNode	instanceVariableNames: 'selectorPart'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstUnaryMessageNode methodsFor: 'generated'!tokenVariables	^ #(#selectorPart)! !!GstUnaryMessageNode methodsFor: 'generated'!selectorPart: aSmaCCToken	selectorPart := aSmaCCToken! !!GstUnaryMessageNode methodsFor: 'generated'!selectorPart	^ selectorPart! !!GstUnaryMessageNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitUnaryMessage: self! !!GstUnaryMessageNode methodsFor: 'accessing'!symbol	^ selectorPart value asSymbol! !GstProgramNode subclass: #GstValueNode	instanceVariableNames: 'leftParens rightParens'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstValueNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	leftParens := OrderedCollection new: 2.	rightParens := OrderedCollection new: 2.! !!GstValueNode methodsFor: 'generated'!leftParens: anOrderedCollection	leftParens := anOrderedCollection! !!GstValueNode methodsFor: 'generated'!leftParens	^ leftParens! !!GstValueNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitValue: self! !!GstValueNode methodsFor: 'generated'!rightParens: anOrderedCollection	rightParens := anOrderedCollection! !!GstValueNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#leftParens #rightParens)! !!GstValueNode methodsFor: 'generated'!rightParens	^ rightParens! !GstValueNode subclass: #GstAssignmentNode	instanceVariableNames: 'variable assignmentToken value'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstAssignmentNode methodsFor: 'generated'!tokenVariables	^ #(#assignmentToken)! !!GstAssignmentNode methodsFor: 'generated'!value	^ value! !!GstAssignmentNode methodsFor: 'generated'!assignmentToken: aSmaCCToken	assignmentToken := aSmaCCToken! !!GstAssignmentNode methodsFor: 'generated'!nodeVariables	^ #(#variable #value)! !!GstAssignmentNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitAssignment: self! !!GstAssignmentNode methodsFor: 'generated'!assignmentToken	^ assignmentToken! !!GstAssignmentNode methodsFor: 'generated'!variable	^ variable! !!GstAssignmentNode methodsFor: 'generated'!variable: aGstVariableNode	self variable notNil		ifTrue: [ self variable parent: nil ].	variable := aGstVariableNode.	self variable notNil		ifTrue: [ self variable parent: self ]! !!GstAssignmentNode methodsFor: 'generated'!value: aGstValueNode	self value notNil		ifTrue: [ self value parent: nil ].	value := aGstValueNode.	self value notNil		ifTrue: [ self value parent: self ]! !GstValueNode subclass: #GstBlockNode	instanceVariableNames: 'leftBracket colons variables bar body rightBracket'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstBlockNode methodsFor: 'generated'!rightBracket: aSmaCCToken	rightBracket := aSmaCCToken! !!GstBlockNode methodsFor: 'generated'!body	^ body! !!GstBlockNode methodsFor: 'generated'!tokenVariables	^ #(#bar)! !!GstBlockNode methodsFor: 'generated'!bar	^ bar! !!GstBlockNode methodsFor: 'generated'!colons: anOrderedCollection	colons := anOrderedCollection! !!GstBlockNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#colons #leftParens #rightParens)! !!GstBlockNode methodsFor: 'generated'!rightBracket	^ rightBracket! !!GstBlockNode methodsFor: 'generated'!compositeNodeVariables	^ #(#variables)! !!GstBlockNode methodsFor: 'generated'!leftBracket	^ leftBracket! !!GstBlockNode methodsFor: 'generated'!variables: anOrderedCollection	self setParents: self variables to: nil.	variables := anOrderedCollection.	self setParents: self variables to: self! !!GstBlockNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitBlock: self! !!GstBlockNode methodsFor: 'generated'!nodeVariables	^ #(#body)! !!GstBlockNode methodsFor: 'generated'!variables	^ variables! !!GstBlockNode methodsFor: 'generated'!bar: aSmaCCToken	bar := aSmaCCToken! !!GstBlockNode methodsFor: 'generated'!colons	^ colons! !!GstBlockNode methodsFor: 'generated'!ignoredTokenVariables	^ #(#leftBracket #rightBracket)! !!GstBlockNode methodsFor: 'generated'!body: aGstSequenceNode	self body notNil		ifTrue: [ self body parent: nil ].	body := aGstSequenceNode.	self body notNil		ifTrue: [ self body parent: self ]! !!GstBlockNode methodsFor: 'generated'!leftBracket: aSmaCCToken	leftBracket := aSmaCCToken! !!GstBlockNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	colons := OrderedCollection new: 2.	variables := OrderedCollection new: 2.! !GstValueNode subclass: #GstCascadeNode	instanceVariableNames: 'receiver messages semicolons'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstCascadeNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	messages := OrderedCollection new: 2.	semicolons := OrderedCollection new: 2.! !!GstCascadeNode methodsFor: 'generated'!messages	^ messages! !!GstCascadeNode methodsFor: 'generated'!receiver: aGstValueNode	self receiver notNil		ifTrue: [ self receiver parent: nil ].	receiver := aGstValueNode.	self receiver notNil		ifTrue: [ self receiver parent: self ]! !!GstCascadeNode methodsFor: 'generated'!ignoredCompositeTokenVariables	^ #(#semicolons #leftParens #rightParens)! !!GstCascadeNode methodsFor: 'generated'!compositeNodeVariables	^ #(#messages)! !!GstCascadeNode methodsFor: 'generated'!messages: anOrderedCollection	self setParents: self messages to: nil.	messages := anOrderedCollection.	self setParents: self messages to: self! !!GstCascadeNode methodsFor: 'generated'!nodeVariables	^ #(#receiver)! !!GstCascadeNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitCascade: self! !!GstCascadeNode methodsFor: 'generated'!receiver	^ receiver! !!GstCascadeNode methodsFor: 'generated'!semicolons	^ semicolons! !!GstCascadeNode methodsFor: 'generated'!semicolons: anOrderedCollection	semicolons := anOrderedCollection! !GstValueNode subclass: #GstLiteralNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstLiteralNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitLiteral: self! !GstLiteralNode subclass: #GstArrayLiteralNode	instanceVariableNames: 'arrayStart values arrayStop'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstArrayLiteralNode methodsFor: 'generated-initialize-release'!initialize	super initialize.	values := OrderedCollection new: 2.! !!GstArrayLiteralNode methodsFor: 'generated'!arrayStart	^ arrayStart! !!GstArrayLiteralNode methodsFor: 'generated'!arrayStop	^ arrayStop! !!GstArrayLiteralNode methodsFor: 'generated'!arrayStart: aSmaCCToken	arrayStart := aSmaCCToken! !!GstArrayLiteralNode methodsFor: 'generated'!arrayStop: aSmaCCToken	arrayStop := aSmaCCToken! !!GstArrayLiteralNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitArrayLiteral: self! !!GstArrayLiteralNode methodsFor: 'generated'!tokenVariables	^ #(#arrayStart #arrayStop)! !!GstArrayLiteralNode methodsFor: 'generated'!values	^ values! !!GstArrayLiteralNode methodsFor: 'generated'!compositeNodeVariables	^ #(#values)! !!GstArrayLiteralNode methodsFor: 'generated'!values: anOrderedCollection	self setParents: self values to: nil.	values := anOrderedCollection.	self setParents: self values to: self! !GstLiteralNode subclass: #GstBooleanLiteralNode	instanceVariableNames: 'value'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstBooleanLiteralNode methodsFor: 'generated'!tokenVariables	^ #(#value)! !!GstBooleanLiteralNode methodsFor: 'generated'!value	^ value! !!GstBooleanLiteralNode methodsFor: 'generated'!value: aSmaCCToken	value := aSmaCCToken! !!GstBooleanLiteralNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitBooleanLiteral: self! !GstArrayLiteralNode subclass: #GstByteArrayLiteralNode	instanceVariableNames: ''	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstByteArrayLiteralNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitByteArrayLiteral: self! !GstLiteralNode subclass: #GstCharacterLiteralNode	instanceVariableNames: 'value'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstCharacterLiteralNode methodsFor: 'generated'!tokenVariables	^ #(#value)! !!GstCharacterLiteralNode methodsFor: 'generated'!value	^ value! !!GstCharacterLiteralNode methodsFor: 'generated'!value: aSmaCCToken	value := aSmaCCToken! !!GstCharacterLiteralNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitCharacterLiteral: self! !GstValueNode subclass: #GstMessageSendNode	instanceVariableNames: 'receiver message'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstMessageSendNode methodsFor: 'generated'!message: aGstMessageNode	self message notNil		ifTrue: [ self message parent: nil ].	message := aGstMessageNode.	self message notNil		ifTrue: [ self message parent: self ]! !!GstMessageSendNode methodsFor: 'generated'!nodeVariables	^ #(#receiver #message)! !!GstMessageSendNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitMessageSend: self! !!GstMessageSendNode methodsFor: 'generated'!receiver	^ receiver! !!GstMessageSendNode methodsFor: 'generated'!message	^ message! !!GstMessageSendNode methodsFor: 'generated'!receiver: aGstValueNode	self receiver notNil		ifTrue: [ self receiver parent: nil ].	receiver := aGstValueNode.	self receiver notNil		ifTrue: [ self receiver parent: self ]! !GstLiteralNode subclass: #GstNilLiteralNode	instanceVariableNames: 'value'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstNilLiteralNode methodsFor: 'generated'!tokenVariables	^ #(#value)! !!GstNilLiteralNode methodsFor: 'generated'!value	^ value! !!GstNilLiteralNode methodsFor: 'generated'!value: aSmaCCToken	value := aSmaCCToken! !!GstNilLiteralNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitNilLiteral: self! !GstLiteralNode subclass: #GstNumberLiteralNode	instanceVariableNames: 'value'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstNumberLiteralNode methodsFor: 'generated'!tokenVariables	^ #(#value)! !!GstNumberLiteralNode methodsFor: 'generated'!value	^ value! !!GstNumberLiteralNode methodsFor: 'generated'!value: aSmaCCToken	value := aSmaCCToken! !!GstNumberLiteralNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitNumberLiteral: self! !GstLiteralNode subclass: #GstStringLiteralNode	instanceVariableNames: 'value'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstStringLiteralNode methodsFor: 'generated'!tokenVariables	^ #(#value)! !!GstStringLiteralNode methodsFor: 'generated'!value	^ value! !!GstStringLiteralNode methodsFor: 'generated'!value: aSmaCCToken	value := aSmaCCToken! !!GstStringLiteralNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitStringLiteral: self! !GstLiteralNode subclass: #GstSymbolLiteralNode	instanceVariableNames: 'value'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstSymbolLiteralNode methodsFor: 'generated'!tokenVariables	^ #(#value)! !!GstSymbolLiteralNode methodsFor: 'generated'!value	^ value! !!GstSymbolLiteralNode methodsFor: 'generated'!value: aSmaCCToken	value := aSmaCCToken! !!GstSymbolLiteralNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitSymbolLiteral: self! !GstValueNode subclass: #GstVariableNode	instanceVariableNames: 'name'	classVariableNames: ''	package: 'SmaCC_Generic_Smalltalk_Parser'!!GstVariableNode methodsFor: 'generated'!name: aSmaCCToken	name := aSmaCCToken! !!GstVariableNode methodsFor: 'generated'!name	^ name! !!GstVariableNode methodsFor: 'generated'!tokenVariables	^ #(#name)! !!GstVariableNode methodsFor: 'generated'!acceptVisitor: aProgramVisitor	^ aProgramVisitor visitVariable: self! !